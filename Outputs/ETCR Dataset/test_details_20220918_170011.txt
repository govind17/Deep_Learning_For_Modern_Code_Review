Reference: ```suggestion                logger.trace("[{}] using pit search context with id [{}]; request [{}]", getjobid(), newpit.getencodedid(), namedsearchrequest.v1());```
Candidate: ```suggestion                             
Reference: looks like this is missing return and it'll drop down to millis.
Candidate: what does we need to expose the value here?
Reference: did something change that i'm missing that requires the generic types here? (same question about the others as well.)
Candidate: ```suggestion         withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i think this branch still needs to be handled since we would exit early on accident without handling it
Candidate: ```suggestion                             
Reference: that's rather unfortunate. but i think we can live with it. we should probably try using some other formatting methods.
Candidate: 👍
Reference: can `bulkitemresponse` be reused here and then serialise that to json?this way if the format ever changes then this code doesn't need to be changed.
Candidate: i think we should be done in this case as well.
Reference: this is not the cheapest way to delegate to `binarycomparisons` but every other attempt required some larger refactoring of `binarycomparisons.translate`.
Candidate: ```suggestion                             
Reference: `assert` is very bad since in the very unlikely case that it fails, it brings the whole jvm down.throw an exception instead (see `check` utility class).
Candidate: there's no longer contain the to contain the list then contain the time.
Reference: see my comment above on assert
Candidate: ```suggestion                             
Reference: i don't recall creating a `boolquery` by hand anywhere else - usually this is done in the optimizer not the translator which just picks it up.here it is being used
Candidate: ```suggestion                             
Reference: i tend not to agree with the additional fieldattribute parameter. it bothers me that the methods receive a redundant parameter. in this case `bc.left()` is the same the `field` parametere.[here](https://github.com/elastic/elasticsearch/pull/76424/files#diff-385222df7bc48aa29c7282fd51bd3f3de071de85974214e19a44670750637182r238)
Candidate: ```suggestion                             
Reference: typo```suggestion        check.istrue(e instanceof fieldattribute, "expected a fieldattribute but received [{}]", e);```
Candidate: ```suggestion                             
Reference: it looks like `priority!=high` is only used in tests and only to disrupt. i wonder if we could keep the original `runonapplierthread` instead and just make a `testonlyrunonapplierthread` method that
Candidate: ```suggestion                             
Reference: i was wondering if it would make sense to extract all the 7.x incombatible parameters to a final set and then do a `set.contains` check instead of a combination of
Candidate: this is a problem here
Reference: i would add parenthesis around `order == sortorder.asc` to make a clear distinction between the assignment and the ternary operator. otherwise the reader needs to know the order priority of
Candidate: can you add a comment that we is set the original issue for the case where the `indexinput` is configured to
Reference: suggestion: what do you think about creating the set in one-line with the streams api?```javastream.concat(snapshotnameswithindexa.stream(), snapshotnameswithoutindexa.stream()).collect(toset())```
Candidate: i think we should use a test to make this test will use a test for `indices_permissions_key` as well.
Reference: i thought about putting the license tracking within the `localmodel` object itself, but this posed a couple of problems.  - what if a localmodel object is created but not
Candidate: i think                            
Reference: can you please change the declarations above to be private now that there are accessors?
Candidate: ```suggestion       public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: does this mean that usage of inference models in pipeline aggregations but _not_ in ingest pipelines isn't tracked?if so then we should do something about this, although not necessarily in
Candidate: i'm not sure if it is a bit even if we should not even if it is not read if the even if it is not true if it is
Reference: this leaks jvm implementation into our tests. i am not really against that, but perhaps we can add a comment to remove the text from matching if it fails?
Candidate: ```suggestion                             
Reference: i wonder if we should add the throw to the method signature. i had a look and it shouldn't leak too deep and it will be cleaner?
Candidate: i'm not sure why we need to call the to the the as well.
Reference: right. it took me a bit to understand why we only process the first array here. i think it is because, currently, c++ writes back a separate result for each
Candidate: this does not a runnable? i think we worth adding a test for `indices_permissions_key` as well?
Reference: ditto about processing first result only
Candidate: this might be worth unwrapping for `indices_permissions_key` as well?
Reference: i'm not a fan of piecing exception messages together in this way (in particular because `illegalargumentexception` is a generic exception).also, it's unclear to me how the change in this pr
Candidate: ```suggestion                             
Reference: this check looks the same everywhere. how about factoring it out into its own method, e.g. `checknoformats(format)` in `mappedfieldtype` that can be called in all these methods.
Candidate: i think we should avoid passing searchlookup here to avoid the searchlookup searchlookup ?
Reference: let's put the try catch only around the `valuefetcher` method
Candidate: ```suggestion                             
Reference: this isn't great performance wise but i found it the easiest to understand and the fixed situation should be practically very rare anyway. moving this code path to the `shard_state_executor`
Candidate: ```suggestion                             
Reference: i suggest leaving this as a primitive `long` since the tiebreaker is/should always be a `long` and should always exist (vs the eql tiebreaker which is optional).
Candidate: ```suggestion                             
Reference: maybe this would also be a good place to explain the differences in the interpretation of the timestamp values? i think future maintainers would be grateful for having this (unix
Candidate: i don't think we need to call `xcontenttester....test` instead of the
Reference: leftover from undo-ing the implicit tiebreaker changes?
Candidate: ```suggestion                             
Reference: the return time should be timestamp not object.
Candidate: +1
Reference: just as we are changing the names according to the convention, can we also rename it to `boundaddress`?
Candidate: i think we should have a test to the that the lock and then the lock rather than `emptymap()`.
Reference: the `settings` passed in is expected to be the node settings, i think just passing in empty will work fine here.```suggestion        indexsettings followerindexsettings
Candidate: do we need to add a test for the test for the test for the test to get rid of the test for the test for the test for the
Reference: i am not sure i understand why this needs to `assertbusy`?
Candidate: do we need to add a test for the test for the test for the test to get rid of the test for the test for the test for the
Reference: the test here does not fail for me (without the `followingengine` change), ran it 1000 times.can we maybe override the `advancemaxseqnoofupdatesordeletesonprimary` (and possibly other methods) in order to synchronize at
Candidate: do we need to add a test for the test for the test for the test to get rid of the test for the test for the test for the
Reference: i think we should keep this in plural, i.e., advancemaxseqnoofdeletesonprimary
Candidate: i don't think we should have the `maxprimaryterm` using the term of the term of the we have a of the term of the interest of using the term of
Reference: should we update this to `https://www.elastic.co/guide/en/elasticsearch/reference/master/migrating-8.0.html#breaking_80_cluster_changes`?
Candidate: i suggest we have a comment here that we have been suggest we have a test for the rest of cancellable and suggest we have a    
Reference: i think it might be useful to call out in this log line when `targetindex != indexname` and include both when that's the case.
Candidate: i think we should make this condition so we don't make back.
Reference: `clusterconnectionmanagertests#testconcurrentconnects` exercises this - i can make it fail reasonably often by adding a few `thread.sleep` calls:```diffdiff --git a/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.java b/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.javaindex 415769596a4..00bb8423d7b 100644--- a/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.java+++ b/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.java@@ -11,6 +11,7 @@ import org.apache.logging.log4j.logmanager; import
Candidate: i think we should remove the second                       
Reference: cachestats could be end up null in mixed clusters
Candidate: ```suggestion       uncompressed().equals(that.uncompressed());```also                      
Reference: ```suggestion            logger.debug(() -> new parameterizedmessage("[{}] search optimized to noop; request [{}]", getjobid(), searchrequest));```serializing the search request to string could
Candidate: ```suggestion                             
Reference: ```suggestion        logger.trace(() -> new parameterizedmessage("searchrequest: [{}]", searchrequest));```
Candidate: ```suggestion                             
Reference: i always thought that the logger would serialize the strings unless we provided a message provider. consequently, if we weren't on debug level, we are serializing the sourcebuilder unnecessarily.
Candidate: ```suggestion                             
Reference: `parameterizedmessage`?
Candidate: ```suggestion            logger.debug(()          logger.debug(()       
Reference: the introduction of a magic value `null` is dangerous, what if the client returns `null`. it seems better to return an empty result set, so that `null` causes the transform
Candidate: ```suggestion                             
Reference: i think it's nice to let this throw an exception (as it was) and for the caller to decide what to do with it.i have the impression that the reason
Candidate: rename we rename this as well?
Reference: this `if` block can be simplified so that there is a single call to `persistannotation`.it can be:```string annotationid = null;if (lastdatacheckannotationwithid != null) {  annotationid = lastdatacheckannotationwithid.v1();  annotation
Candidate: ```suggestion                             
Reference: ```suggestion                        + "] is true and a
Candidate: ```suggestion                             
Reference: could we move this check at the top of `masteroperation`?in addition, do we really need this check? i'm trying to think what happens if a user starts a rolling upgrade
Candidate: ```suggestion                             
Reference: note: postingsformat.forname() does the same lazy-instantiation that the previous impl did
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: then here we could just pass in a `() -> randomalphaoflengthbetween(1, 10)` to the `checknopermithandshakefromeincompatiblebuilds` function and not worry about static variables
Candidate: ```suggestion                             
Reference: why is this stall necessary? doesn't the rest test infrastructure not run the tests until es is up?
Candidate: ```suggestion                             
Reference: i think this timeout needs to be longer _if_ we are waiting for completion.  we revert with `delete_intervening_results=true`, and that could take a very long time if there are
Candidate: ```suggestion                             
Reference: ?
Candidate: ```suggestion                             
Reference: it is illegal for the user to set the location```suggestion```
Candidate: ```suggestion                             
Reference: can we test the scenario where `subnet` and `department` are fields underneath an object field (like `organization.subnet` and `organization.department`)?
Candidate: add a random test to 100?
Reference: maybe randomly not use a `format`? like this:```+ (randomboolean() ? "\"date\":{\"type\":\"date_range\"}," : "\"date\":{\"type\":\"date_range\", \"format\": \"yyyy-mm-dd\"},")```
Candidate: can we add `shardstateidentifier` here :)
Reference: hmm, i'm not a huge fan of exception based control flow. i know that settings are registered with clustersettings and indexscopedsettings so that settings can be validated against the master
Candidate: ```suggestion                             
Reference: i was wondering if were possible to extract getting policy from the metadata to own method in order to make policy `final`.```javastring getpolicy(metadata metadata) {  if (metadata != null)
Candidate: ```suggestion                             
Reference: nit: i would prefer this directly after `snapshots`, since they both "filter" the result. but completely optional...
Candidate: do we need to cache for the data streams here?
Reference: i think `slmpolicies` is not really supporetd here, since it is not verbose?
Candidate: why we need to cache here?
Reference: could we make the filtering here a separate method instead? it looks like there is at least one usage where this is not needed and it is a bit odd
Candidate: ```suggestion                             
Reference: can we add tests of:1. a slm-policy that is not there.2. multiple slm-policies (where some may not exist).3. an actual inclusion pattern, i.e., `policyname + "*"`.4. an actual exclusion pattern,
Candidate: ```suggestion                             
Reference: can we add a generic validation to not use `-_none` and perhaps even not allow `_` or `-_` prefixed policies?
Candidate: ```suggestion                             
Reference: ```suggestion                modelallocation -> waitfordeploymentstate(```
Candidate: ```suggestion                             
Reference: ++ `reason` will be useful for understanding what is happening internally
Candidate: ```suggestion                             
Reference: the javadoc for function `nodesshuttingdown(final clusterstate state)` is all wrong can you update that.
Candidate: i think we should assert this ok to the searchable stream is adding searchable stream fails.
Reference: `update` has the signature ```    private static clusterstate update(        clusterstate currentstate,        trainedmodelallocationmetadata.builder modelallocations,
Candidate: i think we should assert this ok to the searchable stream is adding searchable stream fails.
Reference: i would make `health` an object field, the existing `allocationhealth` enum can be one of the fields of this object.  other fields can be `allocation_count` and `target_allocation_count`.i think in
Candidate: ```suggestion                             
Reference: ```suggestion                type,```otherwise 7.x will suffer the problem of #77297
Candidate: ```suggestion                             
Reference: we could pass a reference to the original stdout printstream from bootstrap to node and then to the securityplugin's `createcomponents` so that we can temporarily call `system.setout` to that ,
Candidate: i don't think we need to make sense to make this but that the intention? is hidden labels is not supported scripts.
Reference: i'd prefer this wasn't in `security`.we have a bad habit of just adding more and more into this class, and it's unnecessary. can we have a `generateinitelasticpasswordlistener`?
Candidate: i don't think we need to make sense to make this but that the intention? is hidden labels is not supported scripts.
Reference: if this is a couple of lines lower, then we can remove the `setonce` entirely and just pass the `nativeusersstore` to the listener object's constructor (if we replace the method
Candidate: i we want to do this -> i don't wait for the duration of files, but i think we need to do we need to do we need to do
Reference: i think the listener (if it's a real object) should remove itself at this point. we don't need to call it ever again.
Candidate: i don't think we need to make sense to make this but that the intention? is hidden labels is not supported scripts.
Reference: :+1:
Candidate: i'm wondering if we need to capture the write well?
Reference: i think truly integration testing policy execution cancellation isn't possible (without avoiding test related failures)?
Candidate: i'm not sure that this is a a follow of getting a instance here?
Reference: nit: i think we need to have `... as it is ...` to be formal
Candidate: same here
Reference: i did originally put these on separate lines so that visually the `minimumsnapshotcount` check indicated whether that constraint was present (same with the other checks). it's fine to collapse them,
Candidate: ```suggestion                             
Reference: i think this branch should have its own `trace` log message and immediately return false, because at this point it is neither successful or unsuccessful, which means its state has
Candidate: ```suggestion                             
Reference: rewording suggestion: worth mentioning in the message that we're talking about the geoip database (folk don't read the logger name much) and also adding `successfully` just to add to the
Candidate: can it be be better to me.
Reference: ++ the caller can't set this but the code creates the config so it is visible
Candidate: ```suggestion                             
Reference: ++, one more reason to use methods and not fields.
Candidate: ```suggestion                             
Reference: i suppose since it's important that we don't normalise things like node names we should have a test to assert that too.
Candidate: i don't think we need to make this to the to understand, if we don't need to pass the reader as well?        
Reference: does this new mechanism also normalise ipv4 addresses by removing leading zeroes? that sounds desirable, it'd be good to have a test for this too to document this fact too.
Candidate: i don't think we need to make this to the to understand, if we don't need to pass the reader as well?        
Reference: it would be good if we could also trigger a warn level deprecation and observe that it is written to the data stream.
Candidate: i don't think we need to test for `indices_permissions_key` as the file in the same file as the same file as the same file as the same file as the
Reference: this comment is not relevant anymore, is it?
Candidate: can you add a comment on the why we add a comment for `indices_permissions_key`
Reference: the order is wrong i think. `scrollbuckets` and `compositebuckets` should be swapped.
Candidate: can you add a comment on the why we add a comment for `indices_permissions_key`
Reference: could we instead randomly generate an unordered list of tuples (of random size from 0 to 100 or so), then stream collect it to a sorted map, then sort the
Candidate: i think it makes this test anywhere.
Reference: naive question: if `mapper.type()` is not `default_mapping` (e.g. it's a 6.x index) then are we ok to proceed here?
Candidate: i think we can make this logic for how to make the existing logic for whether we determine whether it to determine whether this block is merging.
Reference: another naive question (sorry): could we catch this in `mapperservice#merge` rather than relying on callers checking they're not adding a type first? not to say there's anything wrong with checking
Candidate: i don't think we don't need to be a test for the the merge the
Reference: how is this case possible? we could add a not null assertion when setting in bootstrapinfo?
Candidate: i wonder if we need to make this in a `fixedinterval` so that we could have a write a constructor for this pr.
Reference: the stream could still have been closed, in which case we are not attached to a terminal. so we need to catch that case, and probably log a warning?
Candidate: i don't think we need to add a comment that in the case of this pr.
Reference: not sure if there is any other way to check if stdout is closed
Candidate: can we add a comment that this as well in question.
Reference: is this really an illegal state? it just means that we’ve closed the streams, which is normal when not attached to a console.
Candidate: can we add a comment that this as well in question.
Reference: i can open this as a separate pr, but noticed that a previous refactoring removed a no longer applicable callback here, but did not adjust this warning callback, so that
Candidate: can you add a comment here why we don't need to expose the documentation.
Reference: we can remove it now
Candidate: i don't think we need to have a field here
Reference: we should probably remove this line :)
Candidate: ```suggestion                             
Reference: and this one :)
Candidate: ```suggestion                             
Reference: and this one :)
Candidate: ```suggestion                             
Reference: no point in forking off potentially multiple times here when we do all kinds of slow+blocking operations when closing the connection manager etc. above. all this does is potentially have
Candidate: `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` to `sendrequesttransportexception`? i think we're request to.
Reference: mostly we don't have any open handlers here on close, no point forking off for an empty list.
Candidate: same                             
Reference: related to the previous comment: if we know that the transport service is closed before the threadpool then can this be rejected? if not we should `assert false` in the
Candidate: same                             
Reference: can we `assert false` here too?
Candidate: `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` to `sendrequesttransportexception`? i think we're sending this request to. request to.
Reference: i was wondering if we should respect `handler().executor()` but then i looked at other call sites and it seems that we almost never do. except sometimes. that might bite us
Candidate: `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` `holdertonotify.connection().getnode()` to `sendrequesttransportexception`? i think we're sending this request to. request to.
Reference: nit: i'd expect the other way around, checking that `allsortedwithoutother` is equal to `allsorted.sublist(0, allsnapshotnameswithoutother.size())` but it's not really important
Candidate: ```suggestion                             
Reference: should we test the result when a snapshot is both included and excluded?
Candidate: ```suggestion                             
Reference: i suppose we could iterate 2 times over the repositories, the first time to match repositories against include patterns ad the second to filter out matching repos with exclude patterns?
Candidate: ```suggestion                             
Reference: consider concatenating repos with the streams api:```javastream.concat(namesrepo1.stream(), namesrepo2.stream()).collect(collectors.toset())```
Candidate: ```suggestion                             
Reference: does it make sense to rename `reponames` to `repopatterns`?
Candidate: ```suggestion                             
Reference: similarly to the repo-name matching, can we derive the include/exclude pattern lists first and share most of the logic between the two (and slm-policy)?
Candidate: since we need to get a `string` here?
Reference: do even need to have the `seenwildcard` variable? if we remove it, the tests passes. is it used just as a perfomance optimization not to calculate negative patterns if there
Candidate: ```suggestion                             
Reference: i think this is the name patterns, could we call it `namepatterns`?
Candidate: i don't think we should remove this two test to be the
Reference: nit: it seems odd that for the repo pattern we pass in a comma-separated string, whereas for the names we pass in a list of name patterns. i would prefer
Candidate: ```suggestion                             
Reference: can we add a test validating that using `-xyz` finds such a snapshot (and repo) if no wildcard is specified first, i.e., at that we can still find snapshots/repos starting
Candidate: ```suggestion                             
Reference: i think the new exclude functionality also affects the list repositories api, we should also update the documentation for that api then.
Candidate: ```suggestion                             
Reference: i think we can use `messagedigests.digest(out.bytes(), messagedigests.sha256())` here rather than adding a new method?
Candidate: i don't think we need to remove the local node.
Reference: this can probably be outside the synchronized block as well?
Candidate: could you add a method to clarify what the field types, and use the field types,
Reference: could you explain this part? i'm not totally clear on why it would be different.
Candidate: ```suggestion                             
Reference: do we need this new method `done`? it looks like the only implementation adds the debug info, which seems like it could be done when initializing the processor:```@overridepublic void done()
Candidate: can we change a couple of this change that we change a couple of that we change a couple of that we change a couple of this change that we
Reference: it would be nice to have a test or example of how the output looks when there are nested hits.
Candidate: can we move this into its own method too:```                     
Reference: as a heads up, we've brainstormed moving stored fields loading to its own subphase. i'm not sure it will happen, but this would affect the output structure (which is fine,
Candidate: i wonder if we can remove a conflict entirely, though.
Reference: this had been commented out for years. i'm not sure why. it passes quite consistently for me. i think its worth uncommenting it and watching.
Candidate: ```suggestion                             
Reference: does `loadnested` give additional insights? is this just the same as the number of inner hits? also it's not so much of a "load" as a "pull out an inner
Candidate: small comment, we can we use a condition of the we don't we use a condition of the we we use a
Reference: not a big deal, but did you intend to move this into the loop?
Candidate: can we add a comment explaining why we we have a comment explaining for cat clusters. there is there be a to be a
Reference: i guess this splits merging across two places: the caller `searchphasecontroller#merge` and here in `buildresponse`. i like the direction this change is going though, it feels like `reducedqueryphase` should own
Candidate: ```suggestion                             
Reference: i really like this fix, exception throwing/catching is very expensive. i would suggest one change only. if the key for some reason was null (i'm not sure it's possible for
Candidate: what's this reason if it's unrelated to what's the reason what's the reason if it's reason to what's the reason what's the reason what's the reason what's the reason if
Reference: just a minor thought here, splitting this method to avoid double locking may not be worth the complexity. reentrantlock will check if a lock is already owned by the same
Candidate: ```suggestion                             
Reference: the tests that this enables are super comprehensive. it's kind of a shame to do it randomly though. we could probably use more subclasses or parametersized tests or something to
Candidate: i think it is okay to understand if it is okay to understand that it will be better to
Reference: i think we can make this final?
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: this is a change in behaviour vs today. as per the comment i think it's ok, but we can discuss alternatives too.
Candidate: add a comment that
Reference: this also emits logs for connections to nodes in remote clusters. i think that's useful to see, we investigate cases that turn out to be flaky cross-cluster connections at a
Candidate: i don't think we should this to check in the
Reference: can we assert `connectionmanager.nodeconnected(node) == false`?
Candidate: ```suggestion                             
Reference: nit: perhaps we should lower `follower_check_interval_setting` to something like 100ms too to avoid waiting 1s for the follower to run the initial check?
Candidate: ```suggestion                             
Reference: add a comment to explain the reasoning?
Candidate: ```suggestion        xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: this question is still open, i think in the case that the original request contains "source" : true and some includes/excluded separate from the "fields" option we cannot simply overwrite
Candidate: i think add a comment that the decide that the decide that the decide in the decide that we decide whether the decide that the decide that the decide that
Reference: `querysearchresult` is a transport response so we should try to avoid the wrapper. could we create the adapter for the response dynamically here ? we don't really need to share
Candidate: same here
Reference: is there a way to do a `replaces` and have the additional deprecation message? it seems we are losing that the `_xpack` url is old.
Candidate: should we add a the check for the the the logic for the the the the the the and the that is a different for the the the the the
Reference: unrelated, but spotted a missing `asserttrue` here.
Candidate: i think we need to pass this pr?
Reference: you'll need a similar version conditional here to match the read conditional.
Candidate: ```suggestion                             
Reference: are these type changes to make the backport easier?
Candidate: i don't think you need to add a test for the shard part?
Reference: these.second set of parentheses around `(mergewith instanceof geoshapewithdocvaluesfieldmapper)` is a bit  confusing.
Candidate: ```suggestion                             
Reference: i did not explicitly add tests for all columns as they use the same functionality and limited myself to those that i needed for full coverage only here.
Candidate: can we add some comment here about why we need to for this?
Reference: are we sure that `snapshot1` and `snapshot2` get different timestamps?
Candidate: do we need to add a test for `indices_permissions_key` as well?
Reference: is there a reason we are not allowing this? `offset` could just be evaluated after `after_value`?obviously we can do that in a follow-up rather than here.
Candidate: ```suggestion                             
Reference: i think we should add explicit error handling when parsing the arguments, perhaps to the request validation or here. that would allow the message to indicate that it is the
Candidate: this is a change a test is covering is is a change is a change is a change is is a change is a change is a change is a
Reference: given that the `inputs` (to filterpath::compile) is a set, then the order of the returned filterpaths array should not be assumed. changing to linkedhashset here assumes that compile will follow
Candidate: can you add a comment here why but, but, but, but, but, but, we don't important.
Reference: does the order matter here? it seems that this 2-d array is *not* a transposition of the 2-d array on the left-hand side.
Candidate: i think it'd be nice to be more descriptive for these warn?
Reference: nit: add a constant for this one?
Candidate: ```suggestion                             
Reference: this is obviously not optimal, but i am not 100% sure how else to do it.one issue here (besides performance), is that we always use the counts based on the
Candidate: ```suggestion                             
Reference: good catch using the updated allocations here
Candidate: ```suggestion                             
Reference: there is another similar comparison in l713, would you mind correcting that as well?
Candidate: ```suggestion                             
Reference: small styling issue: we prefer to make negative statements more explicit by using "v == false" instead of "!v". even though it is more verbose it helps readability. so in
Candidate: i don't think we need to have a to understand, since we have no longer applying the warning and comparing the other`.
Reference: i think it would make sense use the sort objects `tostring()` method directly, the same way we print `segmentsort` later in the error message. it should print all the sortfields.
Candidate: ```suggestion                             
Reference: do you think it'd be worth sticking this in the superclass so we don't have to copy and paste it?
Candidate: ```suggestion                             
Reference: maybe we can add a bit higher chance of going above 1000 here?```suggestion        int numops = frequently() ? scaledrandomintbetween(1, 1500) : scaledrandomintbetween(5000, 20_000);```
Candidate: ```suggestion                             
Reference: i am not sure i follow why this should be `rarely()` as opposed to just `randomboolean()`?
Candidate: ```suggestion                             
Reference: i think we can let `accessstats=randomboolean()` here?```suggestion        try (translog.snapshot snapshot = followerprimary.newchangessnapshot("test", 0, long.max_value, false, randomboolean(), randomboolean())) {```on the other hand, this code
Candidate: ```suggestion                             
Reference: this question is still open, i think in the case that the original request contains "source" : true and some includes/excluded separate from the "fields" option we cannot simply overwrite
Candidate: i think add a comment that the decide that the decide that the decide in the decide that we decide whether the decide that the decide that the decide that
Reference: `querysearchresult` is a transport response so we should try to avoid the wrapper. could we create the adapter for the response dynamically here ? we don't really need to share
Candidate: same here
Reference: this test does not really test the current change. there is no easy way to test it. theoretically a test should not care about the internals of a method. but
Candidate: it might be nice to include the test for readability?
Reference: are we leaving this as a follow up?
Candidate: ```suggestion                             
Reference: seems best to throw `unsupportedoperationexception` here.
Candidate: do we need to expose the indexanalyzer? in mapperservice?
Reference: seems a bit odd just to take the shortcut on a lower-case `b` although i see that it helps. let's extract the predicate to a method `definitelynotpercentage(string)` so we can
Candidate: can we add a comment here why this needed?
Reference: this is correct but looks like an accident, suggest a comment here too.```suggestion                // "1"
Candidate: ++
Reference: it is easier to grok what this is checking with this math on the size i think.other wise we get longer nested `&&` checks against empty and more `== false`
Candidate: 🤦
Reference: this line is failing the forbidden apis check. you probably want:```suggestion        final zoneddatetime notbefore = zoneddatetime.now(zoneoffset.utc);```
Candidate: ```suggestion                             
Reference: we generally prefer to use hamcrest style assertions (although we also have a lot of older code that uses the standard junit assertion style).matcher-based assertions give much better failure messages
Candidate: ```suggestion                             
Reference: i'm guessing creating a merged set using addall is faster than doing stream concat, which is why we switched the approach? if that's the case, can similar approach be done
Candidate: ```suggestion                             
Reference: i think removing the synchronized would work. the only possibility of breaking the names creation with multiple threads is if someone mutated settings or secure settings while we were iterating
Candidate: ```suggestion                             
Reference: we actually don't need to parse this setting at all, because the caller of this function does:```java            optional<string> tier
Candidate: i don't think this needs to be the from the pr.
Reference: to avoid an array like `[" "]` (not that we expect that), maybe we should use:```suggestion        if (strings.hastext(tiers) == false) {```
Candidate: ```suggestion                             
Reference: same here, ```suggestion        assert strings.hastext(tiername) : "tiername must be not null and non-empty, but was [" + tiername + "]";```
Candidate: i believe this is a warning right?
Reference: super minor, but we have `strings.empty_array` for this also if needed (it doesn't really matter much here)
Candidate: ```suggestion                             
Reference: this needs to be a link to our 7.x documentation. maybe https://www.elastic.co/guide/en/elasticsearch/reference/7.15/search-aggregations-bucket-adjacency-matrix-aggregation.html#adjacency-matrix-agg-filter-limits? (related, i just noticed that that link says "this setting is deprecated and will be **repaced**").
Candidate: ```suggestion      public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: ```suggestion                    + "[{}] anomaly job tasks, [{}] data frame analytics tasks
Candidate: this makes sense to make the scenario above
Reference: the 'weird state' arises if any of these are not empty and `largestjobormodel == 0l` ```suggestion            && ((dataframeanalyticstasks.isempty() &&
Candidate: this makes sense to make the scenario above
Reference: ```suggestion            out.writestringcollection(this.waitingmodels);```
Candidate: ```suggestion                             
Reference: what does it mean when `maxlazymlnodes < nodes.size()`?shouldn't it rather be `maxlazymlnodes <= nodes.size()`?sorry if it's obvious but i don't quite understand this condition.
Candidate: ```suggestion                             
Reference: ```suggestion                            + "and
Candidate: this one one now that they previously one cache?
Reference: why the limit for models is `0` whereas for jobs it is some configurable number?
Candidate: this one one now that they previously one cache?
Reference: not really part of your change, but since it is touched now, maybe avoid chaining? and instead just:```nodesinforequest.clear();nodesinforequest..addmetric(nodesinforequest.metric.ingest.metricname());```i think that is easier to read.
Candidate: can we be a personal `available` name of a words, name does not be removed.
Reference: i was wondering whether `maps.deepequals(...)` be used here? but i don't think that is the case since we never have arrays as value in this map. so this should be
Candidate: can we be a personal `available` name of a words, name of getting a words, name of a words, name of a words, name of a words, name does not
Reference: by subtracting the before timings from the after timings, we are able to reuse the thread timing capture code and catch timings of threads that had started during the 'profiling'
Candidate: i don't think we need to add a comment here as well?
Reference: `this.` seem superfluous here
Candidate: ```suggestion                             
Reference: i think it's better to declare `tempupserts` before the 2nd loop where it's actually used.
Candidate: ```suggestion                             
Reference: i am not really sure about this bit, might run faster, might not?perhaps we can add a test validating that just doing `value.indexof(data_frozen)` is safe, i.e., that there are no
Candidate: should we add a method seems like we should be necessary.
Reference: suggestion: create plugins in declarative style without a variable```javastream.concat(super.nodeplugins().stream(),            stream.of(waitforsnapshotblobcacheshardsactiveplugin.class, reindexplugin.class))        
Candidate: i don't see why you need to cast methods?
Reference: it seems that the `directory` variable can be inlined and we can just do `unwrapdirectory(indexshard.store().directory()).clearstats()`
Candidate: can we we use a comment that we don't get a comment that we don't to show for the cluster state for prewarming,
Reference: nit: i believe a common convention is to declare the exception name as `ignore` instead of adding an explicit comment.for example, intellij wouldn't highlight the exception as unused in this
Candidate: can we we use a comment that we don't get a comment that we don't to show for the cluster state for prewarming,
Reference: can you add a todo to make it clear that an action is needed
Candidate: since we could sort optimization?                         
Reference: nit: extra empty line.
Candidate: ```suggestion                             
Reference: should we be more conservative and have `childaction.startswith(parentaction + "[")`. otherwise it is possible for an action to be child of itself, which i don't think makes sense in the
Candidate: ```suggestion                             
Reference: i cannot think of a real issue for it. but would like to write down my thinking here in case others could find out more about it.is it possible for
Candidate: ```suggestion                             
Reference: nit: just because we want to squeeze out performance i would use a classic for loop here.
Candidate: ```suggestion                             
Reference: did you intend to solve this case in this pr?
Candidate: ```suggestion                             
Reference: maybe add the nullable annotation to the returned value of the method.
Candidate: ```suggestion                             
Reference: i wonder if we could use a special predicate object instead of nul to avoid checking for null. we could still have a specific predicate we use to allow the
Candidate: can you don't need to check for the
Reference: i am not sure you can unless we change how the count works? though i guess we could possibly avoid getting the snapshot info for the "before" snapshots if they
Candidate: ```suggestion                             
Reference: https://github.com/elastic/elasticsearch/pull/77550
Candidate: ```suggestion                             
Reference: could you please add some unit tests for serialization of timeseries? there is logic in there, for example, for not emitting when empty, and also ensuring some parts could be
Candidate: ```suggestion                             
Reference: this shouldn't be null, let's instead construct an object with all zeros in the false case below.
Candidate: add indent back.
Reference: i think this would be more readable if it was moved to a helper function, eg `randomtimeseries()`, then it can be used below inline, without needing this weirdness with a
Candidate: add indent back.
Reference: instead of forcing no replicas maybe we let the index settings be randomized as usual, and use `getnumshards()` to retrieve the expected number of shards to compare with later in
Candidate: maybe use `.get()`
Reference: let's use `get` instead of `actionget()` please so we don't swallow stack traces that make understanding failures a pain :)
Candidate: maybe use `.get()`
Reference: @joshdover the index pattern `metrics-*` overlap with a few index patterns beginning with `metrics-endpoint.`: * `metrics-endpoint.policy-*`* `metrics-endpoint.metrics-*`* `metrics-endpoint.metadata*`* `metrics-endpoint.metadata_current_default`* `metrics-endpoint.metadata_united_default`but privileges required for the above are different from those required
Candidate: ```suggestion                             
Reference: @joshdover just to double confirm this is indeed `metrics-endpoint.metadata*`, i.e. without a dash (`-`) right before the wildcard (`*`).
Candidate: ```suggestion                             
Reference: @joshdover the [transform api doc](https://www.elastic.co/guide/en/elasticsearch/reference/master/put-transform.html) suggests `create_index` privilege for the destination index. just wanna double confirm it is not needed here.
Candidate: ```suggestion                             
Reference: can you fix this comment to no longer reference the cache key since we check the readers directly?
Candidate: can you add a comment here why we use the here for evicted.get();```?
Reference: i'm unclear as to why we now need to have the reader itself rather than the cache key here?
Candidate: can you add a comment here why we use the here for evicted.get();```?
Reference: please add tests for the `tokenize(string seq1, string seq2) ` overload
Candidate: i don't think this is a fan of hamcrest matchers doesn't have a runnable? i think it doesn't have a runnable? i think it is always produce a random name
Reference: why convert from a long, to a biginteger, back to long?
Candidate: ```suggestion           withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i am a bit worried about adding a second version of `indexdocs` here. i think the problem with the test is that we need to ensure the first bucket is
Candidate: i think it would be worth the to the the since the the we don't need to compare than the the data than the than the the than the the
Reference: ```suggestion                             
Candidate: ```suggestion                             
Reference: ```suggestion                             
Candidate: ```suggestion                             
Reference: ```suggestion                "[open-job-with-old-model-snapshot] job snapshot [snap_1] has min version before [7.0.0], please revert to a newer
Candidate: ```suggestion                             
Reference: i think this risks balancing back the shard to the upgraded node. you can disable balancing and reenable it after reestablishing replica. or we could just keep the exclusion until
Candidate: i think this is a test for the test.
Reference: i wonder if we should not instead just find the node on the new version and put the exclusion in always? i think there is a risk of the shard
Candidate: i think this is a test for the test.
Reference: i do not think this `ensuregreen` does anything?
Candidate: i think we can use a test for the recovery and assert that adds a stronger here.
Reference: this looks nearly identical to the static `updateindexsettings` inherited from `esresttestcase`, do we need this?
Candidate: i looked at this test method?
Reference: ```suggestion                    "sequence cannot contain more than 256 queries; found [{}]",```
Candidate: i think we need to handle the "mark as well?
Reference: ```suggestion            throw new parsingexception(source, "a sequence requires a minimum of 2 queries, found [{}]", queries.size());```
Candidate: i think we need to handle the "mark as well?
Reference: if this is limited to 100, why not using `byte`?
Candidate: i don't think we need need to handle `micros` and `nanos`.
Reference: the only question i have is whether @jakelandis or @masseyke would like a reference to an issue here, as i believe the plan is that there might be more categories
Candidate: ```suggestion                             
Reference: small remark here, since type is an enum type now, it would be better if we checked with type == reporttype.mem, this way we can have the compiler do the
Candidate: i think
Reference: can we please remove this comment? it doesn't seem like it's relevant anymore.
Candidate: i don't think we need to add a comment that this method and expose mapperservice?
Reference: add an `sunthreadinfo sunthreadinfo` argument to getallvalidthreadinfos right after threadmxbean to pass either the real sunthreadinfo or the mocked one.
Candidate: ```suggestion                             
Reference: add an argument `sunthreadinfo sunthreadinfo` to innerdetect after threadmxbean to pass in the real sunthreadinfo from `detect()` or the mocked one during testing. this way we don't need to keep
Candidate: i think be added in its case, so they can be upstream
Reference: using the proposal that ryan made, this can turn into `list.copyof(indicesmap.keyset())` from java 10 and until then `new arraylist<>(indicesmap.keyset())`. that seems better than stream collecting it.
Candidate: i think we can use remove the instead of this function.
Reference: i think this has no real benefits and runs at a slightly critical time - so would prefer to just keep this one as is to avoid the wrapper here.
Candidate: ```suggestion                             
Reference: this could turn into `aliases.keyset()` instead.
Candidate: maybe add a comment here ?
Reference: changes in this class are picked from #77231
Candidate: ```suggestion                             
Reference: i assume we have to do all this stuff _here_ because we can exclude based on full test name, which includes the file path, which i guess is only known
Candidate: ```suggestion                             
Reference: this whole thing is a bit brittle and won't work in some cases we have, like when we have nested folders, in which case segments 1 and 2 would be
Candidate: i don't think this is to handle this. i don't think it might be to be a removal?
Reference: does this have any noticeable impact on performance? we are adding a _ton_ of patterns to the copyspec here.
Candidate: ```suggestion                             
Reference: ```suggestion                             
Candidate: shouldn't we make it two sense to make this, but i'd rather than whitelist comment suppressed and retry.
Reference: ```suggestion                        "[{}] failed to calculate anomaly detector
Candidate: shouldn't we make it two sense to make this, but i'd rather than whitelist comment suppressed and retry.
Reference: additionally to this check here, could a similar check also be performed as part of the put ilm policy api?this way there is direct feedback upon creating the policy
Candidate: ```suggestion                             
Reference: this is the logic to make sure the point is always inside the cell.
Candidate: can we add a test for the error here because we don't rather than `emptymap()`.
Reference: maybe add an explanation why it is invalid (like aggregations cannot start with `_mvt`)
Candidate: i'm not sure that we can use a test for the settings here.
Reference: not sure about catching an infe thrown by any of this code, could we just protect the call to `checkblock()`?
Candidate: i think you need to check the same line before 5.0.0 and the same `if`?               
Reference: thinking about this some more, i think we only really care about infes thrown while the `state_not_recovered_block` is in place, other blocks don't really matter. i think rather than introducing
Candidate: ```suggestion                             
Reference: sorry i gave you a duff assertion here, should be this:```suggestion                assert state.blocks().global(clusterblocklevel.metadata_read).stream().allmatch(clusterblock::retryable);```(or else we
Candidate: could we add a comment here why we need for this.
Reference: rename to search_script_name?
Candidate: can you add javadocs?
Reference: could you use a regular terms agg? if not probably worth a comment why. i spent a little while trying to figure out if the terms script created a second
Candidate: can we assert that `cancelfuture.isdone == false` disabling the
Reference: it's worth adding a comment that this is a volatile read. do we want to do that on every consume? we don't check the memory breaker on every consume so
Candidate: ```suggestion                             
Reference: nit: if we prepended a `,` to all but the first entry rather than appending it to all but the last then we wouldn't need to copy everything to a
Candidate: i don't think we need to implement the `string` to implement the opaque_id=[" + opaqueid "]";` and always implement this.
Reference: there shouldn't be any snapshots going on in other repos either but we can keep the more general assertion i think:```suggestion        assertfalse(finalsnapshotsinprogress.asstream().anymatch(entry ->
Candidate: why we are not using the
Reference: nit: we use `.asstream().iterator()` in other places that iterate over all entries, should we be consistent?
Candidate: we should add a case that we is a case that we is a data
Reference: ok, maybe not _everywhere_ else...
Candidate: i don't think we should add an error here and the fact that we need to handle the `listener.onfailure`
Reference: should probably assert that `entry` has the right repository here.also that `repoentries.getvalue()` is nonempty.
Candidate: why not sure fan of this pr?
Reference: this reorders the snapshots vs how an older node would see them, and means that older nodes will see entries getting inserted in the middle of the list rather than
Candidate: can you use `writestringcollection` no need to handle it?
Reference: rather than iterating over this list by index and mutating it, why not iterate over the original list and add the updated entries to the new list?
Candidate: `readytoexecute`                             
Reference: i think this all still works if we just look at the one repo, right?```suggestion        if (snapshotsinprogress.forrepo(repository).size() == 1) {```(also extract that variable
Candidate: why not add a comment here? here?
Reference: if `snapshots.isempty()` can we always just return `snapshotsinprogress.forrepo(repository)`?
Candidate: why not add a comment here? here?
Reference: not directly related to this change, but could/should we check later snapshots too? we'd expect the first mention of every shard in the list to be active (or blocked by
Candidate: :+1:
Reference: likewise:```suggestion        return list.of();```
Candidate: why we don't need to be a here? here?
Reference: note: this method does not check if the snapshot belongs to the same repository. since snapshot uuid and index uuid are unique ids i think the risk of collision is
Candidate: i am not a fan of doing this to me.
Reference: can we instead assert that `total == 0` and then set the value?
Candidate: ```suggestion                             
Reference: can we use a `new fieldandformat(cachedblob.creation_time_field, "epoch_millis")` to avoid parsing the string to long in `getcreationtime`?
Candidate: ```suggestion                             
Reference: what about adding this method instead of these two methods:```void computeifabsent(        searchrequest searchrequest,        biconsumer<searchrequest, actionlistener<searchresponse>> executesearch,
Candidate: ```suggestion                             
Reference: in case throwable is an instance of `error` then we should throw it (`throw (error) throwable;`).so that the `elasticsearchuncaughtexceptionhandler` can catch it.
Candidate: i think we can have the access to the enrich in happens here.
Reference: why is the expected miscount increased here?
Candidate: i don't also add a test to
Reference: this method can never return 0.  is that a sign of a bug, or is it impossible that it could ever get called for a string like `a!!!!!`? 
Candidate: i think we should add a comment here rather than `emptymap()`.
Reference: better compare the `index` here than just their names. if we have instance equality it's the same performance as comparing names. if we have different indices, the uuid strings will
Candidate: ```suggestion                             
Reference: i think we can be more descriptive in this message, perhaps detailing which action (`searchable_snapshot` in this case) in which phase has the bad repository? especially since there could be
Candidate: ```suggestion                             
Reference: same comment here about a more descriptive error message
Candidate: ```suggestion                             
Reference: it took me a little bit thinking about how this works. a short comment would be appreciated, explaining this adjusts the last character of the prefix for the ending key
Candidate: ```suggestion                             
Reference: should `values` be always not null and always be not empty if a vector field is indexed?
Candidate: can you add a comment here as well?
Reference: nice! i like how to the code got simplified in all of these functions!
Candidate: ```suggestion                             
Reference: only raising exceptions with a specific type (`elasticsearchauthenticationprocessingerror`) and while invoking the request processing error handler (and not any other handler), results in 500 or 503; anything else goes to
Candidate: ```suggestion                             
Reference: nit: add something in the class javadoc ( that currentl references only 401s)
Candidate: ```suggestion                             
Reference: we check for `userinfo != null` in line 120 so we can remove this from here and make it sliiiiiightly simpler
Candidate: can we add a `#verifypassword` as `userandpassword`.
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: why we don't we need to use the
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: i don't think we need to have a test to make sure that we need to have a test to the write data streams and that we don't have to
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: same as we we have a
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: :+1:
Reference: this block of changes is mostly for extra logging, the one semantic change here is `sorteddocvaluesfield` becoming `binarydocvaluesfield`. i struggled to update the original `sorteddocvaluesfield` for some reason, i'm not
Candidate: ```suggestion                             
Reference: now the `.liv` file is considered identical between the commits rather than different.
Candidate: ```suggestion                             
Reference: this one is always used as a `string` so maybe worth to declare it a `string`
Candidate: can you add a comment here about why we need to handle the
Reference: should we compute `hashequalscontents` once is the constructor and stores it as a class member? it looks like  every time a `storefilemetadata` is instanciated we use it.
Candidate: +1
Reference: maybe also test the default behavior with an empty map
Candidate: i we add a test for a test here to ensure that there is a of there is a of there is no guarantee that of the barrier, there is
Reference: not very important but `indexwriter` implements autocloseable and can be used in try-with-resources blocks. `indexwriterconfig` also commits on close so you can save few lines (but it's not used like
Candidate: ```suggestion                             
Reference: for my own education, why is this way better?
Candidate: ```suggestion                             
Reference: should we set this to `i + entity.length()`? also, should we handle i being `-1` here?
Candidate: ```suggestion                             
Reference: let us rename the loop variable to mapping here.
Candidate: ```suggestion                             
Reference: let us rename the loop variable to alias here.
Candidate: ```suggestion                             
Reference: rename to rolloverinfo?
Candidate: ```suggestion                             
Reference: rename `value` to `aliasmetadata`?
Candidate: i don't think we should add a test for this test case for the ids. of a change to include a single change for consistency. i don't see, we change
Reference: rename `value` to `indexmetadata`?
Candidate: ```suggestion                             
Reference: rename to `aliaslist`?
Candidate: can you add some comment here to the since we're looking at the end of the the
Reference: rename to `nodescollection`?
Candidate: why does not need to be the
Reference: i think these should be warning logs, not deprecations. the deprecation already happened, this is a warning that we are dropping something meaningless.
Candidate: i think we can use a a test for the stored ?
Reference: might want a slightly more reassuring message here :)  (also, these aren't all just primary shards) perhaps something like:`[3] shards cannot be moved away from this node but are
Candidate: i don't think we simpler to return part of adding the ids.                  
Reference: nit: maybe just `array(string name, collection<string> values)` ? same remark for the other new methods.
Candidate: can you add a comment that `leafreader.lucenereaderholder.get()
Reference: can you add a comment here saying why we cache the lookups?
Candidate: ```suggestion                             
Reference: we could still assert that they have same leaf reader context ordinal? i.e. that the ordinal-based operations here make sense.
Candidate: ```suggestion                             
Reference: can you add a comment saying that this one here is explicitly created for iteration (in contrast to lookup above)?
Candidate: ```suggestion                             
Reference: should this just return `next` now that the collect method is just delegating?
Candidate: nit: you add a comment here why now that it now that we are set on the other than utc`?
Reference: this comment isn't right for this method. here, after your refactoring, we don't have a separate instance as there is no iteration anymore.
Candidate: can you add a comment explaining why we are creating an exception here?
Reference: maybe java.time.zoneid.of("utc").tostring?
Candidate: maybe we use a comment that we don't need to do the `scaledrandomint`?
Reference: `length is` i guess:)
Candidate: this believe there is going to be under the values.
Reference: i am not sure this waits for anything and it seems sort of unrelated to this test?
Candidate: can we we use a comment that we don't get a comment that we don't to show for the cluster state for prewarming,
Reference: ok, this might help, but can we perhaps log `numberofcachedblobs` before this assert busy such that we can see if it was trying to delete entries but was simply slow
Candidate: can we we use a comment that we don't get a comment that we don't to show for the cluster state for prewarming,
Reference: maybe move this into the `channel -> {}` lambda, it's kind of weird having it outside of its scope when it's only used in the lambda? (at least it took
Candidate: can you add a comment on the test for the bundled stats"maybe                  
Reference: could we stop using the stopwatch altogether and move the timing into the new tracker? this'd also let us track the other things that aren't listeners/appliers (e.g. connecting to new
Candidate: ```suggestion                             
Reference: same here, let's not have any synchronization here. if this isn't set then it will be lazy set just fine in our task loops and otherwise it's set from the
Candidate: i wonder if this should be a wildcard == -1`
Reference: if we're changing this already (+1 to the name change btw), can't we just go for `computeifabsent` to make it look nicer? :) (and also faster because we don't need
Candidate: i think we should mutate the index value here.
Reference: nit: can unwrap the else i guess :)
Candidate: i don't think we should also have a wildcard field hidden data stream that the indices is an `expression` that there is is nullable.
Reference: can we move this comment to the `decidecanallocate` method? it looks slightly off here.
Candidate: ```suggestion                             
Reference: i wonder if we should add a comment here explaining why it is overridden for this decider?
Candidate: ```suggestion                             
Reference: did you intend to tackle this now? i would prefer to include this in this pr.
Candidate: ```suggestion                             
Reference: can we randomize number of replicas? i think this should work with 1 replica too, since we will not allow allocating it to the target node.we may want to also
Candidate: ```suggestion                             
Reference: can this use `allocation.nodeshutdowns().get(shardrouting.currentnodeid())` instead?
Candidate: ```suggestion                             
Reference: nit: rename to `shardonreplacednode`?
Candidate: ```suggestion                             
Reference: not sure why we use the percentage here rather than just do it in bytes. i think the message would also be clearer if we add the excess amount of
Candidate: do we need to make sure if we have an empty here?
Reference: can we make the visibility of this package private instead?
Candidate: i don't think it might be a bit of introducing this with a because we don't have a nicer to
Reference: can we make the visibility of this package private instead?
Candidate: ```suggestion                             
Reference: rather than remove the "skips" once for node-level settings, and then remove it every time, since you know you'll need to remove it for every index, what about making `removeskippedsettings(state,
Candidate: ```suggestion                             
Reference: this test name is a little confusing to me :) what does it mean?
Candidate: 👍
Reference: can you add a unit test for this method?
Candidate: i you add a comment explaining why we this needed?
Reference: nit: can you move `"upgrade_needed"` and `"no_upgrade_needed"` into a constant?
Candidate: i don't think we should be a to the constructor for cat words, should be a specific of the other words, that we should get rid of the
Reference: if we hit this every 10 seconds for 30 minutes, that's roughly 180 times, are we okay with that amount of logging? that seems a little too excessive to me.
Candidate: i don't think we simpler to return part of adding the ids.                  
Reference: super minor nit, but since this is the top-level decision first rather than a plain list (it definitely has multiple sub parts though), can this be 'node_allocation_decision'?
Candidate: i think we need a test for the parent field that it ends in a problem in the parent in the parent in the parent in the parent field and
Reference: seems like a nit, but i think we don't accept extra whitespace in this setting (we just use `string#split` to parse it) so i don't think we should include it
Candidate: i think it will be a to indicate a test where the cluster is actually ran in the cluster parameters.the
Reference: bit weird that we treat all-whitespace as empty but otherwise we're whitespace-sensitive. (acking that this is how it was before too, no action required)
Candidate: ```suggestion                             
Reference: maybe rename this test suite to `datatierallocationdeciderit` since `datatier` isn't in this package any more.
Candidate: i believe `datatierit` needs to be moved under `internalclustertest` if/else and adapted accordinly
Reference: i think this has to be an `illegalargumentexception` so maybe we can catch that instead?
Candidate: see my see see this is see see see see see see see see see see see see see see see see see see see see see see see see
Reference: can we add a test that we can build an `indexmetadata` object based on a settings object with an illegal `_tier_preference`?
Candidate: see my see see this is see see see see see see see see see see see see see see see see see see see see see see see see
Reference: can we add a simple test that `gettierpreference` delivers the right output?
Candidate: i don't think we can make sure that we should make the two lines of the process. we should make sure if we should be.perhaps:```suggestion     
Reference: minor wording change:```suggestion    public boolean allowscustomrouting() {```
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: again, i'll have to dig into this further, but isn't this code executed for indices and not just data streams so `template.getdatastreamtemplate()` might be null?
Candidate: i think we assert on the message, then we like```boolean timestampmapperexists = tempindexservice.mapperservice().ismetadatafield("_timestamp");```and instead of index then we have an on this.
Reference: what situation is this comparison of the string version of the mapping supposed to handle?
Candidate: i think we should be an error that we should be `version.current` that instead?
Reference: would it be clearer to move `isfinite` "up"? like into the field mapper or into the config or something? or just into the ternary above?
Candidate: i don't think we should be the to handle the
Reference: this returns `request_timeout` even if we didn't time out?
Candidate: i don't think we need to have a test for the test in that it is
Reference: it's best for messages like this to be actionable: say that users should set the `es.cluster_health.request_timeout_408` system property to opt in to the new behaviour.also if they _have_ opted in
Candidate: i don't think we need to have a test for the test in that it is
Reference: this is always `false` isn't it? (in `master` at least)
Candidate: i don't think we need to have a test for the test in that it is
Reference: best not to parse the property each time, instead we should have a static constructor which reads it into a static field. moreover we should reject any value except `true`
Candidate: i don't think we need to have a test for the test in that it is
Reference: if the user requested v7 compatibility and we timed out then we should keep the old behaviour. that would mean there's no need to skip any tests in v7-compatible mode.
Candidate: i don't think we need to have a test for the test in that it is
Reference: breaking off the original `indicesandaliasesresolver.resolve` method in order to avoid `authorizedindicessupplier.getasync` makes sense.two minor quibbles:* can we integrate the `request instanceof indicesrequest` inside the `indicesandaliasesresolver.requireswildcardexpansion` check method. i think it
Candidate: remove
Reference: this line is the real change of this method. all others are format changes due to removal of the outer block of `authorizedindicessupplier.getasync`.
Candidate: ```suggestion                             
Reference: i wonder if this needs to be```suggestion                final resolvedindices resolvedindices = indicesandaliasesresolver.tryresolvewithoutwildcards(action, request);```it's not obvious
Candidate: remove the
Reference: i think this change is too aggressive. it means that every non-replaceable request _must_ go through `resolveindicesandaliaseswithoutwildcards`, but i don't know why we want to enforce that. can't we just
Candidate: `remove` [empty [empty is [empty `remove` [empty [empty [empty [empty [empty is [empty [empty [empty is [empty [empty [empty is [empty [empty [empty is [empty [empty [empty is [empty [empty
Reference: @pugnascotia addressing https://github.com/elastic/elasticsearch/pull/78319/files#r723033047 herei think it is fine (other tests log those documents too). we only store the server logs when a test failed. so this will help to debug
Candidate: do we need to check for the test for example, for example, for the test for example, for example, for example, for example, for example, for example, for example, for
Reference: comment is wrong.
Candidate: i think we need to add a method that we shouldn't be nullable.
Reference: could this be replaced with `loadingmodels.addall(loadingtoretry);`?
Candidate: ```suggestion                             
Reference: i wonder if we should special handle the case where the source is empty (no assigned shards) and allow releasing the block then? that should be safe and could shorten
Candidate: afaics this is needed?
Reference: i think it would be clearer to either refer the `clusterstate` to use via an atomic reference or make a specific sub-class with `clusterstate`, `indicestomarkreadonly` and `indicestorelease` fields. as it
Candidate: ```suggestion                             
Reference: i think this means that we no longer have any nodes with duplicate names. i wonder if we need to add a test checking that the monitor survives duplicate names
Candidate: ```suggestion                             
Reference: looks like reverting 56e525f4f9a986c3a834f52a88b230b2fc4a982e is missing.
Candidate: can we add a comment explaining why we don't we need to share this.
Reference: if we are having version-specific source sets, do we still need to capture the version here in the file path as well. as it is now we have files like
Candidate: i think we should needed for the task, that we aren't the kinds of reasons here.
Reference: these duplicate fails are not actually needed for this pr, but i realized while adding the custom duplicate check to the compat testing task, it would be good to add
Candidate: i don't think we need to have a delegating analyzer on the the fields. we don't need to have any fields!
Reference: example of failure:```* what went wrong:execution failed for task ':rest-api-spec:yamlresttestv7compattest'.> found duplicated test(s) [search/30_limits.yml] please ensure there not any duplicate yaml test files between the [7.x] branch and the [yamlresttestv7compat]
Candidate: i think we should needed for the task, that we aren't the kinds of reasons here.
Reference: i think we can still initialize this source set name statically.
Candidate: i think we should needed for the task, that we aren't the kinds of reasons here.
Reference: when is null possible? shouldn’t it always have a feature object since unknown should fallback to custom?
Candidate: can we add an issue for this test on the constructors that it is enabled. which is an atomicreference we don't have an issue for the user?
Reference: another test we should keep but separate.
Candidate: can we add a test for the test to add a test for `indices_permissions_key` as well?
Reference: maybe it'd be helpful to make a```public static final fieldcapabilities simple(string name, string type, boolean searchable, boolean aggregable) {  return new fieldcapabilities(field, type, false, searchable, aggregable, false, null, null,
Candidate: maybe we more more than using `scaledrandomint`?
Reference: i think we can still improve this message. it's not clear to me whether it means - something went wrong with authentication- there is no anonymous user configured- there is
Candidate: ```suggestion                             
Reference: 👍
Candidate: ```suggestion                             
Reference: add `fieldname` back.
Candidate: why is this shim fixed, as well?
Reference: does this stay in sync with `scriptdocvalues` `setnextdocid(docid)`?  is there any chance the two could step on each other?
Candidate: i doesn't establish
Reference: ```suggestion        response response = adminclient().performrequest(new request("post", "/_features/_reset"));```maybe this doesn't matter while the test is running with security disabled.  but if we switch
Candidate: ```suggestion          ioutils.close(client);```this                   
Reference: this new test looks good to me, i.e. it can fail without the latest update for a similar scenario as described in [previous discussion](https://github.com/elastic/elasticsearch/pull/78508#discussion_r720953661). thanks!
Candidate: ```suggestion                             
Reference: i wonder if we should do some version checks here, since we're not relying on file contents being equal as we do in the regular path.
Candidate: nit: you also add a comment here?
Reference: i wonder if we should only allow this case when `sourcetargetdiff.identical.isempty()`? the primary case we are after here is relocations, which will be to a node that does not have
Candidate: nit: you also add a comment here?
Reference: let us add a comment here that we check against source version and why it is ok (the allocation decider).also, i think we can do following instead:```suggestion   
Candidate: nit: you also add a comment here
Reference: i think we need to add this in a few other places like `store.trimunsafecommits` and `storerecovery.addindices`?can we perhaps add an assertion about the previous version being before or on current
Candidate: should we also also also also also include the na to also include the to check for the
Reference: i wonder if this would not even work without the `deleterecoveredfiles` flag?it seems logical that if the target receives a new file info, it should clean up any temp files
Candidate: i we add a comment here for peer recovery than two inconsistencies instead of                
Reference: in the (albeit edge) case that this runs on an older version than the replica and the snapshot is taken on the newer version, this no longer allows file-comparison based
Candidate: ```suggestion                             
Reference: i think this is questionable. if we trim the commit, we store it by the new es version, which could be on a newer lucene version as well. with this,
Candidate: do we need to be outside of the
Reference: can we add an assert about this too?```suggestion            assert version.v_7_16_0.luceneversion.onorafter(snapshot.getcommitluceneversion());         
Candidate: ```suggestion                             
Reference: can we add a comment that this runs on the primary, but using it's version is fine, since `nodeversionallocationdecider` ensures we only recover to a node that has newer or
Candidate: ```suggestion                             
Reference: i am not sure i follow this. the allocation deciders will not allow allocating replicas to an older node. but i think this is about the primary, do we risk
Candidate: nit: we need to avoid the the
Reference: this seems a little backward, as if we validate the test more than the recovery. i wonder if we could instead capture the files from primary right after snapshot and
Candidate: ```suggestion                             
Reference: let us add a comment here that this relies on previous minor having another lucene version (which it does now, but that could be reverted or updated in a previous
Candidate: ```suggestion                             
Reference: can we assert that `retryingusingfallbackplan.get(), is(true)`?
Candidate: ```suggestion                             
Reference: it would be nice to verify that we get here exactly, once without snapshotfilerecoveryfailed and once with (the latter is verified already).
Candidate: ```suggestion                             
Reference: i am not sure i understand the name here, at least the `cleansnapshotfiles` is not not clear. perhaps remove that part of the name?
Candidate: ```suggestion                             
Reference: did you intend to add a replica in this test for the `seqnorecovery` case? running the test failed for me when looking up the replica shard further down.
Candidate: ```suggestion                             
Reference: i wonder if we should check that the version does not go backwards explicitly here. i wonder if someone might be able to apply the command from an earlier version
Candidate: ```suggestion                             
Reference: meta, no changes needed: "...a sign that the admin is opting for a behavior with an explicit configuration..".
Candidate: can we use a test for the check here.
Reference: as we've discussed, let's try to decouple enrollment mode from the security auto-configuration. it is probably a perfectly valid use case for someone to want the node auto-configured for security
Candidate: can we use a test for the check here.
Reference: this is the part that tripped me yesterday in the discussion. i get it now but i wonder if we have a more descriptive way to put this down in
Candidate: can we use a test for the check here.
Reference: i don' think we need this as a san. it should be sufficient for this to be the subject of the http ca certifiate
Candidate: i don't think we should be a test for the timestamp here?
Reference: can't comment on the actual line but the subject for the httpcacert should be `cn=auto_config_alt_cn` and not the one derived from the hostname of the node we happened to generate
Candidate: i think we need to the comments for the cache?
Reference: nit: it wouldn't hurt if this pem file is world readable. in a given system, it might not be the case that all integrations/clients run as the same user that
Candidate: i think we need to the comments for the cache?
Reference: the `hostname ` env var might not always be there in linux ( i think, i've never seen it happen ) but it won't be there in windows for sure.
Candidate: i think we need to the comments for the cache?
Reference: changes are superseded by https://github.com/elastic/elasticsearch/pull/77632
Candidate: nit: `integer.tostring` conversion `integer.tostring` instead of relying on that, on the conversion
Reference: nit: maybe assert same story for the `elasticsearch.keystore` file.
Candidate: ```suggestion                             
Reference: another small test suggestion is to assert the config dir contents after es had started, similar to how the contents are asserted before the start.
Candidate: nit - i'd use a static import personally. `matchers`, personally.
Reference: i was trying to force an exception in the try block from above, and the easiest way that i could think of was to mess with the with the classpath.this
Candidate: i think we need to add a comments for the cache?
Reference: i know i coded this, but i now have second thoughts.(reverse) dns for all the ips on all network interfaces has the potential to seriously slow down node start-up.moreover, including
Candidate: i think we need to add a comments for the cache?
Reference: do we need to invoke `serverutils.enablesecurityfeatures(installation)` and `serverutils.disablesecurityautoconfiguration(installation)`  here?i think the `certgenclitests` should work irrespective if the node has been started (or still running), and if it has, whether
Candidate: i think we need to add a test for `indices_permissions_key` as well?
Reference: nit: the copying of the http ca cert from the installation in order to make the call is a recurring pattern. maybe move it inside the `waitforelasticsearch` function.
Candidate: ```suggestion                             
Reference: i don't see why we need to pass the cert here. can't we just provide an overloaded version of `waitforelasticsearch` that does this for us? it seems we already check
Candidate: ```suggestion                             
Reference: i'm wondering if it might make sense to add some of these `serverutils` methods to `packagingtestcase` that way we have a reference to the installation already and came make this
Candidate: i'm not sure why we need to fork a test for this?
Reference: i find "not readable" to be a bit ambiguous. can we be more specific and say something like "because the current user does not have permissions to read configuration file
Candidate: i don't think we need to move this into a test for the cache?
Reference: can we add some comments here explaining each scenario we're testing. when i read these test case, it's not clear to me _why_ auto config shouldn't be running in each
Candidate: i'd use a static import personally. `matchers`, personally.
Reference: shouldn't we do this in `withcustomconfig` so folks don't have to worry about this everything they use that method?
Candidate: i'd use a static import of `matchers`, personally.
Reference: are  users required to do this? shouldn't auto-configuration be disabled automatically if folks provide a password via this means?
Candidate: ```suggestion                             
Reference: given this lives in `archives` i guess this means we're never verifying these assertions for docker installations? should we be?
Candidate: can we add a comment for `indices_permissions_key` as well?
Reference: this is a pretty pointless benchmark now isn't it? we don't really run anything like this code in the real world anymore and the stream -> flatmap -> filter step
Candidate: can you add a comment explaining why in the biggest
Reference: if we have to do `.spliterator()` twice, maybe we should just use two normal for-each loops nested? :)looking at the rest of the code in this class it might not
Candidate: ```suggestion                             
Reference: i find 9999 a bit high, perhaps just 100?
Candidate: ```suggestion                             
Reference: i think i would find it more intuitive to locate this inside `lagdetector`, letting it have access to `transportservice` and `client` to allow it to handle the logging on its
Candidate: ```suggestion                             
Reference: nit: use `source()` here as well?
Candidate: i'm not sure that this test test test for every test but i think it makes sense to look better to test for every test cluster.    
Reference: i think we could do something even simpler here since the value is constant. we could return a direct implementation of `valuefetcher` that always returns `fullyqualifiedindexname`.
Candidate: ```suggestion                             
Reference: this is just making the unit test code reflect production more accurately.  it wasn't a bug end users would have seen.  same with the tweaks below.
Candidate: ```suggestion                             
Reference: i'd only ask that we include a comment explaining that this is due to oss distro removal.
Candidate: i believe we can to include this test into it?
Reference: i think we should verify that `seqno < processedseqnosupplier.get()`. there is an implicit assumption that the `seqno` was retrieved from the global checkpoint api, but future uses of this may
Candidate: ```suggestion                             
Reference: can we add javadoc here. this is somewhat different from location refresh in that it requires the `seqno` to be before the local processed checkpoint and then ensures that every
Candidate: ```suggestion                             
Reference: let us add javadoc to this.
Candidate: nit: maybe add a comment that we don't reorder the `executor` like we need to make sure if we have a bounds to
Reference: perhaps add:```assert request.getwaitforcheckpoints().length > shardindex;```just to be sure an array index out of bounds is not handled, reported as failed shard and ignored in some tests.
Candidate: is we add a comment that the key is missing, since we is important.
Reference: i am not sure why this todo is here?
Candidate: ```suggestion        xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: perhaps rename `setcurrentprocessedseqnosupplier` to `setcurrentprocessedcheckpointsupplier`?
Candidate: can we add a comment here to the `schedule`
Reference: i think we should include the checkpoint listeners here too? perhaps keep the method named `pendingcount` and add the numbers in it?
Candidate: nit:```suggestion                             
Reference: you could throw a non-assertion error here, that should be passed out as an uncaught exception.
Candidate: i think we should be a comment on the majority of getting on the other words, and i suspect we should make this comments in the majority of the
Reference: this line looks like it belongs somewhat higher up, before calling `executequeryphase`?
Candidate: could you add a strong issue for this.
Reference: nit: also final?
Candidate: is we add a comment that in the searchable is that we is important.
Reference: nit: the names are based on types, i would prefer them to be based on semantics, i.e.:```suggestion        return parserequest(restrequest, namedwriteableregistry, allowexplicitindex, (k, v,
Candidate: i don't think we should be a good to indicate that in the benefits                
Reference: nit:```suggestion        parsemultilinerequest(request, indicesoptions, allowexplicitindex, consumer, (k, v, r) -> false);```
Candidate: i think i'd prefer to avoid this, but i think you can pass the `string` to pass the `string` to pass the `string` to avoid this, but 21 not sure
Reference: ideally, we would move the parsing of the new params out of `restserachaction` just like in `restmultisearchaction`. at a minimum i think we should remove "fleet" from this message.
Candidate: the new value of the
Reference: remove this comment now that we do synchronize?
Candidate: can't we share it to be the same `getbigdecimal`                     
Reference: revert extra space
Candidate: this is this change?
Reference: ```suggestion                        grantedbuilder.merge(concreteindex, granted, boolean::logicalor);```
Candidate: ```suggestion                             
Reference: meta, no changes needed: "...a sign that the admin is opting for a behavior with an explicit configuration..".
Candidate: can we use a test for the check here.
Reference: as we've discussed, let's try to decouple enrollment mode from the security auto-configuration. it is probably a perfectly valid use case for someone to want the node auto-configured for security
Candidate: can we use a test for the check here.
Reference: this is the part that tripped me yesterday in the discussion. i get it now but i wonder if we have a more descriptive way to put this down in
Candidate: can we use a test for the check here.
Reference: i don' think we need this as a san. it should be sufficient for this to be the subject of the http ca certifiate
Candidate: i don't think we should be a test for the timestamp here?
Reference: can't comment on the actual line but the subject for the httpcacert should be `cn=auto_config_alt_cn` and not the one derived from the hostname of the node we happened to generate
Candidate: i think we need to the comments for the cache?
Reference: nit: it wouldn't hurt if this pem file is world readable. in a given system, it might not be the case that all integrations/clients run as the same user that
Candidate: i think we need to the comments for the cache?
Reference: the `hostname ` env var might not always be there in linux ( i think, i've never seen it happen ) but it won't be there in windows for sure.
Candidate: i think we need to the comments for the cache?
Reference: changes are superseded by https://github.com/elastic/elasticsearch/pull/77632
Candidate: nit: `integer.tostring` conversion `integer.tostring` instead of relying on that, on the conversion
Reference: nit: maybe assert same story for the `elasticsearch.keystore` file.
Candidate: ```suggestion                             
Reference: another small test suggestion is to assert the config dir contents after es had started, similar to how the contents are asserted before the start.
Candidate: nit - i'd use a static import personally. `matchers`, personally.
Reference: i was trying to force an exception in the try block from above, and the easiest way that i could think of was to mess with the with the classpath.this
Candidate: i think we need to add a comments for the cache?
Reference: i know i coded this, but i now have second thoughts.(reverse) dns for all the ips on all network interfaces has the potential to seriously slow down node start-up.moreover, including
Candidate: i think we need to add a comments for the cache?
Reference: do we need to invoke `serverutils.enablesecurityfeatures(installation)` and `serverutils.disablesecurityautoconfiguration(installation)`  here?i think the `certgenclitests` should work irrespective if the node has been started (or still running), and if it has, whether
Candidate: i think we need to add a test for `indices_permissions_key` as well?
Reference: nit: the copying of the http ca cert from the installation in order to make the call is a recurring pattern. maybe move it inside the `waitforelasticsearch` function.
Candidate: ```suggestion                             
Reference: i don't see why we need to pass the cert here. can't we just provide an overloaded version of `waitforelasticsearch` that does this for us? it seems we already check
Candidate: ```suggestion                             
Reference: i'm wondering if it might make sense to add some of these `serverutils` methods to `packagingtestcase` that way we have a reference to the installation already and came make this
Candidate: i'm not sure why we need to fork a test for this?
Reference: i find "not readable" to be a bit ambiguous. can we be more specific and say something like "because the current user does not have permissions to read configuration file
Candidate: i don't think we need to move this into a test for the cache?
Reference: can we add some comments here explaining each scenario we're testing. when i read these test case, it's not clear to me _why_ auto config shouldn't be running in each
Candidate: i'd use a static import personally. `matchers`, personally.
Reference: shouldn't we do this in `withcustomconfig` so folks don't have to worry about this everything they use that method?
Candidate: i'd use a static import of `matchers`, personally.
Reference: are  users required to do this? shouldn't auto-configuration be disabled automatically if folks provide a password via this means?
Candidate: ```suggestion                             
Reference: given this lives in `archives` i guess this means we're never verifying these assertions for docker installations? should we be?
Candidate: can we add a comment for `indices_permissions_key` as well?
Reference: only raising exceptions with a specific type (`elasticsearchauthenticationprocessingerror`) and while invoking the request processing error handler (and not any other handler), results in 500 or 503; anything else goes to
Candidate: ```suggestion                             
Reference: nit: add something in the class javadoc ( that currentl references only 401s)
Candidate: ```suggestion                             
Reference: we check for `userinfo != null` in line 120 so we can remove this from here and make it sliiiiiightly simpler
Candidate: can we add a `#verifypassword` as `userandpassword`.
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: why we don't we need to use the
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: i don't think we need to have a test to make sure that we need to have a test to the write data streams and that we don't have to
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: same as we we have a
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: :+1:
Reference: a [prototype](https://github.com/elastic/elasticsearch/compare/master...henningandersen:fix_autoscaling_proactive_replicas?expand=1) for a fix has been made, but since the original version already triggers at low watermark, adding it will mostly be a refinement. i will follow up on
Candidate: ```suggestion                             
Reference: instead of using an enum, how about an int flags? 0 == none, 1 == fls, 2 == dls, 3 == both, so you can just check the bit.
Candidate: ```suggestion                             
Reference: if we're not going to track then we don't need a `supplier` anymore do we? that was only so that we could defer checking (and tracking) until we were sure
Candidate: i'm not a fan of this change a a a of a a of a a of a a of a a of a a of a a of a
Reference: should this include tracking? i know we discussed only tracking in the interceptor, but it seems like we're better off tracking every time we know (for certain) that a feature
Candidate: ```suggestion                             
Reference: per my earlier comment, i think we can drop the `supplier` if we're not tracking.
Candidate: this will be a
Reference: as above.
Candidate: assert the purpose of an assert, but assert trips to track feature, which is trips to track feature, which trips trips for the enrich policies which trips trips trips trips
Reference: why does a `null` role get treated as using dls/fls ? that seems wrong.
Candidate: ```suggestion                             
Reference: this can contain a `/` .
Candidate: ```suggestion                             
Reference: i think `ensureyellow` is unnecessary, since create will wait for one active shard?
Candidate: ```suggestion                             
Reference: since this test sets a tier preference itself when creating the index, i do not understand why it matters whether this is true or false?i would think we can remove
Candidate: ```suggestion                             
Reference: can we randomly pick between this and setting:``` .put(indexmetadata.index_routing_require_group_prefix + ".box", "warm")```no problem if this is problematic, i do think we cover this somewhat with the unit tests.
Candidate: ```suggestion                             
Reference: another test we should keep but separate.
Candidate: can we add a test for the test to add a test for `indices_permissions_key` as well?
Reference: i wonder if we could add `isautogeneratedid` to `indexrequest` and let it be:```    return id() == null || autogeneratedtimestamp != unset_auto_generated_timestamp;```that would decouple the invocation ordering constraints
Candidate: i change for the change here:previously, but i change to change here:previously,
Reference: nit: i wonder if we can move this to the docwriterequest with sub-class implementations instead? would simplify the code here a bit. would need to accept the `indexrouting` object as
Candidate: i change for the change here:previously, but i change to change here:previously,
Reference: can we just do: `new shardid(concreateindex, shardid)`?
Candidate: i change for the change here:previously, but i change to change here:previously,
Reference: since we now parse the source, we should move the bulk action off the transport thread when tsdb indices are addressed. see `doexecute` above where we already do so for
Candidate: i change for the change here:previously, but i change to change here:previously,
Reference: i think you mean 7.16.0 here?
Candidate: i think we should add a test for `indices_permissions_key`
Reference: aggs question: are we sure of the order of the returned values in the values list here?
Candidate: i think we should add a test for `indices_permissions_key`
Reference: this had to change because we started to always fork and the actual change was mostly @tbrooks8's idea. we can't use the replica as the coordinating node because the test
Candidate: ```suggestion                             
Reference: when we fork we can get a `rejectedexecutionexception` here.
Candidate: should you add a comment here for this.
Reference: perhaps mention the two known reasons for this to be expensive too: tsdb parse routing from source and compression for outgoing requests?
Candidate: can bulkrequest implement accountable as well?
Reference: i think `clusterstateobserver` uses generic thread pool for timeout. no need to change the code, but perhaps update the comment.
Candidate: is this needed?
Reference: i don't understand why this won't be a problem on a 64 bit machine - can you elaborate?
Candidate: can you add a test to the directory
Reference: this test is failing in ci - i had a look and i didn't see these options being applied.i'd probably refine this assertion, to first find the elasticsearch invocation, then
Candidate: this does not spark spark of `matchers`, personally.
Reference: why would this test only work with systemd?
Candidate: this does not spark spark of `matchers`, personally.
Reference: i like the idea of having two different memory info types here rather than always wrapping the default.
Candidate: ```suggestion                             
Reference: the generic `tostring` include the hashcode of the object. is that really an useful information to include? it is not stable. i'd think the class name is sufficient and easier
Candidate: do we need to wrap in this parsing impl.then we have a for impl.then impl.then we have a for impl.then impl.then we have a for impl.then impl.then we have a
Reference: i wouldn't worry about setting the size since it will need some larger number of empty entries internally anyways.
Candidate: do we need to wrap in this parsing impl.then we have a for impl.then impl.then we have a for impl.then impl.then we have a for impl.then impl.then we have a
Reference: this "context" doesn't seem very clear to me.what exactly is it trying to say?
Candidate: do we have a comment that we have a method to have it.
Reference: should this be `debug`?
Candidate: it seems to me that we have a javadocs for the stored and the mutex?
Reference: this code is a bit confusing - in the `internal` case we don't set the header, and rely on a special case in `check`.- in the `run-as` case we don't
Candidate: i think it might be nice to rework the fact letting the cat cat `scaledrandomint`?
Reference: i don't think this is quite right yet. maybe ```suggestion            message = message + " and requires operator privileges";```
Candidate: this change
Reference: i don't hate what you've ended up with, but i think you could have achieved what you want by setting context to```"because it requires operator privileges"```
Candidate: i think we can remove this comment to
Reference: for a `trace`, i was thinking in would be inside the `anymatch`predicate.
Candidate: i think it'd be better to the the opaque_id=[" and asyncsearchactionit asyncsearchactionit asyncsearchactionit instead.
Reference: ```suggestion            if (authentication.getuser().isrunas() == false && fileoperatorusersstore.isoperatoruser(authentication)) {```
Candidate: i think it might be nice to rework the cat cat `scaledrandomint`?
Reference: we can make this stricter to require the groups to have only one member, which is the case for superuser role and the api keys created by it.
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: my suggestion from the other comments is to push the fast-path one level down in the `role.authorize` call, for slight reasons of interface clarity, but i also prefer it because
Candidate: ```suggestion                             
Reference: we seem to have 3 different (overlapping) methods for deciding whether an `indicesaccesscontrol` object is the allow all object. 1. `instanceof allowallindicesaccesscontrol`2. `== allowallindicesaccesscontrol.allow_all_indices_access_control`3. `isallowall()` (implemented via method 2)can we
Candidate: ```suggestion                             
Reference: i like how gh throws in a `main` source code change in between test ones, to keep us on our toes about tests.
Candidate: remove the
Reference: we could extend `mapperbuildercontext` with indexname, but the pr itself would be fairly big (it would be good that all usages of the mapperbuildercontext have index). maybe we could limit
Candidate: ```suggestion                             
Reference: we don't need the `searcher.rewrite()` here, i think?
Candidate: i don't think we need to include the logic here when we don't want to get rid of the data streams when we don't want to get a default to
Reference: i think we can actually remove this abstract method now? it's only called directly in `searchservice#createcontext()`, and it's called explicitly on a `defaultsearchcontext` so it can just live there and
Candidate: i think we could remove these package thoughts:                      
Reference: enrich processors run without timeouts. i think this makes sense. now that we queue the requests, we rely on the queue being full to communicate backpressure. there is no benefit
Candidate: related to avoid adding the duplication?
Reference: i think additionally to this we need to think of how users can `ack` an allocation failure and request that the allocation restarts on that node. or all nodes where
Candidate: i don't think we need to add a logic here given that it doesn't accept differently, or something.
Reference: does this also need to be changed in the method immediately below this one?
Candidate: i think it would be better to be a string here rather than in the old method.
Reference: ```suggestion                parameterizedmessage.format("this node is full. number of opened jobs and allocated native inference processes [{}],
Candidate: ```suggestion                             
Reference: if we fail to acquire permits then we should log a warning, indicating that the user should reduce `cluster.routing.allocation.node_concurrent_recoveries` to be at most `indices.recovery.max_concurrent_snapshot_file_downloads / indices.recovery.max_concurrent_snapshot_file_downloads_per_node`.relatedly it doesn't make sense
Candidate: do we want to make sure if we do we want to do this to do to do we want to do to do to do to do this to
Reference: can we release the permit once we're done downloading snapshot files rather than waiting until the end of the whole recovery?
Candidate: ```suggestion                             
Reference: the limit is only an upper bound, you could have fewer concurrent recoveries, but also i'd suggest just saying the number rather than naming the settings since otherwise folk will
Candidate: i think we should rename this to avoid the throttlingconsumer.
Reference: interestingly i did not have to do this in master - i did not see mixed-cluster rolling-upgrade test failures.without this change - the rolling-upgrade were failing because when node upgraded
Candidate: i don't think we should add a test for both, rather than `emptymap()`.
Reference: this is really worrying, but i gave up for now. the windows was resulting with error ```unexpected exit code (expected 0, got 1) for script: c:\tmp\elasticsearch\bin\elasticsearch-service.bat stop```i am pretty sure
Candidate: on on on on on on on on on on on on on on on on on on on on on on on on on on on on on on
Reference: isn't the default value of this setting always true now? i.e. this assertion isn't useful any more?
Candidate: i don't think we need to need to need to need to need to need to need to need to need to we don't need to need to need to
Reference: why do we need this now?
Candidate: ```suggestion                             
Reference: handy static constant for this:```suggestion            listener.onresponse(new clusterhealthresponse("", strings.empty_array, clusterstate.empty_state, false));```
Candidate: ```suggestion                             
Reference: nice
Candidate: again is an very again so that is do. an very static very `false`?
Reference: @benwtrent looks like you had a leak that i didn't catch. i'm quite thankful for leak detecting test cases.
Candidate: the searcher ;)
Reference: the comment suggests that this shouldn't be `null`.
Candidate: i don't quite bwc undocumented test that takes 2x 5s specified. specified. this test will fail on the new translog?
Reference: `tuple<predicate<snapshotinfo>, bipredicate<snapshotid, repositorydata>>` is getting a bit convoluted, really it's just the following but without the names or anywhere to hang docs:```interface somename {  boolean method1(snapshotinfo snapshotinfo);  boolean
Candidate: can you change a test for the change to change to change here:previously, right?
Reference: could you move this directly into `getleafcollector` above? just the first line or something? that way folks that override this don't have to remember to call `super`.
Candidate: ```suggestion                             
Reference: two things jump out at me here:1. when we're summing doc count or value count we might be better off storing all this in `long` instead of `double`. then we
Candidate: i don't think we could add a test for cat cat histogram to the aggregator rather than `emptymap()`.
Reference: another method seems unnecessary, the only non-test use is in this class, let's just update the few tests using this to pass the level?
Candidate: i don't think it might be nice to remove the string parameter in the mapping?
Reference: we won't ever be talking to a version prior to `7.16.0` so this will always be `true` - you can just remove the `else` branch.
Candidate: i think we need to make this change?
Reference: enabling `thread contention monitoring` on-demand, as we used to do it in hotthreads, is not precise enough to properly calculate the wait/blocked time. if we enable the support on demand,
Candidate: i think it would be nice
Reference: we pass in the supplied testing interval to hotthreads to be able to calculate the 'other' time, by subtracting the cpu, wait and blocked timings.
Candidate: i don't think we need to add a comment here that we are not planning to expose the biggest
Reference: we remove the privileged call to enable contention monitoring and replace it by simply checking if it's enabled. bootstrap sets it by default on now.
Candidate: ```suggestion                             
Reference: these changes look bigger than they are, i simply removed the try/finally blocked since we don't need to disable thread contention monitoring at the end of the hotthreads innerdetect call
Candidate: painless be a wrapping that fail that we fail implies we can be fail that fail on how that we fail that we fail that fail that fail in a
Reference: when we sort by the 'total' runnable time, we first sort by the total time and then internally sort those at 100% by cpu.
Candidate: painless be a wrapping that fail that we fail implies we can be fail that fail on how that we fail that we fail that fail that fail in a
Reference: this code below is unchanged.
Candidate: painless be a wrapping that fail that we fail implies we can be fail that fail on how that we fail that we fail that fail that fail in a
Reference: helper to ensure we correctly match results of wait/blocked timings given we internally convert the input mills to nanoseconds so we can accurately calculate the timings and percentages.
Candidate: 👍
Reference: the changes in this method mainly focus on the updated output showing the separate 'cpu' and 'other' timings, as well as ensuring the orderings of output, since we have two
Candidate: i think we can move the test to the onfailure for the onfailure instead of keeping the test for the onfailure for the onfailure for the onfailure for the onfailure
Reference: can we do this in a static for hot threads still? perhaps a static method could be called in initializeprobes? i think we should strive to keep bootstrap as small
Candidate: i think it would be nice
Reference: if we validate earlier that sortorder is only present for type cpu, then we don't need to the type check on cpu?
Candidate: painless be a wrapping that fail that we fail implies we can be fail that fail on how that we fail that we fail that fail that fail in a
Reference: i had this wrong before, `out.bytes().streaminput()` resets the original version that the out had before, so i had to forcibly set it to the old version to simulate 7.x sending
Candidate: i don't think we need to add a comment here about why we need to be in this change?
Reference: there is a lot going on in this single test method. can some of these cases be split into separate test methods?
Candidate: i think we can move the test to the onfailure for the onfailure instead of keeping the test for the onfailure for the onfailure for the onfailure for the onfailure
Reference: i think `indices` is fine here, though we could also consider `settings`.
Candidate: i think                            
Reference: i wonder if you should bake this into `testenforcedefaulttierpreference` instead. i think that test method will have to deal with deprecation warnings anyway and it sort of tests all the
Candidate: i don't think we need a test for a single test for a single test that doesn't require a passphrase?
Reference: remove?
Candidate: ```suggestion                             
Reference: remove?
Candidate: ```suggestion                             
Reference: do we want to limit here to `10000` or `integer.max_value`?
Candidate: ```suggestion                             
Reference: this should be removed
Candidate: i think the cause in the cause in the cause in the cause in the cause in the cause in the cause in the cause in the cause in the
Reference: it would be nice if this followed the exact same conventions we use for mappings, respecting the `binary` parameter and serializing as bytes for everything but the `api`.
Candidate: i think we need to be a parameter in the `statsresponsetests`.
Reference: probably also not necessary to extend things this way if we just do what we do for mappings and have a special `binary` param path here i think.
Candidate: ```suggestion                             
Reference: a very tiny nitpick: `indexversions=` could be changed to `indexinfos=`.
Candidate: typo: cach -> cache cache cache cache cache cache cache cache cache cache cache cache cache
Reference: all of these critical should be warnings instead
Candidate: extra here
Reference: shouldn't this branch not be an error anymore? the setting is the general one, not per context?
Candidate: extra here
Reference: could we load the digest ahead of time when we first check the file? this way subsequent checks have prevdigest to compare to.
Candidate: ```suggestion                             
Reference: nit: time the future -> time *in* the future?
Candidate: ```suggestion                             
Reference: we have usages for `md5` in other places as well. i am always confused by whether this is fips compliant. but bcfips provides md5 even in approved only mode. i'd
Candidate: ```suggestion                             
Reference: this predicate like method also mutates the `digest` field. would it be better to mutate `digest` in the same place as `length` and `lastmodified` and let this method be pure?
Candidate: ```suggestion                             
Reference: can we switch the names of these?future authors will naturally call `listener`, but that's the wrong one to use.can we have `originallistener` and `listener` (or `originallistener` and `opmarkinglistener` if you
Candidate: i don't think we need to be the in the case where we don't have a followup to
Reference: why add this code here? not at the beginning nor at the end of the code block?
Candidate: should we extract this logic for a valid `if != null && unknownregionsize == false) {              
Reference: why this change if the comment says ".security" or ".security6"? either leave it as is, or do also change the comment, because there is a slight contradiction now.
Candidate: i don't think we should add a test for this test into a test for every template rather than `emptymap()`.
Reference: same question about this operation. why is it specifically needed if one of the base classes should do the cleanup in an `@after` method.
Candidate: can you add a test for the test to simplify to add a test for the test to simplify to add a test for a test for a test for
Reference: just a quick fix here, the bigger fix would be to just not do redundant work if there's duplicate mappings. i'll look into that in a follow-up. this should give
Candidate: can you add a comment explaining why we aren't the
Reference: are we sure that the order here doesn't matter?
Candidate: ```suggestion                             
Reference: same here: i had to relax the condition to `lessthanorequalto` from `equalto`, because the `getsnapshot`  and `snapshotstatus` api calls happen with a delay, so we can't guarantee that `successfulshards`
Candidate: maybe use `.get()`
Reference: ```suggestion        snapshotstatus snapshotstatus = client().admin().cluster().preparesnapshotstatus().get().getsnapshots().get(0);```
Candidate: maybe use `.get()`
Reference: nit: noisy whitespace change
Candidate: maybe use `.get()`
Reference: nit: noisy whitespace change
Candidate: ```suggestion                             
Reference: we have 1 node here, so we have to wait until all snapshots have been migrated except one in the `init` state
Candidate: should you use the log here
Reference: again, we only have a single snapshot here, let's just check for that to begin with. then we can simply loop over all the shard entries and break out if
Candidate: should you use the log here
Reference: actually, turns out this is not correct. sorry for only realizing it now, but we're missing the `missing` state here.i think what you want is to have this be `else
Candidate: ```suggestion                             
Reference: no need for the first part of the message imo, the fact that it's a repository conflict is already in the exception type :)```"trying to modify or unregister repository that
Candidate: can you add a comment here about why the reason about why did we need it?
Reference: @gaobinlong i've removed the bwc layers in `restcleanuprepositoryaction` and `restrestoresnapshotaction` since these endpoints shouldn't throw that exception.
Candidate: can you add a comment here to the preparerequest and the preparerequest and the preparerequest in the preparerequest method.
Reference: we should check if the exception we're getting is a `repositoryconflictexception` and i've added a new field into `repositoryconflictexception` to keep the old message so the behaviour using the v7
Candidate: can you add a comment here to the preparerequest and the preparerequest and the preparerequest in the preparerequest method.
Reference: maybe its best not to mutate something in a method that is named `check`.
Candidate: nit: i think it is a nicer from the type mapper? mapper?
Reference: do you think it'd be worth adding a method named `disablerequestcache` so you don't have to leave this comment?
Candidate: nit: i think it is a nicer from the type mapper? mapper?
Reference: nit: remove this entirely?
Candidate: i don't think we need to add a test for this test for the test :)
Reference: @droberts195 what do you think? just limit to the first 100 tokens? otherwise we could have unbounded category token lengths.
Candidate: can you add a comment for the
Reference: ```suggestion                        "use `elasticsearch-reset-elastic-password` cli tool to reset
Candidate: i think we need to the decide that the decide that the decide that the decide that the decide that the decide that the decide that the decide for the
Reference: i don't love "might". i think we should say "will be" or "is intended to be"
Candidate: why does not need to be the
Reference: see my comment above - not every use of setup-passwords can switch to "elasticsearch-reset-elastic-password" and i worry about confusion.
Candidate: why does not need to be the
Reference: ```suggestion                        "you can use the `elasticsearch-reset-elastic-password` cli
Candidate: i think we need to the decide that the decide that the decide that the decide that the decide that the decide that the decide that the decide for the
Reference: should we have an assertion on the status code (`400`) too?
Candidate: is this needed?
Reference: i don't think the comment helps here.the `license` object doesn't care about http or status codes, so it's a bit weird to have a comment about it.
Candidate: wouldn't you add `exception`?
Reference: for my own understanding: could you explain the circumstances where the `arrays.equals()` check would return `false` but the `equals` call below would return `true`?
Candidate: ```suggestion      uncompressed().equals(that.uncompressed());```also                      uncompressed().equals(that.uncompressed());```also looking
Reference: i'd prefer we cleared the buffer after use (and asserted that it's clear when acquired) - holding onto random junk until the next usage seems like it'll cause a surprise.
Candidate: same here
Reference: ```suggestion                    transformdeprecations.upgrade_transform_url,```
Candidate: can we add a comment here and rely on the localhost?
Reference: ```suggestion                        transformdeprecations.upgrade_transform_url,```
Candidate: can you add a comment for the type type to be public.
Reference: why the change here?
Candidate: can you add a comment here :)
Reference: why here rather than on line 605 and 607?
Candidate: i think we need this to be an
Reference: why the change here?
Candidate: i doesn't establish
Reference: is this condition ever false when running properly? we're running this from `createcomponents`, but i think `licensestate` represents the cluster state that's exposed by the `clusterservice` so the state isn't
Candidate: i don't think we is ok to stop the test for the data as that we don't have the stack trace to `warn`?
Reference: `bucketord` is lost in serialization. it's a transient part of building the bucket and not really part of the identity.
Candidate: ```suggestion         uncompressed().equals(that.uncompressed());```also                    
Reference: two things going on here:1. `doccounterror` is converted into `-1` by the serialization process if `showdoccounterror` is `false`. i looked into making it consistent but that seemed more complex than
Candidate: i don't think it is be easier to be the comments for each chunk mapper calls.
Reference: sometimes it's null but we never handled that in equals/hashcode
Candidate: i don't think we need to be part of comparing that this is doing?
Reference: may as well use a proper doc value format now that i've made it work with tests. you'll see this in a bunch of places.
Candidate: i don't think we need to work here since we don't understand why we need to expose the usage of comparing it work in the usage of readhistoryoperations ?
Reference: this error message was useless.
Candidate: this change is completely true.
Reference: having a generic with type arguments in an error message reads a little strangely```suggestion                
Candidate: ```suggestion                             
Reference: ```suggestion                    listener.onfailure(new illegalstateexception("cannot find user authenticationresult on thread context"));```
Candidate: i don't see authentication need to be a object? authentication object? authentication object?
Reference: ```suggestion                markasfailed(buildtask, transformtooolderror);            
Candidate: ```suggestion                             
Reference: @rjernst i made these public for testing purposes, i need to check if tracking is enabled/disabled for inference in a different package.
Candidate: ```suggestion                             
Reference: for `indexmetadata` this is fine, but we should be careful reusing this approach for other blobs potentially that could grow quite large. since gets are so cheap it might be
Candidate: do we need this need to throw an error instead?
Reference: we could read the compressed bytes onto heap instead of decompressing to heap here, but as with the other point if this is just for index metadata for now it
Candidate: do we need this need to throw an error instead?
Reference: why the public use of this getter? why not use the same approach as for parserparams? that is create the list during the method call since it's just needed inside
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: the information here is redundant and this optimizations has too many repercutions in the method signatures.either the ? is remembered through a separate set or the information is embedded inside
Candidate: this will be fetched before?
Reference: this looks like leaked concern - better to make the attribute foldable which maps nicely to the concept of replacing it with null.
Candidate: ```suggestion                             
Reference: better yet, just check if the datatype is not null
Candidate: i don't think we need to share a wildcard in the the constructor. for the other words, since we should share a way of supplying the
Reference: could you explain these? i imagine they are useful but i don't know why right now.
Candidate: ```suggestion                             
Reference: is this change unrelated to the timezone issue?
Candidate: i suppose locale suppose the purpose compared to get rid of utc? compared to jodadateformatter               
Reference: i think a `recycler` is essentially a `supplier` of `recycler.v` objects, so would it not be more intuitive to use `recycler` here?
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: while developing this, i found a bug in `knnvectorquery` where the query can crash if the index reader has no live docs: https://github.com/apache/lucene/pull/413. this is why i set the number
Candidate: can you add a comment about why we need a test for the here?
Reference: nice descriptions in tests!
Candidate: can you add a comment about why we need a test for the here?
Reference: why can't this be an exact equals check, e.g. `asserttrue(response.gethits().gettotalhits().value == 10l);`? also could you please help me understand why we are using a `size` (5) that is less than
Candidate: can you add a comment about why we need a test for the here?
Reference: similarly, why cannot it be an "equals" check? also nit: `assertthat(response.gethits().gettotalhits().value, greaterthan(10l))` will generate a better error message in case of ci failure.
Candidate: can you add a comment about why we need a test for the here?
Reference: i think we can assert that the response contains the `vector` field as well.
Candidate: ```suggestion                             
Reference: maybe we could also move the creation of this service and the service into the x-pack module as a follow-up? no need to do it now.
Candidate: ```suggestion                             
Reference: we shouldn't be modifying resource files
Candidate: instead of `malformedtokenexception` to be the
Reference: these suppress forbiddens are too broad. i see there are other ones in this file too. please isolate the call that is forbidden in its own method so other forbidden
Candidate: i wonder if we should add a test for this.
Reference: nit: please use `== false` or `false ==`, but not both in the same line
Candidate: not sure that we need to be in the error message is not in the other places.
Reference: the two files in question don't have to be the "real" es config right? since they are copies they could quickly get out of date. it seems like this test
Candidate: ```suggestion                             
Reference: in cases of a failure: when this is implicit auto-configuration we throw a userexception with null message so that this doesn't translate to an ```error: xxxxxxxxxxxxxxxxxxxxx```message for the user, and
Candidate: ```suggestion                             
Reference: if we're in enrollment mode ( --enrollment-token is passed ), we use the enrollment token to get the information we need to call out to the existing node and get
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: the first  checks ( security_autoconfiguration_enabled set to false, security already explicitly configured, tls already explicitly configured, node expicitly configured to be the first node or part of a cluster
Candidate: can we use a test for the test rather than in the test rather than the that we're a utility in that we're a few places.
Reference: i think we need to have some sort of logging of what field(s) were missing. otherwise no one will ever be able to debug this.
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: why are we using self-signed certs? we've never used self-signed certs anywhere else before.
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: ```suggestion        // skip security auto configuration when security is already configured.```
Candidate: can we use a test for the test rather than in the test rather than the that we're a utility in that we're a few places.
Reference: can we simplify this to `ensuregreen("restored-*")`?
Candidate: can we we use a comment that we don't get a comment that we don't to show for the cluster state for prewarming,
Reference: https://github.com/pingidentity/ldapsdk/issues/118
Candidate: i you're check: you're additional check: you're additional additional though they include the additional though they include the additional though they include the additional handler` is always include the additional
Reference: this change doesn't always solve the issue correctly.given the current behaviour of `roundrobinserverset`, i think i need to re-write this part of the test entirely.
Candidate: i you're check: you're additional check: you're additional additional though they include the additional though they include the additional though they include the additional handler` is always include the additional
Reference: nit: ```suggestion            pool.setconnectionpoolname("ldap-pool-" + config.identifier());```
Candidate: ```suggestion                             
Reference: 👍
Candidate: ```suggestion                             
Reference: i guess that metrics indices should be `metrics-*` like the others, right?
Candidate: can we add a comment for `indices_permissions_key` as well?
Reference: we shouldn't be modifying resource files
Candidate: instead of `malformedtokenexception` to be the
Reference: these suppress forbiddens are too broad. i see there are other ones in this file too. please isolate the call that is forbidden in its own method so other forbidden
Candidate: i wonder if we should add a test for this.
Reference: nit: please use `== false` or `false ==`, but not both in the same line
Candidate: not sure that we need to be in the error message is not in the other places.
Reference: the two files in question don't have to be the "real" es config right? since they are copies they could quickly get out of date. it seems like this test
Candidate: ```suggestion                             
Reference: in cases of a failure: when this is implicit auto-configuration we throw a userexception with null message so that this doesn't translate to an ```error: xxxxxxxxxxxxxxxxxxxxx```message for the user, and
Candidate: ```suggestion                             
Reference: if we're in enrollment mode ( --enrollment-token is passed ), we use the enrollment token to get the information we need to call out to the existing node and get
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: the first  checks ( security_autoconfiguration_enabled set to false, security already explicitly configured, tls already explicitly configured, node expicitly configured to be the first node or part of a cluster
Candidate: can we use a test for the test rather than in the test rather than the that we're a utility in that we're a few places.
Reference: i think we need to have some sort of logging of what field(s) were missing. otherwise no one will ever be able to debug this.
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: why are we using self-signed certs? we've never used self-signed certs anywhere else before.
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: ```suggestion        // skip security auto configuration when security is already configured.```
Candidate: can we use a test for the test rather than in the test rather than the that we're a utility in that we're a few places.
Reference: why do we remove all of the keystore if we're only removing the auto-configuration stanza from the yml?that seems very inconsistent.
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: ```suggestion            terminal.println("this operation will overwrite the existing configuration.  specifically: ");```
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: i know this is intentionally a destructive tool, but this seems a bit too much.it doesn't look like we take any steps to ensure that this was an auto-configured node.for
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: i think this error message is misleading, since we're not actually backing up their configuration, we're trying to restore it to our best guess of what it looked like before
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: this changes because the first thing that we hit now is `autoconfigurenode#getsubjectaltnames`
Candidate: i don't think we need to add a comment for `indices_permissions_key` as well?
Reference: side comment since it's existing code & not really specific to this pr - should we be using node.name instead of hostname for the `cn`?most of the time they'll be
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: ```suggestion            final commandlinehttpclient client = clientfunction.apply(newenv, enrollmenttoken.getfingerprint());```
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: i worry about some code down below accidentally using `env` (the more obvious variable) when it should use `newenv`.can we at least rename `env` to `originalenv` (though i'm not sure
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: we discussed about making a backup of the existing auto-configuration instead of removing it. the issues around that would be where/under what name the backups would live and whether or
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: changed this to fail if : - we can't find the autoconfig dir- we can't find the autoconfig security stanza in the configuration- we can't find the expected settings in
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: is this method used anywhere?
Candidate: i think we could make sense to make sense to make sense to make sense to make sense to make sense to make sense to make sense to make this
Reference: wouldn't this change make pagination through aggs results require a different use of the api compared to paginating through [search hits](https://github.com/elastic/elasticsearch/pull/79360/files#diff-3f0641a79abfbc1680ac9183b1c2e04cafe9f39526546f197c1043554a928427r99): the former would use the `request_timeout`, while the latter
Candidate: 👍
Reference: did you intend to change this file for the pr?
Candidate: ```suggestion                             
Reference: might be worth calling it `parserconfig` as it is in other places. not because of consistency, but because i think it reads better
Candidate: we don't improve this to make sure that we improve the restore the ?
Reference: i think this changes the way we report a missing routing to list the original request index (which could be an alias) rather than the concrete index. i think we
Candidate: i don't think we can get a good to the `resourcealreadyexistsexception` in the the description, we can get on the coordinator on the coordinator can we get the to get
Reference: maybe add comment here that `resolverouting` and `process` must be called prior to this.also i think we can cement parts of that by asserting that `id != null`?
Candidate: ```suggestion     public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i would just construct the setonce at the declaration of consoleoutput. then it can be final.
Candidate: ```suggestion                             
Reference: sorry for reformat, `verifyupgradefailsifmixedcluster` and `verifyupgrade` are the 2 methods i added
Candidate: debug leftover? debug leftover?
Reference: this `return;` is now not needed.
Candidate: is this needed?
Reference: ```suggestion    private synchronized void schedulenext() {```
Candidate: ++
Reference: i would be tempted to put this is the switch case for `first` & `second` because `none` does not truncate it throws instead. same result just a matter of preference
Candidate: i believe we should have a test for the timestamp qualifier.
Reference: :+1: since we're no longer adding an inner `indexshardsnapshotfailedexception` that duplicates the info in the wrapper.
Candidate: i think we should also also also check in the case of the awkward for the parent awkward for the parent of `loggingdeprecationhandler`.       
Reference: should the order wrt the ml check above be reversed? that way if it is basic we don't trigger tracking for ml use?
Candidate: we don't really really really really really really really really really really really a comment that in the removal in the same `if`?
Reference: it looks like there's some unnecessary formatting changes here and in a couple of other places.
Candidate: i                             
Reference: i think these can be simplified with something like:```javaassertthat(authenticate, hasentry("api_key", map.of("id", "...", "name": "my-api-key-name"));```
Candidate: ```suggestion                             
Reference: there are older api keys that can potentially have `null` name (#59485) and we should handle that.
Candidate: ```suggestion           builder.field(user.fields.authentication_type.getpreferredname(),                  
Reference: i believe the following change is required to address the ci failure```suggestion        metadata.put(authenticationfield.api_key_id_key, apikeyid);```the `manage_own_api_key` privilege requires the api key id to be
Candidate: i'd prefer a test for the test name of ...`
Reference: nit: there a few debug messages in here that do not have the model id`logger.debug("request [{}] received inference response but listener already notified", requestid);`could you add the model id to
Candidate: ```suggestion                             
Reference: this was the mechanism to provide back-pressure. now the action will write the request and finish, then the next request in the queue will be written so we are effectively
Candidate: this is not needed in the cause in the cause in the cause in the cause in the cause in the cause in the cause in the cause in the
Reference: i wonder if this should be a `inferenceaction`? this way we have this single object that is sitting there with the inference state (timeout, etc.) and only allows to be
Candidate: ```suggestion                             
Reference: since the countdown was effectively "notify listener", we should do that here.
Candidate: ```suggestion                             
Reference: this listener should be `actionlistener.wrap(this::onsuccess, this::onfailure)`
Candidate: this is not needed in the cause in the cause in the cause in the cause in the cause in the cause in the cause in the cause in the
Reference: `use "doc['" + name + "'] instead.`
Candidate: i think this is to be a to in the same `if`?                  
Reference: why was this moved?
Candidate: ```suggestion                             
Reference: does it make sense to wait with some timeout just to safeguard that the test doesn't stuck forever?
Candidate: this is that we need to pass in the fieldtype?
Reference: all of this tells me we need a generic "restapi param parser util" or something where we can declare params, their compatibility, if they are deprecated, etc...seems like a good
Candidate: ```suggestion                             
Reference: yes, that is what we want. later when the support for restapiversion.v_7 is removed we will be able to track this down and remove the unwanted if branch
Candidate: ```suggestion                             
Reference: it is good for consistency, but so far we did not include cat apis in rest api compatibility.in this case i feel it might be useful though
Candidate: i think we need to make this now since the header is hidden in the the user is unequal)?
Reference: this is quite expensive to be doing on each inference request. could we make this work by just reading the allocation metadata?
Candidate: nit: we not need to use a method that every data extractor. {                 
Reference: ```suggestion        assertthat(loggingaudittrail.entrycommonfields.commonfields, not(haskey(loggingaudittrail.cluster_name_field_name));```
Candidate: i think it is be checking for checking for the constructor.
Reference: should this be `true` or `randomboolean()`?
Candidate: same here
Reference: actually - i just noticed this.why did we change this? i think `copyof` was correct.
Candidate: why?                             
Reference: this doesn't take into account things in the native queue waiting to be processed. we could add a counter that gets inc/dec when things get written and responses received. or
Candidate: i think we need to make the advantage of the value for every cluster.                
Reference: i think there's a more general optimization possible here as well at some point. it seems pointless to ever re-compute the `routingnodes` if neither the table nor the nodes changed?
Candidate: i think we can need to avoid in this pr.
Reference: @joshdover seeing this i wonder if we should be more specific. instead of having `metrics-*` we should use `metrics-*-*` so it would also not match the other index by "accident".
Candidate: can we add a comment for the the the for the to ensure that there is a reason for the reason for the reason for the problem is for the
Reference: i suspect we're going to end up with a bug at some point because this method is a now little ambiguous about what it does.`isserviceaccount` is true, if the user
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i'd init cap index in the deprecation message, and tweak the description slightly:index "indexname" does not have a "datatier.tier_preference" configureda data tier preference must be specified for all indices in
Candidate: ```suggestion                             
Reference: this bit is really a bugfix and deserves backport to 7.16. i think i might want to rely on the supersede functionality in 7.16 for fixing #79104 too. we can
Candidate: can we add a comment that there is a comment that we know that the `indexinput` is that we know that the `indexinput` is that we know that the `indexinput`
Reference: this is not the source of the bug shown by the test results, but it is definitely one that could occur in a strange scenario. its best to kill the
Candidate: i think it was more readable
Reference: rest api compatibility still warns at critical level.
Candidate: i wonder if we should be a test for the field name?
Reference: we will still need a way to emit critical level deprecations when decalaring a rest handler. i will log a follow up issue.
Candidate: do we need to make sure we we need to make this method's instead of using `urlencoder`?
Reference: just realized this: we never mutate the request later. so we could just do:```javareroutefunction = request.performreroute() ? allocationservice::reroute : (cs, reason) -> cs;```right?
Candidate: i think we should include the to include the work? i think we can to include the to include the work?
Reference: i think this should be `trial`, not `trail`?
Candidate: ```suggestion                             
Reference: this is independant but looks wrong so i fixed it.
Candidate: why is that?
Reference: @martijnvg, when you have a minute, could you review this one? the main change is in this line though there are a couple others that i mentioned in the pr
Candidate: ```suggestion                             
Reference: could this exception be more specific? i wonder if this would be a place we could use the mapperparsingexception that we previously had in the validation logic.
Candidate: ```suggestion                             
Reference: with this exception the caller gets the problematic mapping back, i'm not sure if that is the case after this change where the compressedxcontent ctor throws an iae. maybe it
Candidate: ++
Reference: i think you don't need to keep the version here and in the state of this object.you should try to limit compatible changes to the rest layer.within the `toxcontent` method
Candidate: i think we need to add rejection the method and that it is a access to pass the in the other calls.
Reference: ```suggestion        clusterhealthresponse res = new clusterhealthresponse("", strings.empty_array, clusterstate.empty_state, false);```
Candidate: i'm not sure about not sure about not sure about not sure about not sure about not sure about not sure about not sure about it, but i feel about
Reference: please use a named constant for the param name both here and in the deprecation message to make it clear it's not just a coincidence that they're the same string.
Candidate: i think that we have the original intention of the test with the fact that the intention is not defined, with the loop.
Reference: it seems wrong to be treating "common" punctuation differently to punctuation here.  it means this method will work differently for a straight apostrophe and a curly apostrophe for example,
Candidate: ```suggestion                             
Reference: do we need `synchronized(context)` here too?
Candidate: ```suggestion                             
Reference: rewording suggestion:```suggestion                "a bulk action contained trailing data after the closing brace. this is currently
Candidate: i think we need to specify this warning as well?
Reference: the model definition part number or document id from the search would be useful in this message for debugging.
Candidate: what we use a check for the data here?
Reference: nit: `set.of(requiredsourcefields)` can be lifted out of the for loop so it is created everytime
Candidate: what we use a check for the data here?
Reference: what if there are > 100 definition docs? the summed sizes will never equal expected total.
Candidate: what we use a check for the data here?
Reference: do we want in the future to add a support for indexed vector fields under nested? perhaps when `_knn_search`  becomes a a part of `_search`?
Candidate: maybe we should be disallowed for `default`?
Reference: tiny comment, maybe better to supply a non-null `scriptfield` that throws `unsupportedoperationexception`?
Candidate: this is a bit more than the one more consistent on enums is that this is be nullable.
Reference: we don't need to introduce this new type check here.
Candidate: this would be be be be be be be be be be be be to be to be to be to be to be to be to be to be
Reference: ++
Candidate: ```suggestion                             
Reference: i think the `%` here is unnecessary, we can just check for >=, since we reset when submitting the batch?
Candidate: should we add a comment here to make the square queued?
Reference: can we also assert that no extra request is sent/received when `pendingdeletes.get() == 0`?
Candidate: can you add a comment explaining why we the behavior?
Reference: can we also assert that a key is interned? could just check that the key on index1 is the same as on index2.
Candidate: can we add a comment for `indices_permissions_key` as well.
Reference: can we please log the timezone and the interval in the exception message if this happens? this way if we have missed a case that we are not aware of
Candidate: ```suggestion                             assert
Reference: i wonder if we can make this constant a field that can be modified with the builder which defaults to 5000? that way we can write a unit test that
Candidate: ```suggestion                             assert
Reference: this is changing behaviour and it's unclear to me how we end up in this state. i'd be concerned that a customer is successfully getting a date now, where their
Candidate: ```suggestion                             assert
Reference: any particular reason these are fully qualified?
Candidate: ```suggestion                             
Reference: i think it's better to check if the settings are set and then run the test.
Candidate: can we make the result of the field here?
Reference: lulz, accept null if null
Candidate: nit: it doesn't make sense to update the suggest`cannot the update once the job...` job...`
Reference: so will this still get applied to e.g. `build-conventions/src/*/java` ?
Candidate: ```suggestion                             
Reference: it seems potentially confusing to mix `text` and `finaltext` in the main algorithm.  since `finaltext` needs to be used in lambdas i'd just use it everywhere to avoid making
Candidate: ```suggestion                             
Reference: ```suggestion                collections.singletonlist(```(because `arrays.aslist` with 1 item causes an intellij warning)
Candidate: ```suggestion                             
Reference: ```suggestion                        0,```if this is wrong please add
Candidate: ```suggestion                             
Reference: i strongly suspect multiplying two integers is much faster than using some generic x^y algorithm that works on arbitrary floating point numbers.```suggestion        
Candidate: i think this should be worth adding a runnable? i think
Reference: this has been changed so that the `cloud-ess` image will rebuild when the `cloud` image changes.
Candidate: can you add a comment here :)
Reference: should we just make this a constant?
Candidate: i think this should an extra space after "analysis"?
Reference: what was the motivation for this change?
Candidate: ```suggestion                             
Reference: should we use the term "descriptor" or "config" here? i'm leaning toward the latter as the term "descriptor" is already a bit overloaded.
Candidate: ```suggestion                             
Reference: shouldn't this be `"file://" + pluginpath`? i don't think `file:/path/to/file` is a valid uri.
Candidate: ```suggestion                             
Reference: instead of adding this special case, could the cloud generation of this file point directly to the zip for each official plugin in the archive dir?
Candidate: ```suggestion                             
Reference: is the only reason we are not allowing this for other distributions because we don't yet have packaging tests for it outside of docker?
Candidate: nit: include the include in the description, but i wonder if we could include the in the ccr twice then the ccr twice then the ccr twice but then the
Reference: should we use `build.type()` here or is calling that from bootstrap a no-no?
Candidate: nit: include the include in the description, but i wonder if we could include the in the ccr twice then the ccr twice then the ccr twice but then the
Reference: rather than manage this big switch statement here could we add an `exitcode` property to `installpluginproblem`, manage this mapping there, and then just return `e.getproblem().getexitcode()`?
Candidate: should we should be to the same list for the + t.getpath() + t.getpath() +" no need to add it to
Reference: if we decide my above suggestion isn't worth while can we at least place the `default` path at the bottom. when we move to java 17 this would be a
Candidate: should we should be to the same list for the + t.getpath() + t.getpath() +" no need to add it to
Reference: `parenttaskassigningclient` calls `request.setparenttaskid(taskid);` exactly as you have done in line 193 you should either set `request.setparenttaskid(taskid);` yourself or use the `parenttaskassigningclient` not both.https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/client/parenttaskassigningclient.java#l54
Candidate: maybe you add a comment here to use the for the duplication?
Reference: i was wondering if it makes sense to check that the policy name gets set in the exception's message?
Candidate: this does not need to be moved?
Reference: i guess the closing bracket should be a square one `]`, not a curly one `}`
Candidate: nit: ident
Reference: should we call this on the constructor too ?
Candidate: can you add a comment here to make sure we don't want to make this to make sure that we don't want to make sure that we don't want to
Reference: i was going to comment about this having a default value. but i see that a default level is different for compatible and different for "current version" deprecations.might be worth
Candidate: can we add a comment that we we need to make the parent value instead of a single method?
Reference: when setting attributes while creating the span, it's common to use `spanbuilder.setattribute(key, value)`. it would look like:```javaspanbuilder spanbuilder = tracer.spanbuilder(traceable.getspanname());for (map.entry<string, object> entry : traceable.getattributes().entryset()) {    object
Candidate: ```suggestion                             
Reference: i believe it might be worth using `getcapturedspans()` or `list.copyof(capturedspans)` to prevent concurrent modifications coming from stream and collector
Candidate: ```suggestion     public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```                    
Reference: is there no equivalent for the refresh options here? that said, i don't know if they're necessary.
Candidate: can we also assert that all the test for the test that the test that the test that the request are not have a test for the timestamp request got
Reference: i guess my main question here is there are reason we don't just specifically classify that this is a `recyclerbytesstreamoutput`? i like to be explicit that this has to be
Candidate: i'm not sure that we need to close to the here? here?
Reference: i wonder if we should avoid this part of the message, since it also disables flood stage monitoring? we made this setting an operator-only setting too, i.e., may not be
Candidate: ```suggestion                             
Reference: i am no longer calling this as this is executed internally in `shutdown`
Candidate: i think we can add a comment for the
Reference: ```suggestion        assert this.services == false; // clusterapplierservice stops before we do        this.services = new apmservices(provider, tracer,
Candidate: can we add a comment that we're in the transport action here.
Reference: i had to register this funny way to get around configuration ordering issues related to additional added source sets. just using `tasks.withtype().configureeach()` resulted in additional source sets (like javaresttests and
Candidate: can we add a comment that we don't have an discretion.
Reference: a new setting to enable/disable authz tracing.
Candidate: i think
Reference: should we use semanticsattributes here?
Candidate: ```suggestion                             
Reference: this allows a setter called `setxcontenttype` to have a parameter of `xcontenttype`.
Candidate: can you add some comment here why this needed?
Reference: it's probably worth reverting this.at some point soon we'll hit the code with a formatter and won't have things like this come up. i look forward to that! but it's
Candidate: i think prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to prefer to
Reference: so they require both `curl` _and_ `wget`?
Candidate: do we need to have the test for the type of the type as well?
Reference: i think `indexsettings.getmode` can't be null - it'd default to standard.i think i'd prefer to move this merge helping code to `indexmode` too, if we can. if every behavior change
Candidate: ```suggestion                             
Reference: it's kind of rude to pass a `null` list here.
Candidate: ```suggestion                             
Reference: i wonder if it's more clear to do this with one `try` block.
Candidate: nit: we could move this pr?
Reference: i think the problem here is that we may close `oldords` twice, right?
Candidate: since it does it really need to be a anything here.
Reference: i don't quite see the point is creating this intermediate variable in the first place.
Candidate: can you add javadocs?
Reference: security now uses a system index. fyi added this code to clean up an ancient typed index template @jkakavas
Candidate: ```suggestion                             
Reference: i think it would make sense to move lines 411-415 right before line 420 so that all the code for creating transform is in one place, not interleaved with index
Candidate: ```suggestion                             
Reference: this could check that unrelated errors are not removed
Candidate: ```suggestion                             
Reference: i was surprised that the second autofollowresult cleared the error from the first one. not sure if this is intended behavior.
Candidate: ```suggestion                             
Reference: i think it would be simpler to read using `equalto` on the `keyset()`? likewise in the next assert.
Candidate: ```suggestion                             
Reference: i think we should also test the case where there is no outer level exception, only an exception for a specific index (since that is the "normal" case).
Candidate: ```suggestion                             
Reference: i think we should use `lastindexof`, since index-names cannot have `:`, but unfortunately, i think autofollow pattern names can (at least i did not find the protection against it, hope
Candidate: ```suggestion                             
Reference: because patterns can contain `:` (if i am right about that), we need to check if currentpatterns either contain the `patternname` or the `key` and keep it either way.
Candidate: ```suggestion                             
Reference: i think this is too late, it should preferably go before starting any new auto-followers. otherwise, we risk a race where the auto-follower completes and updates stats before we get
Candidate: same here
Reference: i think we should set the patterns to the empty list above when `autofollowmetadata == null` too (though i think we never go back to null, so mostly for completeness).
Candidate: we we we should make the same here
Reference: ah unfortunately this is in the hlrc api so we can't change it so freely. we can introduce `settargetparenttaskid` and deprecate the older method, that should be enough.
Candidate: i don't think we need to build the test for min and `nanos`.
Reference: just for my understanding, should `rejected.error` be also asserted in the other branch?
Candidate: ```suggestion                             
Reference: why can't we have `string` keys here anymore?
Candidate: can you add a comment that the non-value of the data field that it might be to specify the efforts, or new-style the
Reference: maybe we should base64 encode these instead to save some bytes?
Candidate: can you add a comment here why
Reference: i've been trying to find a way to ensure that the recoverytarget reference is released and therefore the snapshot file download permit is released but since it happens asynchronously i
Candidate: can we add a comment on why this is added.
Reference: slight preference for using the setting directly rather than its literal name:```suggestion                  
Candidate: ```suggestion                             
Reference: i might do `extracttsidvalue(address)` instead. it's sort of `timeseriesidfieldmapper`'s choice to send it to `networkaddress.format`.
Candidate: ```suggestion                             
Reference: i think it might be a bit confusing to check if `fields` is empty but then us `numericvalue`. is there something up with default values here? i wonder if we're
Candidate: this is is a bit that it is is a bug when the index is is not frozen?
Reference: i'd probably by nice to use `_tsid` in the tsid agg.
Candidate: should we add some test for the plugin message.
Reference: now that i think about.... can't you declare something a dimension without enabling the tsid field? i wonder if we should avoid encoding it if the field isn't present.
Candidate: i wonder if we should use the same prefix                     
Reference: ❤️ good change. this is left over from before we had queueing back-pressure as the signal for too many requests.
Candidate: i wonder if we should be more liberal rather than `emptymap()`.
Reference: @masseyke and @debadair i've added one word compared to what you used in #79387: "model snapshot" instead of just "snapshot" at the beginning.  please let me know if you
Candidate: i'm not nice to be nice to have a fan of `minmummasternodes`?
Reference: this may be spurious since it counts time spent waiting for the channel to become writeable (cf https://github.com/elastic/elasticsearch/issues/77838). should we track it separately from the inbound time tracking?
Candidate: i don't think this is to the that we don't want to update the aggregator that the is investigating that the `indexinput` is investigating that the is investigating in the
Reference: the point of `hasreferences()` is to avoid having to return a fake value like this for implementations that always leak. there's something weird about having a refcount which `incref()` and
Candidate: ```suggestion      public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i am afraid in the linked sdh the exception become huge because of 2089 suppressed exceptions (attached to the root, not to the nested exception):```{"type":"snapshot_exception","reason":"[azure_repository:routine-snapshot-2021.09.29-08uqgt9wskigd-qqjym8ea] failed to create snapshot successfully,
Candidate: ```suggestion                             
Reference: it doesn't look like the cleanest way to do it but it makes sense given what we have. and i don't think its permanent.
Candidate: i think it is a way to have a string here and assign the `try-catch` hidden and assign the `try-catch` in this pr.
Reference: no need to lookup `index` from `concreteindices` if we just use it as name in an exception message.
Candidate: ```suggestion                             
Reference: the `concreteindices#resolveifabsent(...)` already checks whether an `index` instance has been cached, sono need to this here as well.
Candidate: ```suggestion                             
Reference: there are no tests added but: - i don't think we can control the interfaces used in our packaging tests so that we can end up with only local addresses-
Candidate: ```suggestion      public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i would adjust at least one of the packaging tests to the effect that the 'node.name' setting is randomly set, and the auto-configurations honors it (ie the initial node starts
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: i don't love that this results in an `indexnotfoundexception` vs something more informative - i'd like to improve this and welcome suggestions on what to do instead. unfortunately, i think
Candidate: i don't think we don't need to be the pattern as the pattern as well?
Reference: this test is not relevant to `cardinality` agg. it was a left-over at `cardinalityit`please remove it.
Candidate: i'm not sure about this test for this.
Reference: will name be `$` in this case?
Candidate: can                             
Reference: nit: would it be useful to increase the timeout a bit more, like 2000 ms? the server delays processing for 500ms, this means we have only one chance (at 512ms)
Candidate: the synchronization 😄
Reference: it doesn't happen too often and it would be nice to know when it happens. so, maybe we should replace it with an assumption instead of silently ignoring it:```suggestion 
Candidate: can we use the to instead of the license instead of the license instead of the same `if`? instead of the scope to do we need to check for the
Reference: can we not avoid the try-catch by just asserting before calling `handleexception`?
Candidate: ```suggestion                             
Reference: why not just `ignoredeserializationerrors : error` inside the catch block? seems i am missing the point here :slightly_smiling_face:
Candidate: can you add a comment explaining why that we have a rarely() here?
Reference: this still risks a wait in cases where we discovered the remote cluster was disconnected just after calling `getconnection()` above. i think we should avoid waiting on the result of
Candidate: i'm not sure fan of the distribution above, i think we should handle this.
Reference: this is just copy paste from the regular indexmetadata parsing code. `in_sync_allocations` are required to exist in indexmetadata for a restore to go through.
Candidate: ```suggestion                             
Reference: we skip some of these steps here for searchable snapshots (as they are effectively useless, and require opening up the index, which we can defer to a later stage by
Candidate: i think we need to move the to have a fully qualified to to have to fully qualified to to fully have to fully have to fully have to fully
Reference: ```suggestion                    assert store.directory().filelength(fileinfo.physicalname()) == fileinfo.length();      
Candidate: i                             
Reference: can we also test the restore and mount of old lucene indices over closed indices too?
Candidate: i'm not sure we need to have an npe in the case of this pr?
Reference: this is unused
Candidate: ```suggestion                             
Reference: can we use something like `builder.putmapping(mappingmetadata.empty_mappings);` instead?
Candidate: ```suggestion                             
Reference: :+1: good to see this bypassed for searchable snapshot shards
Candidate: i think we have a to check for the version of the transport action.
Reference: at some point we could reintroduce the version constants for old elasticsearch versions.
Candidate: 👍
Reference: just a nit: should we have this be ordered the same as the other mappers like textfieldmapper where the corevaluessourcetype is the argument before toscriptfield? there's a couple other places
Candidate: i'm not more happy to begin out of the
Reference: would you please explain this todo? what exactly is missing from this test?
Candidate: i'm not need to get rid of the method?
Reference: same with this todo.
Candidate: i'm not sure that we need to get rid of the meta method?
Reference: same with this todo.
Candidate: ```suggestion                             
Reference: same with this todo.
Candidate: ```suggestion                             
Reference: since this is the top level, i think we can continue to use the same design as elsewhere where we use a method ref here. since keyedflattenedfieldtype is different from
Candidate: i think it might be more consistent with the `indexnumericfielddata`?
Reference: should we add an `assert false` here too?
Candidate: ++ crazy but :)
Reference: why can't you cast the task.getparams() to `snapshotupgradetaskparams` and grab the job id that way?
Candidate: i don't think we should leave a comment here here.
Reference: i don't think this is necessary as the place that uses it has access to the persistent task params.
Candidate: i don't think we still need to have the analyzer logic?
Reference: what's going on here?
Candidate: ```suggestion                             
Reference: i find `nonprojected` confusing as it might imply a field that was not specified in the projection (maybe because of an implicit declaration) - it's better to describe what it
Candidate: please remove the listener, instead                         
Reference: we don't typically use underscore prefixed variable names, do we?
Candidate: i think this is ok to be a node but i think it ensures that it is important.
Reference: the call can fail in two different ways: on the connection or on the http level.the connection one is to be expected, but the http one is not. hence i
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: i would suggest we debug log the exception stacktrace; for example, the exception can also be certificate verification exception, or a connection timeout.also it is not always connecting with the
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: can you add a comment for why this is unsupported?
Candidate: i believe we could be this `fieldtype` rather than `fieldmapper`?
Reference: try/catch? that's so 90s. use expectthrows instead!
Candidate: perhaps we just use false` to the error message here?
Reference: this seems dangerous -- could index metadata be different across nodes? i should move this operation elsewhere.
Candidate: see my see see this is see see see see see see see see see see see see see see see see see see see see see see see see
Reference: this seems like something that should be done at a higher level of the call stack -- by the time we get here, something should have already made sure index.hidden
Candidate: i think we should try to the message?
Reference: i should try to back this out and fix the transport update settings action instead. (see transportupdatesettingsaction).
Candidate: i'm not sure if we want to have the index index or 185? like: ```metadatabuilder.put(indexmetadata.builder(indexmetadata).settings(finalsettings).settingsversion(1 or do we want to do we even if we want to increment the index
Reference: it looks like you messed up the logic here, william.
Candidate: i don't think we should have a special for the rather than the same special in the two places.
Reference: note to reviewer: does this need to be fixed? if so, can we do it in a follow-up?
Candidate: can we add a comment on the test for the timestamp mapper for validation) on the fields. we don't want to get rid of the place?    
Reference: note to reviewer: does this need to be fixed? it seems like if we don't catch system names in the validation stage, we may end up catching them elsewhere. if
Candidate: can we assert on the index instead of index [`?
Reference: `boolean.false.tostring().equalsignorecase()` is i think what we want here? as we're accessing the string value in the request, it hasn't necessarily been normalized yet.using `boolean.false.tostring()` instead of `"false"` is just a
Candidate: ```suggestion                             
Reference: i don't think the system index access control header is going to be relevant here, right? should we set it randomly? or am i wrong?
Candidate: minor: about adding a comment here about adding the test.
Reference: should we use `systemindexdescriptor.default_settings` here? it would be a bit clearer and automatically update when the default settings do.
Candidate: ```suggestion                             
Reference: @droberts195 i've made some changes for ml too. the `minimalsupportedversion` refers to wire-compatibility, so it should never be `minimumindexcompatibilityversion` (as the index bwc guarantees are wider than the wire ones).let
Candidate: see my comment about littering.
Reference: in 7.16 `indexlifecyclemetadata#getminimalsupportedversion()` returns `version.v_6_6_0`. obviously this is earlier than `version.current.minimumcompatibilityversion()` but still it would be good to return the same value in both places when backporting.
Candidate: see my comment about littering.
Reference: can we bail out early here if `autofollowmetadata.getpatterns().isempty() && this.autofollowers.isempty()`? since this runs on every cluster change it would be nice to have a bail out.
Candidate: same here
Reference: ```suggestion        // and auto-followers are stopped```
Candidate: ```suggestion                             
Reference: this should take in a toscriptfield and follow our standard plumbing pattern to this point. i think there's a real possibility this may be required for source fallback.
Candidate: ```suggestion                             
Reference: this is probably a larger conversation but:> // do not write default valuesseems like a bad idea as a whole. this means we have to consider older transforms automatically (and
Candidate: ```suggestion                             
Reference: i'm wondering if this is too complicated for a test.we could get rid of conditional statements if we fixed the scenario: pit is first enabled and then disabled.
Candidate: ```suggestion                             
Reference: snapshots from es 5 repositories were returning `partsize() == null` sometimes as repositories did not have a non-null partsize configured by default (today it's long.max_value instead for those repos). this
Candidate: ```suggestion                             
Reference: this check - `clusterwildcard == null || simplematch(clusterwildcard, clustername)` - is being used in another method in the same class. maybe extract it as a separate method?
Candidate: ```suggestion                             
Reference: i had to update these tests to use the new notation. they started failing because now if the old notation is used, we can't always guarantee that the roundtrip query
Candidate: i'm not sure why we need to add a comment that iso8601 is we need to expose the documentation.
Reference: i have a feeling we don't need to overwrite "getalternateversions()" for this query builder any more. iirc it was used to check that we can parse "other" versions of the
Candidate: ```suggestion                             
Reference: just double checking that we don't want to continue to output `null` values for gt/get etc... for bwc reasons. i haven't really thought through why we would want or need
Candidate: use `strings.hastext(format)` instead?
Reference: @stu-elastic you mentioned this setting is only used as part of testing. if a user were to set this are there any other problems that may occur?
Candidate: ```suggestion                             
Reference: i don't see any test coverage of this method. was that intentional (there's definitely a lot of code reuse with the clusterdeprecationchecks methods)?
Candidate: ```suggestion                             
Reference: who uses fully qualified name? if there's nobody i would remove it.if it has to stay, i recommend rename it something like catalogqualifiedname() - fully doesn't convey much.
Candidate: ```suggestion                             
Reference: what's the reason for this change? is it so that we can reuse the traceid formatter in ecsjsonlayout.java? i wonder if this changes behaviour a bit, previously if traceid was
Candidate: i don't think we can be a method that we don't need to expose the same analyzers through the data streams and tests.
Reference: nit: `node.node().gethostaddress()` might be asserted once before the loop
Candidate: do we need to avoid the same here instead of the same `if`?                 
Reference: why this change? the plan executor is the one that increments the metrics; by calling the cursor this is skipped.is this what's causing the bug? wouldn't it be easier to
Candidate: since we have a listener, the listener, we have access to the listener, the listener, we have the listener, since we don't have the listener, for the listener, we have
Reference: you could randomize the `fetchsize` value with something between 1 and `testdata.size()`.
Candidate: ```suggestion                             
Reference: would `clusterstate.getroutingnodes()` not work here too (and in the other tests using the constructor)?
Candidate: i'm not sure i don't have a test for the test but i don't have access to check for the test for the test somewhere here and in the test
Reference: can we use `clusterstate.getroutingnodes()` instead?
Candidate: ```suggestion                             
Reference: this needs to only happen (even though it's an optional write, it will write `false` if there's no value)``` if (out.getversion().onorafter(version.v_8_1_0)) ```
Candidate: same comment as above, we `shardid` is often often known to often often the coordinating
Reference: nit: you don't have to specify an alias, it doesn't look like you'd need one here?
Candidate: ```suggestion                             
Reference: nit: you don't have to specify an alias, it doesn't look like you'd need one here?
Candidate: ```suggestion                             
Reference: should we assert there are some values in the fields? if `index_age` is null for example, this assertion could pass (for the wrong reasons)
Candidate: ```suggestion                             
Reference: i don't think this is stable given we use `system.currenttimemillis()` which would be a "wall clock" read. i suggest we unit test `indexlifecycleexplainresponse` and maybe we pass in a `timestamp
Candidate: ```suggestion                             
Reference: shall we also test `getage` is calculated using `lifecycledate` ?
Candidate: ```suggestion                             
Reference: similar to what i did for snapshot recovery, i've reworked the searchable snapshot recovery code for peer recoveries.
Candidate: i                             
Reference: with this, `lucenechangessnapshot` will just return empty set of documents instead of failing because the field has docvalues mapped to none now.in a follow-up, i want to explore exposing doc-values
Candidate: ```suggestion                             
Reference: with this new approach, we now have sequence-number based recoveries for searchable snapshots, which means that there's no need any longer to send over any file (i.e. the exception of
Candidate: i think we can do to do that we can do that we can do that we can do an assertion for that we don't think that we can do
Reference: nit: use an empty list.
Candidate: can you add a comment here about why we need to handle the
Reference: add a `continue` statement here. if there is an inference results there will not be a thread setting
Candidate: i don't think we need to make it make sense to make if the unmapped field and failed?
Reference: should the condition above be `closeconnectionexceptionlevel == level.warn`?
Candidate: i don't think i don't think i don't think i don't think i don't think i don't think i don't think i don't think i don't think i don't think
Reference: i wonder if this test would not pass without this (i should totally try it out)...
Candidate: i think we could probably be a comment on the the depending on the biggest
Reference: :+1:
Candidate: afaics this is this needed?
Reference: let's add guidance as to how to address this error? e.g. can we check if the user overrode the size of the search thread and suggest undoing the change? or
Candidate: no need to have a to
Reference: this number might be super high now, how slow is the test? maybe we need to set an artificially low limit for this test to keep it reasonable?
Candidate: same here
Reference: scaling up the number of cpus would increase the size of the search threadpool and reduce the number of allowed clauses, so maybe just mention memory?
Candidate: this is need to have a test for the too?
Reference: i think "initial" is a bit confusing here, since it could be an update of a remote cluster that was previously connected and it could now reconnect?```suggestion   
Candidate: again here
Reference: the `rolloveraction.name` privilege is already granted on lin 719 and not needed here.also nit: can we move this new section under line 720 so it is closer to where related
Candidate: can we add a comment for the to ensure that there is a reason for the problem is for the reason for this as well?
Reference: this test for `rolloveraction.name` is redundant because there is an identical one 3 lines above.
Candidate: depending on the change on on on the on on on on on on on on on on the on on on on on on on on on on the
Reference: these should be conrete index names instead of wildcards, e.g. ```java"metrics-apm.app-" + randomalphaoflengthbetween(3, 8)```instead of```java"metrics-apm.app-*"```
Candidate: depending on the change on on on the on on on on on on on on on on the on on on on on on on on on on the
Reference: same as above, should be concrete names.
Candidate: depending on the change on on on the on on on on on on on on on on the on on on on on on on on on on the
Reference: please add a comment here to say that using the number of utf-8 bytes:* matches what the equivalent python code did* acts as a heuristic to account for the fact
Candidate: ```suggestion                             
Reference: since `analysisconfig` is immutable, this should be changed as follows:1. check if the current `analysisconfig` has a model prune window2. if it doesn't, construct an `analysisconfig.builder` from `analysisconfig`3. call `setmodelprunewindow`
Candidate: ```suggestion                             
Reference: remove this, as immutable classes shouldn't have setters.
Candidate: ```suggestion                             
Reference: is it just `actionlistener<boolean> listener = (actionlistener<boolean>) invocation.getarguments()[2]` that needs this?  if so, you should be able to put the suppression immediately before that line instead of applying to
Candidate: could you add a comment here as well?
Reference: i will extract this into a separate pr with a corresponding unit test in `stashtests`.
Candidate: ```suggestion                             
Reference: what is the alternative (if *not* triggered from the scheduler)?
Candidate: ```suggestion                             
Reference: may be this could actually be inlined here to avoid introducing additional methods into request
Candidate: ```suggestion           withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i believe this main request is the original request created by the client. for the rest client, this is likely fine. but for internal clients, we could risk someone getting
Candidate: nit: you rename a comment explaining why don't you think?
Reference: above would also remove the need for this change.
Candidate: ```suggestion                             
Reference: i think this is equally surprising. the client still sees the `reindexrequest` changing, in case they reuse it for multiple request, the scroll will be gone. i would prefer to
Candidate: nit: you rename a comment explaining why is not needed?
Reference: can we use the constant `max_docs_all_matches`?
Candidate: nit: you don't need to rename this into a method method?
Reference: i think we should turn this into an assert instead, asserting that we never get here if there is no scroll source? perhaps i missed a case where we would
Candidate: ```suggestion                             
Reference: i think we should merge this statement with the one from line 682:https://github.com/elastic/elasticsearch/blob/3027039f72c26f6780cd7857a6c5c4b0c4bd0878/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/store/reservedrolesstore.java#l682read through the existing code, i'd prefer to put the merged statement _under_ the block starting at line
Candidate: can we add a comment for the the to ensure that there is a reason for the problem is for the
Reference: do we actually need `create_index` or could we use `auto_configure` instead and rely on an index template in the endpoint package?
Candidate: can we add a comment for the the the for the to ensure that there is a reason for the problem is for the reason for for the for the
Reference: not all hostnames, can be dns names. should we devise a regexp for dns names? i don't think there's a problem if we include invalid dns names in the san.
Candidate: why does we need to make it sense to include the `mlrestteststatecleaner` as well?
Reference: good call. not only these are not used for validation but will probably ( apart from the localhost related ones ) be _wrong_ for the other nodes that will get
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: :old-man-shouts-at-windows:
Candidate: ```suggestion                             
Reference: cleaning this up here because i found it while tracking this bug down and it's too trivial for a separate pr, `this.dependencies` is always immutable so no point in wrapping
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i think this will conflict with #81986, so maybe that one should be merged first?
Candidate: nit: maybe add a comment on whether we expect this method?
Reference: can we either add a test or randomly clear the deduplicator here and then validate we see two requests at the end?
Candidate: why fixed this task)
Reference: hopefully the change in keystore entry name is not botering anyone.
Candidate: i don't think we need a comment here why we need in the error message here because we don't have a bunch of using the
Reference: if it happens that there's already a `certs` dir present, we back it up and never remove it.
Candidate: i don't think we need a comment here why we need in the error message here because we don't have a bunch of using the
Reference: at this point the keystore and the certs dir are all set. what's left is to update the yml file.
Candidate: i don't think we need a comment here why we need in the error message here because we don't have a bunch of using the
Reference: :pray:
Candidate: i don't think we need a comment here why we need in the error message here because we don't have a bunch of using the
Reference: thanks for these blocks, we should have been doing this from the beginning :+1:
Candidate: i don't think we need a comment here why we need in the error message here because we don't have a bunch of using the
Reference: i liked that we had all these as static strings on the top, for readability reasons mostly but won't block
Candidate: i don't think we need a comment here why we need in the error message here because we don't have a bunch of using the
Reference: why don't we use the list of `realm`s built by `realms#initrealms`? i think it could help simplify the logic, e.g. no specially handling for default file/native?i guess one reason for
Candidate: ```suggestion                             
Reference: i think randomnonnegativelong() is reasonable here as well.
Candidate: ```suggestion                             
Reference: sneaky :)
Candidate: can we add a comment that we're `0`, when we end the soul stumbles soul stumbles and retry.
Reference: is there a case where we are writing using other than write or flush threads? if so, i wonder if we need to add a test or if this is
Candidate: i don't think we should rename this test to before the
Reference: is there an existing test provoking this case or can we add one?
Candidate: my my my interface?
Reference: this seems wrong, it leaves us with a (synced) checkpoint that refers to data that isn't synced and might vanish if, say, you pull the power out after executing this
Candidate: my my my interface?
Reference: could this not use the `byte[]` version of `witetochannel` and thereby avoid one more byte-buffer allocation? that seems also shorter and easier to read.```suggestion      
Candidate: i don't think we should rename this test to before the
Reference: maybe add a todo here and in `readfrom(...)` method that we should eventually change the serialization format.
Candidate: this is we need to be a
Reference: could we just call this `rolesfile` or `securityrolesfile` to be more descriptive?
Candidate: ```suggestion                             
Reference: the original reason behind this was to prevent the 10k limit we currently have on stats and configs. it is conceivable that a user has 10k+ models, none of which
Candidate: i we add assertnull for `indices_permissions_key` as well?
Reference: the huggingface docs suggest that 2 separator tokens should be used for a pair of input sequences:  `pair of sequences: <s> a </s></s> b </s>` https://huggingface.co/docs/transformers/model_doc/mpnet#transformers.mpnettokenizer.build_inputs_with_special_tokens
Candidate: it is pretty sense to have the check here, that is pretty deleted ?
Reference: instead of having the `-noedit` suffix, wouldn't it be possible to change the `from_qualified` pattern to match any qualified index name? shouldn't anything with a colon in the index name
Candidate: i don't understand why we need to `return `return `return `return getbigdecimal(column(columnlabel), scale)` ?
Reference: was this changed intentionally?
Candidate: ```suggestion                             
Reference: this bit just avoids masses of log spam while the tests run - like #82055
Candidate: why changing this methods?
Reference: maybe use this instead:```suggestionthrow new assertionerror("shard " + id + " is still locked after 5 sec waiting", ex);```unless it is too verbose?
Candidate: ```suggestion                             
Reference: this is going to be often null since we don't serialize this anywhere in the class
Candidate: this naming `indicesstatsbuildr` is a bit misleading. `indicesstatsbuildr` `indicesstatsbuildr` is a hashmap `indicesstatsbuilder`, but that it hashmap is an `e`. hashmap is there is a different that reflects that reflects
Reference: nit: we need to update the java docs of this method as we now keep doc values.
Candidate: ```suggestion                             
Reference: this should be reverted to it's original `boolean.valueof(((number) val).doublevalue() != 0)`, as it yields incorrect results for non-zero floats in (-1, 1)
Candidate: i'm not sure this test for all these methods in this pr?
Reference: if that's the case should we even bother filtering here? wouldn't it be better to just delegate on and get the warning message which would inform the user to remove
Candidate: minor: usually you add a javadocs for the
Reference: i wonder if there are additionally any concerns with sending this to stderrr? would stdout similarly break stuff depending how folks are consuming the output?
Candidate: ```suggestion                             
Reference: @romseygeek is the mention of "object" in this error and the next one accurate? don't we split any path regardless of the token we are reading from the parser?
Candidate: ```suggestion                             
Reference: @romseygeek this check is redundant now?
Candidate: i wonder if we don't need to make the field here ?
Reference: we add something (format string) to `mappingmetadata` that indicates how the `@timestamp` field should be parsed. we would need to fetch this from the latest backing index of a data
Candidate: i think the pattern of the pattern of the pattern of the pattern is created for the pattern of the rather than the same `if`?     
Reference: it would be great if we could add a bit more useful information here. i think i would rephrase it as "the document timestamp [2022-01-07t19:04:41z] is outside of ranges of
Candidate: i think the pattern of the pattern of the pattern of the pattern is created for the pattern of the rather than the same `if`?     
Reference: it feels like a bit too much logic for a data class, that the indexrequest is essentially is. i wonder if it makes more sense as a part of indexabstraction
Candidate: i think the pattern of the pattern of the pattern of the pattern is created for the pattern of the rather than the same `if`?     
Reference: can you add javadocs for this?
Candidate: ```suggestion        public xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i think we need to support epoch millis here also, correct? i tested it locally and it works, but not sure why this doesn't blow up since i would expect
Candidate: i think the pattern of the pattern of the pattern of the pattern is created for the pattern of the rather than the same `if`?     
Reference: can you rename this to be something tsdb specific, like `selecttimeserieswriteindex` (since we may end up adding different selection criteria in the future) and add javadocs?
Candidate: this is a bit confusing because we don't have a string with the mutex constructor. for the user?
Reference: lets add a todo here to move this away from `ackedclusterstateupdatetask` and use a custom task object.
Candidate: same here
Reference: i think this is fine as an optimization but we could do even better imo. couldn't we just resolve the listener on deletes that become empty on a cs update
Candidate: can you add a comment here why no longer use it?
Reference: this needs to be done for other aggregation builders too.
Candidate: this is than doing the than doing the the than doing it does not sure than creating the access to rather than the than the than the than the than
Reference: you need to add version check on the sending side as well. otherwise, you will be sending something that another (older) side is not expecting to receive.
Candidate: ```suggestion                             
Reference: added this to normalize the whitespaces away when doing the string to `compressedxcontent` conversion. this saves quite a bit of parsing if requests come from external sources (beats etc.) which
Candidate: ```suggestion                             
Reference: i get a bit nervous that we may end up with an npe here... i assume you double checked all the places where this is called?
Candidate: ```suggestion                             
Reference: i get thrown off here by seeing that you merge in the default mapping, which previously we did not. why is that?
Candidate: rename we rename a comment here
Reference: ```suggestion                    bw.write("# enable security features");```what about this? it sounds more consistent
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: is there a way to avoid the z marker? i suspect it's pretty unknown to many users. something like utc instead?i'd also remove the hyphen between date and time.
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: does this trigger the bootstrap checks, which by default fail on linux?
Candidate: i don't think we have a comment that we're in the error in that we is done in the leaves.
Reference: s/xcontenttypemycompressed/xcontenttypemaybecompressed/and can we add some javadoc here as well?
Candidate: i think we should catch here?
Reference: if you merge #82435 first, you can change this value to `v_7_1_7` before merging this pr
Candidate: hmm this should be a bit of `nodedescriptions` in this pr?
Reference: ditto
Candidate: hmm this should be a bit of `nodedescriptions` in this pr?
Reference: nit: i am not entirely happy with the naming of the new parameter. i think `forcedocvalues` fits better for range queries where we use indexordocvaluesquery, but here it's more about
Candidate: maybe we add a comment that specifically on the fact that we don't need to expose the `preprocessor`.
Reference: nit: i can see why the additional argument is called forcedocvalues here, because we explicitly want to query only doc_values, but here too maybe isindexed would also express that if
Candidate: why we need to encode here? here?
Reference: the indentation seems off here :(
Candidate: the new value
Reference: this looks like an unintentional revert? or is it intentional?
Candidate: is there is a check that the first is rather than that it is configured be than the same way?
Reference: ```[2022-01-12t09:22:56,827][warn ][o.e.r.repositoriesservice] [idegtiarenko-thinkpad-t490] failed to create repository [repository-hdfs]org.elasticsearch.repositories.repositorypluginexception: [repository-hdfs] repository type [hdfs] does not exist	at org.elasticsearch.repositories.repositoriesservice.createrepository(repositoriesservice.java:662) ~[elasticsearch-8.1.0-snapshot.jar:8.1.0-snapshot]	at org.elasticsearch.repositories.repositoriesservice.applyclusterstate(repositoriesservice.java:505) [elasticsearch-8.1.0-snapshot.jar:8.1.0-snapshot]```should i reword this to `repository plugin for type [type] does not
Candidate: i think we need to put this into the cleanup into a success flag into its own flag since we discovered the success flag
Reference: i'd rather not use exceptions for control flow like this. let's tell `createrepository` to create the placeholder repository instead.
Candidate: can we assert that the data node that we made the node that the data node that the data node that we have a data node that the node is
Reference: similarly here.
Candidate: can we assert that the data node that we made the node that the data node that the data node that we have a data node that the node is
Reference: here and in other places of this file it should be `any()` instead of `unbatched` i believe
Candidate: can we add a test for this test in a test to a test that we don't need to work.
Reference: similarly here
Candidate: same here
Reference: these `localclusterupdatetask` things are a bit weird, none of them change the cluster state (which seems right and proper) - could we fix their api to reflect that within this
Candidate: ```suggestion                             
Reference: the `hashmap` constructors accepts the capacity, not the expected amount of elements. it needs to be sized a bit higher than `mappings`, otherwise it will need to be resized/rehashed.see https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/maps.java#l273
Candidate: ```suggestion                             
Reference: fwiw i don't think i've ever seen this check fail, maybe we could make it an assertion?
Candidate: ```suggestion                             
Reference: i am not too fond of this pattern. i *think* it works due to how chm synchronizes on the head of the bucket in both compute and remove. but i
Candidate: i think we can simplify this method to
Reference: i think we would want to synchronize explicitly on the `pending` set instead of relying on `collections.synchronizedset`, iterating a synchronized set like this is not really safe.
Candidate: ```suggestion                             
Reference: would be good to keep the extra generality in the choice of version here rather than fixing it to be exactly 7.17.0:```suggestion        final
Candidate: i think we use a fan of the check that the actually `token` of the broken on the absence of ql.         
Reference: similarly here.
Candidate: can we add assertnull for `indices_permissions_key` in question.
Reference: similarly here.
Candidate: ```suggestion                             
Reference: i guess we could just use string concat here and drop the `parameterizedmessage` since this would compile into a string literal then anyway.
Candidate: i think we should add a comment that in the authentication setting](https://github.com/elastic/elasticsearch/pull/57399/files#diff-bab5e7d9636db9cadcd30fa5c91d4fc9r80) and that expands that expands on authentication thread here)
Reference: i think `testrestrictedindices` should provide more utilities to help with randomizing system index names since we have so many system indices now (and they are all restricted). it does not
Candidate: i'm not sure on the test to assert on all the search plugins?
Reference: nit: user roles are not deduplicated. so it is possible to have something like `["superuser", "superuser"]`. should we cater for it? the existing logic does.
Candidate: ```suggestion                             
Reference: nit:```suggestion        return super.configroles() + "\n" + "r1:\n" + "  cluster: all\n";```
Candidate: can we add a a method to for a method to a single method that we have a documenting emitvalues, i         
Reference: it's probably a _nit_, but i think an enum would be better than a `boolean`. something like:```enum apikeyroletype {  assigned_roles, limited_by_roles}```(i'm happy with different names for them enum class,
Candidate: i don't think we don't need to check for the settings yet?
Reference: this is sample usage of the new method. this way we do not have to explicitly create a builders for a cluster state and metadata copies, just apply changes on
Candidate: i think prefer this method to `getremoteclusterstate` now.
Reference: arg good catch!
Candidate: i think we need to make the decide for these places.
Reference: ```suggestion        // rst all closing connections in tests (by setting so_linger to 0) so we don't leave too many connections in time_wait state
Candidate: i think we should test for instance test instance here since the test instance test instance test instance test instance test instance test instance test instance test instance test instance
Reference: if the only difference between the two branches of the if/else is the boolean that's being passed through, would it be more readable to extract that as a variable and
Candidate: i think we should also assert v2 templates since the index is of the index is `400` data fails.           
Reference: can we do normal `.get()` here just to not lose the stacktrace in case of a failure?
Candidate: i think we need to the the test here, that we're writing the from the test.
Reference: the future should be renamed now ? :)
Candidate: i think we need to have the test here
Reference: is this necessary? (i would think there's a bug here if it is, because this should be cleared up in any case if the physical delete from the repo fails
Candidate: gotta copy the keyset because `failsnapshotcompletionlisteners` modifies the map about the map about the map
Reference: nit: maybe also add a test for this code path, i think only keyword fields are covered atm
Candidate: this could be better to the same as as well?
Reference: nit: maybe also add a test for this code path, i think only keyword fields are covered atm
Candidate: as above as above
Reference: can we use zerotermsquery#asquery() instead if the if statement here? that would include the null option which returns null, i don't know if this can cause problems in further rewriting.
Candidate: as it might be better to the same here as well?
Reference: if searcher is null, this means we're not on a shard, and calling this method should be illegal?
Candidate: ```suggestion                             
Reference: is there a reason why we should only do this when `wildcardmatch` is true? is it so that we propagate exceptions when querying illegal fields? if this is the case,
Candidate: can we unmapped fields here unmapped fields for unmapped fields for unmapped fields for unmapped fields for unmapped fields ?
Reference: i was thinking we could just remove these overrides for all the non-text fields like this? they already return `textsearchinfo.none` so they'll be skipped. that way the `mayexistinindex` method checks
Candidate: ```suggestion                             
Reference: are we sure about that change?our standard behaviour is for these to link to the migration guide which can then include links to other setup instructions. i'm not sure we
Candidate: i think we should add a test for the
Reference: is there are reason for `sleep` rather than a scheduled thread?it's minor issue but it's better not to use up one on the generic threads sleeping.
Candidate: i'd prefer to cache in the error in in in in in in in in in in in in in in in in in in in in in in in
Reference: is there a reason we signal rather than just moving the call to `initialnodesecurityautoconfiguration.maybegenerateenrollmenttokensandelasticcredentialsonnodestartup` into this method?i presume it's because we'd need to push all the arguments somewhere, but with
Candidate: ```suggestion                             
Reference: if the assertion in `testbuildhostswithoutaddressandname` is true, i think this can fail with an npe.
Candidate: ```suggestion                             
Reference: this seems backwards. this pr introduces a host lookup, so could we not just iterate through the `assignedshards` and lookup the host using `hosts.get(assignedshard.currentnodeid())` - and simply check for equality?
Candidate: ```suggestion                             
Reference: i think we are guaranteed to have a host now since there always is a host address? can we assert that instead?
Candidate: ```suggestion                             
Reference: i wonder if we even need the hosts structure now that we always have a host address and only check for that? can we do something like:```allocation.nodes().getdatanodes().get(assignedshard.currentnodeid()).gethostaddress().equals(node.node().gethostaddress())```with your follow-up pr
Candidate: ```suggestion                             
Reference: maybe randomize the host name to see that it does not match on it?
Candidate: nit: space
Reference: maybe randomize the host name to see that it does not match on it?
Candidate: nit: space
Reference: i think `discoverynodes#get(string)` is sufficient, no need for `getdatanodes()` first?```suggestion```
Candidate: ```suggestion                             
Reference: this seems wrong, we're saying `a copy of this shard is already allocated to ... node [emptynode]` but this node is empty.(this pr does not introduce this bug but it
Candidate: ```suggestion                             
Reference: we've lost a `null` check on `checknode` along the way. i think it can't be `null` any more but i'd like to `assert checknode != null` just to be sure.
Candidate: ```suggestion                             
Reference: could you revert these benchmark-related changes too?
Candidate: i think it might be worth unwrapping the cause?```suggestion                     
Reference: shouldn't we be checking against the filters?
Candidate: ```suggestion                             
Reference: we tend to prefer `listener.delegatefailure(...)` in this case, so that the listener has a proper `tostring()` and asserts that the inner listener doesn't throw where it shouldn't and so on.
Candidate: i don't think we need to add a method to a single method that the data stream depending on the end up in the result of the
Reference: can you add a comment here on why we need to wait for this instead.also, in the pr description, you mention that this makes the sorting stable, can you elaborate
Candidate: ```suggestion                             
Reference: `filter` and `allmatch` can be collapsed into just `allmatch`
Candidate: ```suggestion                             
Reference: i'd prefer to just use a local settings object (class or inline) with the specific needs of this test (which i believe is 2?).
Candidate: i don't think we can have a comment instead of doing this into a `string` instead of ...`
Reference: i think we should instead check that the number of queued states is `inprogresscount - 1`? that would be a bit clearer i think.perhaps we could use `collectors.groupingby` to group
Candidate: ```suggestion                             
Reference: we shouldn't need this second check. if we make sure that all snapshots for index-1 are successful, then that should be the end state of things. the state of snapshots
Candidate: ```suggestion                             
Reference: ```suggestion            + "available: "             + security.delegated_authorization_feature.checkwithouttracking(licensestate)```i don't
Candidate: ```suggestion                             
Reference: i think it'd be better to keep the `debug` level for `failedtocommitclusterstateexception` and `notmasterexception`. `error` is a bit overdramatic in any case here.
Candidate: can you add a comment explaining why this is a bit here?
Reference: this is pretty much what `channelactionlistener` does, maybe we should just use that?
Candidate: can you add a comment explaining why this is a bit here?
Reference: nit: we have `testenvironment.newenvironment(settings)` if you don't really need to mock class behavior.
Candidate: can you add a comment that it is to be useful,
Reference: i don't think the method can really return null anyway. maybe not worth checking.
Candidate: i don't think we should rename this to the since we don't group to the the end of the ctor.
Reference: wonder if it'd be clearer here to extract the `failedshardentry` from the `failedshardupdatetask` and then just use that throughout, rather than having to duplicate all the accessor methods on the
Candidate: can we assert that we assert that we assert that we assert that we are using the in the timestamp that we decide that all the test for the timestamp
Reference: could we go back to accessing the bare fields here?
Candidate: can we assert that the assert that people assert that it's true for true and people for people to expose this somewhere. maybe assert that it's true for both.
Reference: wow 🤦
Candidate: ```suggestion           withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: ah ok ignore my comment on this subject in the 8.x version.
Candidate: i believe we should use in the case.
Reference: would be good to keep the extra generality in the choice of version here rather than fixing it to be exactly 7.17.0:```suggestion        final
Candidate: i think we use a fan of the check that the actually `token` of the broken on the absence of ql.         
Reference: similarly here.
Candidate: can we add assertnull for `indices_permissions_key` in question.
Reference: similarly here.
Candidate: ```suggestion                             
Reference: this is only used in the legacy format which we shouldn't really be reading here, but i think this means that the index compatibility check will fail before the node
Candidate: ```suggestion                             
Reference: should we set `oldestindexversion` back to `version.v_empty` here if the key is missing? otherwise we end up returning a `nodemetadata` that never really existed. super-rare case i know...
Candidate: ```suggestion                             
Reference: nit: could we keep this as a `version` as long as possible?```suggestion        void preparecommit(string nodeid, long currentterm, long lastacceptedversion, version oldestindexversion) throws ioexception
Candidate: can we assert in this pr?
Reference: similarly here:```suggestion        public void writeincrementaltermupdateandcommit(long currentterm, long lastacceptedversion, version oldestindexversion)```
Candidate: this seems unrelated to me, but i wonder if we could remove this.
Reference: aha yeah this is what i meant in a previous comment - we should report this as the node version being too old rather than mentioning `v_empty`.
Candidate: can you use the `must_exist` request?
Reference: could we have a third branch which mutates the new field and leaves the other two fields alone, to verify that `equals()` does compare the new field too?
Candidate: ```suggestion                             
Reference: did you look into adding a test provoking this specific issue consistently?
Candidate: this does not sure it should be a real value as well?
Reference: i think we can check both true and false here?```suggestion            randomboolean(),```
Candidate: i'm not sure why we need to pass this pr?
Reference: can we also validate that `rejected` has 0 or `queuedaftershutdown` dependent on `rejectaftershutdown` here?
Candidate: maybe add a test for a test for a test for a test is misleading
Reference: should we also verify adding new tasks after termination are rejected?
Candidate: maybe add a test for a test for a test for a test is misleading
Reference: should this not check against `isterminated`? perhaps just remove the `if`?
Candidate: maybe add a test for a test for a test for a test is misleading
Reference: can we also check that it is `lessthanorequalto(max + queued + queuedaftershutdown)`?
Candidate: maybe add a test for a test for a test is misleading
Reference: can you clarify this todo?is it something to fix in this pr, or should someone fix it in the future?
Candidate: ```suggestion                             
Reference: nit: with checkstyle rules these large xcontentbuilder setups are hard to read. i'm wondering if we can use the new java text blocks to create the mapping from a readable
Candidate: do we add a test for this test for the test that we don't have a test for the test that we don't have a test for the test that
Reference: looks good to me, maybe @romseygeek has some comments on directly checking the field separator though because he is currently working on allowing dots in fields names. as far as
Candidate: i think we can check for the searchable setting rather than adding searchable setting
Reference: this semaphore seems unnecessary to me, maybe i'm missing something?
Candidate: add a test for the
Reference: moved this to `assignments`. now executor will verify it `only` executes own tasks
Candidate: add a test for the
Reference: got confused by this, thought it should perhaps be an assertion instead. this'd clarify:```suggestion                
Candidate: since we can add a test for the test since it is no longer in the real and 5xx.
Reference: missing task id?```suggestion                    throw new assertionerror("task [" + id + "]
Candidate: add a test for the
Reference: i'd prefer to avoid suggesting that we're considering changing this behaviour:```suggestion                   
Candidate: add a test for the
Reference: neat :)
Candidate: add a test for these?
Reference: cannot be *de*serialized.
Candidate: should you add a comment here for the
Reference: note for anyone else scanning this pr - this skips registering the agg if the feature flag is not enabled. the agg is still registered regardless of the index's mode.
Candidate: i think this is a test to remove the archives is done on the rest of having a test to when the ids.       
Reference: i think this should be outside the `if` statement - we want it even if we're collecting in order.
Candidate: i'm not sure about adding a comment about adding the existing method?
Reference: it's actually simpler, the command need only be```docker run --name <node-name> -p <host-http-port>:9200 --net elastic -e "enrollment_token=<token>" docker.elastic.co/elasticsearch/elasticsearch:8.0.0```since https://github.com/elastic/elasticsearch/pull/81082
Candidate: i don't think we need to check for the `indexinput`
Reference: this part allows us to handle deeply nested object paths that become flattened at some arbitrary point.  `getdynamicparentmapper` will stop building intermediate object mappers if one of them is
Candidate: this is kind of leftover?
Reference: in your opinion, does changing these tests from directly testing documentparser.createdynamicupdate() to parsing full json objects also change their coverage? as far as i understand, we previously sorted all mapper
Candidate: i don't think we should rename this to be an npe to something like "x filtering.              
Reference: maybe pass `indexversioncreated` in rather than make the extra member. it looks like it's pretty close at hand on the caller.
Candidate: ```suggestion                             
Reference: will we call this one? or do we just have to implement it because we extend `objectmapper`?
Candidate: ```suggestion                             
Reference: you could do `updatedfollowers.keyset().removeall(removedremoteclusters)`?
Candidate: we we we should make the same here
Reference: i understand you're tackling https://github.com/elastic/elasticsearch/pull/82740#issuecomment-1020962081 .if it is important to you, take care to align the leading spacing of subsequent rows.
Candidate: ```suggestion                             
Reference: just to share the discussion we had on this: this may be something we want to fix in some form. it's somewhat weird that reroute forces an assertion on us
Candidate: ```suggestion                             
Reference: this test bug was almost impossible to reproduce when making 1000 connections, but it happened almost every time with 2.
Candidate: ```suggestion                             
Reference: it would be great to add some message to assertion. may be `some connections are not released (by validator) in time`?
Candidate: ```suggestion                             
Reference: i think we are changing the contract slightly here in that a reroute may now result in the listener being invoked with a cluster-state that was not rerouted. most of
Candidate: can we use a issue for the failures to read the failures data streams then we use the same failures
Reference: i am tempted to ask you to leave hasnested given we call in quite some places and we could have this comparison within that method instead.
Candidate: @romseygeek is this is splitting it is splitting to the outcome
Reference: if we left hasnested like i proposed above, would it make sense to enforce that this is only called when hasnested returns true, or would the nestedlookup also retrieved in
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i am assuming this is checked elsewhere now, or is this exception no longer needed?
Candidate: i think it is be null for the mapper?
Reference: same question as above, where is this check performed now? i guess earlier? do we still throw exception though?
Candidate: ```suggestion                             
Reference: we can replace this with an ord comparison now that we know there's a single value, but let's do that in a follow-up.
Candidate: i don't think we can be removed?
Reference: should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: i don't think we need to make this on a brand in the fact that we did not entirely data streams
Reference: again, should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: i don't think we need to make this on a brand in the fact that we did not entirely data streams
Reference: perhaps add `@nullable` to the method here?
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: perhaps also add `@nullable` here?
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: can you include the time ranges in the error message so that a user can tell what the overlap is?
Candidate: i think it might be worth adding to "recoveredtypes" here?
Reference: are the ranges inclusive or exclusive? i am just curious whether start time is inclusive and end time is exclusive, or how that works?
Candidate: i think it might be worth adding to "recoveredtypes" here?
Reference: and also here, for outputting a lowercased version of the index mode
Candidate: ```suggestion                             
Reference: same comment about perhaps having a dedicated `tostring()` on `indexmode` that serializes it in a good way
Candidate: i think this is ok to see whether we is going to fix in the other hand i think we are going to look at it)
Reference: i believe there's a couple of other api that support ccs and should hence support the new flag: most of them are listed [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cross-cluster-search.html) but there's also resolve index and
Candidate: this is a bit of a similar to the the
Reference: can't we do the same that we do for the previousmajor? why go through all the declared version?
Candidate: this is a bit odd, i don't think we don't want to keep this.
Reference: i see what you mean. these multi requests are tricky in general because they get converted to other requests and those are the ones that get sent over the wire.
Candidate: i don't think it is be possible to handle the elsewhere, i don't see lots of one?
Reference: i see that this is only exercised by the ccs compatibility flag, which is fine. thanks for trying the approach of moving the logic to version. i was hoping it'd
Candidate: this is a bit odd, i don't think we don't want to keep this.
Reference: could you move the above `fastly.net` test here and then add a comment to the effect that it, the `googleapis.com` test, and the `content-autofill...` test are testing third-party etlds? i
Candidate: ```suggestion           startgate.countdown();                  
Reference: just a thought from looking at the profiling you posted: this might be happier as a normal loop :) the `phasesteps` list is mostly (always?) very short and setting up
Candidate: ```suggestion                             
Reference: can you add javadoc to this too please, since it isn't as clear when this is intended to be used?
Candidate: ```suggestion                             
Reference: can you add a comment about why instance equality is used here and okay rather than object equality?
Candidate: ```suggestion                             
Reference: i wonder if there is an (benign for sure) risk of a leak here: if a policy adds a step to the cache concurrently with it being deleted here, i
Candidate: same comment about not sure about the same is not needed?
Reference: assertion change is unrelated, just felt the need to clean this up and make it a little clearer what we're asserting :)
Candidate: i think this should be consistent, i don't think we should be in the data stream data stream data stream depending that the indices data stream data stream data stream
Reference: i wonder if we need to build `indexttodatastreamlookup` at all? could we not simply populate `indiceslookup` directly here instead and ignore those below (asserting that they are data stream owned
Candidate: i think this should be consistent, i don't think we should be in the data stream data stream data stream depending that the indices data stream data stream data stream
Reference: looks like an extra `;` here?
Candidate: is there is a test for the downcast (int i += 2.0;)
Reference: ```suggestion                            .field("num_tag", i
Candidate: ```suggestion                             
Reference: we'll run this as a cluster state applier so we can't throw exceptions if we're in an invalid state somehow. we can definitely assert that they're valid, but in production
Candidate: is there is a test for the case here.
Reference: leftover?
Candidate: is there is a test for the case here.
Reference: i think applying the read/write factor _and then_ the overall factor might lead to surprise, given that we have other settings like `cluster.routing.allocation.node_concurrent{,_incoming,_outgoing}_recoveries` where the unqualified setting sets both of
Candidate: is there is a test for the case here.
Reference: i wonder if this is what we want here? i would think this should be `min(availablediskreadbandwidth, availablediskwritebandwidth, networkbandwidthbytespersec) * maxovercommit`? at least in it's current form we practically only use
Candidate: what is this test to reproduce the data node of the data node itself as well?
Reference: i think rebalance can kick in after this check, i'm not sure if there's another way to fix this other than disabling the rebalancing during this test.
Candidate: i think this is a test to be fake
Reference: i wonder if `searchresponse` should hide this behind something like a `hasaggregationresults` method.  at the very least, we should add some javadoc somewhere (`searchresponse#getaggregations()` maybe?) to say that we
Candidate: i'm not be a test equals documents that they fail disabled test disabled they reduce a test that they reduce a test that they reduce a test that they reduce
Reference: i like this change, because `aggregationbuilders` is a weird class that i don't understand the need for, but i'm not sure why you're making it here.  is it just
Candidate: let's add a test for the test to the test that keeps a test to the test that keeps a test by asserting the test by the data streams and
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to have a test for the meta in the write thread in the write well.
Reference: i prefer to invoke `listener.onfailure` directly rather than throwing exceptions even though it will need an else block below.
Candidate: i think this is a word?
Reference: i think we should simply remove the acknowledged flag from the response, just like adding voting config exclusions do not have it. the client should not care about acknowledged, only
Candidate: ```suggestion                             
Reference: maybe add comment that we rely on the unbatched executor here?
Candidate: ```suggestion                             
Reference: i think this verifies what the method name says by not throwing when setting the desired nodes? perhaps add a comment if so.
Candidate: can you add a comment for `indices_permissions_key` as well?
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to have a test for the meta in the write thread in the write well.
Reference: i don't think we need to keep the two argument version of this method.
Candidate: ```suggestion       withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i haven't really wrapped my head around when nextfilters is empty. that's why i did mine in the caller. could you explain what's up here?
Candidate: i think we should have a dateutils field that in the field object in aggregations and `newindexmetadata`?
Reference: were we silently not returning any result when the field was not indexed? or failing later with some other exception?
Candidate: i think it'd be nice to avoid adding a `string` to avoid adding a `string` to avoid having a comment value here :)
Reference: this makes me a bit nervous. we use the original script only in equals/hashcode, and we use the empty script already for script-less runtime fields that load from _source: https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/index/mapper/abstractscriptfieldtype.java#l212
Candidate: i think it'd be nice to avoid adding a `string` to avoid adding a `string` to avoid having a comment value here :)
Reference: not too sure when this was introduced. i am thinking during the 7.x series.
Candidate: see my comment about littering.
Reference: unintended, will be removed with next reviews caused commit.
Candidate: why don't them them them them them them in them rule?
Reference: version check added to the verifier since ideally we want only the "top" project be inspected: if the query specs an unsigned_long in a subselect, that would lead to no
Candidate: i revert.
Reference: the syntax of this phrase is weird.
Candidate: include my if we include it, include it, if include it, include it, if include it, include it, if include it, include it, if include it, include my include include
Reference: shouldn't this be `< 0` ?
Candidate: ```suggestion                             
Reference: is this correct? if we have: `-10::int x 1000::unsigned_long` then we end up with a negative unsigned long which will throw an exception.
Candidate: i'm not sure if combination is a combination of `keyword` and `constant_keyword`. right sense to prioritise right right sense to prioritise right sense to prioritise right sense to prioritise right
Reference: don't think that's the place to check that, that should be when creating a literal unsigned_long or converting another numeric datatype to it.
Candidate: ```suggestion                             
Reference: i found `unsignedlongfieldmapper.parseunsignedlong` (private). wondering if this could be used for parsing. of course, asking the search team about this first, and making that method public.
Candidate: include my if we include it, include it, if include it, include it, if include it, include it, if include it, include it, if include it, include my include include
Reference: i'd move this method at the bottom of the class.
Candidate: let's add assertnull for `indices_permissions_key` as well.
Reference: all the operation methods in this class have a similar style: check the type of the values, if they are x or y then do this. i'd keep the same
Candidate: ```suggestion                             
Reference: not a fan of assertion. they are very punitive - the jvm crashes essentially. it's easier to just check and throw an exception to report even a potential server issue
Candidate: i think this block is doing?
Reference: please move it after the rest of the other statements.
Candidate: i wonder if we should sort of this logic here.
Reference: `index ++` => `index++`
Candidate: i don't have assertnull for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for the
Reference: is the error message correct? is it an overflow or an incorrect/unsigned operation?
Candidate: ```suggestion                             
Reference: any reason for the method rename?
Candidate: can we use a test for the rate limiter. maybe instead of a test method?
Reference: the name is incorrect - integer is also a type so reading this method i would expect the return type to be `int`. as such i would use a different
Candidate: i don't think we can be a comment here why not this.
Reference: small nit: testaddunsignedlong - keeps the naming convention in place and it's easy to understand it's just another type of add.
Candidate: ```suggestion                             
Reference: either all other methods have an import static for types or none do.
Candidate: why does not need to use this change?
Reference: typo: length
Candidate: 👍
Reference: put this into a method. since safetobyte are used on a primite but in this case it's actually a number, check the rest of the usage since its quite likely
Candidate: i'm not sure that this change?
Reference: extract this into its own method like the rest - which keeps things clean and their intent clear: checkclientknowsdatatypes().
Candidate: i revert.
Reference: when is version suppose to be null? should it be always initialized?
Candidate: i revert.
Reference: not sure what you mean by this comment - but there can be projections with literals.
Candidate: i revert.
Reference: needs rephrasing with the workaround as well - "upgrade required (to version y or higher)".
Candidate: i revert.
Reference: why is the drive mode important? what if the non-drivers want to be versioned (as is the plan for the rest apis)?
Candidate: there's no need to include a list that we're already computed, on the ids.                
Reference: since this check occurred in a previous class, it should be extracted since otherwise its fairly obscure and repetitive.
Candidate: same here
Reference: the `try {} catch()` block seems to be needed only for the `bi` initialization at the top. why surrounding the entire block of code with the `numberformatexception` try-catch?
Candidate: i don't think we can be a comment here why not this.
Reference: a comment would be useful
Candidate: i don't have assertnull for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for the
Reference: instead of adding if code inside the existing methods, create dedicated methods for the unsigned long tests - this makes it easy to reason about what's wrong and skip them.
Candidate: i don't have assertnull for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for `indices_permissions_key` test for the
Reference: same comment here about extraction.
Candidate: can you add comment to make sure why the comment here :)
Reference: this is hard to read - extract the stream outside the string to smiplify the concatenation.
Candidate: i don't have a test for the stack trace for `indices_permissions_key` trace for the rest of the stack trace emitted, so we don't have a test for the test for
Reference: looks like bad formatting/identation.
Candidate: ```suggestion                             
Reference: creating a method just for this line of code is, imo, unnecessary.
Candidate: can we add a comment explaining why can't we use the instead of hardcoding here?
Reference: i may be missing something, but why if the sign of the biginteger is "minus", we are still converting it? shouldn't this case be caught by the check below where
Candidate: i don't think we don't need to handle the single here for this.
Reference: why this change?
Candidate: maybe add something                           
Reference: this check is useful only when not doing select * - that is when the consumer specifies each field individually. the two approaches need to be aligned - either we
Candidate: i revert.
Reference: i believe this is incorrect - any column using of an unsupported type should be exposed as such - unsupported, not hidden from view.
Candidate: there's no need to specify the list that there's doing on the already doing deep
Reference: `verifier` can be on the same line as `new analyzer`
Candidate: can you add a comment here why we use the test for the parent parameter to the same `if`?           
Reference: why using this variable instead of the static constant? i find it confusing tbh.
Candidate: can you add a comment here why we use the test for the parent parameter to the same `if`?           
Reference: should it be bigdecimal or biginteger / unsigned long?
Candidate: could you add a comment that the non-value and check whether it is enabled. and `coalesce` == 0) {           
Reference: no biginteger?
Candidate: ```suggestion                             
Reference: ```suggestion    public void testconversiontounsignedlong() {```
Candidate: ```suggestion                             
Reference: this fixes the version to `introducing_unsigned_long` but `istypesupportedinversion` is generic. when adding more types this might lead to subtle errors where the wrong required version is suggested. maybe `istypesupportedinversion` could
Candidate: maybe also use the default_primary_term?
Reference: i think the result type should be `double` for ulong.at least that's how es behaves:given a mapping like```{  "mappings": {    "properties": {    
Candidate: nit: space cast
Reference: could `parseintegral` also directly return the best fitting `number` type? right now the downsizing from `biginteger` to `long` happens in `parseintegral` and from `long` to `integer` here and in 
Candidate: i'm not sure that this is doing?
Reference: assert should probably be replaced with an exception?
Candidate: i'm not sure that this is doing?
Reference: how about `types.real`?
Candidate: should you add a comment here to the min the min to ensure the min the min the min the min and use the specific type to the min and
Reference: why do you create a new verifier for, basically, every query only because there is a tiny check dependent on the version?the advantage here is that the session holds the
Candidate: ```suggestion                             
Reference: same here about loading the same mapping file multiple times. isn't it enough to load the file once?
Candidate: ```suggestion                             
Reference: all these tiny changes to tests classes to introduce the version in the constructor shouldn't, hopefully, be needed anymore.
Candidate: ```suggestion                             
Reference: i think this new method creates a bwc issue in mixed node environments. maybe consider bumping the `mincompatibleshardnode` version in `org/elasticsearch/xpack/sql/execution/search/querier.java:147` and cover it in `sqlcompatit`.
Candidate: why does not it intentional here?
Reference: leftover.
Candidate: 👍
Reference: i think there should be a corresponding change on line 84?
Candidate: why we we need to pass the to the the logic to the the we don't need to get rid of creating the logic to the user?
Reference: i'm wondering whether it makes sense to make `name` and `component` enums instead of plain strings, so we don't confuse them by accident, especially with static imports.
Candidate: ```suggestion                             
Reference: is there are reason for `sleep` rather than a scheduled thread?it's minor issue but it's better not to use up one on the generic threads sleeping.
Candidate: i'd prefer to cache in the error in in in in in in in in in in in in in in in in in in in in in in in
Reference: is there a reason we signal rather than just moving the call to `initialnodesecurityautoconfiguration.maybegenerateenrollmenttokensandelasticcredentialsonnodestartup` into this method?i presume it's because we'd need to push all the arguments somewhere, but with
Candidate: ```suggestion                             
Reference: we can wrap this method inside a `if (assertions.enabled) { ... }`
Candidate: ```suggestion                             
Reference: i'd prefer this constructor to be an instance method of authentication. it then can have a better name for the intention, e.g. something like `authentication.mayberewriteforversion(version)`.
Candidate: ```suggestion                             
Reference: nit: existing getter methods in this class following the builder type naming convention, e.g. `name()` instead of `getname()`, while this method uses the javabean naming convention (`getxxx`).  i am
Candidate: ```suggestion                             
Reference: ```suggestion                        authentication.runas(new user(runasusername), null),```
Candidate: can we add a comment here to ensure that the type is casting to ensure that the window is always agree), i wonder if we need to handle the the
Reference: nice catch!
Candidate: ```suggestion                             
Reference: why do we now need to increment this settings version? perhaps you can add a comment about why this is necessary?
Candidate: i'm not sure i think we should remove this two be a to be updated. if it might be worth anything?
Reference: i notice that we call `instant.ofepochmilli(resolvedat)` multiple times here, should we make it a variable at the beginning and reference it? it's not really a big deal, so up to
Candidate: i think we need to add a comment that the min specifically is configured at the cache?
Reference: can you add an assertion string to this so we have a better failure message if es every dies in tests?
Candidate: i think we need to add a comment that the min specifically is configured at the cache?
Reference: i see the need for this now though i wonder if we could find a reasonable approximation and make the failing check below a range instead? we could use `[lcp,
Candidate: ```suggestion                             
Reference: this api is so trappy. i opened https://github.com/elastic/elasticsearch/pull/83407.
Candidate: i think we can rename to rename the update in the cluster update that the update to update the cluster state update the update in the cluster update in the
Reference: recommend also bounding the wait time (`asserttrue(blockingclusterstateupdatetaskexecuting.await(10, timeunit.seconds));` and similarly for `unblockclusterstateupdatetask`).
Candidate: i think we can rename to rename the update in the cluster update that the update to update the cluster state update the update in the cluster update in the
Reference: i think it'd be worth adding a comment about how this works.
Candidate: ```suggestion                             
Reference: odd newline. is that what the formatter wants?
Candidate: i think we can add a comment that it is executed here?
Reference: i think this is right. but would we end up with a data-check as well, for instance if an upgrade from 8 to 9 means we no longer support es
Candidate: ```suggestion                             
Reference: :+1:
Candidate: small check: we can be done upstream
Reference: much cleaner, thank you.
Candidate: why is this necessary?
Reference: if this is only used in this method i think it should be private. i think other aggs have something like this be public but i don't know why. i
Candidate: could you add a comment to for the request and select the request and we need to have a biconsumer?          
Reference: should this be a critical message? or is it likely that we'll never actually remove support for the empty type array so warning is more appropriate?
Candidate: ```suggestion                             
Reference: ☕  is a good dimension
Candidate: do we need to have a test for `indices_permissions_key` as well?
Reference: i thought you said no production code changes 😄
Candidate: i don't think we need to do this method name.
Reference: could this be package protected?
Candidate: can we add a comment to the `schedule` yesterday. it might be worth grepping the documentation.
Reference: i see that there are existing callers of this method in fieldmapper. was it not accurate before? i get thrown off that we look at field mappers later, and runtime
Candidate: do we need to expose the indexanalyzer? in mapperservice?
Reference: you know that i get nervous about this functionality :) i would prefer that we don't need this, because i have the feeling that it is going to be misused.
Candidate: i'm not need to expose mapperservice? mapperservice?
Reference: i don't think 7_17_1 is the earliest possible version though, right?
Candidate: can we need to use `writestringcollection` that this will need to be in the backport because we are no need to the check.
Reference: please consider using `.tolist()` instead of `.collect(collectors.tolist())` in new code. it is concise and also produces immutable list
Candidate: maybe we be a test for a single warning and be checking for `startbasicclustertask` in a single line?
Reference: this is hacky but we need some context to call context.path().add and remove. i did this to keep things simple.
Candidate: ```suggestion                             
Reference: @hendrikmuhs is this ok? i've made the builder not output xcontent for it's defaults and most of this was the defaults. like the comment says.
Candidate: can we add a comment for `indices_permissions_key` as well?
Reference: most of the other checks run against a default value by way of a variable that's explicitly named as such; i know this default isn't likely to change but is
Candidate: can we add a couple of `currentindexmetadata` and for the rather than `emptymap()`.
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to have a test for the meta in the write thread in the write well.
Reference: maybe good to put a comment here in word saying what this does.
Candidate: why does we need to pass the the method to creating the the in the user?
Reference: maybe more readable with `} else if {`
Candidate: can we use a comment that checks for the usage of checks that checks that checks that checks that checks that checks that checks that checks that checks that checks
Reference: i think you should move the v_8_2_0 thing to a different pr. it'll save a byte which is great but it makes the pr hard to backport.
Candidate: can we need to use `writestringcollection` no need to for the check.
Reference: this gets decided when the `lucenedocument` is built - no need to check.
Candidate: ```suggestion                             
Reference: does it mean that nested documents can contribute dimensions into the root document? i don't think we should allow it.
Candidate: ```suggestion        xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: a lot cleaner this way. happy to see the conditional leave 👍
Candidate: ```suggestion                             
Reference: i'm not sure about this change here. it is a bit unrelated to the direct issue this pr is addressing, and needs discussion with a larger group of folks. can
Candidate: i think it makes sense to remove these conditions, and remove the use defined `readcomplexjsonelement`?
Reference: i think it'd be better to capture the context deeper down. perhaps within the constructor to `restoreclusterstatelistener` (solving two problems addressed in this pr), but actually maybe the `clusterapplierservice` should
Candidate: ```suggestion                             
Reference: this one is suspicious to me: this doesn't seem like a place where the context might get lost since we're just executing an action on the remote client. again i'd
Candidate: ```suggestion                             
Reference: this one's also suspicious to me. i'm guessing one of the inner actions loses the context? would be better to fix the action itself rather than doing this imo.
Candidate: here
Reference: ah oh no, hang on, this will break `removelistener()`
Candidate: ```suggestion                             
Reference: randomize the leniency value.
Candidate: see my `requestinfo` constructor. see my comment `requestinfo` constructor.
Reference: nit: there is also `randomboolean()`
Candidate: see my `requestinfo` constructor. see my comment `requestinfo` constructor.
Reference: small comment, we usually would do `dotproduct(queryvector) / (densevector.getmagnitude(queryvector) * getmagnitude());` since it's more readable (similar to how you'd write it mathematically) and potentially a little faster.
Candidate: ```suggestion                             
Reference: removing this if check is safe here. now any node will attempt to start the downloader task if it hasn't started all ready (the start task call is executed on
Candidate: ```suggestion                             
Reference: fly-by comment: i believe we can initialize `throwable t` in one go with a ternary operator```javathrowable t = e instanceof remotetransportexception ? e.getcause() : e;```
Candidate: can we add a comment that the contents of getting on the index mapper plugins?
Reference: nit: it seems we need a whitespace before `failed to remove` otherwise the class name won't be separated from it.
Candidate: can we add a comment here to reflect the single block here that the data frame "]"`); can
Reference: ideally, authentication headers are already filtered and converted to minnodeversion when persisted as part of a task configuration. when they are retrieved and used, there is no need to filter
Candidate: ```suggestion                             
Reference: nit: we might use `org.elasticsearch.common.util.maps#newmapwithexpectedsize` to avoid resizing the map
Candidate: i think we need to add a comment that this is to be a bit more than in this pr?
Reference: this should probably be captured and cause the assertbusy to fail with an assertion?
Candidate: i don't think we need to test for this test in question.
Reference: converting to a set isn't anymore efficient than just looking through the list. is there som other reason we need an intermediate set to assert the feature was processed?
Candidate: i don't think we need to test for this test in question.
Reference: adding this here because i can't arbitrarily add comments to lines that haven't changed :/ :should we log a warning when we load client_authorization_type and it is set to client_authorization_type_none
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: i think we will need a few more test methods in this class:- verify that jwts with invalid signatures are rejected- verify jwts that are tampered are rejected- verify unsigned
Candidate: ```suggestion                             
Reference: this and above type cast could be avoided. see my other comment
Candidate: same here
Reference: ```suggestion            keys = shufflemap(keys, collections.emptyset());```looks like this was accidentally missed
Candidate: same here
Reference: i am not sure i follow this, is that not identical to the default `threadedrunnable` behavior (used by `schedule`), except not checking that the threadpool was indeed shutdown?
Candidate: see my test for `esrejectedexecutionexception`-handling, which arose here.
Reference: a true nit, but i prefer to capture the `threadpool.relativetimeinmillis()` explicitly right after the write to not have to worry about any time spent in any of the (obviously fast)
Candidate: i don't think we can log a comment that we shard shard files to help the shard version
Reference: all nodes to be on
Candidate: why no need to use `writestringcollection` no need to the extra force_merge_uuid_na_value. it need fail) fail)
Reference: here's an idea for how to refactor this so we don't need this new `lookupfieldcollector` abstraction:* update `valuefetcher` with a new method `fetchdocumentfield` that returns `documentfield` and can be overridden
Candidate: i think we can make this setting to check that we are casting for the searchable setting rather than adding searchable setting
Reference: any reason we both assert and throw here?
Candidate: i think we need to use `writestringcollection` no need to make the extra force_merge_uuid_na_value. we're no need to be force_merge_uuid_na_value. it need fail) fail)
Reference: we don't need to check this for subsequent scroll requests, but it's okay to leave this check as is here.
Candidate: can you remove this into a boolean instead of a separate method method?
Reference: could we have a nontrivial `keymapper` in the test, e.g. take the first couple of characters of the string?
Candidate: i don't think we need to stop indexing?
Reference: this fixes the test problem where transport client used in testing is missing systemindexmigrationtaskparams/state entriesi think these entries should be the same as in node classhttps://github.com/elastic/elasticsearch/blob/7.17/server/src/main/java/org/elasticsearch/node/node.java#l538how about the namedxcontentregistry in
Candidate: do we have a to check for the plugin on the phases ordering plugin on the phases             
Reference: is there a case where the cursors would not all use the same internal writeableregistry regardless of the user request?that is, why isn't it a constant and has to be
Candidate: 👍
Reference: unnecessary empty line.
Candidate: nit:```suggestion                             
Reference: we don't actually need the license state anywhere in 8.x (yet), but i figured while i was doing all this work to make 8.x more consistent with 7.x i might
Candidate: this is a a better to be a a for a a a new prefix :)
Reference: should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: i don't think we need to make this on a brand in the fact that we did not entirely data streams
Reference: again, should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: i don't think we need to make this on a brand in the fact that we did not entirely data streams
Reference: can we replace this assertbusy with something like:```java// wait for the geoip-downloader persistent task to be assigned to 1 node        clusterserviceutils.awaitclusterstate(logger, state ->
Candidate: i think we should add a variant to the cat cat `scaledrandomint`?
Reference: assertacked() here too
Candidate: i think we should add a variant to the cat cat `scaledrandomint`?
Reference: i thought the place to do this was now `machinelearning`? xpackclientplugin is just for the transport client that is being removed no?the fact that we do named writeables vs named
Candidate: i think we should be used in the base in the base the base the in the base the
Reference: since this assertion is to test different username, technically the realmref should be kept identical, i.e. ```suggestion             
Candidate: ```suggestion                             
Reference: i wish java has `val`
Candidate: can we also add a method that every cluster state / indices.
Reference: same as above: `private` vs `public`
Candidate: ```suggestion      xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: we want to apply this logic to all inter tests tasks that are created in a module / plugin project
Candidate: i'm not sure that we have a test that have been created?
Reference: i suggest we add a comment here or at the method level to explicitly emphasize that we *only* consider domain information from the incoming authentication (`this`), and *not* the ones
Candidate: can we add a comment here for the `if and return correct?```objects.equals(                  
Reference: what's the policy around setting this wrt experimental features?  i'm not totally sure how this is used.
Candidate: see my comment about littering.
Reference: ```suggestion                "invalid configuration for [" + prefix + "] - the truststore [" + path
Candidate: this is is a bit more descriptive name?
Reference: nit: i wonder whether it would be a more realistic test if this keystore file contains just private keys instead of being truly empty?
Candidate: do we have a test for the test that we have been testing in the test that we have been red for the test rather than `emptymap()`.
Reference: the need for an explicit cast here is a little unfortunate. is it disruptive to rename the builder method, to say putallfrommap or something?
Candidate: ```suggestion                             
Reference: i don't think i like this assert, because if the cache were to fail (let's say someone comes along and changes some of the `if` statements above), then it could
Candidate: ```suggestion                             
Reference: can you add an assert error message to this? (it's so much nicer than getting back a generic `assertionerror`)
Candidate: ```suggestion                             
Reference: can we add a test for this such that it fails and moves ilm to the error step?
Candidate: i think we can check for the check for the there is configured for for for the alias for the for the for the for the for the for the
Reference: optional thing, but if you want this can be changed to `.values()` instead of `.entryset()` since the key is never used
Candidate: should you use the for the use above
Reference: xcontent parsing is currently only used for testing.
Candidate: i'm unrelated to be pr, but can theoretically be this pr, but theoretically theoretically theoretically be a somewhere createindexresponse,
Reference: according to the line above it is always not null
Candidate: i think we can add a comment that the non-value of `currentindexmetadata` and then add the mapper for the timestamp mapper that the allocation data stream
Reference: now that `readresults()` is not called in the try-catch block in the result processor, this could throw here and it'll be unhandled.
Candidate: ```suggestion                             
Reference: when would we ever hit this case for settings? aren't all values in the flat settings map either string or list<string>?
Candidate: i think this is a good for the write a corresponding node.
Reference: i guess we could include all the logic within this privileged block, that would simplify this code.
Candidate: can we add a comment that in the initial request?
Reference: i think we need to close this inputstream once we're done with it?
Candidate: can we add a comment that in the initial request?
Reference: i think we need to use a `put` request method here? https://docs.aws.amazon.com/awsec2/latest/userguide/configuring-instance-metadata-service.html
Candidate: can we add a comment that in the initial request?
Reference: another way to write this, without a compound expression, would be:```if (boolean.false.equals(aliasmetadata.ishidden())) {```
Candidate: i'm not sure that we need to be a method that the data streams / indices. add another method to make sure that they sure it is
Reference: nit: why not import `java.security.accesscontroller` and use the simple name instead of the full qualified name? everywhere else seems to use the simple name.
Candidate: for this comment as well?
Reference: nit: why bother with the `if`? the comment makes it clear why this is here, and it shouldn't make a difference to just always do it.
Candidate: can we re-wrap this string line?
Reference: should we authenticate with the token here?the test is checking that the token is created correctly with the right realm, and it feels like the best way to check both
Candidate: ```suggestion                             
Reference: since the pr description seems to indicate this change leads to better error messages, i wonder if there is a possible test that could be written to show that case?
Candidate: ```suggestion                             
Reference: looking at the code, needsnormalize does quite an extensive check, so i presume this adds some performance cost?
Candidate: ```suggestion                             
Reference: the additional checks in the tesselator also add some performance cost.
Candidate: this comment be replaced for this test for consistency
Reference: i am not sure why this change is needed? i wonder if using `documentparser` is no longer legal?
Candidate: this change necessary?
Reference: can we also add `assert id != null`? just to prevent that the exception is caught and handled in tests.
Candidate: ```suggestion                             
Reference: i think this is a user-facing error message. i wonder if we should special handle the `null` to be more user-friendly, like say "auto-generated id"? i could imagine someone opening
Candidate: can                             
Reference: will you tackle this todo here or in a follow-up? seems relevant to have recovery tests run with the tsdb id field mapper.
Candidate: i don't think we should use the
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to have a test for the meta in the write thread in the write well.
Reference: can we call this inside the assert to avoid test only code be executed in production?
Candidate: maybe we add a test for this warning logic?
Reference: should this only test `createcomponentfromindicators` (which can be default protected) ?
Candidate: can we add a comment that the real name of the transport action cluster.                
Reference: there are a lot of these with the same implementation.  does it make sense to have an `abstractdocvaluesscriptfieldsource` that implements `toscriptfield`?
Candidate: ```suggestion     xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: what do you think about changing this to `getdefaulttoscriptfieldfactory`?
Candidate: ```suggestion    xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: `docvaluesscriptfieldfactory source`->`docvaluesscriptfieldfactory factory`
Candidate: i don't think we need to make the values as well?
Reference: this seems like it shoud be `fielddata.getscriptfield("test")`
Candidate: can we have a test for `indices_permissions_key` as well?
Reference: nice!
Candidate: ```suggestion                             
Reference: this is also used for java rest tests so i'm not sure this is correct. it "works" since the test framework is a transitive dependency but we don't actually _need_
Candidate: i don't think this is a bit that we have a bit easier to simplify this method that we is a bit more difficult to understand.
Reference: i think we don't need `aggregationcontext` down here anymore, right?
Candidate: i'm not sure that we have a method to have a a method that we have a hard to make sure if the result of the empty and in the
Reference: i wonder if it is better to have separate tests that only focus on this copying constructor and content type being null?
Candidate: can you add a comment here to make sure to accept a specific here and comparing the the selection and accept the
Reference: i wonder, can't we just get the same thing we have here by enhancing `org.elasticsearch.common.collect.iterators#concat` to `null` out the iterators in its internal array once done? seems like that thing
Candidate: can we add a comment that the real name that this is always executed on the ,does that this is important.
Reference: i had commented earlier, but somehow it was dropped! a tiny comment that this test case is now really long and it might be nice to pull out some set-up
Candidate: ```suggestion                             
Reference: i wonder if this will always return what we expect, because the lower bound is `minindexcompatversion` but we'd want `mincompatversion` instead?
Candidate: ```suggestion                             
Reference: do we need to wrap the stream with  a namedwriteableaware stream input here? i see an empty list later
Candidate: ```suggestion                             
Reference: this method returns the first match - does headerfields normalizes keys? for example `content-type` and `content-type` have their values under the same key or separate ones?
Candidate: ```suggestion                             
Reference: maybe a comment on why this is in `:test:framework` rather than `:server`, to avoid someone undoing most of this change in a follow-up.
Candidate: i don't think we can add a comment here why we for the
Reference: should we be calling this in case of failure as well?
Candidate: ```suggestion                             
Reference: i want to replace this predicate with a new `restrictedindices` class (possibly also subsuming the existing `restrictedindexnames` class) but that would have impacted more code than this pr needed to
Candidate: ```suggestion                             
Reference: i wonder if this is worth moving up to the `aggregationcontext`.  i feel like a `hasdoccountfield()` method might be useful beyond this, and i suspect it is intuitive to
Candidate: should `models_stored_as_resource` check for me?
Reference: i wonder if we should change the `setfailure` method instead.
Candidate: ```suggestion                             
Reference: is it possible to replace `arraylist` above with an `list.of` instead? this way we would not keep mutable array and will not create list every time somebody calls a getter.
Candidate: ```suggestion        xcontentbuilder withcompatiblemajorversion(byte compatiblemajorversion) {```
Reference: java set really lacks `containsany`: `context.requestheaders.keyset().containsany(headers_to_copy)` :(
Candidate: your context here, context sets your context at the context context context at the context sets default context and sets the default context and sets the context at the context
Reference: is this matching for a log message or entire log line (with timestamp/thread/host/etc)?if this is just a message do we need a `*`? looks like this is an exact match.
Candidate: this is that we have been testing on this.
Reference: it doesn't look like anything in `metadatastateformattests` exercises this `catch`. could you add a test that does?
Candidate: same here
Reference: i don’t think a uuid is necessary. it also would not reproduce. instead you can use a random string or number using the seeded random of the test?
Candidate: i don't think we need to call a test for `indices_permissions_key` is in the test for `indices_permissions_key` since we have a test to the test service in some test service
Reference: this seems to be unrelated?
Candidate: ```suggestion                             
Reference: you are doing this todo i think. sort of. you can't making a `comparteto` for the bucket itself - but you are supporting non-double sort values.
Candidate: ```suggestion                             
Reference: do we need to be that specific? if we went ahead with `logs-apm.*`,  `logs-apm-*`, `traces-apm.*`, `traces-apm-*` ,  `metrics-apm.*` and `metrics-apm-*` we'd lower the risk of missing data streams
Candidate: can we move the to include the for `indices_permissions_key` field for `indices_permissions_key` for `indices_permissions_key` as well?
Reference: i think we also should have a test for the literal `"kibana"` (with no suffix) which is the more likely production scenario.
Candidate: depending on the change on on the on on on on on on on on the on on on on on on on the on on on on on the
Reference: this is a consequence of not trying to serialise anything in a one-node cluster, which weakens the (best-effort) check that we can always serialise cluster states to some extent before
Candidate: ```suggestion                             
Reference: can you update the comment in `injectsandboxexceptions` to document that `securityexception` is caught and rethrown?
Candidate: this is
Reference: it seems odd that asking for the pluginservice is mutating the cluster. why can't this master only node be started in a `@before`, separately from trying to get the pluginservice?
Candidate: ```suggestion                             
Reference: i think we should add a message to this log statement about what's going to happen, something like "snapshot is already ongoing or in-use, this index will attempt to clean
Candidate: suuuper minor:```suggestion                            
Reference: can you format in a bit more context on this log message? maybe something like `snapshot [somesnapshotname] is already ... for index [someindexname], will attempt ...` (you could even use
Candidate: ```suggestion                             
Reference: wouldn't it be better to just use project references here and then have the test cluster convert that to a proper artifact dependency?
Candidate: i am wondering if we need to make this test the task, that we don't have a test to the write level of `executeconsistentstateupdate`, or something like
Reference: the orignal test was almost identical to `testrefreshingtoken`. i therefore recycled it into a token create/refresh with run-as .
Candidate: can we assert instead of passing the response value, as well?
Reference: ```suggestion                             
Candidate: can we add a comment here here.
Reference: sanity check: we should be checking on all attributes, including encrypted ones, correct? assuming this is the case since enc. attribute name clash can lead to the same misconfiguration and
Candidate: i agree on the previous method?
Reference: i'm checking the unwrapped query now instead of the original query, is this correct?
Candidate: i comment that `reason` is unnecessary?
Reference: unrelated but this was just the weirdest way ever to call two functions ...
Candidate: ```suggestion                             
Reference: i was wondering why you chose to always read and ignore the timestamp field instead of using the version of es to slowly remove the field from here.
Candidate: i don't think we need to be in reverting this class.
Reference: since we are using the strings util, should we test for non zero length but still empty?
Candidate: ```suggestion                             
Reference: i think this is more in line with normal exception logging:```suggestion                logger.error("fatal error {}: {}\n{}",
Candidate: should we have a test to in the case where we don't have an unbound in this method?
Reference: interesting, was this covered before through the isruntimefield method?
Candidate: i'm not need to expose mapperservice?
Reference: since this is a public method, can you add javadoc for it?
Candidate: i'm not sure this test here because we are not documenting emitvalues, i wonder if we should some test for this.
Reference: i think it might be worth adding a comment about why this doesn't use `metadata.builder(this).etc(...)` but directly constructs the metadata, so that it doesn't get accidentally undone in the future.
Candidate: i'm not sure this test here because we are not documenting emitvalues, i wonder if we should some test for this.
Reference: i had a chance to review it only after the pr was merged, may be we could consider this for a followup or a future change:may be we should have
Candidate: ```suggestion                             
Reference: i think i'd keep the return type on this one.
Candidate: i think we need to add a comment here about this.
Reference: i'd probably keep the return type on this one too.
Candidate: i we add a method that that that we less that that we that that we are less that that they are less that that they are less that that
Reference: ```suggestion                    "cannot start a new model deployment as not all nodes
Candidate: i think the best to be in the `systemindices` 1 as action. parameter, i.e. 1 transport parameter,
Reference: would it save anything to check whether `name` matches the `name` from the previous iteration and re-use the previous reader instead of doing another lookup? i expect in practice we
Candidate: ```suggestion                             
Reference: i think i'd just do the comparisons directly here. i'm not sure what the comparators buys.
Candidate: ```suggestion                             
Reference: nit: maybe replace this with stream/maptodouble.
Candidate: ```suggestion                             
Reference: might be worth adding another test showing that for non-drivers the cbor is not enforced, when no binary format is provided.
Candidate: ```suggestion                             
Reference: do the tests require an always `false` value, or could it be random boolean?
Candidate: ```suggestion                             
Reference: please use an anonymous class for sending the response:```return channel -> client.executelocally(sqlclearcursoraction.instance, sqlrequest, new resttoxcontentlistener<>(channel) {    @override    public restresponse buildresponse(sqlclearcursorresponse response) throws exception {//
Candidate: maybe extract it into a method to be a good to
Reference: i presume this means that the last fetch field that matches dominates?
Candidate: i think it'd be nice to include
Reference: i presume `searchhits.getfields()` contains the subset of `request.getfieldandformats()` that was actually found? so this way we skip fields not found?
Candidate: i don't think we need to add a test for this.
Reference: i presume this defensive coding it not really required because the fix in restvectortileaction should already remove the nulls? do we have this code in case there are other code
Candidate: ```suggestion                             
Reference: sanity check: i'm assuming there generally won't be many roles so it's fine to include them all. is that valid or should i add a e.g. `limit(5)` to keep this
Candidate: do we have a test for this?
Reference: this should be the first argument after the string message.
Candidate: ```suggestion                             
Reference: this if statement does look a bit complicated.can we instead have two simpler if statements for the valid cases?one if statement for when `indexabstraction` is a data stream and one
Candidate: i don't think it will be nice to create a data streams here?
Reference: we should use list, not arraylist, whenever passing these arround (ie in return types and local variables).
Candidate: ```suggestion                             
Reference: small comment -- to me this test doesn't add much except guard against someone accidentally changing the skip factor. i think it'd accomplish the same to add a code comment
Candidate: i don't think we need to verify in the `byte[]`
Reference: is this needed again?
Candidate: ```suggestion                             
Reference: ```suggestion                inferenceindexconstants.index_pattern, inferenceindexconstants.nativedefinitionstore(), ````inferenceindexconstants.index_pattern` for the config and `inferenceindexconstants.nativedefinitionstore()` for the vocab and model definition.
Candidate: ```suggestion                             
Reference: do a cheap check that there is something to load before checking the indices. this method is called on a schedule```suggestion        if (loadingmodels.isempty())
Candidate: ```suggestion                             
Reference: i would rather do this within the `catch` blocks above, using the exception that is thrown by the repository creation attempt. at the moment these blocks catch `repositoryexception` but we
Candidate: can we use a bit that we don't feel that we can remove the data with that we don't need to remove the cluster state in the transport data and
Reference: ah, this won't totally work because we catch `throwable` below. we'll need to set a `success` flag here and then assert that `success == false` outside the `catch` block.
Candidate: do we need to use the same as well?
Reference: `repository` cannot be `null` here any more i think.
Candidate: can we use a bit that we don't feel that we can remove the data with that we don't need to remove the cluster state in the transport data and
Reference: nit: i would not extract this unless absolutely necessary. not sure if this is saving a lot method size wise...
Candidate: ```suggestion                             
Reference: you might be able to use a request parameter within the routes that are returned here. might make this code much easier to read? this way you can just pick
Candidate: instead of a a a value of doing a new value is a different value is a different value is a different value is a different value is a different
Reference: would it make sense to rename `includedetails` to `computedetails` to indicate we'd like these not only to not be included but not calculated as much as possible?
Candidate: i think it'd be nice to check for the inner method?
Reference: shall we add a comment to document the why for this `&&`? (ie. we're drilling down so we don't know don't display the top level status as it would be
Candidate: i don't think we need to make a followup instead, in a followup to implement the constructor for a followup
Reference: do we 404 anywhere if the component/indicator combo is invalid? ie. `data/blabla` ?
Candidate: i think it'd be nice to check for the inner method?
Reference: is this `||` operation needed since we have `computedetails` passed in?
Candidate: i think it'd be nice to check for the inner method?
Reference: can we avoid checking this flag again inside `healthcomponentresult` as we're already doing this here? ie. mark `healthcomponentresult#status`as `@nullable` and only display it if it's non-null?this would avoid leaking `showcomponentsummary`
Candidate: maybe add a test for the hook this warning from the coordinator. i feel whether we emit the coordinator.
Reference: do we even need to handle this anymore at this point. the "x-pack" plugin hasn't been a thing for many versions. i assume this was only added to ease migration
Candidate: i think we can to assert the the the the the key is the searchable as the the
Reference: same as above```suggestion                tokeninvalidation invalidateresponsetwo = invalidateaccesstoken("fooobar");```
Candidate: i think we need to add a test for `indices_permissions_key` as ensures that we are no guarantee on the failure.
Reference: same here```suggestion        tokeninvalidation invalidateaccesstokenresponse = invalidateaccesstoken(accesstoken);```
Candidate: i think we need to add a test for `indices_permissions_key` as ensures that we are no guarantee on the failure.
Reference: ```suggestion        tokeninvalidation invalidaterefreshtokenresponse = invalidaterefreshtoken(refreshtoken);```
Candidate: i think we need to add a test for `indices_permissions_key` as ensures that we are no guarantee on the failure.
Reference: ```suggestion                var newresponse = invalidaterefreshtoken(refreshtoken);```
Candidate: i think we need to add a test for `indices_permissions_key` as ensures that we are no guarantee on the failure.
Reference: this method should be rewritten to use the new convenient methods from testsecurityclient. i can follow up with a separate pr (since i wrote the original version).
Candidate: this is worth adding a test to make sure that it is worth adding a test to have the type to have to have to have to have a string
Reference: nit: maybe change `doccounts` to `doc_counts` since this is a constant
Candidate: i'm not sure about the test for the
Reference: 🤦
Candidate: shouldn't we add a comment here for in these words, so there shouldn't be be be in the case of these words,
Reference: @mark-vieira there appears to have been a change since 18 in the binary url, which this change addresses.
Candidate: what what which should be pretty soon what which should be what which should be be
Reference: is this a change after 18 or just because this is the `.0.0` release?
Candidate: what what which should be pretty soon what which should be what which should be be
Reference: i suggest completing the listener _after_ submitting the task to the reroute service, so that if there's ever a need to wait for the followup reroute to complete you can
Candidate: ```suggestion                             
Reference: given our datastreams [docs](https://www.elastic.co/guide/en/apm/guide/8.1/apm-data-streams.html) and [code](https://github.com/elastic/apm-server/tree/main/apmpackage/apm/data_stream)```application traces: traces-apm-<namespace>rum and ios agent application traces: traces-apm.rum-<namespace>apm internal metrics: metrics-apm.internal-<namespace>apm profiling metrics: metrics-apm.profiling-<namespace>application metrics: metrics-apm.app.<service.name>-<namespace>logs-apm.error-<namespace>``````diffapm-*logs-apm.*logs-apm-*"metrics-apm.*-metrics-apm-*traces-apm.*traces-apm-*```i don't think we strictly need access to the
Candidate: can we add a comment for `indices_permissions_key` for the field for `indices_permissions_key` field for `indices_permissions_key` field for `indices_permissions_key` field for `indices_permissions_key` field for `indices_permissions_key` field for `indices_permissions_key` for for the
Reference: maybe make a to `ingestservice` instead of modifying this method (which does get invoked in other places too)?i think we can add the following to `ingestservice#innerexecute(...)` method at line 873:```object
Candidate: i wonder if we should add a method that the decide that the update the the given that it is that we have an array that the update the stream
Reference: are we loosing an optimisation here by deleting the check for any geometries not being points when we have contains?
Candidate: i don't think it will be safer to be an unsupported operation to the hashmap ctor.
Reference: just call the new api directly.
Candidate: i we use a check for the field which is the
Reference: ```suggestion        return geoshapequeryable.geoshapequery(context, fieldtype.name(), shaperelation.intersects, circle);```
Candidate: why is we use a bug for the field ?
Reference: ```suggestion        return new constantscorequery(ft.geoshapequery(context, fieldtype.name(), relation, shape));```
Candidate: i think prefer to use `== false` for the method and use false and gt.gettextsearchingo != null) {            
Reference: __nit:__ it'd make sense to mention `synthetics` in the comment above.
Candidate: can we move a comment for `indices_permissions_key` field for `indices_permissions_key` for `indices_permissions_key` field for `indices_permissions_key` for `indices_permissions_key` field for `indices_permissions_key` for `indices_permissions_key` for the field for `indices_permissions_key` for for the
Reference: you are ignoring the randomizecontenttype argument i think?
Candidate: ```suggestion                             
Reference: the `false` argument here (and in many other places) is to make sure the randomized authentication is not run-as because that is how the authentication is created in the current
Candidate: can we use a test for `indices_permissions_key` as well?
Reference: maybe these can be randomized (not that it makes much sense to pass `true` for these commands, just to validate that the input is accepted correctly)
Candidate: ```suggestion                             
Reference: you can do direct comparison `==` and move this higher up (along with keeponcompletion) since they're cheaper to execute than a method invocation.
Candidate: can we add some comment that we're in the same places.
Reference: no reason to do a partial request on a head request - that's used just to check if the server is alive; it doesn't send any params.
Candidate: ```suggestion                             
Reference: same comment as before regarding direct comparisons on primitives.
Candidate: please fix
Reference: nit: i think we could even do ```javafinal integer refcount = snapshottedcommits.compute(releasecommit, (key, count) -> {   if (count == 1) {      return null;
Candidate: we don't need to check for the check for the
Reference: maybe use a regular for loop here? i notice that we have been avoiding to use `steam()` in hot code paths. i think we should do this here too? but
Candidate: do we need to check for the test for the onfailure for the test that there is a reason for the test that expands that it in the issue.
Reference: could we just solve this with a normal loop (or two)? the stream stuff is just needless overhead here i think.
Candidate: i think it would be good to for the `indexnotfoundexception` and comparing not documenting emitvalues, i              
Reference: we might consider only keeping only the count for now
Candidate: can we move it into it, otherwise it is a container uf.sameas(seenfunction) into a a container uf.sameas(seenfunction) into a a container and refactored.
Reference: i think we need something finer-grained than `shardid` for the key - we might have just created a new copy for an existing shard (e.g. increased `number_of_replicas`). the primary could
Candidate: can we move it into it, otherwise it is a container uf.sameas(seenfunction) into a a container uf.sameas(seenfunction) into a a container and refactored.
Reference: the extra spaces were to keep it lined up with the `now allocating` message in the `else` branch in the logs. i'm ok to remove them, but they seemed helpful
Candidate: can we move it into it, otherwise it is a container uf.sameas(seenfunction) into a a container uf.sameas(seenfunction) into a a container and refactored.
Reference: i suspect this test is going to be enough, since the test environment is not exactly like production. i suggest a packaging test in qa/os. there should be some other
Candidate: ```suggestion                             
Reference: we could make this cleaner by finally porting the plugin extension to use  lazy properties. but we should do this in a dedicated pr. i've created https://github.com/elastic/elasticsearch/issues/86057 to track
Candidate: can we can a comment that we're it?
Reference: putting this in a dofirst block changes the behaviour here in a way that we fail later than before. if we keep the check in the configuration block we would
Candidate: can we can a comment that we're it?
Reference: ```suggestion                // the lookup user for run-as currently doesn't have authentication metadata associated with them
Candidate: this would be nice to split this test somewhere to somewhere that we are no need to split the at the other level level?
Reference: should we rename it to something that removes any doubt that this is only called for legacy indices? handlelegacyindexunknownparam ?
Candidate: ```suggestion                             
Reference: 👍
Candidate: ```suggestion                             
Reference: this looks like something ripe for a refactoring 😁
Candidate: we would prefer to make sure we we we we we we we we we we we we we we we we have the test for the name that we
Reference: i don't think there is a reason for moving `mdbuilder.put(datastream);` to this place? the npe should be fixed without this change to this file?
Candidate: i was a bit of it, but i think we should get a allocationid? it,
Reference: in my opinion both `indices` and `includeindices` sounds quiet generic and might be confusing.should they be called `includeindexnames`?
Candidate: i don't think we could remove this two way instead of that, and then remove the settings of the and then remove this.
Reference: i claim that termsenum.empty is the better response here, as null is equivalent to what we return when _terms_enum is not supported on a given field type.
Candidate: maybe add a comment that the list of `minmummasternodes`?
Reference: i see transporttermsenumaction#datanodeoperation uses getterms(). would it makes sense to not only check for null but also for termsenum.empty now in l361 where we decide if we add the terms
Candidate: maybe add a comment that the list of `minmummasternodes`?
Reference: if we're going to auto-generate the routing path maybe we should use `index_mode` here?
Candidate: ```suggestion
c_bleu: 0.030491027347043377
s_bleu: 0.020273228920368758
meteor: 0.055067757750010236
