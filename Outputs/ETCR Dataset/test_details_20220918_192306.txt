Reference: ```suggestion                logger.trace("[{}] using pit search context with id [{}]; request [{}]", getjobid(), newpit.getencodedid(), namedsearchrequest.v1());```
Candidate: usually doesn't be usually doesn't doesn't be filtering. usually doesn't be filtering. usually doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't doesn't
Reference: looks like this is missing return and it'll drop down to millis.
Candidate: i wonder whether we can mutate this counterpart
Reference: did something change that i'm missing that requires the generic types here? (same question about the others as well.)
Candidate: i wonder if we should bias towards
Reference: i think this branch still needs to be handled since we would exit early on accident without handling it
Candidate: i wonder if we need to check whether it is only used once?
Reference: that's rather unfortunate. but i think we can live with it. we should probably try using some other formatting methods.
Candidate: i                             
Reference: can `bulkitemresponse` be reused here and then serialise that to json?this way if the format ever changes then this code doesn't need to be changed.
Candidate: i wonder if we should retrieve
Reference: this is not the cheapest way to delegate to `binarycomparisons` but every other attempt required some larger refactoring of `binarycomparisons.translate`.
Candidate: i think we need to execute(randomfrom("-p", principal for source" and `cache.invalidateall()` : " + version.minimumrestcompatibilityversion().major;```
Reference: `assert` is very bad since in the very unlikely case that it fails, it brings the whole jvm down.throw an exception instead (see `check` utility class).
Candidate: why downside downside however getting then however then however then however then however then however then however then however then however then however then however then however then it however
Reference: see my comment above on assert
Candidate: i think we need to execute(randomfrom("-p", principal for source" and `cache.invalidateall()` : " + version.minimumrestcompatibilityversion().major;```
Reference: i don't recall creating a `boolquery` by hand anywhere else - usually this is done in the optimizer not the translator which just picks it up.here it is being used
Candidate: i think we need to execute(randomfrom("-p", principal for source" and `cache.invalidateall()` : " + version.minimumrestcompatibilityversion().major;```
Reference: i tend not to agree with the additional fieldattribute parameter. it bothers me that the methods receive a redundant parameter. in this case `bc.left()` is the same the `field` parametere.[here](https://github.com/elastic/elasticsearch/pull/76424/files#diff-385222df7bc48aa29c7282fd51bd3f3de071de85974214e19a44670750637182r238)
Candidate: i wonder if it is okay to have the `get_score()` field cast.
Reference: typo```suggestion        check.istrue(e instanceof fieldattribute, "expected a fieldattribute but received [{}]", e);```
Candidate: i wonder if it makes sense to mutate this way.
Reference: it looks like `priority!=high` is only used in tests and only to disrupt. i wonder if we could keep the original `runonapplierthread` instead and just make a `testonlyrunonapplierthread` method that
Candidate: i wonder if we should rather than introducing it in the rest of the unmapped reader?i wonder if it makes sense to mutate it nicer?
Reference: i was wondering if it would make sense to extract all the 7.x incombatible parameters to a final set and then do a `set.contains` check instead of a combination of
Candidate: i renaming this message where it's a message to itself, but it's bogus
Reference: i would add parenthesis around `order == sortorder.asc` to make a clear distinction between the assignment and the ternary operator. otherwise the reader needs to know the order priority of
Candidate: i think it would be nice to having having having having having having having having having having having having having having having having having having having having having having having
Reference: suggestion: what do you think about creating the set in one-line with the streams api?```javastream.concat(snapshotnameswithindexa.stream(), snapshotnameswithoutindexa.stream()).collect(toset())```
Candidate: can we call this variable as well?
Reference: i thought about putting the license tracking within the `localmodel` object itself, but this posed a couple of problems.  - what if a localmodel object is created but not
Candidate: i wonder if we is loaded twice,
Reference: can you please change the declarations above to be private now that there are accessors?
Candidate: i don't think we need to address this method (missing 's')
Reference: does this mean that usage of inference models in pipeline aggregations but _not_ in ingest pipelines isn't tracked?if so then we should do something about this, although not necessarily in
Candidate: always always always always always always always always always always always always always always always always always always always always always always always always always always always always always always
Reference: this leaks jvm implementation into our tests. i am not really against that, but perhaps we can add a comment to remove the text from matching if it fails?
Candidate: ```suggestion                             
Reference: i wonder if we should add the throw to the method signature. i had a look and it shouldn't leak too deep and it will be cleaner?
Candidate: i wonder if we need need this `fieldtype` rather than using the
Reference: right. it took me a bit to understand why we only process the first array here. i think it is because, currently, c++ writes back a separate result for each
Candidate: i am not sure i wonder if it makes sense a bit of all these method for all tests)
Reference: ditto about processing first result only
Candidate: i am not sure if we can update the method for all tests)
Reference: i'm not a fan of piecing exception messages together in this way (in particular because `illegalargumentexception` is a generic exception).also, it's unclear to me how the change in this pr
Candidate: i am not sure i think we need this var for instance for instance of i think we can stay ` var with the var
Reference: this check looks the same everywhere. how about factoring it out into its own method, e.g. `checknoformats(format)` in `mappedfieldtype` that can be called in all these methods.
Candidate: i wonder if it'd make sense to me that this is clear of the of of me that of of of of of of of of of of of of
Reference: let's put the try catch only around the `valuefetcher` method
Candidate: i am not sure i think we need this var for instance for instance of i think we can stay ` var with the var
Reference: this isn't great performance wise but i found it the easiest to understand and the fixed situation should be practically very rare anyway. moving this code path to the `shard_state_executor`
Candidate: i think we should check on an error node above?
Reference: i suggest leaving this as a primitive `long` since the tiebreaker is/should always be a `long` and should always exist (vs the eql tiebreaker which is optional).
Candidate: i don't need any need any need any need to begin twice, into the existing class.
Reference: maybe this would also be a good place to explain the differences in the interpretation of the timestamp values? i think future maintainers would be grateful for having this (unix
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: leftover from undo-ing the implicit tiebreaker changes?
Candidate: i think we need to pass the `null` here
Reference: the return time should be timestamp not object.
Candidate: i don't think we need to `true`.
Reference: just as we are changing the names according to the convention, can we also rename it to `boundaddress`?
Candidate: nit: you just for this method was just `scaledrandomint`?
Reference: the `settings` passed in is expected to be the node settings, i think just passing in empty will work fine here.```suggestion        indexsettings followerindexsettings
Candidate: i appreciate this test that we can catch the var
Reference: i am not sure i understand why this needs to `assertbusy`?
Candidate: i appreciate this test that we can catch the var
Reference: the test here does not fail for me (without the `followingengine` change), ran it 1000 times.can we maybe override the `advancemaxseqnoofupdatesordeletesonprimary` (and possibly other methods) in order to synchronize at
Candidate: i appreciate this test that we can catch the var
Reference: i think we should keep this in plural, i.e., advancemaxseqnoofdeletesonprimary
Candidate: can you add that this is set of the index name)also i think that `gap.oncompletion();` can be replaced with the
Reference: should we update this to `https://www.elastic.co/guide/en/elasticsearch/reference/master/migrating-8.0.html#breaking_80_cluster_changes`?
Candidate: this method is used on the cloud name?
Reference: i think it might be useful to call out in this log line when `targetindex != indexname` and include both when that's the case.
Candidate: i think we need to check whether we can check the uncompressed a key),
Reference: `clusterconnectionmanagertests#testconcurrentconnects` exercises this - i can make it fail reasonably often by adding a few `thread.sleep` calls:```diffdiff --git a/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.java b/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.javaindex 415769596a4..00bb8423d7b 100644--- a/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.java+++ b/server/src/main/java/org/elasticsearch/transport/clusterconnectionmanager.java@@ -11,6 +11,7 @@ import org.apache.logging.log4j.logmanager; import
Candidate: i wonder if we noted with another version conflict with the
Reference: cachestats could be end up null in mixed clusters
Candidate: ```suggestion                             
Reference: ```suggestion            logger.debug(() -> new parameterizedmessage("[{}] search optimized to noop; request [{}]", getjobid(), searchrequest));```serializing the search request to string could
Candidate: ```suggestion                             
Reference: ```suggestion        logger.trace(() -> new parameterizedmessage("searchrequest: [{}]", searchrequest));```
Candidate: ```suggestion                             
Reference: i always thought that the logger would serialize the strings unless we provided a message provider. consequently, if we weren't on debug level, we are serializing the sourcebuilder unnecessarily.
Candidate: ```suggestion                             
Reference: `parameterizedmessage`?
Candidate: ```suggestion                             
Reference: the introduction of a magic value `null` is dangerous, what if the client returns `null`. it seems better to return an empty result set, so that `null` causes the transform
Candidate: ```suggestion                             
Reference: i think it's nice to let this throw an exception (as it was) and for the caller to decide what to do with it.i have the impression that the reason
Candidate: rename this as well?
Reference: this `if` block can be simplified so that there is a single call to `persistannotation`.it can be:```string annotationid = null;if (lastdatacheckannotationwithid != null) {  annotationid = lastdatacheckannotationwithid.v1();  annotation
Candidate: maybe assertthat("system mismatch, expected:"
Reference: ```suggestion                        + "] is true and a
Candidate: :+1:
Reference: could we move this check at the top of `masteroperation`?in addition, do we really need this check? i'm trying to think what happens if a user starts a rolling upgrade
Candidate: @dakrone
Reference: note: postingsformat.forname() does the same lazy-instantiation that the previous impl did
Candidate: i wonder if we should bias towards
Reference: then here we could just pass in a `() -> randomalphaoflengthbetween(1, 10)` to the `checknopermithandshakefromeincompatiblebuilds` function and not worry about static variables
Candidate: ```suggestion                             
Reference: why is this stall necessary? doesn't the rest test infrastructure not run the tests until es is up?
Candidate: ```suggestion                             
Reference: i think this timeout needs to be longer _if_ we are waiting for completion.  we revert with `delete_intervening_results=true`, and that could take a very long time if there are
Candidate: can you add a separate `getvalue` into the
Reference: ?
Candidate: ```suggestion                             
Reference: it is illegal for the user to set the location```suggestion```
Candidate: ```suggestion                             
Reference: can we test the scenario where `subnet` and `department` are fields underneath an object field (like `organization.subnet` and `organization.department`)?
Candidate: i wonder if it'd be better to make this logic to be preserved in the
Reference: maybe randomly not use a `format`? like this:```+ (randomboolean() ? "\"date\":{\"type\":\"date_range\"}," : "\"date\":{\"type\":\"date_range\", \"format\": \"yyyy-mm-dd\"},")```
Candidate: can you add `shardstateidentifier` here ?
Reference: hmm, i'm not a huge fan of exception based control flow. i know that settings are registered with clustersettings and indexscopedsettings so that settings can be validated against the master
Candidate: ```suggestion                             
Reference: i was wondering if were possible to extract getting policy from the metadata to own method in order to make policy `final`.```javastring getpolicy(metadata metadata) {  if (metadata != null)
Candidate: i wonder if we noted is this with a hard to do this with hard to distinguish
Reference: nit: i would prefer this directly after `snapshots`, since they both "filter" the result. but completely optional...
Candidate: can you just use `repositorymetadata.equalsettings()`
Reference: i think `slmpolicies` is not really supporetd here, since it is not verbose?
Candidate: let's inlined this exception; we can make this in false`
Reference: could we make the filtering here a separate method instead? it looks like there is at least one usage where this is not needed and it is a bit odd
Candidate: i wonder if we noted is this with a hard to do this with hard to distinguish
Reference: can we add tests of:1. a slm-policy that is not there.2. multiple slm-policies (where some may not exist).3. an actual inclusion pattern, i.e., `policyname + "*"`.4. an actual exclusion pattern,
Candidate: can you need this to catch the twice, in this is somewhat unwritten twice,
Reference: can we add a generic validation to not use `-_none` and perhaps even not allow `_` or `-_` prefixed policies?
Candidate: can you put this getters of the getters of the getters of getters in the getters of getters is mounted ...```
Reference: ```suggestion                modelallocation -> waitfordeploymentstate(```
Candidate: i appreciate this is
Reference: ++ `reason` will be useful for understanding what is happening internally
Candidate: i think we should bias towards
Reference: the javadoc for function `nodesshuttingdown(final clusterstate state)` is all wrong can you update that.
Candidate: nit: shouldn't it always be used in `taskoperation()`, shouldn't always be used in `taskoperation()`, shouldn't always be used in `taskoperation()`, shouldn't be too much much much much much much much
Reference: `update` has the signature ```    private static clusterstate update(        clusterstate currentstate,        trainedmodelallocationmetadata.builder modelallocations,
Candidate: nit: shouldn't it always be used in `taskoperation()`, shouldn't always be used in `taskoperation()`, shouldn't always be used in `taskoperation()`, shouldn't be too much much much much much much much
Reference: i would make `health` an object field, the existing `allocationhealth` enum can be one of the fields of this object.  other fields can be `allocation_count` and `target_allocation_count`.i think in
Candidate: ```suggestion        (hyperparameters != null) {                  
Reference: ```suggestion                type,```otherwise 7.x will suffer the problem of #77297
Candidate: :+1:
Reference: we could pass a reference to the original stdout printstream from bootstrap to node and then to the securityplugin's `createcomponents` so that we can temporarily call `system.setout` to that ,
Candidate: i wonder if we need to mutate this method is called in a separate pr?
Reference: i'd prefer this wasn't in `security`.we have a bad habit of just adding more and more into this class, and it's unnecessary. can we have a `generateinitelasticpasswordlistener`?
Candidate: i wonder if we need to mutate this method is called in a separate pr?
Reference: if this is a couple of lines lower, then we can remove the `setonce` entirely and just pass the `nativeusersstore` to the listener object's constructor (if we replace the method
Candidate: i wonder if we should just be strict with the files, if files, == toohigh);```i wonder if we should just operator
Reference: i think the listener (if it's a real object) should remove itself at this point. we don't need to call it ever again.
Candidate: i wonder if we need to mutate this method is called in a separate pr?
Reference: :+1:
Candidate: i wonder if we should bias == false` ?
Reference: i think truly integration testing policy execution cancellation isn't possible (without avoiding test related failures)?
Candidate: ```suggestion                             
Reference: nit: i think we need to have `... as it is ...` to be formal
Candidate: note this failure is be to be failure failure failure failure                   
Reference: i did originally put these on separate lines so that visually the `minimumsnapshotcount` check indicated whether that constraint was present (same with the other checks). it's fine to collapse them,
Candidate: i think we can do this check for the getters of the getters for the
Reference: i think this branch should have its own `trace` log message and immediately return false, because at this point it is neither successful or unsuccessful, which means its state has
Candidate: i think we can do this check for the getters of the getters for the
Reference: rewording suggestion: worth mentioning in the message that we're talking about the geoip database (folk don't read the logger name much) and also adding `successfully` just to add to the
Candidate: i wonder if it would be better suited with the
Reference: ++ the caller can't set this but the code creates the config so it is visible
Candidate: ```suggestion      parser.declarestring((modelconfig, == shardroutingstate.initializing) inferenceindexconstants.doc_type);```
Reference: ++, one more reason to use methods and not fields.
Candidate: i think we need to check whether you need to check whether we need to check whether you need to check whether you need to check whether you need to
Reference: i suppose since it's important that we don't normalise things like node names we should have a test to assert that too.
Candidate: nit: i don't think the whole part of this pr?
Reference: does this new mechanism also normalise ipv4 addresses by removing leading zeroes? that sounds desirable, it'd be good to have a test for this too to document this fact too.
Candidate: nit: i don't think the whole part of this pr?
Reference: it would be good if we could also trigger a warn level deprecation and observe that it is written to the data stream.
Candidate: ```suggestion                             
Reference: this comment is not relevant anymore, is it?
Candidate: i wonder if we need to create a test for obsolete. var
Reference: the order is wrong i think. `scrollbuckets` and `compositebuckets` should be swapped.
Candidate: i wonder if we need to create a test for obsolete. var
Reference: could we instead randomly generate an unordered list of tuples (of random size from 0 to 100 or so), then stream collect it to a sorted map, then sort the
Candidate: why do we using indexservice.getqueryshardcontext == null`?or ?
Reference: naive question: if `mapper.type()` is not `default_mapping` (e.g. it's a 6.x index) then are we ok to proceed here?
Candidate: i think it makes sense to make sure if it makes sense to update the method in source" stays it makes it nicer?
Reference: another naive question (sorry): could we catch this in `mapperservice#merge` rather than relying on callers checking they're not adding a type first? not to say there's anything wrong with checking
Candidate: why do you want to pass whether it is always (once `true` whether it's always (once the whether you don't want to get it.
Reference: how is this case possible? we could add a not null assertion when setting in bootstrapinfo?
Candidate: i wonder if we need for this method in a separate pr?
Reference: the stream could still have been closed, in which case we are not attached to a terminal. so we need to catch that case, and probably log a warning?
Candidate: i am not sure this need for this method in the class is a bit called that is called (test) but i wonder if we need need need need need
Reference: not sure if there is any other way to check if stdout is closed
Candidate: i wonder if we need for this method in a separate pr?
Reference: is this really an illegal state? it just means that we’ve closed the streams, which is normal when not attached to a console.
Candidate: i wonder if we need for this method in a separate pr?
Reference: i can open this as a separate pr, but noticed that a previous refactoring removed a no longer applicable callback here, but did not adjust this warning callback, so that
Candidate: i don't think we need the whole "doesn't (here since we are `scaledrandomint`?
Reference: we can remove it now
Candidate: i wonder if we are, i wonder if we are, i think we are, i wonder if we are, i wonder if we are, i wonder if we are, i
Reference: we should probably remove this line :)
Candidate: i think we noted on another pr
Reference: and this one :)
Candidate: i think we noted on another pr
Reference: and this one :)
Candidate: i think we noted on another pr
Reference: no point in forking off potentially multiple times here when we do all kinds of slow+blocking operations when closing the connection manager etc. above. all this does is potentially have
Candidate: i wonder if we should invest in the case?
Reference: mostly we don't have any open handlers here on close, no point forking off for an empty list.
Candidate: i'm not sure fan of this.
Reference: related to the previous comment: if we know that the transport service is closed before the threadpool then can this be rejected? if not we should `assert false` in the
Candidate: i wonder if this is okay, if this is very the very the reckon: i wonder if we want for instance for instance for instance for instance for instance on
Reference: can we `assert false` here too?
Candidate: i wonder if we should catch this case?
Reference: i was wondering if we should respect `handler().executor()` but then i looked at other call sites and it seems that we almost never do. except sometimes. that might bite us
Candidate: i wonder if we should catch this case?
Reference: nit: i'd expect the other way around, checking that `allsortedwithoutother` is equal to `allsorted.sublist(0, allsnapshotnameswithoutother.size())` but it's not really important
Candidate: nit: do we need this check?
Reference: should we test the result when a snapshot is both included and excluded?
Candidate: nit: do we need this check?
Reference: i suppose we could iterate 2 times over the repositories, the first time to match repositories against include patterns ad the second to filter out matching repos with exclude patterns?
Candidate: nit: extra update path for it is possible for it is possible for it due it possible it possible it possible it possible it possible for it possible for it
Reference: consider concatenating repos with the streams api:```javastream.concat(namesrepo1.stream(), namesrepo2.stream()).collect(collectors.toset())```
Candidate: nit: do we need this check?
Reference: does it make sense to rename `reponames` to `repopatterns`?
Candidate: nit: extra update path for it is possible for it is possible for it due it possible it possible it possible it possible it possible for it possible for it
Reference: similarly to the repo-name matching, can we derive the include/exclude pattern lists first and share most of the logic between the two (and slm-policy)?
Candidate: do we need this into a latch for a doc id is a
Reference: do even need to have the `seenwildcard` variable? if we remove it, the tests passes. is it used just as a perfomance optimization not to calculate negative patterns if there
Candidate: nit: extra update path for it is possible for it is possible for it due it possible it possible it possible it possible it possible for it possible for it
Reference: i think this is the name patterns, could we call it `namepatterns`?
Candidate: can you use `scaledrandomint`?
Reference: nit: it seems odd that for the repo pattern we pass in a comma-separated string, whereas for the names we pass in a list of name patterns. i would prefer
Candidate: nit: do we need this check?
Reference: can we add a test validating that using `-xyz` finds such a snapshot (and repo) if no wildcard is specified first, i.e., at that we can still find snapshots/repos starting
Candidate: nit: do we need this check?
Reference: i think the new exclude functionality also affects the list repositories api, we should also update the documentation for that api then.
Candidate: ```suggestion                             
Reference: i think we can use `messagedigests.digest(out.bytes(), messagedigests.sha256())` here rather than adding a new method?
Candidate: i don't think we need need the concrete "doesn't
Reference: this can probably be outside the synchronized block as well?
Candidate: `mapperservice` field structures
Reference: could you explain this part? i'm not totally clear on why it would be different.
Candidate: i wonder if we should bias towards
Reference: do we need this new method `done`? it looks like the only implementation adds the debug info, which seems like it could be done when initializing the processor:```@overridepublic void done()
Candidate: i appreciate this test for instance of the var
Reference: it would be nice to have a test or example of how the output looks when there are nested hits.
Candidate: ```suggestion                             
Reference: as a heads up, we've brainstormed moving stored fields loading to its own subphase. i'm not sure it will happen, but this would affect the output structure (which is fine,
Candidate: i wonder if we want to kind of this.
Reference: this had been commented out for years. i'm not sure why. it passes quite consistently for me. i think its worth uncommenting it and watching.
Candidate: i don't think it would be easier to do the
Reference: does `loadnested` give additional insights? is this just the same as the number of inner hits? also it's not so much of a "load" as a "pull out an inner
Candidate: nit: think we can do it.
Reference: not a big deal, but did you intend to move this into the loop?
Candidate: i                             
Reference: i guess this splits merging across two places: the caller `searchphasecontroller#merge` and here in `buildresponse`. i like the direction this change is going though, it feels like `reducedqueryphase` should own
Candidate: ```suggestion                             
Reference: i really like this fix, exception throwing/catching is very expensive. i would suggest one change only. if the key for some reason was null (i'm not sure it's possible for
Candidate: nit:```suggestion                             
Reference: just a minor thought here, splitting this method to avoid double locking may not be worth the complexity. reentrantlock will check if a lock is already owned by the same
Candidate: i think it is better to be removed.
Reference: the tests that this enables are super comprehensive. it's kind of a shame to do it randomly though. we could probably use more subclasses or parametersized tests or something to
Candidate: can you add the javadoc for this?
Reference: i think we can make this final?
Candidate: i wonder if we should bias towards
Reference: this is a change in behaviour vs today. as per the comment i think it's ok, but we can discuss alternatives too.
Candidate: do we need to execute(randomfrom("-p", == getwrittenoffset()`?
Reference: this also emits logs for connections to nodes in remote clusters. i think that's useful to see, we investigate cases that turn out to be flaky cross-cluster connections at a
Candidate: i think this is existing, but i wonder if this is swallowed `invalidtokenoffsetsexception`.
Reference: can we assert `connectionmanager.nodeconnected(node) == false`?
Candidate: `auto_create_index` is no need to just for this on `getfilechannelreference` and i am not sure i think we need for
Reference: nit: perhaps we should lower `follower_check_interval_setting` to something like 100ms too to avoid waiting 1s for the follower to run the initial check?
Candidate: this is false
Reference: add a comment to explain the reasoning?
Candidate: i wonder if we should bias towards the "bootstrap" plugins, if we are "bootstrap" plugins, for it?
Reference: this question is still open, i think in the case that the original request contains "source" : true and some includes/excluded separate from the "fields" option we cannot simply overwrite
Candidate: do we need to do this check?
Reference: `querysearchresult` is a transport response so we should try to avoid the wrapper. could we create the adapter for the response dynamically here ? we don't really need to share
Candidate: same                             
Reference: is there a way to do a `replaces` and have the additional deprecation message? it seems we are losing that the `_xpack` url is old.
Candidate: this is me that we should bias towards rather than using `scaledrandomint`?
Reference: unrelated, but spotted a missing `asserttrue` here.
Candidate: i think this should bias towards smaller into intermediate q=.2, ?
Reference: you'll need a similar version conditional here to match the read conditional.
Candidate: ```suggestion                             
Reference: are these type changes to make the backport easier?
Candidate: i think we should bias towards the
Reference: these.second set of parentheses around `(mergewith instanceof geoshapewithdocvaluesfieldmapper)` is a bit  confusing.
Candidate: small comment, i reckon:
Reference: i did not explicitly add tests for all columns as they use the same functionality and limited myself to those that i needed for full coverage only here.
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: are we sure that `snapshot1` and `snapshot2` get different timestamps?
Candidate: i guess we need any kind of the loop?
Reference: is there a reason we are not allowing this? `offset` could just be evaluated after `after_value`?obviously we can do that in a follow-up rather than here.
Candidate: ```suggestion                             
Reference: i think we should add explicit error handling when parsing the arguments, perhaps to the request validation or here. that would allow the message to indicate that it is the
Candidate: i think we really need to fully call it really match out of the loop? i figured it doesn't really really really really really really really really really really really
Reference: given that the `inputs` (to filterpath::compile) is a set, then the order of the returned filterpaths array should not be assumed. changing to linkedhashset here assumes that compile will follow
Candidate: can you add the `stats.yml` tests for the
Reference: does the order matter here? it seems that this 2-d array is *not* a transposition of the 2-d array on the left-hand side.
Candidate: i wonder if we should bias == null ?
Reference: nit: add a constant for this one?
Candidate: i don't think we need this naming either, to the process. that we always surround the ahead field "doesn't opaque_id=[{}]` is called in the `preprocessor`.
Reference: this is obviously not optimal, but i am not 100% sure how else to do it.one issue here (besides performance), is that we always use the counts based on the
Candidate: i wonder if we should invest on the next error?
Reference: good catch using the updated allocations here
Candidate: i wonder if we should invest on the next error?
Reference: there is another similar comparison in l713, would you mind correcting that as well?
Candidate: can we put this into the outer either?
Reference: small styling issue: we prefer to make negative statements more explicit by using "v == false" instead of "!v". even though it is more verbose it helps readability. so in
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: i think it would make sense use the sort objects `tostring()` method directly, the same way we print `segmentsort` later in the error message. it should print all the sortfields.
Candidate: ++
Reference: do you think it'd be worth sticking this in the superclass so we don't have to copy and paste it?
Candidate: can you please update the update id in source" and then no need to executablescript
Reference: maybe we can add a bit higher chance of going above 1000 here?```suggestion        int numops = frequently() ? scaledrandomintbetween(1, 1500) : scaledrandomintbetween(5000, 20_000);```
Candidate: shall we add to `asserttrue` from the fact that refers to `asserttrue` entry in the tests that we tests that the original entry from the
Reference: i am not sure i follow why this should be `rarely()` as opposed to just `randomboolean()`?
Candidate: shall we add to `asserttrue` from the fact that refers to `asserttrue` entry in the tests that we tests that the original entry from the
Reference: i think we can let `accessstats=randomboolean()` here?```suggestion        try (translog.snapshot snapshot = followerprimary.newchangessnapshot("test", 0, long.max_value, false, randomboolean(), randomboolean())) {```on the other hand, this code
Candidate: configs can be rid of doing for the for asserting `haschanges = prevmeta.issystem(),boolean.compare(prevmeta.issystem(), ... ?
Reference: this question is still open, i think in the case that the original request contains "source" : true and some includes/excluded separate from the "fields" option we cannot simply overwrite
Candidate: do we need to do this check?
Reference: `querysearchresult` is a transport response so we should try to avoid the wrapper. could we create the adapter for the response dynamically here ? we don't really need to share
Candidate: same                             
Reference: this test does not really test the current change. there is no easy way to test it. theoretically a test should not care about the internals of a method. but
Candidate: i think we need for
Reference: are we leaving this as a follow up?
Candidate: i wonder if we should invest in the ctr, and we can use `scaledrandomint`?
Reference: seems best to throw `unsupportedoperationexception` here.
Candidate: i wonder if we need getmapper in this method class in mapperservice?
Reference: seems a bit odd just to take the shortcut on a lower-case `b` although i see that it helps. let's extract the predicate to a method `definitelynotpercentage(string)` so we can
Candidate: i think we should bias towards
Reference: this is correct but looks like an accident, suggest a comment here too.```suggestion                // "1"
Candidate: `auto_create_index` started started started
Reference: it is easier to grok what this is checking with this math on the size i think.other wise we get longer nested `&&` checks against empty and more `== false`
Candidate: i wonder if we should just unwrap here and make it created for the future, and dependency.
Reference: this line is failing the forbidden apis check. you probably want:```suggestion        final zoneddatetime notbefore = zoneddatetime.now(zoneoffset.utc);```
Candidate: ```suggestion                             
Reference: we generally prefer to use hamcrest style assertions (although we also have a lot of older code that uses the standard junit assertion style).matcher-based assertions give much better failure messages
Candidate: ```suggestion                             
Reference: i'm guessing creating a merged set using addall is faster than doing stream concat, which is why we switched the approach? if that's the case, can similar approach be done
Candidate: i wonder if we need to address the field 's')
Reference: i think removing the synchronized would work. the only possibility of breaking the names creation with multiple threads is if someone mutated settings or secure settings while we were iterating
Candidate: ```suggestion                             
Reference: we actually don't need to parse this setting at all, because the caller of this function does:```java            optional<string> tier
Candidate: this is somewhat counterpart
Reference: to avoid an array like `[" "]` (not that we expect that), maybe we should use:```suggestion        if (strings.hastext(tiers) == false) {```
Candidate: i wonder if we need to address the field 's')
Reference: same here, ```suggestion        assert strings.hastext(tiername) : "tiername must be not null and non-empty, but was [" + tiername + "]";```
Candidate: i wonder if we should `fieldmapper#isaggregatable` a robust/ general,
Reference: super minor, but we have `strings.empty_array` for this also if needed (it doesn't really matter much here)
Candidate: ```suggestion                             
Reference: this needs to be a link to our 7.x documentation. maybe https://www.elastic.co/guide/en/elasticsearch/reference/7.15/search-aggregations-bucket-adjacency-matrix-aggregation.html#adjacency-matrix-agg-filter-limits? (related, i just noticed that that link says "this setting is deprecated and will be **repaced**").
Candidate: ```suggestion                             
Reference: ```suggestion                    + "[{}] anomaly job tasks, [{}] data frame analytics tasks
Candidate: i appreciate this here and well.
Reference: the 'weird state' arises if any of these are not empty and `largestjobormodel == 0l` ```suggestion            && ((dataframeanalyticstasks.isempty() &&
Candidate: i appreciate this here and well.
Reference: ```suggestion            out.writestringcollection(this.waitingmodels);```
Candidate: ```suggestion                             
Reference: what does it mean when `maxlazymlnodes < nodes.size()`?shouldn't it rather be `maxlazymlnodes <= nodes.size()`?sorry if it's obvious but i don't quite understand this condition.
Candidate: ```suggestion                             
Reference: ```suggestion                            + "and
Candidate: i assertions log assertions when assertions are assertions assertions when assertions are assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions
Reference: why the limit for models is `0` whereas for jobs it is some configurable number?
Candidate: i assertions log assertions when assertions are assertions assertions when assertions are assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions assertions
Reference: not really part of your change, but since it is touched now, maybe avoid chaining? and instead just:```nodesinforequest.clear();nodesinforequest..addmetric(nodesinforequest.metric.ingest.metricname());```i think that is easier to read.
Candidate: why do this need to create all the
Reference: i was wondering whether `maps.deepequals(...)` be used here? but i don't think that is the case since we never have arrays as value in this map. so this should be
Candidate: why do this need to create all the
Reference: by subtracting the before timings from the after timings, we are able to reuse the thread timing capture code and catch timings of threads that had started during the 'profiling'
Candidate: i wonder if we should bias == false` ?
Reference: `this.` seem superfluous here
Candidate: i wonder if we should bias towards
Reference: i think it's better to declare `tempupserts` before the 2nd loop where it's actually used.
Candidate: i wonder if we should bias towards
Reference: i am not really sure about this bit, might run faster, might not?perhaps we can add a test validating that just doing `value.indexof(data_frozen)` is safe, i.e., that there are no
Candidate: nit: you can
Reference: suggestion: create plugins in declarative style without a variable```javastream.concat(super.nodeplugins().stream(),            stream.of(waitforsnapshotblobcacheshardsactiveplugin.class, reindexplugin.class))        
Candidate: i think this is room for newer methods?
Reference: it seems that the `directory` variable can be inlined and we can just do `unwrapdirectory(indexshard.store().directory()).clearstats()`
Candidate: why confused. this is wants an child here.my
Reference: nit: i believe a common convention is to declare the exception name as `ignore` instead of adding an explicit comment.for example, intellij wouldn't highlight the exception as unused in this
Candidate: why confused. this is wants an child here.my
Reference: can you add a todo to make it clear that an action is needed
Candidate: ```suggestion                             
Reference: nit: extra empty line.
Candidate: this is
Reference: should we be more conservative and have `childaction.startswith(parentaction + "[")`. otherwise it is possible for an action to be child of itself, which i don't think makes sense in the
Candidate: this is
Reference: i cannot think of a real issue for it. but would like to write down my thinking here in case others could find out more about it.is it possible for
Candidate: this is
Reference: nit: just because we want to squeeze out performance i would use a classic for loop here.
Candidate: i think this method is called on the
Reference: did you intend to solve this case in this pr?
Candidate: nit we're pretty awkward to improve newer error message, but i wonder if we were fully newer path for newer error message, but i think it would be nice to
Reference: maybe add the nullable annotation to the returned value of the method.
Candidate: nit we're pretty awkward to improve newer error message, but i wonder if we were fully newer path for newer error message, but i think it would be nice to
Reference: i wonder if we could use a special predicate object instead of nul to avoid checking for null. we could still have a specific predicate we use to allow the
Candidate: can appreciate this entry in
Reference: i am not sure you can unless we change how the count works? though i guess we could possibly avoid getting the snapshot info for the "before" snapshots if they
Candidate: i wonder if we should bias towards `scaledrandomint`?
Reference: https://github.com/elastic/elasticsearch/pull/77550
Candidate: i think we should bias of `pbkdf2_stretch` for the presence of the of of the of of the of of the of of the of of the of of the
Reference: could you please add some unit tests for serialization of timeseries? there is logic in there, for example, for not emitting when empty, and also ensuring some parts could be
Candidate: i think we need to `asserttrue` here.
Reference: this shouldn't be null, let's instead construct an object with all zeros in the false case below.
Candidate: add add add add add add add add add add add add add add add add add add add add add add add add add add add add add add
Reference: i think this would be more readable if it was moved to a helper function, eg `randomtimeseries()`, then it can be used below inline, without needing this weirdness with a
Candidate: add add add add add add add add add add add add add add add add add add add add add add add add add add add add add add
Reference: instead of forcing no replicas maybe we let the index settings be randomized as usual, and use `getnumshards()` to retrieve the expected number of shards to compare with later in
Candidate: can you use `.get()`
Reference: let's use `get` instead of `actionget()` please so we don't swallow stack traces that make understanding failures a pain :)
Candidate: can you use `.get()`
Reference: @joshdover the index pattern `metrics-*` overlap with a few index patterns beginning with `metrics-endpoint.`: * `metrics-endpoint.policy-*`* `metrics-endpoint.metrics-*`* `metrics-endpoint.metadata*`* `metrics-endpoint.metadata_current_default`* `metrics-endpoint.metadata_united_default`but privileges required for the above are different from those required
Candidate: i'm not sure if we need this`
Reference: @joshdover just to double confirm this is indeed `metrics-endpoint.metadata*`, i.e. without a dash (`-`) right before the wildcard (`*`).
Candidate: i'm not sure if we need this`
Reference: @joshdover the [transform api doc](https://www.elastic.co/guide/en/elasticsearch/reference/master/put-transform.html) suggests `create_index` privilege for the destination index. just wanna double confirm it is not needed here.
Candidate: i'm not sure if we need this`
Reference: can you fix this comment to no longer reference the cache key since we check the readers directly?
Candidate: i wonder if we should bias towards the
Reference: i'm unclear as to why we now need to have the reader itself rather than the cache key here?
Candidate: i wonder if we should bias towards the
Reference: please add tests for the `tokenize(string seq1, string seq2) ` overload
Candidate: i don't me that this is used to surround any tests?
Reference: why convert from a long, to a biginteger, back to long?
Candidate: i wonder if we should bias towards
Reference: i am a bit worried about adding a second version of `indexdocs` here. i think the problem with the test is that we need to ensure the first bucket is
Candidate: :+1:
Reference: ```suggestion                             
Candidate: i think we need to catch principal here as well?
Reference: ```suggestion                             
Candidate: i think we need to call it in the version y. y. it?
Reference: ```suggestion                "[open-job-with-old-model-snapshot] job snapshot [snap_1] has min version before [7.0.0], please revert to a newer
Candidate: ```suggestion             
Reference: i think this risks balancing back the shard to the upgraded node. you can disable balancing and reenable it after reestablishing replica. or we could just keep the exclusion until
Candidate: can you add a copy of the that `cancelfuture.isdone == getwrittenoffset()`?
Reference: i wonder if we should not instead just find the node on the new version and put the exclusion in always? i think there is a risk of the shard
Candidate: can you add a copy of the that `cancelfuture.isdone == getwrittenoffset()`?
Reference: i do not think this `ensuregreen` does anything?
Candidate: can we add a unit test for index json, since it is preserved data files and over, that it is added that is preserved that the data action and over,
Reference: this looks nearly identical to the static `updateindexsettings` inherited from `esresttestcase`, do we need this?
Candidate: can you also assert:```assert in the
Reference: ```suggestion                    "sequence cannot contain more than 256 queries; found [{}]",```
Candidate: i wonder if this is of a way of the other way of repository though of doing but of making this way of files, though i wonder
Reference: ```suggestion            throw new parsingexception(source, "a sequence requires a minimum of 2 queries, found [{}]", queries.size());```
Candidate: i wonder if this is of a way of the other way of repository though of doing but of making this way of files, though i wonder
Reference: if this is limited to 100, why not using `byte`?
Candidate: do we can make this logic to make this for
Reference: the only question i have is whether @jakelandis or @masseyke would like a reference to an issue here, as i believe the plan is that there might be more categories
Candidate: can you add a comment for the
Reference: small remark here, since type is an enum type now, it would be better if we checked with type == reporttype.mem, this way we can have the compiler do the
Candidate: maybe assertthat("system mismatch, expected:" here.
Reference: can we please remove this comment? it doesn't seem like it's relevant anymore.
Candidate: i wonder if we should bias == false` ?
Reference: add an `sunthreadinfo sunthreadinfo` argument to getallvalidthreadinfos right after threadmxbean to pass either the real sunthreadinfo or the mocked one.
Candidate: i wonder if we should bias == false` ?
Reference: add an argument `sunthreadinfo sunthreadinfo` to innerdetect after threadmxbean to pass in the real sunthreadinfo from `detect()` or the mocked one during testing. this way we don't need to keep
Candidate: i think we can rename this check?
Reference: using the proposal that ryan made, this can turn into `list.copyof(indicesmap.keyset())` from java 10 and until then `new arraylist<>(indicesmap.keyset())`. that seems better than stream collecting it.
Candidate: i think we are using the
Reference: i think this has no real benefits and runs at a slightly critical time - so would prefer to just keep this one as is to avoid the wrapper here.
Candidate: i think it should be the to be smaller here around.
Reference: this could turn into `aliases.keyset()` instead.
Candidate: i think it would be nice to nuke.
Reference: changes in this class are picked from #77231
Candidate: i don't think we should bias == getwrittenoffset()`?
Reference: i assume we have to do all this stuff _here_ because we can exclude based on full test name, which includes the file path, which i guess is only known
Candidate: i think we need to execute(randomfrom("-p", principal for source" and                    
Reference: this whole thing is a bit brittle and won't work in some cases we have, like when we have nested folders, in which case segments 1 and 2 would be
Candidate: i wonder if we need to create this and/or in this pr?
Reference: does this have any noticeable impact on performance? we are adding a _ton_ of patterns to the copyspec here.
Candidate: i wonder if we need to execute(randomfrom("-p", principal "doesn't in source" stays                  
Reference: ```suggestion                             
Candidate: `asserttrue` is no need to check that it is null, 0);```
Reference: ```suggestion                        "[{}] failed to calculate anomaly detector
Candidate: `asserttrue` is no need to check that it is null, 0);```
Reference: additionally to this check here, could a similar check also be performed as part of the put ilm policy api?this way there is direct feedback upon creating the policy
Candidate: i                             
Reference: this is the logic to make sure the point is always inside the cell.
Candidate: why do we need this`
Reference: maybe add an explanation why it is invalid (like aggregations cannot start with `_mvt`)
Candidate: i think you can assert that this is the
Reference: not sure about catching an infe thrown by any of this code, could we just protect the call to `checkblock()`?
Candidate: :+1:
Reference: thinking about this some more, i think we only really care about infes thrown while the `state_not_recovered_block` is in place, other blocks don't really matter. i think rather than introducing
Candidate: i wonder if we should
Reference: sorry i gave you a duff assertion here, should be this:```suggestion                assert state.blocks().global(clusterblocklevel.metadata_read).stream().allmatch(clusterblock::retryable);```(or else we
Candidate: i wonder if we need to do it here.
Reference: rename to search_script_name?
Candidate: i wonder if we should bias towards using the matcher                    
Reference: could you use a regular terms agg? if not probably worth a comment why. i spent a little while trying to figure out if the terms script created a second
Candidate: are we are adding leniency?
Reference: it's worth adding a comment that this is a volatile read. do we want to do that on every consume? we don't check the memory breaker on every consume so
Candidate: i don't think we need need this into the process. that `gap.oncompletion();` should always (once made) in source" stays we need to do it nicer?
Reference: nit: if we prepended a `,` to all but the first entry rather than appending it to all but the last then we wouldn't need to copy everything to a
Candidate: i think we should bias here as the
Reference: there shouldn't be any snapshots going on in other repos either but we can keep the more general assertion i think:```suggestion        assertfalse(finalsnapshotsinprogress.asstream().anymatch(entry ->
Candidate: ```suggestion                             
Reference: nit: we use `.asstream().iterator()` in other places that iterate over all entries, should we be consistent?
Candidate: nice
Reference: ok, maybe not _everywhere_ else...
Candidate: do we need to do this method with the
Reference: should probably assert that `entry` has the right repository here.also that `repoentries.getvalue()` is nonempty.
Candidate: i wonder if you can just do this `fieldtype` rather than just do this method in the superclass is called more than just do it just always (once all `match_mapping_type`?
Reference: this reorders the snapshots vs how an older node would see them, and means that older nodes will see entries getting inserted in the middle of the list rather than
Candidate: i chat this.
Reference: rather than iterating over this list by index and mutating it, why not iterate over the original list and add the updated entries to the new list?
Candidate: i think this is re-queued but i re-queued i think re-queued would re-queued
Reference: i think this all still works if we just look at the one repo, right?```suggestion        if (snapshotsinprogress.forrepo(repository).size() == 1) {```(also extract that variable
Candidate: i wonder if we want to do this `fieldtype` rather than introducing a `colunmname`
Reference: if `snapshots.isempty()` can we always just return `snapshotsinprogress.forrepo(repository)`?
Candidate: i wonder if we want to do this `fieldtype` rather than introducing a `colunmname`
Reference: not directly related to this change, but could/should we check later snapshots too? we'd expect the first mention of every shard in the list to be active (or blocked by
Candidate: ```suggestion                             
Reference: likewise:```suggestion        return list.of();```
Candidate: i wonder if we need this `fieldtype` rather than introducing a `colunmname`
Reference: note: this method does not check if the snapshot belongs to the same repository. since snapshot uuid and index uuid are unique ids i think the risk of collision is
Candidate: i hindsight, this method is very refactor. refactor. i wonder if we want to address the runtime mode. that runtime mode. refactor.
Reference: can we instead assert that `total == 0` and then set the value?
Candidate: nit: another check?
Reference: can we use a `new fieldandformat(cachedblob.creation_time_field, "epoch_millis")` to avoid parsing the string to long in `getcreationtime`?
Candidate: nit: another check?
Reference: what about adding this method instead of these two methods:```void computeifabsent(        searchrequest searchrequest,        biconsumer<searchrequest, actionlistener<searchresponse>> executesearch,
Candidate: can you revert this in
Reference: in case throwable is an instance of `error` then we should throw it (`throw (error) throwable;`).so that the `elasticsearchuncaughtexceptionhandler` can catch it.
Candidate: i think if we is really need to surround if the is is any reason that the is surround the the support the header?
Reference: why is the expected miscount increased here?
Candidate: can we add a `--> index check?
Reference: this method can never return 0.  is that a sign of a bug, or is it impossible that it could ever get called for a string like `a!!!!!`? 
Candidate: i wonder if we need to == getwrittenoffset()`?
Reference: better compare the `index` here than just their names. if we have instance equality it's the same performance as comparing names. if we have different indices, the uuid strings will
Candidate: i wonder if we should bias towards
Reference: i think we can be more descriptive in this message, perhaps detailing which action (`searchable_snapshot` in this case) in which phase has the bad repository? especially since there could be
Candidate: i think `maxjobmemorybytes`                           
Reference: same comment here about a more descriptive error message
Candidate: i think `maxjobmemorybytes`                           
Reference: it took me a little bit thinking about how this works. a short comment would be appreciated, explaining this adjusts the last character of the prefix for the ending key
Candidate: i wonder if we want to execute(randomfrom("-p", from the
Reference: should `values` be always not null and always be not empty if a vector field is indexed?
Candidate: i wonder if this is executed but it should be executed executed executed but executed executed if it is executed or executed executed if it is executed again.
Reference: nice! i like how to the code got simplified in all of these functions!
Candidate: ```suggestion                withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: only raising exceptions with a specific type (`elasticsearchauthenticationprocessingerror`) and while invoking the request processing error handler (and not any other handler), results in 500 or 503; anything else goes to
Candidate: i would be easier to the field name is seemed
Reference: nit: add something in the class javadoc ( that currentl references only 401s)
Candidate: i would be easier to the field name is seemed
Reference: we check for `userinfo != null` in line 120 so we can remove this from here and make it sliiiiiightly simpler
Candidate: can you is on this on
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: can you use the whole kind of fetchcontext#mapperservice() that it is preserved in the
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: this is kind of the
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: can you revert this in
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: i think we need for the
Reference: this block of changes is mostly for extra logging, the one semantic change here is `sorteddocvaluesfield` becoming `binarydocvaluesfield`. i struggled to update the original `sorteddocvaluesfield` for some reason, i'm not
Candidate: i think it be part of
Reference: now the `.liv` file is considered identical between the commits rather than different.
Candidate: i think it be part of
Reference: this one is always used as a `string` so maybe worth to declare it a `string`
Candidate: why did not happy for this check?
Reference: should we compute `hashequalscontents` once is the constructor and stores it as a class member? it looks like  every time a `storefilemetadata` is instanciated we use it.
Candidate: i wonder if we want to do this in the
Reference: maybe also test the default behavior with an empty map
Candidate: i wonder if we should bias towards this.
Reference: not very important but `indexwriter` implements autocloseable and can be used in try-with-resources blocks. `indexwriterconfig` also commits on close so you can save few lines (but it's not used like
Candidate: i think it be part of
Reference: for my own education, why is this way better?
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: should we set this to `i + entity.length()`? also, should we handle i being `-1` here?
Candidate: i wonder if we should bias == intermediate ?
Reference: let us rename the loop variable to mapping here.
Candidate: i wonder if we need need need to do this method and/or
Reference: let us rename the loop variable to alias here.
Candidate: i wonder if we need need need to do this method and/or
Reference: rename to rolloverinfo?
Candidate: i wonder if we need need need to do this method and/or
Reference: rename `value` to `aliasmetadata`?
Candidate: why comment on this, just just just just just just just just just just just just just just just just just just just just just just just just just just
Reference: rename `value` to `indexmetadata`?
Candidate: i we assert that we should fail here in the map here when we fail a few streams from the `alreadyfailed` either?
Reference: rename to `aliaslist`?
Candidate: i wonder if we should bias rather than `context.getqueryshardcontext()`?
Reference: rename to `nodescollection`?
Candidate: this is we need the presence of the case too.
Reference: i think these should be warning logs, not deprecations. the deprecation already happened, this is a warning that we are dropping something meaningless.
Candidate: ```suggestion                             
Reference: might want a slightly more reassuring message here :)  (also, these aren't all just primary shards) perhaps something like:`[3] shards cannot be moved away from this node but are
Candidate: i wonder if pooled started pooled started pooled buffers here pooled serialization. i didn't pooled started pooled pooled started pooled pooled pooled pooled pooled pooled pooled pooled pooled pooled pooled
Reference: nit: maybe just `array(string name, collection<string> values)` ? same remark for the other new methods.
Candidate: i wonder if we withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: can you add a comment here saying why we cache the lookups?
Candidate: ```suggestion        null, 0l);```
Reference: we could still assert that they have same leaf reader context ordinal? i.e. that the ordinal-based operations here make sense.
Candidate: ```suggestion        null, 0l);```
Reference: can you add a comment saying that this one here is explicitly created for iteration (in contrast to lookup above)?
Candidate: ```suggestion        null, 0l);```
Reference: should this just return `next` now that the collect method is just delegating?
Candidate: i am not sure if you need this stuff into intermediate handler ?
Reference: this comment isn't right for this method. here, after your refactoring, we don't have a separate instance as there is no iteration anymore.
Candidate: can you add assert:```assert for the
Reference: maybe java.time.zoneid.of("utc").tostring?
Candidate: can you add a comment for this
Reference: `length is` i guess:)
Candidate: i think we should be used to `asserttrue` while we should `asserttrue` is kind of all cases. maybe we should be it to `asserttrue` is clear?```suggestion    
Reference: i am not sure this waits for anything and it seems sort of unrelated to this test?
Candidate: why confused. this is wants an child here.my
Reference: ok, this might help, but can we perhaps log `numberofcachedblobs` before this assert busy such that we can see if it was trying to delete entries but was simply slow
Candidate: why confused. this is wants an child here.my
Reference: maybe move this into the `channel -> {}` lambda, it's kind of weird having it outside of its scope when it's only used in the lambda? (at least it took
Candidate: can you use bruce baner,
Reference: could we stop using the stopwatch altogether and move the timing into the new tracker? this'd also let us track the other things that aren't listeners/appliers (e.g. connecting to new
Candidate: i think this is right?```suggestion                         
Reference: same here, let's not have any synchronization here. if this isn't set then it will be lazy set just fine in our task loops and otherwise it's set from the
Candidate: i think `indexfieldmapper` always check that `indexfieldmapper` is null after the results.i think `indexfieldmapper` always yield no results.i think `searchindexnamematcher` `searchindexnamematcher` `searchindexnamematcher` is true?
Reference: if we're changing this already (+1 to the name change btw), can't we just go for `computeifabsent` to make it look nicer? :) (and also faster because we don't need
Candidate: i think if this pattern would be log _anything_ of the pattern is mistakenly in that mistakenly is mistakenly in the class.
Reference: nit: can unwrap the else i guess :)
Candidate: i think `indexfieldmapper` is no results.i think `indexfieldmapper` always check that the always yield no results.i think `indexfieldmapper` always yield no results.i think `indexfieldmapper` always yield no results.i think `searchindexnamematcher`
Reference: can we move this comment to the `decidecanallocate` method? it looks slightly off here.
Candidate: this *feels* private, is not using `scaledrandomint`?
Reference: i wonder if we should add a comment here explaining why it is overridden for this decider?
Candidate: ```suggestion                             
Reference: did you intend to tackle this now? i would prefer to include this in this pr.
Candidate: ```suggestion                             
Reference: can we randomize number of replicas? i think this should work with 1 replica too, since we will not allow allocating it to the target node.we may want to also
Candidate: i think it'd be nice to just be outer long>>                    
Reference: can this use `allocation.nodeshutdowns().get(shardrouting.currentnodeid())` instead?
Candidate: why is this is comparators way around.
Reference: nit: rename to `shardonreplacednode`?
Candidate: why is this is comparators way around.
Reference: not sure why we use the percentage here rather than just do it in bytes. i think the message would also be clearer if we add the excess amount of
Candidate: ```suggestion                             
Reference: can we make the visibility of this package private instead?
Candidate: can you add a comment on the `pbkdf2_stretch` of fetchcontext#mapperservice() if we need to mutate them in the `preprocessor`.
Reference: can we make the visibility of this package private instead?
Candidate: this trace trace is before):```logger.trace("found trace {}", statefilepath);```
Reference: rather than remove the "skips" once for node-level settings, and then remove it every time, since you know you'll need to remove it for every index, what about making `removeskippedsettings(state,
Candidate: why do we need to check in the
Reference: this test name is a little confusing to me :) what does it mean?
Candidate: i think we should bias towards `scaledrandomint`?
Reference: can you add a unit test for this method?
Candidate: i wonder if we need need this` if we want to be more resilient to in the case of roundup formatters?
Reference: nit: can you move `"upgrade_needed"` and `"no_upgrade_needed"` into a constant?
Candidate: i wonder if we should bias towards smaller == null`?or {                   
Reference: if we hit this every 10 seconds for 30 minutes, that's roughly 180 times, are we okay with that amount of logging? that seems a little too excessive to me.
Candidate: i wonder if pooled started pooled started pooled buffers here pooled serialization. i didn't pooled started pooled pooled started pooled pooled pooled pooled pooled pooled pooled pooled pooled pooled pooled
Reference: super minor nit, but since this is the top-level decision first rather than a plain list (it definitely has multiple sub parts though), can this be 'node_allocation_decision'?
Candidate: ```suggestion       (hyperparameters != null) {                   
Reference: seems like a nit, but i think we don't accept extra whitespace in this setting (we just use `string#split` to parse it) so i don't think we should include it
Candidate: should love the unit deletes from the version. it should be soft deletes deletes otherwise thenadding them from the overall clusterstate +140,9
Reference: bit weird that we treat all-whitespace as empty but otherwise we're whitespace-sensitive. (acking that this is how it was before too, no action required)
Candidate: this is this disabled?
Reference: maybe rename this test suite to `datatierallocationdeciderit` since `datatier` isn't in this package any more.
Candidate: nit: moved `datatierit` into intermediate inside the if/else and adapted accordinly
Reference: i think this has to be an `illegalargumentexception` so maybe we can catch that instead?
Candidate: why you can be on the leader either?
Reference: can we add a test that we can build an `indexmetadata` object based on a settings object with an illegal `_tier_preference`?
Candidate: why you can be on the leader either?
Reference: can we add a simple test that `gettierpreference` delivers the right output?
Candidate: i think we can make sure if this is confusing, if it is called on or?
Reference: minor wording change:```suggestion    public boolean allowscustomrouting() {```
Candidate: i think we need to address this method (missing 's')
Reference: again, i'll have to dig into this further, but isn't this code executed for indices and not just data streams so `template.getdatastreamtemplate()` might be null?
Candidate: could we assert of renaming the like```boolean timestampmapperexists = tempindexservice.mapperservice().ismetadatafield("_timestamp");```and then that's like```boolean timestampmapperexists = tempindexservice.mapperservice().ismetadatafield("_timestamp");```and then that's like```boolean timestampmapperexists = tempindexservice.mapperservice().ismetadatafield("_timestamp");```and then that's like```boolean timestampmapperexists = tempindexservice.mapperservice().ismetadatafield("_timestamp");```and then that's
Reference: what situation is this comparison of the string version of the mapping supposed to handle?
Candidate: i wonder if we should do this `fieldtype` rather than `context.getqueryshardcontext()`?
Reference: would it be clearer to move `isfinite` "up"? like into the field mapper or into the config or something? or just into the ternary above?
Candidate: small comment, we usually put the original entry here instead?
Reference: this returns `request_timeout` even if we didn't time out?
Candidate: ```suggestion                             
Reference: it's best for messages like this to be actionable: say that users should set the `es.cluster_health.request_timeout_408` system property to opt in to the new behaviour.also if they _have_ opted in
Candidate: ```suggestion                             
Reference: this is always `false` isn't it? (in `master` at least)
Candidate: ```suggestion                             
Reference: best not to parse the property each time, instead we should have a static constructor which reads it into a static field. moreover we should reject any value except `true`
Candidate: ```suggestion                             
Reference: if the user requested v7 compatibility and we timed out then we should keep the old behaviour. that would mean there's no need to skip any tests in v7-compatible mode.
Candidate: ```suggestion                             
Reference: breaking off the original `indicesandaliasesresolver.resolve` method in order to avoid `authorizedindicessupplier.getasync` makes sense.two minor quibbles:* can we integrate the `request instanceof indicesrequest` inside the `indicesandaliasesresolver.requireswildcardexpansion` check method. i think it
Candidate: remove
Reference: this line is the real change of this method. all others are format changes due to removal of the outer block of `authorizedindicessupplier.getasync`.
Candidate: i think we can just be smaller smaller than just getting the `randomboolean()`? just import for smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller
Reference: i wonder if this needs to be```suggestion                final resolvedindices resolvedindices = indicesandaliasesresolver.tryresolvewithoutwildcards(action, request);```it's not obvious
Candidate: i'm confused.
Reference: i think this change is too aggressive. it means that every non-replaceable request _must_ go through `resolveindicesandaliaseswithoutwildcards`, but i don't know why we want to enforce that. can't we just
Candidate: ```suggestion                             
Reference: @pugnascotia addressing https://github.com/elastic/elasticsearch/pull/78319/files#r723033047 herei think it is fine (other tests log those documents too). we only store the server logs when a test failed. so this will help to debug
Candidate: can you add a comment for the that `cancelfuture.isdone == false` ?
Reference: comment is wrong.
Candidate: ```suggestion                             
Reference: could this be replaced with `loadingmodels.addall(loadingtoretry);`?
Candidate: i wonder if we should bias towards
Reference: i wonder if we should special handle the case where the source is empty (no assigned shards) and allow releasing the block then? that should be safe and could shorten
Candidate: can we noted can we noted can we noted
Reference: i think it would be clearer to either refer the `clusterstate` to use via an atomic reference or make a specific sub-class with `clusterstate`, `indicestomarkreadonly` and `indicestorelease` fields. as it
Candidate: maybe assertthat("system mismatch, expected:" ...
Reference: i think this means that we no longer have any nodes with duplicate names. i wonder if we need to add a test checking that the monitor survives duplicate names
Candidate: why did you need for the pr?
Reference: looks like reverting 56e525f4f9a986c3a834f52a88b230b2fc4a982e is missing.
Candidate: ```suggestion                             
Reference: if we are having version-specific source sets, do we still need to capture the version here in the file path as well. as it is now we have files like
Candidate: nit: i think we can specialize here `getfilechannelreference` and adding a local line.
Reference: these duplicate fails are not actually needed for this pr, but i realized while adding the custom duplicate check to the compat testing task, it would be good to add
Candidate: i think we need to execute(randomfrom("-p", principal for the path for the are unwritten unwritten unwritten = unwritten unwritten
Reference: example of failure:```* what went wrong:execution failed for task ':rest-api-spec:yamlresttestv7compattest'.> found duplicated test(s) [search/30_limits.yml] please ensure there not any duplicate yaml test files between the [7.x] branch and the [yamlresttestv7compat]
Candidate: nit: i think we can specialize here `getfilechannelreference` and adding a local line.
Reference: i think we can still initialize this source set name statically.
Candidate: nit: i think we can specialize here `getfilechannelreference` and adding a local line.
Reference: when is null possible? shouldn’t it always have a feature object since unknown should fallback to custom?
Candidate: i think we can (sometimes, randomly) call readifavailableorpending?
Reference: another test we should keep but separate.
Candidate: i wonder if we should bias towards
Reference: maybe it'd be helpful to make a```public static final fieldcapabilities simple(string name, string type, boolean searchable, boolean aggregable) {  return new fieldcapabilities(field, type, false, searchable, aggregable, false, null, null,
Candidate: i think we should bias here in the case of troubleshooting.
Reference: i think we can still improve this message. it's not clear to me whether it means - something went wrong with authentication- there is no anonymous user configured- there is
Candidate: can you have that this is called twice, unchanged as well?
Reference: 👍
Candidate: can you also assert:```assert the
Reference: add `fieldname` back.
Candidate: ```suggestion         public realmref withcompatiblemajorversion(byte public
Reference: does this stay in sync with `scriptdocvalues` `setnextdocid(docid)`?  is there any chance the two could step on each other?
Candidate: i wonder if we should invest to surround the process. if we don't need to `true`.
Reference: ```suggestion        response response = adminclient().performrequest(new request("post", "/_features/_reset"));```maybe this doesn't matter while the test is running with security disabled.  but if we switch
Candidate: ```suggestion            ioutils.close(client);```this                 
Reference: this new test looks good to me, i.e. it can fail without the latest update for a similar scenario as described in [previous discussion](https://github.com/elastic/elasticsearch/pull/78508#discussion_r720953661). thanks!
Candidate: why is you guarantee the `<?,?>`
Reference: i wonder if we should do some version checks here, since we're not relying on file contents being equal as we do in the regular path.
Candidate: i'm not sure whether this is the way of runtime fields ?
Reference: i wonder if we should only allow this case when `sourcetargetdiff.identical.isempty()`? the primary case we are after here is relocations, which will be to a node that does not have
Candidate: i'm not sure whether this is the way of runtime fields ?
Reference: let us add a comment here that we check against source version and why it is ok (the allocation decider).also, i think we can do following instead:```suggestion   
Candidate: i'm not sure if this is okay, but not sure it's closer to
Reference: i think we need to add this in a few other places like `store.trimunsafecommits` and `storerecovery.addindices`?can we perhaps add an assertion about the previous version being before or on current
Candidate: i think it will be possible to check otherwise otherwise it will be possible otherwise otherwise it instantiated otherwise otherwise it instantiated otherwise it instantiated otherwise it instantiated otherwise it
Reference: i wonder if this would not even work without the `deleterecoveredfiles` flag?it seems logical that if the target receives a new file info, it should clean up any temp files
Candidate: let's are destructive (all for destructive (all `apply()` by destructive (all `apply()` are destructive unwritten unwritten are destructive unwritten unwritten
Reference: in the (albeit edge) case that this runs on an older version than the replica and the snapshot is taken on the newer version, this no longer allows file-comparison based
Candidate: can we add a comment here why we filter the filter method is filter filter on the replica of `meteredblobstorerepository` of `meteredblobstorerepository` of `meteredblobstorerepository` of `meteredblobstorerepository` of `meteredblobstorerepository` of `meteredblobstorerepository`
Reference: i think this is questionable. if we trim the commit, we store it by the new es version, which could be on a newer lucene version as well. with this,
Candidate: this comment on on this on on this on this on this on this on this line on this line on this is on the rest of fetchcontext#mapperservice() that we
Reference: can we add an assert about this too?```suggestion            assert version.v_7_16_0.luceneversion.onorafter(snapshot.getcommitluceneversion());         
Candidate: i think we should bias towards
Reference: can we add a comment that this runs on the primary, but using it's version is fine, since `nodeversionallocationdecider` ensures we only recover to a node that has newer or
Candidate: i think we should bias towards
Reference: i am not sure i follow this. the allocation deciders will not allow allocating replicas to an older node. but i think this is about the primary, do we risk
Candidate: can we add a comment here why we filter only filter filter on the
Reference: this seems a little backward, as if we validate the test more than the recovery. i wonder if we could instead capture the files from primary right after snapshot and
Candidate: can you add (sometimes, randomly)
Reference: let us add a comment here that this relies on previous minor having another lucene version (which it does now, but that could be reverted or updated in a previous
Candidate: ```suggestion                             
Reference: can we assert that `retryingusingfallbackplan.get(), is(true)`?
Candidate: maybe assertthat("system mismatch, expected:"
Reference: it would be nice to verify that we get here exactly, once without snapshotfilerecoveryfailed and once with (the latter is verified already).
Candidate: maybe assertthat("system mismatch, expected:"
Reference: i am not sure i understand the name here, at least the `cleansnapshotfiles` is not not clear. perhaps remove that part of the name?
Candidate: maybe assertthat("system mismatch, expected:"
Reference: did you intend to add a replica in this test for the `seqnorecovery` case? running the test failed for me when looking up the replica shard further down.
Candidate: too too too too too too too too too too too too too too too too too too too too too too too too too too too too too too
Reference: i wonder if we should check that the version does not go backwards explicitly here. i wonder if someone might be able to apply the command from an earlier version
Candidate: i appreciate this around this.
Reference: meta, no changes needed: "...a sign that the admin is opting for a behavior with an explicit configuration..".
Candidate: i is good for us for instance for instance for instance for instance for instance for the test, which is dropped. in the test, for instance for instance for instance
Reference: as we've discussed, let's try to decouple enrollment mode from the security auto-configuration. it is probably a perfectly valid use case for someone to want the node auto-configured for security
Candidate: i is good for us for instance for instance for instance for instance for instance for the test, which is dropped. in the test, for instance for instance for instance
Reference: this is the part that tripped me yesterday in the discussion. i get it now but i wonder if we have a more descriptive way to put this down in
Candidate: i is good for us for instance for instance for instance for instance for instance for the test, which is dropped. in the test, for instance for instance for instance
Reference: i don' think we need this as a san. it should be sufficient for this to be the subject of the http ca certifiate
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: can't comment on the actual line but the subject for the httpcacert should be `cn=auto_config_alt_cn` and not the one derived from the hostname of the node we happened to generate
Candidate: this seems unrelated but it's hard to talk if this is an left keyword?
Reference: nit: it wouldn't hurt if this pem file is world readable. in a given system, it might not be the case that all integrations/clients run as the same user that
Candidate: this seems unrelated but it's hard to talk if this is an left keyword?
Reference: the `hostname ` env var might not always be there in linux ( i think, i've never seen it happen ) but it won't be there in windows for sure.
Candidate: this seems unrelated but it's hard to talk if this is an left keyword?
Reference: changes are superseded by https://github.com/elastic/elasticsearch/pull/77632
Candidate: nit: probably pretty should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should,
Reference: nit: maybe assert same story for the `elasticsearch.keystore` file.
Candidate: `asserttrue` is used with the files of the files of the files of the files of the files of the files of the files of the files of the files
Reference: another small test suggestion is to assert the config dir contents after es had started, similar to how the contents are asserted before the start.
Candidate: this is me uncomfortable. does not need to fail?
Reference: i was trying to force an exception in the try block from above, and the easiest way that i could think of was to mess with the with the classpath.this
Candidate: i wonder if this makes a hard to talk but this is refering to claims
Reference: i know i coded this, but i now have second thoughts.(reverse) dns for all the ips on all network interfaces has the potential to seriously slow down node start-up.moreover, including
Candidate: i wonder if this makes a hard to talk but this is refering to claims
Reference: do we need to invoke `serverutils.enablesecurityfeatures(installation)` and `serverutils.disablesecurityautoconfiguration(installation)`  here?i think the `certgenclitests` should work irrespective if the node has been started (or still running), and if it has, whether
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: nit: the copying of the http ca cert from the installation in order to make the call is a recurring pattern. maybe move it inside the `waitforelasticsearch` function.
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: i don't see why we need to pass the cert here. can't we just provide an overloaded version of `waitforelasticsearch` that does this for us? it seems we already check
Candidate: ```suggestion                             
Reference: i'm wondering if it might make sense to add some of these `serverutils` methods to `packagingtestcase` that way we have a reference to the installation already and came make this
Candidate: ```suggestion         
Reference: i find "not readable" to be a bit ambiguous. can we be more specific and say something like "because the current user does not have permissions to read configuration file
Candidate: this is left hard if it's hard to claims on ilm? wonder if this makes this if it's hard to claims
Reference: can we add some comments here explaining each scenario we're testing. when i read these test case, it's not clear to me _why_ auto config shouldn't be running in each
Candidate: this is uncomfortable. me uncomfortable. to me uncomfortable.
Reference: shouldn't we do this in `withcustomconfig` so folks don't have to worry about this everything they use that method?
Candidate: this is me uncomfortable.
Reference: are  users required to do this? shouldn't auto-configuration be disabled automatically if folks provide a password via this means?
Candidate: :+1:
Reference: given this lives in `archives` i guess this means we're never verifying these assertions for docker installations? should we be?
Candidate: can we add a more idiomatic for this test?
Reference: this is a pretty pointless benchmark now isn't it? we don't really run anything like this code in the real world anymore and the stream -> flatmap -> filter step
Candidate: why is is slightly slightly slightly slightly as soon as argument is is slightly different enabled or false, tar tree unless is slightly slightly character is is slightly character is
Reference: if we have to do `.spliterator()` twice, maybe we should just use two normal for-each loops nested? :)looking at the rest of the code in this class it might not
Candidate: i reckon:
Reference: i find 9999 a bit high, perhaps just 100?
Candidate: i wonder if we need to do this method and/or and
Reference: i think i would find it more intuitive to locate this inside `lagdetector`, letting it have access to `transportservice` and `client` to allow it to handle the logging on its
Candidate: i wonder if we need to do this method and/or and
Reference: nit: use `source()` here as well?
Candidate: i wonder if we are just for the `apply()` unwritten unwritten unwritten unwritten unwritten
Reference: i think we could do something even simpler here since the value is constant. we could return a direct implementation of `valuefetcher` that always returns `fullyqualifiedindexname`.
Candidate: i think we should bias towards
Reference: this is just making the unit test code reflect production more accurately.  it wasn't a bug end users would have seen.  same with the tweaks below.
Candidate: @rjernst
Reference: i'd only ask that we include a comment explaining that this is due to oss distro removal.
Candidate: shouldn't you're
Reference: i think we should verify that `seqno < processedseqnosupplier.get()`. there is an implicit assumption that the `seqno` was retrieved from the global checkpoint api, but future uses of this may
Candidate: i wonder if there is replaced if working on the current map
Reference: can we add javadoc here. this is somewhat different from location refresh in that it requires the `seqno` to be before the local processed checkpoint and then ensures that every
Candidate: i wonder if there is replaced if working on the current map
Reference: let us add javadoc to this.
Candidate: i wonder if we should bias towards
Reference: perhaps add:```assert request.getwaitforcheckpoints().length > shardindex;```just to be sure an array index out of bounds is not handled, reported as failed shard and ignored in some tests.
Candidate: i wonder if we need to do this in the case client is somewhat configured client unless we don't need in the rest client unless we need again.
Reference: i am not sure why this todo is here?
Candidate: i wonder if we need to address this method (missing 's')
Reference: perhaps rename `setcurrentprocessedseqnosupplier` to `setcurrentprocessedcheckpointsupplier`?
Candidate: i reckon:
Reference: i think we should include the checkpoint listeners here too? perhaps keep the method named `pendingcount` and add the numbers in it?
Candidate: nit: can listeners = listeners of listeners
Reference: you could throw a non-assertion error here, that should be passed out as an uncaught exception.
Candidate: i suspect we need to `asserttrue` is no need to update the outer handler above? i suspect it could be an update with an update
Reference: this line looks like it belongs somewhat higher up, before calling `executequeryphase`?
Candidate: ```suggestion                             
Reference: nit: also final?
Candidate: i wonder if we need to do this method in the case description, i wonder if we need to check it.this need to mutate the
Reference: nit: the names are based on types, i would prefer them to be based on semantics, i.e.:```suggestion        return parserequest(restrequest, namedwriteableregistry, allowexplicitindex, (k, v,
Candidate: shouldn't this method into intermediate variable.
Reference: nit:```suggestion        parsemultilinerequest(request, indicesoptions, allowexplicitindex, consumer, (k, v, r) -> false);```
Candidate: ```suggestion                             
Reference: ideally, we would move the parsing of the new params out of `restserachaction` just like in `restmultisearchaction`. at a minimum i think we should remove "fleet" from this message.
Candidate: can think it was wrong
Reference: remove this comment now that we do synchronize?
Candidate: i wonder if we should bias towards rather than the field "doesn't in source" stays               
Reference: revert extra space
Candidate: this is
Reference: ```suggestion                        grantedbuilder.merge(concreteindex, granted, boolean::logicalor);```
Candidate: i am not sure i think it should be expensive, but i
Reference: meta, no changes needed: "...a sign that the admin is opting for a behavior with an explicit configuration..".
Candidate: i is good for us for instance for instance for instance for instance for instance for the test, which is dropped. in the test, for instance for instance for instance
Reference: as we've discussed, let's try to decouple enrollment mode from the security auto-configuration. it is probably a perfectly valid use case for someone to want the node auto-configured for security
Candidate: i is good for us for instance for instance for instance for instance for instance for the test, which is dropped. in the test, for instance for instance for instance
Reference: this is the part that tripped me yesterday in the discussion. i get it now but i wonder if we have a more descriptive way to put this down in
Candidate: i is good for us for instance for instance for instance for instance for instance for the test, which is dropped. in the test, for instance for instance for instance
Reference: i don' think we need this as a san. it should be sufficient for this to be the subject of the http ca certifiate
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: can't comment on the actual line but the subject for the httpcacert should be `cn=auto_config_alt_cn` and not the one derived from the hostname of the node we happened to generate
Candidate: this seems unrelated but it's hard to talk if this is an left keyword?
Reference: nit: it wouldn't hurt if this pem file is world readable. in a given system, it might not be the case that all integrations/clients run as the same user that
Candidate: this seems unrelated but it's hard to talk if this is an left keyword?
Reference: the `hostname ` env var might not always be there in linux ( i think, i've never seen it happen ) but it won't be there in windows for sure.
Candidate: this seems unrelated but it's hard to talk if this is an left keyword?
Reference: changes are superseded by https://github.com/elastic/elasticsearch/pull/77632
Candidate: nit: probably pretty should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should, probably should,
Reference: nit: maybe assert same story for the `elasticsearch.keystore` file.
Candidate: `asserttrue` is used with the files of the files of the files of the files of the files of the files of the files of the files of the files
Reference: another small test suggestion is to assert the config dir contents after es had started, similar to how the contents are asserted before the start.
Candidate: this is me uncomfortable. does not need to fail?
Reference: i was trying to force an exception in the try block from above, and the easiest way that i could think of was to mess with the with the classpath.this
Candidate: i wonder if this makes a hard to talk but this is refering to claims
Reference: i know i coded this, but i now have second thoughts.(reverse) dns for all the ips on all network interfaces has the potential to seriously slow down node start-up.moreover, including
Candidate: i wonder if this makes a hard to talk but this is refering to claims
Reference: do we need to invoke `serverutils.enablesecurityfeatures(installation)` and `serverutils.disablesecurityautoconfiguration(installation)`  here?i think the `certgenclitests` should work irrespective if the node has been started (or still running), and if it has, whether
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: nit: the copying of the http ca cert from the installation in order to make the call is a recurring pattern. maybe move it inside the `waitforelasticsearch` function.
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: i don't see why we need to pass the cert here. can't we just provide an overloaded version of `waitforelasticsearch` that does this for us? it seems we already check
Candidate: ```suggestion                             
Reference: i'm wondering if it might make sense to add some of these `serverutils` methods to `packagingtestcase` that way we have a reference to the installation already and came make this
Candidate: ```suggestion         
Reference: i find "not readable" to be a bit ambiguous. can we be more specific and say something like "because the current user does not have permissions to read configuration file
Candidate: this is left hard if it's hard to claims on ilm? wonder if this makes this if it's hard to claims
Reference: can we add some comments here explaining each scenario we're testing. when i read these test case, it's not clear to me _why_ auto config shouldn't be running in each
Candidate: this is uncomfortable. me uncomfortable. to me uncomfortable.
Reference: shouldn't we do this in `withcustomconfig` so folks don't have to worry about this everything they use that method?
Candidate: this is me uncomfortable.
Reference: are  users required to do this? shouldn't auto-configuration be disabled automatically if folks provide a password via this means?
Candidate: :+1:
Reference: given this lives in `archives` i guess this means we're never verifying these assertions for docker installations? should we be?
Candidate: can we add a more idiomatic for this test?
Reference: only raising exceptions with a specific type (`elasticsearchauthenticationprocessingerror`) and while invoking the request processing error handler (and not any other handler), results in 500 or 503; anything else goes to
Candidate: i would be easier to the field name is seemed
Reference: nit: add something in the class javadoc ( that currentl references only 401s)
Candidate: i would be easier to the field name is seemed
Reference: we check for `userinfo != null` in line 120 so we can remove this from here and make it sliiiiiightly simpler
Candidate: can you is on this on
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: can you use the whole kind of fetchcontext#mapperservice() that it is preserved in the
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: this is kind of the
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: can you revert this in
Reference: use a password string > 14chars so that it doesn't fail in fips
Candidate: i think we need for the
Reference: a [prototype](https://github.com/elastic/elasticsearch/compare/master...henningandersen:fix_autoscaling_proactive_replicas?expand=1) for a fix has been made, but since the original version already triggers at low watermark, adding it will mostly be a refinement. i will follow up on
Candidate: this is used to me.
Reference: instead of using an enum, how about an int flags? 0 == none, 1 == fls, 2 == dls, 3 == both, so you can just check the bit.
Candidate: is there is a bit of fetchcontext#mapperservice() that this is is only mutate the naming of baseresthandler ?
Reference: if we're not going to track then we don't need a `supplier` anymore do we? that was only so that we could defer checking (and tracking) until we were sure
Candidate: i don't think we can mutate this `onfailure`?
Reference: should this include tracking? i know we discussed only tracking in the interceptor, but it seems like we're better off tracking every time we know (for certain) that a feature
Candidate: i wonder if this method is used with the usage of `%` ?
Reference: per my earlier comment, i think we can drop the `supplier` if we're not tracking.
Candidate: :+1:
Reference: as above.
Candidate: i is replaced with an assert, but i allows to me.
Reference: why does a `null` role get treated as using dls/fls ? that seems wrong.
Candidate: is there is a bit of fetchcontext#mapperservice() that this is is only mutate the naming of baseresthandler ?
Reference: this can contain a `/` .
Candidate: i wonder if we should invest in the `preprocessor`.
Reference: i think `ensureyellow` is unnecessary, since create will wait for one active shard?
Candidate: i think we should bias towards the
Reference: since this test sets a tier preference itself when creating the index, i do not understand why it matters whether this is true or false?i would think we can remove
Candidate: can you add (sometimes, principal here
Reference: can we randomly pick between this and setting:``` .put(indexmetadata.index_routing_require_group_prefix + ".box", "warm")```no problem if this is problematic, i do think we cover this somewhat with the unit tests.
Candidate: i think we should bias here instead of retryinglistener.onfailure?
Reference: another test we should keep but separate.
Candidate: i wonder if we should bias towards
Reference: i wonder if we could add `isautogeneratedid` to `indexrequest` and let it be:```    return id() == null || autogeneratedtimestamp != unset_auto_generated_timestamp;```that would decouple the invocation ordering constraints
Candidate: here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here.
Reference: nit: i wonder if we can move this to the docwriterequest with sub-class implementations instead? would simplify the code here a bit. would need to accept the `indexrouting` object as
Candidate: here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here.
Reference: can we just do: `new shardid(concreateindex, shardid)`?
Candidate: here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here.
Reference: since we now parse the source, we should move the bulk action off the transport thread when tsdb indices are addressed. see `doexecute` above where we already do so for
Candidate: here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here. here.
Reference: i think you mean 7.16.0 here?
Candidate: i wonder if we are pretty pretty version here.
Reference: aggs question: are we sure of the order of the returned values in the values list here?
Candidate: i wonder if we are pretty pretty version here.
Reference: this had to change because we started to always fork and the actual change was mostly @tbrooks8's idea. we can't use the replica as the coordinating node because the test
Candidate: i wonder if we want to `asserttrue` test for newer pkcs12, but i think it makes it makes it makes it makes it makes it makes it makes that others
Reference: when we fork we can get a `rejectedexecutionexception` here.
Candidate: can you be nice to add it.
Reference: perhaps mention the two known reasons for this to be expensive too: tsdb parse routing from source and compression for outgoing requests?
Candidate: `dointernalexecute` throws exceptions, which can lead to implement the rest client which is executed in source" and             
Reference: i think `clusterstateobserver` uses generic thread pool for timeout. no need to change the code, but perhaps update the comment.
Candidate: can we move this into the constructor that `gap.oncompletion();` can always throw the tz
Reference: i don't understand why this won't be a problem on a 64 bit machine - can you elaborate?
Candidate: i wonder if we need to execute(randomfrom("-p", principal here for all source" stays                 
Reference: this test is failing in ci - i had a look and i didn't see these options being applied.i'd probably refine this assertion, to first find the elasticsearch invocation, then
Candidate: this is reduntant uncomfortable.                          
Reference: why would this test only work with systemd?
Candidate: this is reduntant uncomfortable.                          
Reference: i like the idea of having two different memory info types here rather than always wrapping the default.
Candidate: maybe?```javafor (string opt {                          
Reference: the generic `tostring` include the hashcode of the object. is that really an useful information to include? it is not stable. i'd think the class name is sufficient and easier
Candidate: i wonder if we should be parsing privilege files,         highenough (false == toohigh);```i operator operator operator operator operator operator operator operator operator
Reference: i wouldn't worry about setting the size since it will need some larger number of empty entries internally anyways.
Candidate: i wonder if we should be parsing privilege files,         highenough (false == toohigh);```i operator operator operator operator operator operator operator operator operator
Reference: this "context" doesn't seem very clear to me.what exactly is it trying to say?
Candidate: i wonder if we should invest in the case of troubleshooting.
Reference: should this be `debug`?
Candidate: i wonder if it makes sense to me that it should be replaced with an issue for index name)also i wonder if it should it if it is it should
Reference: this code is a bit confusing - in the `internal` case we don't set the header, and rely on a special case in `check`.- in the `run-as` case we don't
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: i don't think this is quite right yet. maybe ```suggestion            message = message + " and requires operator privileges";```
Candidate: maybe we step step step much step step here.
Reference: i don't hate what you've ended up with, but i think you could have achieved what you want by setting context to```"because it requires operator privileges"```
Candidate: i wonder if we should remove this `fieldtype` rather than taking
Reference: for a `trace`, i was thinking in would be inside the `anymatch`predicate.
Candidate: i wonder if we need the concrete "doesn't plugins, and there are "bootstrap" plugins, by `authentication_failed`.
Reference: ```suggestion            if (authentication.getuser().isrunas() == false && fileoperatorusersstore.isoperatoruser(authentication)) {```
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: we can make this stricter to require the groups to have only one member, which is the case for superuser role and the api keys created by it.
Candidate: i think we need to address this method (missing 's')
Reference: my suggestion from the other comments is to push the fast-path one level down in the `role.authorize` call, for slight reasons of interface clarity, but i also prefer it because
Candidate: can you add a note that this field for source" and                   
Reference: we seem to have 3 different (overlapping) methods for deciding whether an `indicesaccesscontrol` object is the allow all object. 1. `instanceof allowallindicesaccesscontrol`2. `== allowallindicesaccesscontrol.allow_all_indices_access_control`3. `isallowall()` (implemented via method 2)can we
Candidate: this is
Reference: i like how gh throws in a `main` source code change in between test ones, to keep us on our toes about tests.
Candidate: i'm confused.
Reference: we could extend `mapperbuildercontext` with indexname, but the pr itself would be fairly big (it would be good that all usages of the mapperbuildercontext have index). maybe we could limit
Candidate: maybe add more idiomatic for the ?
Reference: we don't need the `searcher.rewrite()` here, i think?
Candidate: i don't think we need to `true`.
Reference: i think we can actually remove this abstract method now? it's only called directly in `searchservice#createcontext()`, and it's called explicitly on a `defaultsearchcontext` so it can just live there and
Candidate: i wonder if we should remove this `fieldtype` thoughts:                     
Reference: enrich processors run without timeouts. i think this makes sense. now that we queue the requests, we rely on the queue being full to communicate backpressure. there is no benefit
Candidate: i think we need to do this `fieldtype` rather than `context.getqueryshardcontext()`?
Reference: i think additionally to this we need to think of how users can `ack` an allocation failure and request that the allocation restarts on that node. or all nodes where
Candidate: i think we should bias here as well?
Reference: does this also need to be changed in the method immediately below this one?
Candidate: i think the old option here i think.
Reference: ```suggestion                parameterizedmessage.format("this node is full. number of opened jobs and allocated native inference processes [{}],
Candidate: let's address this
Reference: if we fail to acquire permits then we should log a warning, indicating that the user should reduce `cluster.routing.allocation.node_concurrent_recoveries` to be at most `indices.recovery.max_concurrent_snapshot_file_downloads / indices.recovery.max_concurrent_snapshot_file_downloads_per_node`.relatedly it doesn't make sense
Candidate: can you use `this.earliestlastmodifiedage == false:
Reference: can we release the permit once we're done downloading snapshot files rather than waiting until the end of the whole recovery?
Candidate: i wonder if we can the ahead rather than introducing the field in the `preprocessor`.
Reference: the limit is only an upper bound, you could have fewer concurrent recoveries, but also i'd suggest just saying the number rather than naming the settings since otherwise folk will
Candidate: can you use `this.earliestlastmodifiedage here ?
Reference: interestingly i did not have to do this in master - i did not see mixed-cluster rolling-upgrade test failures.without this change - the rolling-upgrade were failing because when node upgraded
Candidate: :+1:
Reference: this is really worrying, but i gave up for now. the windows was resulting with error ```unexpected exit code (expected 0, got 1) for script: c:\tmp\elasticsearch\bin\elasticsearch-service.bat stop```i am pretty sure
Candidate: :+1:
Reference: isn't the default value of this setting always true now? i.e. this assertion isn't useful any more?
Candidate: i wonder if we need this `fieldtype` rather than the
Reference: why do we need this now?
Candidate: i wonder if we need to do it?
Reference: handy static constant for this:```suggestion            listener.onresponse(new clusterhealthresponse("", strings.empty_array, clusterstate.empty_state, false));```
Candidate: i think we can (sometimes, randomly) call readifavailableorpending?
Reference: nice
Candidate: can we add a `--> this check?
Reference: @benwtrent looks like you had a leak that i didn't catch. i'm quite thankful for leak detecting test cases.
Candidate: `contextindexsearcher` is `contextindexsearcher` `contextindexsearcher` `contextindexsearcher` ?
Reference: the comment suggests that this shouldn't be `null`.
Candidate: i wonder if we could create any bwc handler specified. specified. it specified. specified. it specified. it specified. it specified. it specified. it specified. it specified. it specified. it specified.
Reference: `tuple<predicate<snapshotinfo>, bipredicate<snapshotid, repositorydata>>` is getting a bit convoluted, really it's just the following but without the names or anywhere to hang docs:```interface somename {  boolean method1(snapshotinfo snapshotinfo);  boolean
Candidate: typo
Reference: could you move this directly into `getleafcollector` above? just the first line or something? that way folks that override this don't have to remember to call `super`.
Candidate: i wonder if we need this if this handler is called if we don't need if we should do anything?
Reference: two things jump out at me here:1. when we're summing doc count or value count we might be better off storing all this in `long` instead of `double`. then we
Candidate: i wonder if we should bias == true`?
Reference: another method seems unnecessary, the only non-test use is in this class, let's just update the few tests using this to pass the level?
Candidate: nit: i wonder whether we need all the field at all line.
Reference: we won't ever be talking to a version prior to `7.16.0` so this will always be `true` - you can just remove the `else` branch.
Candidate: this is
Reference: enabling `thread contention monitoring` on-demand, as we used to do it in hotthreads, is not precise enough to properly calculate the wait/blocked time. if we enable the support on demand,
Candidate: nit: revert
Reference: we pass in the supplied testing interval to hotthreads to be able to calculate the 'other' time, by subtracting the cpu, wait and blocked timings.
Candidate: i wonder if we should
Reference: we remove the privileged call to enable contention monitoring and replace it by simply checking if it's enabled. bootstrap sets it by default on now.
Candidate: i wonder if we should `fieldmapper#isaggregatable` `assert robust/
Reference: these changes look bigger than they are, i simply removed the try/finally blocked since we don't need to disable thread contention monitoring at the end of the hotthreads innerdetect call
Candidate: i thing pretty pretty thing on newer thing here.
Reference: when we sort by the 'total' runnable time, we first sort by the total time and then internally sort those at 100% by cpu.
Candidate: i thing pretty pretty thing on newer thing here.
Reference: this code below is unchanged.
Candidate: i thing pretty pretty thing on newer thing here.
Reference: helper to ensure we correctly match results of wait/blocked timings given we internally convert the input mills to nanoseconds so we can accurately calculate the timings and percentages.
Candidate: 👍
Reference: the changes in this method mainly focus on the updated output showing the separate 'cpu' and 'other' timings, as well as ensuring the orderings of output, since we have two
Candidate: i kind whether the bad failure whether the bad failure whether the bad failure whether the bad failure whether the bad failure failure whether the failure failure whether the failure
Reference: can we do this in a static for hot threads still? perhaps a static method could be called in initializeprobes? i think we should strive to keep bootstrap as small
Candidate: nit: revert
Reference: if we validate earlier that sortorder is only present for type cpu, then we don't need to the type check on cpu?
Candidate: i thing pretty pretty thing on newer thing here.
Reference: i had this wrong before, `out.bytes().streaminput()` resets the original version that the out had before, so i had to forcibly set it to the old version to simulate 7.x sending
Candidate: can you add a comment on the presence of `pbkdf2_stretch` that `cancelfuture.isdone == 1`?
Reference: there is a lot going on in this single test method. can some of these cases be split into separate test methods?
Candidate: i kind whether the bad failure whether the bad failure whether the bad failure whether the bad failure whether the bad failure failure whether the failure failure whether the failure
Reference: i think `indices` is fine here, though we could also consider `settings`.
Candidate: should we validate/throw a long!
Reference: i wonder if you should bake this into `testenforcedefaulttierpreference` instead. i think that test method will have to deal with deprecation warnings anyway and it sort of tests all the
Candidate: ```suggestion                             
Reference: remove?
Candidate: ```suggestion       (hyperparameters != null) {                   
Reference: remove?
Candidate: why did you need to remove the number of the rest of the rest apis?
Reference: do we want to limit here to `10000` or `integer.max_value`?
Candidate: :+1:
Reference: this should be removed
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: it would be nice if this followed the exact same conventions we use for mappings, respecting the `binary` parameter and serializing as bytes for everything but the `api`.
Candidate: i don't need need need need to understand the old way was empty, old client was empty,
Reference: probably also not necessary to extend things this way if we just do what we do for mappings and have a special `binary` param path here i think.
Candidate: can you noted on this on the same name above?
Reference: a very tiny nitpick: `indexversions=` could be changed to `indexinfos=`.
Candidate: typo: cach -> cache
Reference: all of these critical should be warnings instead
Candidate: ```suggestion                             
Reference: shouldn't this branch not be an error anymore? the setting is the general one, not per context?
Candidate: ```suggestion                             
Reference: could we load the digest ahead of time when we first check the file? this way subsequent checks have prevdigest to compare to.
Candidate: can you add `assert existingrange == range`?
Reference: nit: time the future -> time *in* the future?
Candidate: ```suggestion                             
Reference: we have usages for `md5` in other places as well. i am always confused by whether this is fips compliant. but bcfips provides md5 even in approved only mode. i'd
Candidate: can you add `assert existingrange == range`?
Reference: this predicate like method also mutates the `digest` field. would it be better to mutate `digest` in the same place as `length` and `lastmodified` and let this method be pure?
Candidate: can you add `assert existingrange == range`?
Reference: can we switch the names of these?future authors will naturally call `listener`, but that's the wrong one to use.can we have `originallistener` and `listener` (or `originallistener` and `opmarkinglistener` if you
Candidate: can we also assert:```assert randomly) == range`? i wonder if we need to the `&& "doesn't 10);// made) ?
Reference: why add this code here? not at the beginning nor at the end of the code block?
Candidate: same var
Reference: why this change if the comment says ".security" or ".security6"? either leave it as is, or do also change the comment, because there is a slight contradiction now.
Candidate: i think we should bias towards this.
Reference: same question about this operation. why is it specifically needed if one of the base classes should do the cleanup in an `@after` method.
Candidate: i                             
Reference: just a quick fix here, the bigger fix would be to just not do redundant work if there's duplicate mappings. i'll look into that in a follow-up. this should give
Candidate: i wonder if it is necessary to do it only be printed until it is only necessary to do the
Reference: are we sure that the order here doesn't matter?
Candidate: i think another impact here.
Reference: same here: i had to relax the condition to `lessthanorequalto` from `equalto`, because the `getsnapshot`  and `snapshotstatus` api calls happen with a delay, so we can't guarantee that `successfulshards`
Candidate: can you use `.get()`
Reference: ```suggestion        snapshotstatus snapshotstatus = client().admin().cluster().preparesnapshotstatus().get().getsnapshots().get(0);```
Candidate: can you use `.get()`
Reference: nit: noisy whitespace change
Candidate: can you use `.get()`
Reference: nit: noisy whitespace change
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: we have 1 node here, so we have to wait until all snapshots have been migrated except one in the `init` state
Candidate: i appreciate i think this can
Reference: again, we only have a single snapshot here, let's just check for that to begin with. then we can simply loop over all the shard entries and break out if
Candidate: i appreciate i think this can
Reference: actually, turns out this is not correct. sorry for only realizing it now, but we're missing the `missing` state here.i think what you want is to have this be `else
Candidate: can you are adding leniency?
Reference: no need for the first part of the message imo, the fact that it's a repository conflict is already in the exception type :)```"trying to modify or unregister repository that
Candidate: i am not sure i am not doing this with them in the case i am not doing them with them with them in case i am i am not
Reference: @gaobinlong i've removed the bwc layers in `restcleanuprepositoryaction` and `restrestoresnapshotaction` since these endpoints shouldn't throw that exception.
Candidate: i wonder if we need to do this in source" stays                   
Reference: we should check if the exception we're getting is a `repositoryconflictexception` and i've added a new field into `repositoryconflictexception` to keep the old message so the behaviour using the v7
Candidate: i wonder if we need to do this in source" stays                   
Reference: maybe its best not to mutate something in a method that is named `check`.
Candidate: i think you need to use the mapper?
Reference: do you think it'd be worth adding a method named `disablerequestcache` so you don't have to leave this comment?
Candidate: i think you need to use the mapper?
Reference: nit: remove this entirely?
Candidate: for completeness,
Reference: @droberts195 what do you think? just limit to the first 100 tokens? otherwise we could have unbounded category token lengths.
Candidate: this is
Reference: ```suggestion                        "use `elasticsearch-reset-elastic-password` cli tool to reset
Candidate: this is necessary
Reference: i don't love "might". i think we should say "will be" or "is intended to be"
Candidate: :+1:
Reference: see my comment above - not every use of setup-passwords can switch to "elasticsearch-reset-elastic-password" and i worry about confusion.
Candidate: :+1:
Reference: ```suggestion                        "you can use the `elasticsearch-reset-elastic-password` cli
Candidate: this is necessary
Reference: should we have an assertion on the status code (`400`) too?
Candidate: i think we can use the version for get() here of the version for the version of the version of the version of the
Reference: i don't think the comment helps here.the `license` object doesn't care about http or status codes, so it's a bit weird to have a comment about it.
Candidate: do we want to call the getters id as well?
Reference: for my own understanding: could you explain the circumstances where the `arrays.equals()` check would return `false` but the `equals` call below would return `true`?
Candidate: ```suggestion                             
Reference: i'd prefer we cleared the buffer after use (and asserted that it's clear when acquired) - holding onto random junk until the next usage seems like it'll cause a surprise.
Candidate: can you need this kind of
Reference: ```suggestion                    transformdeprecations.upgrade_transform_url,```
Candidate: ```suggestion                 
Reference: ```suggestion                        transformdeprecations.upgrade_transform_url,```
Candidate: i think there's more idiomatic
Reference: why the change here?
Candidate: could you use a bit
Reference: why here rather than on line 605 and 607?
Candidate: i think it would be nice to wrap all the
Reference: why the change here?
Candidate: i wonder if we should invest to surround the process. if we don't need to `true`.
Reference: is this condition ever false when running properly? we're running this from `createcomponents`, but i think `licensestate` represents the cluster state that's exposed by the `clusterservice` so the state isn't
Candidate: ```suggestion            = 2048;```
Reference: `bucketord` is lost in serialization. it's a transient part of building the bucket and not really part of the identity.
Candidate: ```suggestion                             
Reference: two things going on here:1. `doccounterror` is converted into `-1` by the serialization process if `showdoccounterror` is `false`. i looked into making it consistent but that seemed more complex than
Candidate: i think it makes sense to check whether we should always == false;` on the
Reference: sometimes it's null but we never handled that in equals/hashcode
Candidate: can we formatting...
Reference: may as well use a proper doc value format now that i've made it work with tests. you'll see this in a bunch of places.
Candidate: i think it is used in the superclass that `gap.oncompletion();` can use `scaledrandomint`?
Reference: this error message was useless.
Candidate: i love love it love to love it does though! though! though! though! though!
Reference: having a generic with type arguments in an error message reads a little strangely```suggestion                
Candidate: i wonder if we should bias towards rather than putting the authentication object? i am not sure if it would be nice if we need to additional value in the
Reference: ```suggestion                    listener.onfailure(new illegalstateexception("cannot find user authenticationresult on thread context"));```
Candidate: i wonder if we should consider putting the metadata object? it would be nice to consider them in the case authentication object?
Reference: ```suggestion                markasfailed(buildtask, transformtooolderror);            
Candidate: ```suggestion                             
Reference: @rjernst i made these public for testing purposes, i need to check if tracking is enabled/disabled for inference in a different package.
Candidate: :+1:
Reference: for `indexmetadata` this is fine, but we should be careful reusing this approach for other blobs potentially that could grow quite large. since gets are so cheap it might be
Candidate: i wonder if we need clrf with smaller here? i think we we need with this with smaller here? i think we need with smaller var
Reference: we could read the compressed bytes onto heap instead of decompressing to heap here, but as with the other point if this is just for index metadata for now it
Candidate: i wonder if we need clrf with smaller here? i think we we need with this with smaller here? i think we need with smaller var
Reference: why the public use of this getter? why not use the same approach as for parserparams? that is create the list during the method call since it's just needed inside
Candidate: i think we need to address this method (missing 's')
Reference: the information here is redundant and this optimizations has too many repercutions in the method signatures.either the ? is remembered through a separate set or the information is embedded inside
Candidate: super minor,
Reference: this looks like leaked concern - better to make the attribute foldable which maps nicely to the concept of replacing it with null.
Candidate: why does "always" is not used in the #33461.i'm that we need any reason that validation is used in the next class.
Reference: better yet, just check if the datatype is not null
Candidate: nit: you need to kind of the
Reference: could you explain these? i imagine they are useful but i don't know why right now.
Candidate: i think you can (sometimes, randomly) of `pbkdf2_stretch` for the of `pbkdf2_stretch` of fetchcontext#mapperservice() to me that you can do it nicer?
Reference: is this change unrelated to the timezone issue?
Candidate: ```suggestion                            throw newconfigurationexception(type,
Reference: i think a `recycler` is essentially a `supplier` of `recycler.v` objects, so would it not be more intuitive to use `recycler` here?
Candidate: i think we need to address this method (missing 's')
Reference: while developing this, i found a bug in `knnvectorquery` where the query can crash if the index reader has no live docs: https://github.com/apache/lucene/pull/413. this is why i set the number
Candidate: can you need to execute(randomfrom("-p", principal on the constructors of `pbkdf2_stretch` for it?
Reference: nice descriptions in tests!
Candidate: can you need to execute(randomfrom("-p", principal on the constructors of `pbkdf2_stretch` for it?
Reference: why can't this be an exact equals check, e.g. `asserttrue(response.gethits().gettotalhits().value == 10l);`? also could you please help me understand why we are using a `size` (5) that is less than
Candidate: can you need to execute(randomfrom("-p", principal on the constructors of `pbkdf2_stretch` for it?
Reference: similarly, why cannot it be an "equals" check? also nit: `assertthat(response.gethits().gettotalhits().value, greaterthan(10l))` will generate a better error message in case of ci failure.
Candidate: can you need to execute(randomfrom("-p", principal on the constructors of `pbkdf2_stretch` for it?
Reference: i think we can assert that the response contains the `vector` field as well.
Candidate: why do you need to do it?
Reference: maybe we could also move the creation of this service and the service into the x-pack module as a follow-up? no need to do it now.
Candidate: ```suggestion                             
Reference: we shouldn't be modifying resource files
Candidate: i think we can use `scaledrandomint`?
Reference: these suppress forbiddens are too broad. i see there are other ones in this file too. please isolate the call that is forbidden in its own method so other forbidden
Candidate: i reckon:
Reference: nit: please use `== false` or `false ==`, but not both in the same line
Candidate: i                             
Reference: the two files in question don't have to be the "real" es config right? since they are copies they could quickly get out of date. it seems like this test
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: in cases of a failure: when this is implicit auto-configuration we throw a userexception with null message so that this doesn't translate to an ```error: xxxxxxxxxxxxxxxxxxxxx```message for the user, and
Candidate: can you add a comment for the
Reference: if we're in enrollment mode ( --enrollment-token is passed ), we use the enrollment token to get the information we need to call out to the existing node and get
Candidate: i                             
Reference: the first  checks ( security_autoconfiguration_enabled set to false, security already explicitly configured, tls already explicitly configured, node expicitly configured to be the first node or part of a cluster
Candidate: remove this in the test is in the
Reference: i think we need to have some sort of logging of what field(s) were missing. otherwise no one will ever be able to debug this.
Candidate: i                             
Reference: why are we using self-signed certs? we've never used self-signed certs anywhere else before.
Candidate: i                             
Reference: ```suggestion        // skip security auto configuration when security is already configured.```
Candidate: remove this in the test is in the
Reference: can we simplify this to `ensuregreen("restored-*")`?
Candidate: why confused. this is wants an child here.my
Reference: https://github.com/pingidentity/ldapsdk/issues/118
Candidate: nit: renaming this line
Reference: this change doesn't always solve the issue correctly.given the current behaviour of `roundrobinserverset`, i think i need to re-write this part of the test entirely.
Candidate: nit: renaming this line
Reference: nit: ```suggestion            pool.setconnectionpoolname("ldap-pool-" + config.identifier());```
Candidate: can you also catch this catch regardless.
Reference: 👍
Candidate: ```suggestion                             
Reference: i guess that metrics indices should be `metrics-*` like the others, right?
Candidate: i'm not sure if we need this`
Reference: we shouldn't be modifying resource files
Candidate: i think we can use `scaledrandomint`?
Reference: these suppress forbiddens are too broad. i see there are other ones in this file too. please isolate the call that is forbidden in its own method so other forbidden
Candidate: i reckon:
Reference: nit: please use `== false` or `false ==`, but not both in the same line
Candidate: i                             
Reference: the two files in question don't have to be the "real" es config right? since they are copies they could quickly get out of date. it seems like this test
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: in cases of a failure: when this is implicit auto-configuration we throw a userexception with null message so that this doesn't translate to an ```error: xxxxxxxxxxxxxxxxxxxxx```message for the user, and
Candidate: can you add a comment for the
Reference: if we're in enrollment mode ( --enrollment-token is passed ), we use the enrollment token to get the information we need to call out to the existing node and get
Candidate: i                             
Reference: the first  checks ( security_autoconfiguration_enabled set to false, security already explicitly configured, tls already explicitly configured, node expicitly configured to be the first node or part of a cluster
Candidate: remove this in the test is in the
Reference: i think we need to have some sort of logging of what field(s) were missing. otherwise no one will ever be able to debug this.
Candidate: i                             
Reference: why are we using self-signed certs? we've never used self-signed certs anywhere else before.
Candidate: i                             
Reference: ```suggestion        // skip security auto configuration when security is already configured.```
Candidate: remove this in the test is in the
Reference: why do we remove all of the keystore if we're only removing the auto-configuration stanza from the yml?that seems very inconsistent.
Candidate: i                             
Reference: ```suggestion            terminal.println("this operation will overwrite the existing configuration.  specifically: ");```
Candidate: i                             
Reference: i know this is intentionally a destructive tool, but this seems a bit too much.it doesn't look like we take any steps to ensure that this was an auto-configured node.for
Candidate: i                             
Reference: i think this error message is misleading, since we're not actually backing up their configuration, we're trying to restore it to our best guess of what it looked like before
Candidate: i                             
Reference: this changes because the first thing that we hit now is `autoconfigurenode#getsubjectaltnames`
Candidate: i don't think we need to execute(randomfrom("-p", principal "doesn't in source" stays                  
Reference: side comment since it's existing code & not really specific to this pr - should we be using node.name instead of hostname for the `cn`?most of the time they'll be
Candidate: i                             
Reference: ```suggestion            final commandlinehttpclient client = clientfunction.apply(newenv, enrollmenttoken.getfingerprint());```
Candidate: i                             
Reference: i worry about some code down below accidentally using `env` (the more obvious variable) when it should use `newenv`.can we at least rename `env` to `originalenv` (though i'm not sure
Candidate: i                             
Reference: we discussed about making a backup of the existing auto-configuration instead of removing it. the issues around that would be where/under what name the backups would live and whether or
Candidate: i                             
Reference: changed this to fail if : - we can't find the autoconfig dir- we can't find the autoconfig security stanza in the configuration- we can't find the expected settings in
Candidate: i                             
Reference: is this method used anywhere?
Candidate: ```suggestion   withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: wouldn't this change make pagination through aggs results require a different use of the api compared to paginating through [search hits](https://github.com/elastic/elasticsearch/pull/79360/files#diff-3f0641a79abfbc1680ac9183b1c2e04cafe9f39526546f197c1043554a928427r99): the former would use the `request_timeout`, while the latter
Candidate: this *feels*
Reference: did you intend to change this file for the pr?
Candidate: why did me why did me me about me here
Reference: might be worth calling it `parserconfig` as it is in other places. not because of consistency, but because i think it reads better
Candidate: why we create it ?
Reference: i think this changes the way we report a missing routing to list the original request index (which could be an alias) rather than the concrete index. i think we
Candidate: i wonder if we want to check that the field ?
Reference: maybe add comment here that `resolverouting` and `process` must be called prior to this.also i think we can cement parts of that by asserting that `id != null`?
Candidate: can you add a comment about why we need to call `resetrecoveredflags` here?
Reference: i would just construct the setonce at the declaration of consoleoutput. then it can be final.
Candidate: i think we need to execute(randomfrom("-p", "--password")) here?
Reference: sorry for reformat, `verifyupgradefailsifmixedcluster` and `verifyupgrade` are the 2 methods i added
Candidate: leftover?
Reference: this `return;` is now not needed.
Candidate: i wonder if we should use `scaledrandomint`?
Reference: ```suggestion    private synchronized void schedulenext() {```
Candidate: i love to remove this method
Reference: i would be tempted to put this is the switch case for `first` & `second` because `none` does not truncate it throws instead. same result just a matter of preference
Candidate: can we add drop it to me that we can drop it in me that we can drop the message that well. (otherwise it would be converts to me that
Reference: :+1: since we're no longer adding an inner `indexshardsnapshotfailedexception` that duplicates the info in the wrapper.
Candidate: this is kind of parsing of fetchcontext#mapperservice() to be of adding a key),
Reference: should the order wrt the ml check above be reversed? that way if it is basic we don't trigger tracking for ml use?
Candidate: ```suggestion                             
Reference: it looks like there's some unnecessary formatting changes here and in a couple of other places.
Candidate: i wonder hard hard implies it hard implies it hard implies it hard implies it hard implies it implies it hard implies it implies it hard implies it implies it
Reference: i think these can be simplified with something like:```javaassertthat(authenticate, hasentry("api_key", map.of("id", "...", "name": "my-api-key-name"));```
Candidate: can you add this check?
Reference: there are older api keys that can potentially have `null` name (#59485) and we should handle that.
Candidate: ```suggestion                             
Reference: i believe the following change is required to address the ci failure```suggestion        metadata.put(authenticationfield.api_key_id_key, apikeyid);```the `manage_own_api_key` privilege requires the api key id to be
Candidate: can you put this in source" and `cache.invalidateall()` in the unwritten unwritten unwritten = unwritten
Reference: nit: there a few debug messages in here that do not have the model id`logger.debug("request [{}] received inference response but listener already notified", requestid);`could you add the model id to
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: this was the mechanism to provide back-pressure. now the action will write the request and finish, then the next request in the queue will be written so we are effectively
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: i wonder if this should be a `inferenceaction`? this way we have this single object that is sitting there with the inference state (timeout, etc.) and only allows to be
Candidate: i think we should bias towards the
Reference: since the countdown was effectively "notify listener", we should do that here.
Candidate: i don't think we need this counterpart of
Reference: this listener should be `actionlistener.wrap(this::onsuccess, this::onfailure)`
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: `use "doc['" + name + "'] instead.`
Candidate: i am not sure about adding this more thoughts:                     
Reference: why was this moved?
Candidate: i wonder if we want it if we want to for newer methods?
Reference: does it make sense to wait with some timeout just to safeguard that the test doesn't stuck forever?
Candidate: why is this is all elegant, but i don't see why we need on this pr?
Reference: all of this tells me we need a generic "restapi param parser util" or something where we can declare params, their compatibility, if they are deprecated, etc...seems like a good
Candidate: i think you need to add a comment on whether you don't need to do it.
Reference: yes, that is what we want. later when the support for restapiversion.v_7 is removed we will be able to track this down and remove the unwanted if branch
Candidate: ```suggestion       (hyperparameters != null) {                   
Reference: it is good for consistency, but so far we did not include cat apis in rest api compatibility.in this case i feel it might be useful though
Candidate: i don't think we need to create the getters and `cache.invalidateall()`
Reference: this is quite expensive to be doing on each inference request. could we make this work by just reading the allocation metadata?
Candidate: i think it makes sense that it makes it rather than the it is used in the
Reference: ```suggestion        assertthat(loggingaudittrail.entrycommonfields.commonfields, not(haskey(loggingaudittrail.cluster_name_field_name));```
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't (here since 1`,
Reference: should this be `true` or `randomboolean()`?
Candidate: ```suggestion          
Reference: actually - i just noticed this.why did we change this? i think `copyof` was correct.
Candidate: why?
Reference: this doesn't take into account things in the native queue waiting to be processed. we could add a counter that gets inc/dec when things get written and responses received. or
Candidate: can you add a comment for this method
Reference: i think there's a more general optimization possible here as well at some point. it seems pointless to ever re-compute the `routingnodes` if neither the table nor the nodes changed?
Candidate: `--> we were listeners `--> leading listeners listeners `--> were were were were were were listeners `--> were were were were were were were were were were were were were
Reference: @joshdover seeing this i wonder if we should be more specific. instead of having `metrics-*` we should use `metrics-*-*` so it would also not match the other index by "accident".
Candidate: i'm not sure if we need to update the presence of `pbkdf2_stretch` for the
Reference: i suspect we're going to end up with a bug at some point because this method is a now little ambiguous about what it does.`isserviceaccount` is true, if the user
Candidate: i think we need to address this method (missing 's')
Reference: i'd init cap index in the deprecation message, and tweak the description slightly:index "indexname" does not have a "datatier.tier_preference" configureda data tier preference must be specified for all indices in
Candidate: ```suggestion                             
Reference: this bit is really a bugfix and deserves backport to 7.16. i think i might want to rely on the supersede functionality in 7.16 for fixing #79104 too. we can
Candidate: ```suggestion                             
Reference: this is not the source of the bug shown by the test results, but it is definitely one that could occur in a strange scenario. its best to kill the
Candidate: i think this line more readable
Reference: rest api compatibility still warns at critical level.
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: we will still need a way to emit critical level deprecations when decalaring a rest handler. i will log a follow up issue.
Candidate: can you use `this.earliestlastmodifiedage == false: in source" and                     
Reference: just realized this: we never mutate the request later. so we could just do:```javareroutefunction = request.performreroute() ? allocationservice::reroute : (cs, reason) -> cs;```right?
Candidate: nit: also log extra name here also also name on the error?
Reference: i think this should be `trial`, not `trail`?
Candidate: ```suggestion                             
Reference: this is independant but looks wrong so i fixed it.
Candidate: why is used suite-wide instead of newer methods?
Reference: @martijnvg, when you have a minute, could you review this one? the main change is in this line though there are a couple others that i mentioned in the pr
Candidate: ```suggestion                             
Reference: could this exception be more specific? i wonder if this would be a place we could use the mapperparsingexception that we previously had in the validation logic.
Candidate: i wonder if we should bias towards ?
Reference: with this exception the caller gets the problematic mapping back, i'm not sure if that is the case after this change where the compressedxcontent ctor throws an iae. maybe it
Candidate: i think you really need to adjust the scope of the scope of the scope of the scope of the scope of the scope of the scope of the scope
Reference: i think you don't need to keep the version here and in the state of this object.you should try to limit compatible changes to the rest layer.within the `toxcontent` method
Candidate: ```suggestion             's')
Reference: ```suggestion        clusterhealthresponse res = new clusterhealthresponse("", strings.empty_array, clusterstate.empty_state, false);```
Candidate: why do we need to do this method in the rest method, but are we want to do it in all tests)
Reference: please use a named constant for the param name both here and in the deprecation message to make it clear it's not just a coincidence that they're the same string.
Candidate: can you add the getters of the
Reference: it seems wrong to be treating "common" punctuation differently to punctuation here.  it means this method will work differently for a straight apostrophe and a curly apostrophe for example,
Candidate: i wonder if we should bias towards the
Reference: do we need `synchronized(context)` here too?
Candidate: i wonder if we should have the error for the
Reference: rewording suggestion:```suggestion                "a bulk action contained trailing data after the closing brace. this is currently
Candidate: i don't think we need this if it is changed. i think we should
Reference: the model definition part number or document id from the search would be useful in this message for debugging.
Candidate: i think it would me drop me drop the `return` here.
Reference: nit: `set.of(requiredsourcefields)` can be lifted out of the for loop so it is created everytime
Candidate: i think it would me drop me drop the `return` here.
Reference: what if there are > 100 definition docs? the summed sizes will never equal expected total.
Candidate: i think it would me drop me drop the `return` here.
Reference: do we want in the future to add a support for indexed vector fields under nested? perhaps when `_knn_search`  becomes a a part of `_search`?
Candidate: should you also assert:```assert == true`?
Reference: tiny comment, maybe better to supply a non-null `scriptfield` that throws `unsupportedoperationexception`?
Candidate: i think this method is more than the
Reference: we don't need to introduce this new type check here.
Candidate: i wonder if we should `fieldmapper#isaggregatable` the method into the process. that `gap.oncompletion();` should always be used in the method `openidconnectauthit#getredirectedfromfacilitator`.
Reference: ++
Candidate: nit: i think this is reduntant in this pr?
Reference: i think the `%` here is unnecessary, we can just check for >=, since we reset when submitting the batch?
Candidate: nice
Reference: can we also assert that no extra request is sent/received when `pendingdeletes.get() == 0`?
Candidate: i wonder if we need to starvation here.
Reference: can we also assert that a key is interned? could just check that the key on index1 is the same as on index2.
Candidate: can you add a comment here that `cancelfuture.isdone == getwrittenoffset()`?
Reference: can we please log the timezone and the interval in the exception message if this happens? this way if we have missed a case that we are not aware of
Candidate: why renaming the part of the future, all part of performance differs?
Reference: i wonder if we can make this constant a field that can be modified with the builder which defaults to 5000? that way we can write a unit test that
Candidate: why renaming the part of the future, all part of performance differs?
Reference: this is changing behaviour and it's unclear to me how we end up in this state. i'd be concerned that a customer is successfully getting a date now, where their
Candidate: why renaming the part of the future, all part of performance differs?
Reference: any particular reason these are fully qualified?
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: i think it's better to check if the settings are set and then run the test.
Candidate: i think we can only only only only only only only only only only only only only only only only only only only only only only only only only only
Reference: lulz, accept null if null
Candidate: i think we noted because we update it.
Reference: so will this still get applied to e.g. `build-conventions/src/*/java` ?
Candidate: i wonder if we should bias towards unwritten the `apply()` unwritten unwritten unwritten unwritten unwritten unwritten
Reference: it seems potentially confusing to mix `text` and `finaltext` in the main algorithm.  since `finaltext` needs to be used in lambdas i'd just use it everywhere to avoid making
Candidate: why believe why believe why believe we error empty creation or empty validation?
Reference: ```suggestion                collections.singletonlist(```(because `arrays.aslist` with 1 item causes an intellij warning)
Candidate: why believe why believe why believe we error empty creation or empty validation?
Reference: ```suggestion                        0,```if this is wrong please add
Candidate: why believe why believe why believe we error empty creation or empty validation?
Reference: i strongly suspect multiplying two integers is much faster than using some generic x^y algorithm that works on arbitrary floating point numbers.```suggestion        
Candidate: typo public uservaluetypehint here.
Reference: this has been changed so that the `cloud-ess` image will rebuild when the `cloud` image changes.
Candidate: i don't think we should bias any maxchars`, and `cache.invalidateall()`
Reference: should we just make this a constant?
Candidate: nit: extra space before and `(`.
Reference: what was the motivation for this change?
Candidate: i wonder if we can use `scaledrandomint`?
Reference: should we use the term "descriptor" or "config" here? i'm leaning toward the latter as the term "descriptor" is already a bit overloaded.
Candidate: i wonder if we should bias towards the
Reference: shouldn't this be `"file://" + pluginpath`? i don't think `file:/path/to/file` is a valid uri.
Candidate: i wonder if we should save this, but i reckon: i think it'd be pretty much better to
Reference: instead of adding this special case, could the cloud generation of this file point directly to the zip for each official plugin in the archive dir?
Candidate: i appreciate this if i think this is preserved on the oidc is pretty pretty sure i think we need to hash `includeexcludetests` with tests.
Reference: is the only reason we are not allowing this for other distributions because we don't yet have packaging tests for it outside of docker?
Candidate: i wonder if we need this to starvation if it is re-queued
Reference: should we use `build.type()` here or is calling that from bootstrap a no-no?
Candidate: i wonder if we need this to starvation if it is re-queued
Reference: rather than manage this big switch statement here could we add an `exitcode` property to `installpluginproblem`, manage this mapping there, and then just return `e.getproblem().getexitcode()`?
Candidate: i wonder if we should bias towards rather than introducing the field index-(n-1)) and adding `scaledrandomint`?
Reference: if we decide my above suggestion isn't worth while can we at least place the `default` path at the bottom. when we move to java 17 this would be a
Candidate: i wonder if we should bias towards rather than introducing the field index-(n-1)) and adding `scaledrandomint`?
Reference: `parenttaskassigningclient` calls `request.setparenttaskid(taskid);` exactly as you have done in line 193 you should either set `request.setparenttaskid(taskid);` yourself or use the `parenttaskassigningclient` not both.https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/client/parenttaskassigningclient.java#l54
Candidate: i think we need to the
Reference: i was wondering if it makes sense to check that the policy name gets set in the exception's message?
Candidate: i think we should bias towards the
Reference: i guess the closing bracket should be a square one `]`, not a curly one `}`
Candidate: i think it should be better for the
Reference: should we call this on the constructor too ?
Candidate: i think you makes that makes makes you need to add them in a delegating null, that makes that makes that makes that makes that makes that makes that makes
Reference: i was going to comment about this having a default value. but i see that a default level is different for compatible and different for "current version" deprecations.might be worth
Candidate: i wonder if we should bias towards
Reference: when setting attributes while creating the span, it's common to use `spanbuilder.setattribute(key, value)`. it would look like:```javaspanbuilder spanbuilder = tracer.spanbuilder(traceable.getspanname());for (map.entry<string, object> entry : traceable.getattributes().entryset()) {    object
Candidate: ```suggestion                             
Reference: i believe it might be worth using `getcapturedspans()` or `list.copyof(capturedspans)` to prevent concurrent modifications coming from stream and collector
Candidate: ```suggestion                             
Reference: is there no equivalent for the refresh options here? that said, i don't know if they're necessary.
Candidate: i am not sure if the index is
Reference: i guess my main question here is there are reason we don't just specifically classify that this is a `recyclerbytesstreamoutput`? i like to be explicit that this has to be
Candidate: i think this is existing, but i wonder if we need to do this method and/or
Reference: i wonder if we should avoid this part of the message, since it also disables flood stage monitoring? we made this setting an operator-only setting too, i.e., may not be
Candidate: ```suggestion                             
Reference: i am no longer calling this as this is executed internally in `shutdown`
Candidate: should we assert that `cancelfuture.isdone == true`?
Reference: ```suggestion        assert this.services == false; // clusterapplierservice stops before we do        this.services = new apmservices(provider, tracer,
Candidate: i think we should bias rather than `context.getqueryshardcontext()`?
Reference: i had to register this funny way to get around configuration ordering issues related to additional added source sets. just using `tasks.withtype().configureeach()` resulted in additional source sets (like javaresttests and
Candidate: why do we just add this check?
Reference: a new setting to enable/disable authz tracing.
Candidate: i don't understand that.
Reference: should we use semanticsattributes here?
Candidate: same here
Reference: this allows a setter called `setxcontenttype` to have a parameter of `xcontenttype`.
Candidate: i wonder if we should bias towards and throughout? reckon: can you do the
Reference: it's probably worth reverting this.at some point soon we'll hit the code with a formatter and won't have things like this come up. i look forward to that! but it's
Candidate: i don't think you should be sure if you don't want to return the field of `pbkdf2_stretch` to why?
Reference: so they require both `curl` _and_ `wget`?
Candidate: i think we need to execute(randomfrom("-p", more idiomatic for the
Reference: i think `indexsettings.getmode` can't be null - it'd default to standard.i think i'd prefer to move this merge helping code to `indexmode` too, if we can. if every behavior change
Candidate: i think we need to check whether the is always assert:```assert `zendiscovery.validateincomingstate`. i wonder if it makes sense to do it nicer?
Reference: it's kind of rude to pass a `null` list here.
Candidate: i think we need to execute(randomfrom("-p", more "doesn't in source" stays                   
Reference: i wonder if it's more clear to do this with one `try` block.
Candidate: i think this part of a part of a part of a part of a part of gradle exception?
Reference: i think the problem here is that we may close `oldords` twice, right?
Candidate: i think we should `assert channelref.reccount() == {                      
Reference: i don't quite see the point is creating this intermediate variable in the first place.
Candidate: i wonder if we should `fieldmapper#isaggregatable` sense to address this way.
Reference: security now uses a system index. fyi added this code to clean up an ancient typed index template @jkakavas
Candidate: ```suggestion         templates.remove(security_template_name);          templates.remove(security_template_name);          
Reference: i think it would make sense to move lines 411-415 right before line 420 so that all the code for creating transform is in one place, not interleaved with index
Candidate: i am not sure i think this logic here.
Reference: this could check that unrelated errors are not removed
Candidate: i think we should bias towards `scaledrandomint`?
Reference: i was surprised that the second autofollowresult cleared the error from the first one. not sure if this is intended behavior.
Candidate: i think we should bias towards `scaledrandomint`?
Reference: i think it would be simpler to read using `equalto` on the `keyset()`? likewise in the next assert.
Candidate: this is not sure if we need this`
Reference: i think we should also test the case where there is no outer level exception, only an exception for a specific index (since that is the "normal" case).
Candidate: this is not sure if we need this`
Reference: i think we should use `lastindexof`, since index-names cannot have `:`, but unfortunately, i think autofollow pattern names can (at least i did not find the protection against it, hope
Candidate: nit: we can use `this.earliestlastmodifiedage == false:
Reference: because patterns can contain `:` (if i am right about that), we need to check if currentpatterns either contain the `patternname` or the `key` and keep it either way.
Candidate: nit: we can use `this.earliestlastmodifiedage == false:
Reference: i think this is too late, it should preferably go before starting any new auto-followers. otherwise, we risk a race where the auto-follower completes and updates stats before we get
Candidate: spelling
Reference: i think we should set the patterns to the empty list above when `autofollowmetadata == null` too (though i think we never go back to null, so mostly for completeness).
Candidate: spelling since we need a `--> either?
Reference: ah unfortunately this is in the hlrc api so we can't change it so freely. we can introduce `settargetparenttaskid` and deprecate the older method, that should be enough.
Candidate: i don't think we need for
Reference: just for my understanding, should `rejected.error` be also asserted in the other branch?
Candidate: this appears unused?
Reference: why can't we have `string` keys here anymore?
Candidate: i think we should an empty of the
Reference: maybe we should base64 encode these instead to save some bytes?
Candidate: why is
Reference: i've been trying to find a way to ensure that the recoverytarget reference is released and therefore the snapshot file download permit is released but since it happens asynchronously i
Candidate: can you add a comment here for the
Reference: slight preference for using the setting directly rather than its literal name:```suggestion                  
Candidate: i think we need to create pooled ne`
Reference: i might do `extracttsidvalue(address)` instead. it's sort of `timeseriesidfieldmapper`'s choice to send it to `networkaddress.format`.
Candidate: i wonder if you could method method the method method method method method method method method method method method method method method method method method method method method method method
Reference: i think it might be a bit confusing to check if `fields` is empty but then us `numericvalue`. is there something up with default values here? i wonder if we're
Candidate: i think we can wrap this in the
Reference: i'd probably by nice to use `_tsid` in the tsid agg.
Candidate: can we ever be more readable more readable more readable more readable more readable more readable more readable more readable more readable more readable more readable more readable more readable
Reference: now that i think about.... can't you declare something a dimension without enabling the tsid field? i wonder if we should avoid encoding it if the field isn't present.
Candidate: i wonder if you could method the method method method method method method method method method method method method method method method method method method method method method method method
Reference: ❤️ good change. this is left over from before we had queueing back-pressure as the signal for too many requests.
Candidate: i wonder if it'd be better if it is better to catch
Reference: @masseyke and @debadair i've added one word compared to what you used in #79387: "model snapshot" instead of just "snapshot" at the beginning.  please let me know if you
Candidate: let's add something like `minimumdelaymillis()`?
Reference: this may be spurious since it counts time spent waiting for the channel to become writeable (cf https://github.com/elastic/elasticsearch/issues/77838). should we track it separately from the inbound time tracking?
Candidate: ```suggestion                             
Reference: the point of `hasreferences()` is to avoid having to return a fake value like this for implementations that always leak. there's something weird about having a refcount which `incref()` and
Candidate: i wonder if we need to do this method and/or
Reference: i am afraid in the linked sdh the exception become huge because of 2089 suppressed exceptions (attached to the root, not to the nested exception):```{"type":"snapshot_exception","reason":"[azure_repository:routine-snapshot-2021.09.29-08uqgt9wskigd-qqjym8ea] failed to create snapshot successfully,
Candidate: why did you need for this in the
Reference: it doesn't look like the cleanest way to do it but it makes sense given what we have. and i don't think its permanent.
Candidate: i i understand the formatting
Reference: no need to lookup `index` from `concreteindices` if we just use it as name in an exception message.
Candidate: let's split this here.
Reference: the `concreteindices#resolveifabsent(...)` already checks whether an `index` instance has been cached, sono need to this here as well.
Candidate: i wonder if we should `fieldmapper#isaggregatable` == false && (metadata.iscompatible() == false) {  listener.onfailure(licenseutils.newcomplianceexception("ccr"));    if (failedstepretrycount == false) {```to == false);```
Reference: there are no tests added but: - i don't think we can control the interfaces used in our packaging tests so that we can end up with only local addresses-
Candidate: i think we should bias towards
Reference: i would adjust at least one of the packaging tests to the effect that the 'node.name' setting is randomly set, and the auto-configurations honors it (ie the initial node starts
Candidate: i                             
Reference: i don't love that this results in an `indexnotfoundexception` vs something more informative - i'd like to improve this and welcome suggestions on what to do instead. unfortunately, i think
Candidate: i think we should bias towards
Reference: this test is not relevant to `cardinality` agg. it was a left-over at `cardinalityit`please remove it.
Candidate: can we need to execute(randomfrom("-p", in the `apply()` unwritten unwritten unwritten unwritten unwritten
Reference: will name be `$` in this case?
Candidate: flip here else false, empty, is empty, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,
Reference: nit: would it be useful to increase the timeout a bit more, like 2000 ms? the server delays processing for 500ms, this means we have only one chance (at 512ms)
Candidate: i think we should bias towards the
Reference: it doesn't happen too often and it would be nice to know when it happens. so, maybe we should replace it with an assumption instead of silently ignoring it:```suggestion 
Candidate: i think we need to check for (false == toohigh);```i {            (false {      
Reference: can we not avoid the try-catch by just asserting before calling `handleexception`?
Candidate: i wonder if we should bias == getwrittenoffset()`?
Reference: why not just `ignoredeserializationerrors : error` inside the catch block? seems i am missing the point here :slightly_smiling_face:
Candidate: can you also assert:```assert randomly) == range`?
Reference: this still risks a wait in cases where we discovered the remote cluster was disconnected just after calling `getconnection()` above. i think we should avoid waiting on the result of
Candidate: this is better for the
Reference: this is just copy paste from the regular indexmetadata parsing code. `in_sync_allocations` are required to exist in indexmetadata for a restore to go through.
Candidate: i think this `else`s above, deserialization comment above, i think it'd be nice to deserialization comment if deserialization
Reference: we skip some of these steps here for searchable snapshots (as they are effectively useless, and require opening up the index, which we can defer to a later stage by
Candidate: why refactoring refactoring of refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring
Reference: ```suggestion                    assert store.directory().filelength(fileinfo.physicalname()) == fileinfo.length();      
Candidate: i am not sure i understand refactoring this refactoring to this.
Reference: can we also test the restore and mount of old lucene indices over closed indices too?
Candidate: i think we need to do this test for this.
Reference: this is unused
Candidate: i think this `else`s above, deserialization comment above, i think it'd be nice to deserialization comment if deserialization
Reference: can we use something like `builder.putmapping(mappingmetadata.empty_mappings);` instead?
Candidate: i think this `else`s above, deserialization comment above, i think it'd be nice to deserialization comment if deserialization
Reference: :+1: good to see this bypassed for searchable snapshot shards
Candidate: i think we can be fully wrapper `--> this?
Reference: at some point we could reintroduce the version constants for old elasticsearch versions.
Candidate: i did not sure this test for this?
Reference: just a nit: should we have this be ordered the same as the other mappers like textfieldmapper where the corevaluessourcetype is the argument before toscriptfield? there's a couple other places
Candidate: i'd prefer more consistent with more than the other method more than using `scaledrandomint`?
Reference: would you please explain this todo? what exactly is missing from this test?
Candidate: maybe rename this method into the `percolatecontext` name?
Reference: same with this todo.
Candidate: i think you sure i think this method is more than having to address this, but i reckon: maybe it could be more than having it more than having
Reference: same with this todo.
Candidate: i think we should bias towards in the path in the
Reference: same with this todo.
Candidate: i think we should bias towards in the path in the
Reference: since this is the top level, i think we can continue to use the same design as elsewhere where we use a method ref here. since keyedflattenedfieldtype is different from
Candidate: i wonder if this is okay to me.
Reference: should we add an `assert false` here too?
Candidate: ++                             
Reference: why can't you cast the task.getparams() to `snapshotupgradetaskparams` and grab the job id that way?
Candidate: i wonder if it's better to match `new line below? below?
Reference: i don't think this is necessary as the place that uses it has access to the persistent task params.
Candidate: i telescoping constructors is not suggesting a wrapper of the
Reference: what's going on here?
Candidate: super minor, but i don't think we need to presence of url but i don't think it does: url are url == url == conditions || url == url ==
Reference: i find `nonprojected` confusing as it might imply a field that was not specified in the projection (maybe because of an implicit declaration) - it's better to describe what it
Candidate: remove this `projectid`?
Reference: we don't typically use underscore prefixed variable names, do we?
Candidate: can you made this method rather than using `scaledrandomint`?
Reference: the call can fail in two different ways: on the connection or on the http level.the connection one is to be expected, but the http one is not. hence i
Candidate: i                             
Reference: i would suggest we debug log the exception stacktrace; for example, the exception can also be certificate verification exception, or a connection timeout.also it is not always connecting with the
Candidate: i                             
Reference: can you add a comment for why this is unsupported?
Candidate: maybe rename this `fieldtype` here
Reference: try/catch? that's so 90s. use expectthrows instead!
Candidate: why
Reference: this seems dangerous -- could index metadata be different across nodes? i should move this operation elsewhere.
Candidate: why you can be on the leader either?
Reference: this seems like something that should be done at a higher level of the call stack -- by the time we get here, something should have already made sure index.hidden
Candidate: i didn't throw error error error error error error error error error error error error error message will need error error error error error error error error error error error
Reference: i should try to back this out and fix the transport update settings action instead. (see transportupdatesettingsaction).
Candidate: ```suggestion                             
Reference: it looks like you messed up the logic here, william.
Candidate: do we need to do this method in the case where all tests)
Reference: note to reviewer: does this need to be fixed? if so, can we do it in a follow-up?
Candidate: i think we still need to `asserttrue` here as well?
Reference: note to reviewer: does this need to be fixed? it seems like if we don't catch system names in the validation stage, we may end up catching them elsewhere. if
Candidate: do we need to kind of the loop?
Reference: `boolean.false.tostring().equalsignorecase()` is i think what we want here? as we're accessing the string value in the request, it hasn't necessarily been normalized yet.using `boolean.false.tostring()` instead of `"false"` is just a
Candidate: ```suggestion                             
Reference: i don't think the system index access control header is going to be relevant here, right? should we set it randomly? or am i wrong?
Candidate: i you add this comment into the same in the
Reference: should we use `systemindexdescriptor.default_settings` here? it would be a bit clearer and automatically update when the default settings do.
Candidate: this is kind of what this is of them on what this is never used from what this is what is what is what is what is never used from
Reference: @droberts195 i've made some changes for ml too. the `minimalsupportedversion` refers to wire-compatibility, so it should never be `minimumindexcompatibilityversion` (as the index bwc guarantees are wider than the wire ones).let
Candidate: ```suggestion                             
Reference: in 7.16 `indexlifecyclemetadata#getminimalsupportedversion()` returns `version.v_6_6_0`. obviously this is earlier than `version.current.minimumcompatibilityversion()` but still it would be good to return the same value in both places when backporting.
Candidate: ```suggestion                             
Reference: can we bail out early here if `autofollowmetadata.getpatterns().isempty() && this.autofollowers.isempty()`? since this runs on every cluster change it would be nice to have a bail out.
Candidate: spelling i think we need to create a race either?
Reference: ```suggestion        // and auto-followers are stopped```
Candidate: i don't think we need to bias here of `pbkdf2_stretch` for non-fips clusters. but i wonder if we should bias towards unwritten
Reference: this should take in a toscriptfield and follow our standard plumbing pattern to this point. i think there's a real possibility this may be required for source fallback.
Candidate: i rough edges. (missing 's')
Reference: this is probably a larger conversation but:> // do not write default valuesseems like a bad idea as a whole. this means we have to consider older transforms automatically (and
Candidate: ```suggestion         (hyperparameters != null) {                 
Reference: i'm wondering if this is too complicated for a test.we could get rid of conditional statements if we fixed the scenario: pit is first enabled and then disabled.
Candidate: i think we need to execute(randomfrom("-p", principal here for source" and                   
Reference: snapshots from es 5 repositories were returning `partsize() == null` sometimes as repositories did not have a non-null partsize configured by default (today it's long.max_value instead for those repos). this
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: this check - `clusterwildcard == null || simplematch(clusterwildcard, clustername)` - is being used in another method in the same class. maybe extract it as a separate method?
Candidate: small nit - i think you can just make sure if you need to mutate the
Reference: i had to update these tests to use the new notation. they started failing because now if the old notation is used, we can't always guarantee that the roundtrip query
Candidate: can you add the whole "doesn't (here since `store` is always (once the in the `preprocessor`.
Reference: i have a feeling we don't need to overwrite "getalternateversions()" for this query builder any more. iirc it was used to check that we can parse "other" versions of the
Candidate: ```suggestion                             
Reference: just double checking that we don't want to continue to output `null` values for gt/get etc... for bwc reasons. i haven't really thought through why we would want or need
Candidate: can we use `builder.copycurrentstructure(parser)` instead?
Reference: @stu-elastic you mentioned this setting is only used as part of testing. if a user were to set this are there any other problems that may occur?
Candidate: nitpick:
Reference: i don't see any test coverage of this method. was that intentional (there's definitely a lot of code reuse with the clusterdeprecationchecks methods)?
Candidate: ```suggestion                             
Reference: who uses fully qualified name? if there's nobody i would remove it.if it has to stay, i recommend rename it something like catalogqualifiedname() - fully doesn't convey much.
Candidate: can you add a comment for the that `cancelfuture.isdone == getwrittenoffset()`?
Reference: what's the reason for this change? is it so that we can reuse the traceid formatter in ecsjsonlayout.java? i wonder if this changes behaviour a bit, previously if traceid was
Candidate: can you add a comment for the
Reference: nit: `node.node().gethostaddress()` might be asserted once before the loop
Candidate: i wonder if we should bias towards rather than the
Reference: why this change? the plan executor is the one that increments the metrics; by calling the cursor this is skipped.is this what's causing the bug? wouldn't it be easier to
Candidate: how about returning bool == true`?
Reference: you could randomize the `fetchsize` value with something between 1 and `testdata.size()`.
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: would `clusterstate.getroutingnodes()` not work here too (and in the other tests using the constructor)?
Candidate: nit: i              routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation routingallocation
Reference: can we use `clusterstate.getroutingnodes()` instead?
Candidate: i don't think this need to
Reference: this needs to only happen (even though it's an optional write, it will write `false` if there's no value)``` if (out.getversion().onorafter(version.v_8_1_0)) ```
Candidate: upgrading of 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x
Reference: nit: you don't have to specify an alias, it doesn't look like you'd need one here?
Candidate: i think we should bias towards
Reference: nit: you don't have to specify an alias, it doesn't look like you'd need one here?
Candidate: i think we should bias towards
Reference: should we assert there are some values in the fields? if `index_age` is null for example, this assertion could pass (for the wrong reasons)
Candidate: i think we should bias towards
Reference: i don't think this is stable given we use `system.currenttimemillis()` which would be a "wall clock" read. i suggest we unit test `indexlifecycleexplainresponse` and maybe we pass in a `timestamp
Candidate: i think we should bias towards
Reference: shall we also test `getage` is calculated using `lifecycledate` ?
Candidate: can you also assert:```assert `scaledrandomint`?
Reference: similar to what i did for snapshot recovery, i've reworked the searchable snapshot recovery code for peer recoveries.
Candidate: i think think think think think think think think think think think think think think think think think think think think think think think think think think think think think
Reference: with this, `lucenechangessnapshot` will just return empty set of documents instead of failing because the field has docvalues mapped to none now.in a follow-up, i want to explore exposing doc-values
Candidate: i wonder if we should bias towards == true`?
Reference: with this new approach, we now have sequence-number based recoveries for searchable snapshots, which means that there's no need any longer to send over any file (i.e. the exception of
Candidate: i think we need this `--> this case for this case for this case i think it is a `--> ne`
Reference: nit: use an empty list.
Candidate: why did not happy for this check?
Reference: add a `continue` statement here. if there is an inference results there will not be a thread setting
Candidate: can you use `this.earliestlastmodifiedage == range`?
Reference: should the condition above be `closeconnectionexceptionlevel == level.warn`?
Candidate: can we want to log it can log all in the other places. can we want to log it in "indices" can log all other stuff?
Reference: i wonder if this test would not pass without this (i should totally try it out)...
Candidate: i think you can do the `isinternalcluster` `getvalue` into the same way you can do it in the `preprocessor`.
Reference: :+1:
Candidate: i think this compensation can be nice to `asserttrue` if we can it?
Reference: let's add guidance as to how to address this error? e.g. can we check if the user overrode the size of the search thread and suggest undoing the change? or
Candidate: i think this test for a single test class,
Reference: this number might be super high now, how slow is the test? maybe we need to set an artificially low limit for this test to keep it reasonable?
Candidate: why is
Reference: scaling up the number of cpus would increase the size of the search threadpool and reduce the number of allowed clauses, so maybe just mention memory?
Candidate: ++
Reference: i think "initial" is a bit confusing here, since it could be an update of a remote cluster that was previously connected and it could now reconnect?```suggestion   
Candidate: i wonder if we need to extend concretefieldtype,
Reference: the `rolloveraction.name` privilege is already granted on lin 719 and not needed here.also nit: can we move this new section under line 720 so it is closer to where related
Candidate: i'm not sure if we need need to update all the
Reference: this test for `rolloveraction.name` is redundant because there is an identical one 3 lines above.
Candidate: oh wow. i don't think we need to drop this for the version for the
Reference: these should be conrete index names instead of wildcards, e.g. ```java"metrics-apm.app-" + randomalphaoflengthbetween(3, 8)```instead of```java"metrics-apm.app-*"```
Candidate: oh wow. i don't think we need to drop this for the version for the
Reference: same as above, should be concrete names.
Candidate: oh wow. i don't think we need to drop this for the version for the
Reference: please add a comment here to say that using the number of utf-8 bytes:* matches what the equivalent python code did* acts as a heuristic to account for the fact
Candidate: why not sure why we error error instead?
Reference: since `analysisconfig` is immutable, this should be changed as follows:1. check if the current `analysisconfig` has a model prune window2. if it doesn't, construct an `analysisconfig.builder` from `analysisconfig`3. call `setmodelprunewindow`
Candidate: i wonder if we should bias towards rather than `listener.set(true)`, it makes sense to the field "doesn't in source" stays          
Reference: remove this, as immutable classes shouldn't have setters.
Candidate: i think we should bias towards the
Reference: is it just `actionlistener<boolean> listener = (actionlistener<boolean>) invocation.getarguments()[2]` that needs this?  if so, you should be able to put the suppression immediately before that line instead of applying to
Candidate: this is kind of the of of the of of the of of this of
Reference: i will extract this into a separate pr with a corresponding unit test in `stashtests`.
Candidate: ```suggestion                             
Reference: what is the alternative (if *not* triggered from the scheduler)?
Candidate: this is
Reference: may be this could actually be inlined here to avoid introducing additional methods into request
Candidate: i think we should bias towards `scaledrandomint`?
Reference: i believe this main request is the original request created by the client. for the rest client, this is likely fine. but for internal clients, we could risk someone getting
Candidate: ```suggestion                             
Reference: above would also remove the need for this change.
Candidate: i wonder if we can remove this `fieldtype` rather than having the method in the `preprocessor`.
Reference: i think this is equally surprising. the client still sees the `reindexrequest` changing, in case they reuse it for multiple request, the scroll will be gone. i would prefer to
Candidate: ```suggestion                             
Reference: can we use the constant `max_docs_all_matches`?
Candidate: ```suggestion                             
Reference: i think we should turn this into an assert instead, asserting that we never get here if there is no scroll source? perhaps i missed a case where we would
Candidate: i think we should bias towards the
Reference: i think we should merge this statement with the one from line 682:https://github.com/elastic/elasticsearch/blob/3027039f72c26f6780cd7857a6c5c4b0c4bd0878/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/store/reservedrolesstore.java#l682read through the existing code, i'd prefer to put the merged statement _under_ the block starting at line
Candidate: i'm not sure if we need need this`
Reference: do we actually need `create_index` or could we use `auto_configure` instead and rely on an index template in the endpoint package?
Candidate: i'm not sure if we need need to update the presence of the
Reference: not all hostnames, can be dns names. should we devise a regexp for dns names? i don't think there's a problem if we include invalid dns names in the san.
Candidate: i wonder if we should bias towards rather than introducing the tz and mapperplugin.getmappers().keyset()`?
Reference: good call. not only these are not used for validation but will probably ( apart from the localhost related ones ) be _wrong_ for the other nodes that will get
Candidate: i                             
Reference: :old-man-shouts-at-windows:
Candidate: ```suggestion                             
Reference: cleaning this up here because i found it while tracking this bug down and it's too trivial for a separate pr, `this.dependencies` is always immutable so no point in wrapping
Candidate: i think we need to address this method (missing 's')
Reference: i think this will conflict with #81986, so maybe that one should be merged first?
Candidate: can you use `withhuman`
Reference: can we either add a test or randomly clear the deduplicator here and then validate we see two requests at the end?
Candidate: primaryterm was 1? task)
Reference: hopefully the change in keystore entry name is not botering anyone.
Candidate: i wonder if we need to check whether we is a snapshotinfo conflict with hard given that it will be hard with the
Reference: if it happens that there's already a `certs` dir present, we back it up and never remove it.
Candidate: i wonder if we need to check whether we is a snapshotinfo conflict with hard given that it will be hard with the
Reference: at this point the keystore and the certs dir are all set. what's left is to update the yml file.
Candidate: i wonder if we need to check whether we is a snapshotinfo conflict with hard given that it will be hard with the
Reference: :pray:
Candidate: i wonder if we need to check whether we is a snapshotinfo conflict with hard given that it will be hard with the
Reference: thanks for these blocks, we should have been doing this from the beginning :+1:
Candidate: i wonder if we need to check whether we is a snapshotinfo conflict with hard given that it will be hard with the
Reference: i liked that we had all these as static strings on the top, for readability reasons mostly but won't block
Candidate: i wonder if we need to check whether we is a snapshotinfo conflict with hard given that it will be hard with the
Reference: why don't we use the list of `realm`s built by `realms#initrealms`? i think it could help simplify the logic, e.g. no specially handling for default file/native?i guess one reason for
Candidate: i think it is pretty much fan of the failure. i find it harder to suggestions iterating with `hasbeenprocessedbefore(index)`.
Reference: i think randomnonnegativelong() is reasonable here as well.
Candidate: i think we should bias here as well?
Reference: sneaky :)
Candidate: i think we should bias towards using `scaledrandomint`?
Reference: is there a case where we are writing using other than write or flush threads? if so, i wonder if we need to add a test or if this is
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: is there an existing test provoking this case or can we add one?
Candidate: `asserttrue` *feels* can just `asserttrue` for the short): i think `asserttrue` can catch `asserttrue` with `equalto(indexstats.getindexshards().get(shardid).getprimary().store.getsizeinbytes()))` for the tests. i think we usefully that `includeexcludetests` for the tests. i think
Reference: this seems wrong, it leaves us with a (synced) checkpoint that refers to data that isn't synced and might vanish if, say, you pull the power out after executing this
Candidate: `asserttrue` *feels* can just `asserttrue` for the short): i think `asserttrue` can catch `asserttrue` with `equalto(indexstats.getindexshards().get(shardid).getprimary().store.getsizeinbytes()))` for the tests. i think we usefully that `includeexcludetests` for the tests. i think
Reference: could this not use the `byte[]` version of `witetochannel` and thereby avoid one more byte-buffer allocation? that seems also shorter and easier to read.```suggestion      
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: maybe add a todo here and in `readfrom(...)` method that we should eventually change the serialization format.
Candidate: i wonder if we need need to update the version of
Reference: could we just call this `rolesfile` or `securityrolesfile` to be more descriptive?
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: the original reason behind this was to prevent the 10k limit we currently have on stats and configs. it is conceivable that a user has 10k+ models, none of which
Candidate: can you add (sometimes, tz = true`?
Reference: the huggingface docs suggest that 2 separator tokens should be used for a pair of input sequences:  `pair of sequences: <s> a </s></s> b </s>` https://huggingface.co/docs/transformers/model_doc/mpnet#transformers.mpnettokenizer.build_inputs_with_special_tokens
Candidate: it me that it it it it it it it it it it it it it it it it it it it it it it it it it it it
Reference: instead of having the `-noedit` suffix, wouldn't it be possible to change the `from_qualified` pattern to match any qualified index name? shouldn't anything with a colon in the index name
Candidate: i reckon:
Reference: was this changed intentionally?
Candidate: ```suggestion                             
Reference: this bit just avoids masses of log spam while the tests run - like #82055
Candidate: i think this is room for newer methods?
Reference: maybe use this instead:```suggestionthrow new assertionerror("shard " + id + " is still locked after 5 sec waiting", ex);```unless it is too verbose?
Candidate: do we need this into the tribe prefix!
Reference: this is going to be often null since we don't serialize this anywhere in the class
Candidate: i think it looks like this naming like fixed, since it is fixed, since it looks like fixed, i don't think it looks like fixed, i think it looks like
Reference: nit: we need to update the java docs of this method as we now keep doc values.
Candidate: i wonder if we should bias kind of all the `createindexrequest` reckon: are somewhat unwritten unwritten unwritten
Reference: this should be reverted to it's original `boolean.valueof(((number) val).doublevalue() != 0)`, as it yields incorrect results for non-zero floats in (-1, 1)
Candidate: why is the usage of or?
Reference: if that's the case should we even bother filtering here? wouldn't it be better to just delegate on and get the warning message which would inform the user to remove
Candidate: i wonder if we should bias towards
Reference: i wonder if there are additionally any concerns with sending this to stderrr? would stdout similarly break stuff depending how folks are consuming the output?
Candidate: i you usefully inline this here, but i think we usefully to the actual marker of cases. if we usefully
Reference: @romseygeek is the mention of "object" in this error and the next one accurate? don't we split any path regardless of the token we are reading from the parser?
Candidate: nit: this formatting-only be be be null, period, shouldn't be be be be be be be be be be be be be be be be be be be be be
Reference: @romseygeek this check is redundant now?
Candidate: i wonder if we should bias towards the field "doesn't in source" stays `fsync`
Reference: we add something (format string) to `mappingmetadata` that indicates how the `@timestamp` field should be parsed. we would need to fetch this from the latest backing index of a data
Candidate: i wonder if we should invest for all principal around the de-serialized lookup? i it would executed for all tests)
Reference: it would be great if we could add a bit more useful information here. i think i would rephrase it as "the document timestamp [2022-01-07t19:04:41z] is outside of ranges of
Candidate: i wonder if we should invest for all principal around the de-serialized lookup? i it would executed for all tests)
Reference: it feels like a bit too much logic for a data class, that the indexrequest is essentially is. i wonder if it makes more sense as a part of indexabstraction
Candidate: i wonder if we should invest for all principal around the de-serialized lookup? i it would executed for all tests)
Reference: can you add javadocs for this?
Candidate: i wonder if we need to wrap method
Reference: i think we need to support epoch millis here also, correct? i tested it locally and it works, but not sure why this doesn't blow up since i would expect
Candidate: i wonder if we should invest for all principal around the de-serialized lookup? i it would executed for all tests)
Reference: can you rename this to be something tsdb specific, like `selecttimeserieswriteindex` (since we may end up adding different selection criteria in the future) and add javadocs?
Candidate: why is this mutate a bug on why we don't need to mutate this method on runtime fields ?
Reference: lets add a todo here to move this away from `ackedclusterstateupdatetask` and use a custom task object.
Candidate: i think we need to `asserttrue` here
Reference: i think this is fine as an optimization but we could do even better imo. couldn't we just resolve the listener on deletes that become empty on a cs update
Candidate: nit: not sure why
Reference: this needs to be done for other aggregation builders too.
Candidate: i don't think we need the `try`/`catch` here into the same here rather than the other apis?
Reference: you need to add version check on the sending side as well. otherwise, you will be sending something that another (older) side is not expecting to receive.
Candidate: upgrading for 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x 1.x
Reference: added this to normalize the whitespaces away when doing the string to `compressedxcontent` conversion. this saves quite a bit of parsing if requests come from external sources (beats etc.) which
Candidate: i wonder if this makes sense to address the dynamicruntimefieldsbuilder method refactor. i wonder if we need point-in-times point-in-times point-in-times (#66713)?
Reference: i get a bit nervous that we may end up with an npe here... i assume you double checked all the places where this is called?
Candidate: i wonder if we should `fieldmapper#isaggregatable` more robust/
Reference: i get thrown off here by seeing that you merge in the default mapping, which previously we did not. why is that?
Candidate: nit: you can remove this method `updateappliedstates()` and
Reference: ```suggestion                    bw.write("# enable security features");```what about this? it sounds more consistent
Candidate: i                             
Reference: is there a way to avoid the z marker? i suspect it's pretty unknown to many users. something like utc instead?i'd also remove the hyphen between date and time.
Candidate: i                             
Reference: does this trigger the bootstrap checks, which by default fail on linux?
Candidate: i                             
Reference: s/xcontenttypemycompressed/xcontenttypemaybecompressed/and can we add some javadoc here as well?
Candidate: i guess we need need need need
Reference: if you merge #82435 first, you can change this value to `v_7_1_7` before merging this pr
Candidate: this wonder if this is benefit in this pr?
Reference: ditto
Candidate: this wonder if this is benefit in this pr?
Reference: nit: i am not entirely happy with the naming of the new parameter. i think `forcedocvalues` fits better for range queries where we use indexordocvaluesquery, but here it's more about
Candidate: i don't think we need to address this method into the
Reference: nit: i can see why the additional argument is called forcedocvalues here, because we explicitly want to query only doc_values, but here too maybe isindexed would also express that if
Candidate: i think that `gap.oncompletion();` can be better that kind of `in` and i think it is better that we are, i think it is better that it is better that
Reference: the indentation seems off here :(
Candidate: left over
Reference: this looks like an unintentional revert? or is it intentional?
Candidate: remove it to in another class that we retrieve them in the cache, and it is smaller than `indexgeneration`?
Reference: ```[2022-01-12t09:22:56,827][warn ][o.e.r.repositoriesservice] [idegtiarenko-thinkpad-t490] failed to create repository [repository-hdfs]org.elasticsearch.repositories.repositorypluginexception: [repository-hdfs] repository type [hdfs] does not exist	at org.elasticsearch.repositories.repositoriesservice.createrepository(repositoriesservice.java:662) ~[elasticsearch-8.1.0-snapshot.jar:8.1.0-snapshot]	at org.elasticsearch.repositories.repositoriesservice.applyclusterstate(repositoriesservice.java:505) [elasticsearch-8.1.0-snapshot.jar:8.1.0-snapshot]```should i reword this to `repository plugin for type [type] does not
Candidate: let's just put this and/or `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no into a finally `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no `ioutils.closewhilehandlingexception(repository);`.no
Reference: i'd rather not use exceptions for control flow like this. let's tell `createrepository` to create the placeholder repository instead.
Candidate: i wonder if we should add the method name.
Reference: similarly here.
Candidate: i wonder if we should add the method name.
Reference: here and in other places of this file it should be `any()` instead of `unbatched` i believe
Candidate: i wonder if we need to add the test for all tests)
Reference: similarly here
Candidate: i wonder if we should bias towards `scaledrandomint`?
Reference: these `localclusterupdatetask` things are a bit weird, none of them change the cluster state (which seems right and proper) - could we fix their api to reflect that within this
Candidate: load triggers 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);``` 0);```
Reference: the `hashmap` constructors accepts the capacity, not the expected amount of elements. it needs to be sized a bit higher than `mappings`, otherwise it will need to be resized/rehashed.see https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/maps.java#l273
Candidate: ```suggestion                && objects.equals(right(), && objects.equals(right(), && objects.equals(right(), && objects.equals(right(), && objects.equals(right(), && objects.equals(right(), && objects.equals(right(),
Reference: fwiw i don't think i've ever seen this check fail, maybe we could make it an assertion?
Candidate: i wonder if we should do this `fieldtype` rather than the
Reference: i am not too fond of this pattern. i *think* it works due to how chm synchronizes on the head of the bucket in both compute and remove. but i
Candidate: ```suggestion                             
Reference: i think we would want to synchronize explicitly on the `pending` set instead of relying on `collections.synchronizedset`, iterating a synchronized set like this is not really safe.
Candidate: i wonder if we should bias towards
Reference: would be good to keep the extra generality in the choice of version here rather than fixing it to be exactly 7.17.0:```suggestion        final
Candidate: ```suggestion                             
Reference: similarly here.
Candidate: why do you need to wrap the in `pbkdf2_stretch` so it doesn't need to do it nicer?
Reference: similarly here.
Candidate: can you need to execute(randomfrom("-p", principal here so we can do the `scaledrandomint`?
Reference: i guess we could just use string concat here and drop the `parameterizedmessage` since this would compile into a string literal then anyway.
Candidate: i wonder if we should use `scaledrandomint`?
Reference: i think `testrestrictedindices` should provide more utilities to help with randomizing system index names since we have so many system indices now (and they are all restricted). it does not
Candidate: pinging renaming this asserting here.
Reference: nit: user roles are not deduplicated. so it is possible to have something like `["superuser", "superuser"]`. should we cater for it? the existing logic does.
Candidate: can you add a comment for the
Reference: nit:```suggestion        return super.configroles() + "\n" + "r1:\n" + "  cluster: all\n";```
Candidate: i think we should bias here, i reckon: i don't think it is only much more evocative.
Reference: it's probably a _nit_, but i think an enum would be better than a `boolean`. something like:```enum apikeyroletype {  assigned_roles, limited_by_roles}```(i'm happy with different names for them enum class,
Candidate: this is always be somewhat used due to `true`.
Reference: this is sample usage of the new method. this way we do not have to explicitly create a builders for a cluster state and metadata copies, just apply changes on
Candidate: nit: i wonder if this is more idiomatic methods?
Reference: arg good catch!
Candidate: ```suggestion                             
Reference: ```suggestion        // rst all closing connections in tests (by setting so_linger to 0) so we don't leave too many connections in time_wait state
Candidate: this is pretty necessary `random` instance
Reference: if the only difference between the two branches of the if/else is the boolean that's being passed through, would it be more readable to extract that as a variable and
Candidate: i don't think we want this check?
Reference: can we do normal `.get()` here just to not lose the stacktrace in case of a failure?
Candidate: i think we should bias towards smaller == getwrittenoffset()`?
Reference: the future should be renamed now ? :)
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: is this necessary? (i would think there's a bug here if it is, because this should be cleared up in any case if the physical delete from the repo fails
Candidate: gotta gotta gotta copy the keyset in `failsnapshotcompletionlisteners` modifies
Reference: nit: maybe also add a test for this code path, i think only keyword fields are covered atm
Candidate: ```suggestion   withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: nit: maybe also add a test for this code path, i think only keyword fields are covered atm
Candidate: ```suggestion   withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: can we use zerotermsquery#asquery() instead if the if statement here? that would include the null option which returns null, i don't know if this can cause problems in further rewriting.
Candidate: ```suggestion    withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: if searcher is null, this means we're not on a shard, and calling this method should be illegal?
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: is there a reason why we should only do this when `wildcardmatch` is true? is it so that we propagate exceptions when querying illegal fields? if this is the case,
Candidate: we can ignore unmapped fields here ?
Reference: i was thinking we could just remove these overrides for all the non-text fields like this? they already return `textsearchinfo.none` so they'll be skipped. that way the `mayexistinindex` method checks
Candidate: i hindsight, this method is called on runtime refactor. refactor. i wonder if we should `fieldmapper#isaggregatable` == false && synchronizationtimestamp {         
Reference: are we sure about that change?our standard behaviour is for these to link to the migration guide which can then include links to other setup instructions. i'm not sure we
Candidate: ```suggestion                             
Reference: is there are reason for `sleep` rather than a scheduled thread?it's minor issue but it's better not to use up one on the generic threads sleeping.
Candidate: add renaming it.
Reference: is there a reason we signal rather than just moving the call to `initialnodesecurityautoconfiguration.maybegenerateenrollmenttokensandelasticcredentialsonnodestartup` into this method?i presume it's because we'd need to push all the arguments somewhere, but with
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: if the assertion in `testbuildhostswithoutaddressandname` is true, i think this can fail with an npe.
Candidate: ```suggestion                if (hyperparameters != null) {         
Reference: this seems backwards. this pr introduces a host lookup, so could we not just iterate through the `assignedshards` and lookup the host using `hosts.get(assignedshard.currentnodeid())` - and simply check for equality?
Candidate: ```suggestion                if (hyperparameters != null) {         
Reference: i think we are guaranteed to have a host now since there always is a host address? can we assert that instead?
Candidate: can you add a method in the
Reference: i wonder if we even need the hosts structure now that we always have a host address and only check for that? can we do something like:```allocation.nodes().getdatanodes().get(assignedshard.currentnodeid()).gethostaddress().equals(node.node().gethostaddress())```with your follow-up pr
Candidate: can you add a method in the
Reference: maybe randomize the host name to see that it does not match on it?
Candidate: seems too failure seems too here.
Reference: maybe randomize the host name to see that it does not match on it?
Candidate: seems too failure seems too here.
Reference: i think `discoverynodes#get(string)` is sufficient, no need for `getdatanodes()` first?```suggestion```
Candidate: can you add the method (missing 's')
Reference: this seems wrong, we're saying `a copy of this shard is already allocated to ... node [emptynode]` but this node is empty.(this pr does not introduce this bug but it
Candidate: i assertthat("system mismatch, expected:" + currentmeta.issystem() -> prevmeta.issystem(),boolean.compare(prevmeta.issystem(), since it would be nice to instantiate some kind of adding some `assertbusy`.
Reference: we've lost a `null` check on `checknode` along the way. i think it can't be `null` any more but i'd like to `assert checknode != null` just to be sure.
Candidate: i think we should bias == false` ?
Reference: could you revert these benchmark-related changes too?
Candidate: i wonder if we should bias == false || supported.contains(feature)` to opaque_id=[{}]` is {                
Reference: shouldn't we be checking against the filters?
Candidate: ```suggestion    withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: we tend to prefer `listener.delegatefailure(...)` in this case, so that the listener has a proper `tostring()` and asserts that the inner listener doesn't throw where it shouldn't and so on.
Candidate: ```suggestion                             
Reference: can you add a comment here on why we need to wait for this instead.also, in the pr description, you mention that this makes the sorting stable, can you elaborate
Candidate: i wonder if we should bias towards smaller == false) {                   
Reference: `filter` and `allmatch` can be collapsed into just `allmatch`
Candidate: i wonder if we should bias towards smaller == false) {                   
Reference: i'd prefer to just use a local settings object (class or inline) with the specific needs of this test (which i believe is 2?).
Candidate: i don't think you need to check whether you can use `scaledrandomint`?
Reference: i think we should instead check that the number of queued states is `inprogresscount - 1`? that would be a bit clearer i think.perhaps we could use `collectors.groupingby` to group
Candidate: i wonder if we should catch the var here.
Reference: we shouldn't need this second check. if we make sure that all snapshots for index-1 are successful, then that should be the end state of things. the state of snapshots
Candidate: i wonder if we need to fully catch var here.
Reference: ```suggestion            + "available: "             + security.delegated_authorization_feature.checkwithouttracking(licensestate)```i don't
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: i think it'd be better to keep the `debug` level for `failedtocommitclusterstateexception` and `notmasterexception`. `error` is a bit overdramatic in any case here.
Candidate: maybe we need to keep `getfilechannelreference` with `getfilechannelreference` with the level?
Reference: this is pretty much what `channelactionlistener` does, maybe we should just use that?
Candidate: maybe we need to keep `getfilechannelreference` with `getfilechannelreference` with the level?
Reference: nit: we have `testenvironment.newenvironment(settings)` if you don't really need to mock class behavior.
Candidate: i think we can (sometimes, randomly) call readifavailableorpending?
Reference: i don't think the method can really return null anyway. maybe not worth checking.
Candidate: i wonder if we can assert:```assert processed on the processed pattern all tests)
Reference: wonder if it'd be clearer here to extract the `failedshardentry` from the `failedshardupdatetask` and then just use that throughout, rather than having to duplicate all the accessor methods on the
Candidate: i think that reusing that buffers on pooled (but i think it makes us to hear if we can be `primaryterm in a self-signed pkcs12, i figured i am not
Reference: could we go back to accessing the bare fields here?
Candidate: i adapt adapt worried that we can adapt true while it's non-0? i worried that it's worried that it's worried that it's worried that it's worried that it's worried that
Reference: wow 🤦
Candidate: this is pretty horrible. i wonder if it makes sense to in this pr?
Reference: ah ok ignore my comment on this subject in the 8.x version.
Candidate: nit: for renaming for place for other log message, for place for other conditions/ci for for other conditions/ci for for other message, for place for other conditions/ci for for other
Reference: would be good to keep the extra generality in the choice of version here rather than fixing it to be exactly 7.17.0:```suggestion        final
Candidate: ```suggestion                             
Reference: similarly here.
Candidate: why do you need to wrap the in `pbkdf2_stretch` so it doesn't need to do it nicer?
Reference: similarly here.
Candidate: can you need to execute(randomfrom("-p", principal here so we can do the `scaledrandomint`?
Reference: this is only used in the legacy format which we shouldn't really be reading here, but i think this means that the index compatibility check will fail before the node
Candidate: i think we need to pass the in the
Reference: should we set `oldestindexversion` back to `version.v_empty` here if the key is missing? otherwise we end up returning a `nodemetadata` that never really existed. super-rare case i know...
Candidate: same                             
Reference: nit: could we keep this as a `version` as long as possible?```suggestion        void preparecommit(string nodeid, long currentterm, long lastacceptedversion, version oldestindexversion) throws ioexception
Candidate: can we add a test for this.
Reference: similarly here:```suggestion        public void writeincrementaltermupdateandcommit(long currentterm, long lastacceptedversion, version oldestindexversion)```
Candidate: i think we should bias towards using `scaledrandomint`?
Reference: aha yeah this is what i meant in a previous comment - we should report this as the node version being too old rather than mentioning `v_empty`.
Candidate: i think that `gap.oncompletion();` is replaced on the
Reference: could we have a third branch which mutates the new field and leaves the other two fields alone, to verify that `equals()` does compare the new field too?
Candidate: i'm not sure i understand why about this.
Reference: did you look into adding a test provoking this specific issue consistently?
Candidate: it might be nice to worry about having a minimal method is used and it might be nice to worry about what it might be nice to worry about having
Reference: i think we can check both true and false here?```suggestion            randomboolean(),```
Candidate: i wonder if we should bias towards the
Reference: can we also validate that `rejected` has 0 or `queuedaftershutdown` dependent on `rejectaftershutdown` here?
Candidate: maybe assertthat("system mismatch, expected:" of the test that it makes it makes it makes it makes it makes it to make sure it makes sure that it makes sure that
Reference: should we also verify adding new tasks after termination are rejected?
Candidate: maybe assertthat("system mismatch, expected:" of the test that it makes it makes it makes it makes it makes it to make sure it makes sure that it makes sure that
Reference: should this not check against `isterminated`? perhaps just remove the `if`?
Candidate: maybe assertthat("system mismatch, expected:" of the test that it makes it makes it makes it makes it makes it to make sure it makes sure that it makes sure that
Reference: can we also check that it is `lessthanorequalto(max + queued + queuedaftershutdown)`?
Candidate: maybe assertthat("system mismatch, expected:"
Reference: can you clarify this todo?is it something to fix in this pr, or should someone fix it in the future?
Candidate: i think we should bias towards ?
Reference: nit: with checkstyle rules these large xcontentbuilder setups are hard to read. i'm wondering if we can use the new java text blocks to create the mapping from a readable
Candidate: i think we should bias towards the
Reference: looks good to me, maybe @romseygeek has some comments on directly checking the field separator though because he is currently working on allowing dots in fields names. as far as
Candidate: i wonder if we should use the var var
Reference: this semaphore seems unnecessary to me, maybe i'm missing something?
Candidate: ```suggestion            enumset.allof(attachmentprocessor.property.class),
Reference: moved this to `assignments`. now executor will verify it `only` executes own tasks
Candidate: ```suggestion            enumset.allof(attachmentprocessor.property.class),
Reference: got confused by this, thought it should perhaps be an assertion instead. this'd clarify:```suggestion                
Candidate: i wonder if we should just use `scaledrandomint`?
Reference: missing task id?```suggestion                    throw new assertionerror("task [" + id + "]
Candidate: ```suggestion            enumset.allof(attachmentprocessor.property.class),
Reference: i'd prefer to avoid suggesting that we're considering changing this behaviour:```suggestion                   
Candidate: ```suggestion            enumset.allof(attachmentprocessor.property.class),
Reference: neat :)
Candidate: too here.
Reference: cannot be *de*serialized.
Candidate: i wonder if we should invest on the
Reference: note for anyone else scanning this pr - this skips registering the agg if the feature flag is not enabled. the agg is still registered regardless of the index's mode.
Candidate: i think it should be used with the fix, i think it should be nice to update `includeexcludetests` with the pkcs12, but i don't think it does not exist. i
Reference: i think this should be outside the `if` statement - we want it even if we're collecting in order.
Candidate: i don't think we need this into `numbackingindices into the in the
Reference: it's actually simpler, the command need only be```docker run --name <node-name> -p <host-http-port>:9200 --net elastic -e "enrollment_token=<token>" docker.elastic.co/elasticsearch/elasticsearch:8.0.0```since https://github.com/elastic/elasticsearch/pull/81082
Candidate: ```suggestion                             
Reference: this part allows us to handle deeply nested object paths that become flattened at some arbitrary point.  `getdynamicparentmapper` will stop building intermediate object mappers if one of them is
Candidate: i wonder if we should invest on the field field
Reference: in your opinion, does changing these tests from directly testing documentparser.createdynamicupdate() to parsing full json objects also change their coverage? as far as i understand, we previously sorted all mapper
Candidate: i wonder if we should bias towards smaller handler on the whole unwritten unwritten unwritten unwritten
Reference: maybe pass `indexversioncreated` in rather than make the extra member. it looks like it's pretty close at hand on the caller.
Candidate: `enabled` is used to
Reference: will we call this one? or do we just have to implement it because we extend `objectmapper`?
Candidate: `enabled` is used to the
Reference: you could do `updatedfollowers.keyset().removeall(removedremoteclusters)`?
Candidate: spelling since we need a `--> create a key),
Reference: i understand you're tackling https://github.com/elastic/elasticsearch/pull/82740#issuecomment-1020962081 .if it is important to you, take care to align the leading spacing of subsequent rows.
Candidate: i think it would be used for debugging to add it.
Reference: just to share the discussion we had on this: this may be something we want to fix in some form. it's somewhat weird that reroute forces an assertion on us
Candidate: i wonder if we want to check if we want to `asserttrue` if we want to `asserttrue` if we want to `asserttrue` if we want to `asserttrue` if we want
Reference: this test bug was almost impossible to reproduce when making 1000 connections, but it happened almost every time with 2.
Candidate: ```suggestion                             
Reference: it would be great to add some message to assertion. may be `some connections are not released (by validator) in time`?
Candidate: ```suggestion                             
Reference: i think we are changing the contract slightly here in that a reroute may now result in the listener being invoked with a cluster-state that was not rerouted. most of
Candidate: i think you can use the java.lang.exception)`?
Reference: i am tempted to ask you to leave hasnested given we call in quite some places and we could have this comparison within that method instead.
Candidate: nit: can it be fan of fetchcontext#mapperservice() to put a `--> var
Reference: if we left hasnested like i proposed above, would it make sense to enforce that this is only called when hasnested returns true, or would the nestedlookup also retrieved in
Candidate: i think we need to address this method (missing 's')
Reference: i am assuming this is checked elsewhere now, or is this exception no longer needed?
Candidate: i wonder if we want to check whether we can == null || supported.contains(feature)` ?
Reference: same question as above, where is this check performed now? i guess earlier? do we still throw exception though?
Candidate: can we add a `--> this method into the same line here?
Reference: we can replace this with an ord comparison now that we know there's a single value, but let's do that in a follow-up.
Candidate: i wonder if we should `fieldmapper#isaggregatable` a robust/ general, if we don't need to do this in the runtime mode. and that is very runtime fields that is
Reference: should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: small comment, but i wonder if it would be better if it is better to way.
Reference: again, should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: small comment, but i wonder if it would be better if it is better to way.
Reference: perhaps add `@nullable` to the method here?
Candidate: i think we need to address this method (missing 's')
Reference: perhaps also add `@nullable` here?
Candidate: i think we need to address this method (missing 's')
Reference: can you include the time ranges in the error message so that a user can tell what the overlap is?
Candidate: ```suggestion                             
Reference: are the ranges inclusive or exclusive? i am just curious whether start time is inclusive and end time is exclusive, or how that works?
Candidate: ```suggestion                             
Reference: and also here, for outputting a lowercased version of the index mode
Candidate: ```suggestion         (hyperparameters != null && synchronizationtimestamp {               
Reference: same comment about perhaps having a dedicated `tostring()` on `indexmode` that serializes it in a good way
Candidate: if we should
Reference: i believe there's a couple of other api that support ccs and should hence support the new flag: most of them are listed [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cross-cluster-search.html) but there's also resolve index and
Candidate: i wonder if we need this in the rest of the rest of the rest handlers like the rest of the rest
Reference: can't we do the same that we do for the previousmajor? why go through all the declared version?
Candidate: i don't think this whole case i think it allows it in that case?
Reference: i see what you mean. these multi requests are tricky in general because they get converted to other requests and those are the ones that get sent over the wire.
Candidate: i is tested elsewhere, but i see of see this rest of rest of rest of rest of rest of rest of rest of rest of rest of rest of
Reference: i see that this is only exercised by the ccs compatibility flag, which is fine. thanks for trying the approach of moving the logic to version. i was hoping it'd
Candidate: i don't think this whole case i think it allows it in that case?
Reference: could you move the above `fastly.net` test here and then add a comment to the effect that it, the `googleapis.com` test, and the `content-autofill...` test are testing third-party etlds? i
Candidate: i'm not sure if iso8601 is the locally! but we can do it?
Reference: just a thought from looking at the profiling you posted: this might be happier as a normal loop :) the `phasesteps` list is mostly (always?) very short and setting up
Candidate: ```suggestion                             
Reference: can you add javadoc to this too please, since it isn't as clear when this is intended to be used?
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: can you add a comment about why instance equality is used here and okay rather than object equality?
Candidate: ```suggestion                             
Reference: i wonder if there is an (benign for sure) risk of a leak here: if a policy adds a step to the cache concurrently with it being deleted here, i
Candidate: i think we can check for the the and i think we can just rely on the same as well?
Reference: assertion change is unrelated, just felt the need to clean this up and make it a little clearer what we're asserting :)
Candidate: nit: i think this compensation of a bit that this is preserved with index map here?
Reference: i wonder if we need to build `indexttodatastreamlookup` at all? could we not simply populate `indiceslookup` directly here instead and ignore those below (asserting that they are data stream owned
Candidate: nit: i think this compensation of a bit that this is preserved with index map here?
Reference: looks like an extra `;` here?
Candidate: ```suggestion                             
Reference: ```suggestion                            .field("num_tag", i
Candidate: maybe you add make this down? down?
Reference: we'll run this as a cluster state applier so we can't throw exceptions if we're in an invalid state somehow. we can definitely assert that they're valid, but in production
Candidate: ```suggestion                             
Reference: leftover?
Candidate: ```suggestion                             
Reference: i think applying the read/write factor _and then_ the overall factor might lead to surprise, given that we have other settings like `cluster.routing.allocation.node_concurrent{,_incoming,_outgoing}_recoveries` where the unqualified setting sets both of
Candidate: ```suggestion                             
Reference: i wonder if this is what we want here? i would think this should be `min(availablediskreadbandwidth, availablediskwritebandwidth, networkbandwidthbytespersec) * maxovercommit`? at least in it's current form we practically only use
Candidate: i wonder if we want to create it.
Reference: i think rebalance can kick in after this check, i'm not sure if there's another way to fix this other than disabling the rebalancing during this test.
Candidate: can we add a `--> files for the test files anyway?
Reference: i wonder if `searchresponse` should hide this behind something like a `hasaggregationresults` method.  at the very least, we should add some javadoc somewhere (`searchresponse#getaggregations()` maybe?) to say that we
Candidate: i wonder if this is necessary if we need to work:````topdocs topdocs or the outer totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits, totalhits,
Reference: i like this change, because `aggregationbuilders` is a weird class that i don't understand the need for, but i'm not sure why you're making it here.  is it just
Candidate: this test for this test for this test for this test for this test for this test for this test for this test for this test for this test for
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to add some kind of concurrency. i think we can lease lease with the
Reference: i prefer to invoke `listener.onfailure` directly rather than throwing exceptions even though it will need an else block below.
Candidate: i think we should bias towards the
Reference: i think we should simply remove the acknowledged flag from the response, just like adding voting config exclusions do not have it. the client should not care about acknowledged, only
Candidate: i wonder if we should bias towards `scaledrandomint`?
Reference: maybe add comment that we rely on the unbatched executor here?
Candidate: i wonder if we should bias towards `scaledrandomint`?
Reference: i think this verifies what the method name says by not throwing when setting the desired nodes? perhaps add a comment if so.
Candidate: can you add (sometimes, principal here for the
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to add some kind of concurrency. i think we can lease lease with the
Reference: i don't think we need to keep the two argument version of this method.
Candidate: i think we need to address this method (missing 's')
Reference: i haven't really wrapped my head around when nextfilters is empty. that's why i did mine in the caller. could you explain what's up here?
Candidate: i wonder if we should `fieldmapper#isaggregatable` the field point-in-times in a booleanquery, refactor. is not "bootstrap" plugins, in runtime fields ?
Reference: were we silently not returning any result when the field was not indexed? or failing later with some other exception?
Candidate: i'd leave later. later. later.
Reference: this makes me a bit nervous. we use the original script only in equals/hashcode, and we use the empty script already for script-less runtime fields that load from _source: https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/index/mapper/abstractscriptfieldtype.java#l212
Candidate: i'd leave later. later. later.
Reference: not too sure when this was introduced. i am thinking during the 7.x series.
Candidate: ```suggestion                             
Reference: unintended, will be removed with next reviews caused commit.
Candidate: why don't them them them them them them them in them them them in them them them in them them them them in them them them them them them them
Reference: version check added to the verifier since ideally we want only the "top" project be inspected: if the query specs an unsigned_long in a subselect, that would lead to no
Candidate: ```suggestion                             
Reference: the syntax of this phrase is weird.
Candidate: i think it'd be better to be the
Reference: shouldn't this be `< 0` ?
Candidate: i wonder if you make sure if you make sure if you make sure if you make sure if you make sure if this is room - - if the
Reference: is this correct? if we have: `-10::int x 1000::unsigned_long` then we end up with a negative unsigned long which will throw an exception.
Candidate: `keyword` == sense to remaining remaining if not, and remaining remaining remaining `keyword` remaining type and datetime selection, wouldn't not, if not, remaining remaining if not, and remaining remaining `keyword`
Reference: don't think that's the place to check that, that should be when creating a literal unsigned_long or converting another numeric datatype to it.
Candidate: ```suggestion                             
Reference: i found `unsignedlongfieldmapper.parseunsignedlong` (private). wondering if this could be used for parsing. of course, asking the search team about this first, and making that method public.
Candidate: i think it'd be better to be the
Reference: i'd move this method at the bottom of the class.
Candidate: i think we should just that the usage of the the are held on the
Reference: all the operation methods in this class have a similar style: check the type of the values, if they are x or y then do this. i'd keep the same
Candidate: ```suggestion                             
Reference: not a fan of assertion. they are very punitive - the jvm crashes essentially. it's easier to just check and throw an exception to report even a potential server issue
Candidate: can you add an empty method ?
Reference: please move it after the rest of the other statements.
Candidate: why is this is redundant since 1`,
Reference: `index ++` => `index++`
Candidate: let's assertthat("system mismatch, expected:"
Reference: is the error message correct? is it an overflow or an incorrect/unsigned operation?
Candidate: i wonder if you make sure if you make sure if you make sure if you make sure if you make sure if this is room - - if the
Reference: any reason for the method rename?
Candidate: this is reduntant in the case of fetchcontext#mapperservice() to me. i reckon: i am not sure i raised
Reference: the name is incorrect - integer is also a type so reading this method i would expect the return type to be `int`. as such i would use a different
Candidate: i wonder if we should bias towards
Reference: small nit: testaddunsignedlong - keeps the naming convention in place and it's easy to understand it's just another type of add.
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: either all other methods have an import static for types or none do.
Candidate: why is this is not `setdate`
Reference: typo: length
Candidate: why is this is a composite reckon:
Reference: put this into a method. since safetobyte are used on a primite but in this case it's actually a number, check the rest of the usage since its quite likely
Candidate: i think we should bias towards `scaledrandomint`?
Reference: extract this into its own method like the rest - which keeps things clean and their intent clear: checkclientknowsdatatypes().
Candidate: ```suggestion                             
Reference: when is version suppose to be null? should it be always initialized?
Candidate: ```suggestion                             
Reference: not sure what you mean by this comment - but there can be projections with literals.
Candidate: ```suggestion                             
Reference: needs rephrasing with the workaround as well - "upgrade required (to version y or higher)".
Candidate: ```suggestion                             
Reference: why is the drive mode important? what if the non-drivers want to be versioned (as is the plan for the rest apis)?
Candidate: neat! already already already already already already already already already already already already already already already already already already already already already already already already already already already already already
Reference: since this check occurred in a previous class, it should be extracted since otherwise its fairly obscure and repetitive.
Candidate: minor:
Reference: the `try {} catch()` block seems to be needed only for the `bi` initialization at the top. why surrounding the entire block of code with the `numberformatexception` try-catch?
Candidate: i wonder if we should bias towards
Reference: a comment would be useful
Candidate: let's assertthat("system mismatch, expected:"
Reference: instead of adding if code inside the existing methods, create dedicated methods for the unsigned long tests - this makes it easy to reason about what's wrong and skip them.
Candidate: let's assertthat("system mismatch, expected:"
Reference: same comment here about extraction.
Candidate: let's add a single version to
Reference: this is hard to read - extract the stream outside the string to smiplify the concatenation.
Candidate: i reckon:
Reference: looks like bad formatting/identation.
Candidate: this is used in case of the next line)
Reference: creating a method just for this line of code is, imo, unnecessary.
Candidate: i think we can set this on the `pbkdf2_stretch` that per (false == toohigh);```i                
Reference: i may be missing something, but why if the sign of the biginteger is "minus", we are still converting it? shouldn't this case be caught by the check below where
Candidate: i wonder if we should this `fieldtype` rather == false ?
Reference: why this change?
Candidate: i wonder if we need the process. if there is no need to the process. if we are, i reckon: i wonder if we are, i
Reference: this check is useful only when not doing select * - that is when the consumer specifies each field individually. the two approaches need to be aligned - either we
Candidate: ```suggestion                             
Reference: i believe this is incorrect - any column using of an unsupported type should be exposed as such - unsupported, not hidden from view.
Candidate: there's already already already already already already already already already already already already already already already already already already already already already already already already already already already already already
Reference: `verifier` can be on the same line as `new analyzer`
Candidate: whole whole test for instance test for instance test for instance
Reference: why using this variable instead of the static constant? i find it confusing tbh.
Candidate: whole whole test for instance test for instance test for instance
Reference: should it be bigdecimal or biginteger / unsigned long?
Candidate: can you add the default logic in case of the getters mapper?
Reference: no biginteger?
Candidate: i                             
Reference: ```suggestion    public void testconversiontounsignedlong() {```
Candidate: can you add that this is kind of the
Reference: this fixes the version to `introducing_unsigned_long` but `istypesupportedinversion` is generic. when adding more types this might lead to subtle errors where the wrong required version is suggested. maybe `istypesupportedinversion` could
Candidate: i don't think this is a bit of the
Reference: i think the result type should be `double` for ulong.at least that's how es behaves:given a mapping like```{  "mappings": {    "properties": {    
Candidate: nit: space
Reference: could `parseintegral` also directly return the best fitting `number` type? right now the downsizing from `biginteger` to `long` happens in `parseintegral` and from `long` to `integer` here and in 
Candidate: can you add a comment on why is there is an empty
Reference: assert should probably be replaced with an exception?
Candidate: can you add a comment on why is there is an empty
Reference: how about `types.real`?
Candidate: `groupsids` into intermediate in the
Reference: why do you create a new verifier for, basically, every query only because there is a tiny check dependent on the version?the advantage here is that the session holds the
Candidate: shouldn't we use a constant for `client.id` instead of `clientid`
Reference: same here about loading the same mapping file multiple times. isn't it enough to load the file once?
Candidate: i don't think we need to execute(randomfrom("-p", principal "doesn't in source" stays                  
Reference: all these tiny changes to tests classes to introduce the version in the constructor shouldn't, hopefully, be needed anymore.
Candidate: nit: no need to kind of making this up on the internal body on making open up making the need to go up on making the need up in the
Reference: i think this new method creates a bwc issue in mixed node environments. maybe consider bumping the `mincompatibleshardnode` version in `org/elasticsearch/xpack/sql/execution/search/querier.java:147` and cover it in `sqlcompatit`.
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: leftover.
Candidate: this does this this for this check?
Reference: i think there should be a corresponding change on line 84?
Candidate: can we need to move this logic in the
Reference: i'm wondering whether it makes sense to make `name` and `component` enums instead of plain strings, so we don't confuse them by accident, especially with static imports.
Candidate: i think we need to execute(randomfrom("-p", this method into the process. that `gap.oncompletion();` can be used in all source" stays          
Reference: is there are reason for `sleep` rather than a scheduled thread?it's minor issue but it's better not to use up one on the generic threads sleeping.
Candidate: add renaming it.
Reference: is there a reason we signal rather than just moving the call to `initialnodesecurityautoconfiguration.maybegenerateenrollmenttokensandelasticcredentialsonnodestartup` into this method?i presume it's because we'd need to push all the arguments somewhere, but with
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: we can wrap this method inside a `if (assertions.enabled) { ... }`
Candidate: ```suggestion                             
Reference: i'd prefer this constructor to be an instance method of authentication. it then can have a better name for the intention, e.g. something like `authentication.mayberewriteforversion(version)`.
Candidate: i don't think we should bias towards
Reference: nit: existing getter methods in this class following the builder type naming convention, e.g. `name()` instead of `getname()`, while this method uses the javabean naming convention (`getxxx`).  i am
Candidate: nit: do we want to address this in
Reference: ```suggestion                        authentication.runas(new user(runasusername), null),```
Candidate: let's assertthat("system mismatch, expected:" in this test?
Reference: nice catch!
Candidate: i think we need to wrap this in
Reference: why do we now need to increment this settings version? perhaps you can add a comment about why this is necessary?
Candidate: ```suggestion   withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: i notice that we call `instant.ofepochmilli(resolvedat)` multiple times here, should we make it a variable at the beginning and reference it? it's not really a big deal, so up to
Candidate: should we remove false smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller
Reference: can you add an assertion string to this so we have a better failure message if es every dies in tests?
Candidate: should we remove false smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller smaller
Reference: i see the need for this now though i wonder if we could find a reasonable approximation and make the failing check below a range instead? we could use `[lcp,
Candidate: nit: do this `runundermetadatalock` from expensive, instead of `0l`?
Reference: this api is so trappy. i opened https://github.com/elastic/elasticsearch/pull/83407.
Candidate: i wonder if we should bias towards
Reference: recommend also bounding the wait time (`asserttrue(blockingclusterstateupdatetaskexecuting.await(10, timeunit.seconds));` and similarly for `unblockclusterstateupdatetask`).
Candidate: i wonder if we should bias towards
Reference: i think it'd be worth adding a comment about how this works.
Candidate: can we use `this.earliestlastmodifiedage == range`?
Reference: odd newline. is that what the formatter wants?
Candidate: can you need to catch a separate class of fetchcontext#mapperservice() to me to me to me that it is pretty much to to me that it can be to to
Reference: i think this is right. but would we end up with a data-check as well, for instance if an upgrade from 8 to 9 means we no longer support es
Candidate: ```suggestion                             
Reference: :+1:
Candidate: i think it's bit bit bit? i would be better to report the roll of the roll roll than adding a key),
Reference: much cleaner, thank you.
Candidate: :heart:
Reference: if this is only used in this method i think it should be private. i think other aggs have something like this be public but i don't know why. i
Candidate: let's rename this method to snapshot_index_name_field?
Reference: should this be a critical message? or is it likely that we'll never actually remove support for the empty type array so warning is more appropriate?
Candidate: i renaming this change `getfilechannelreference` message here. message message message message message message message message message message message message message message message message message message message message message message message
Reference: ☕  is a good dimension
Candidate: i wonder if we should bias towards smaller offsets in source" stays                  
Reference: i thought you said no production code changes 😄
Candidate: i don't need need need the whole handler withcompatiblemajorversion(byte
Reference: could this be package protected?
Candidate: can you chat about this.
Reference: i see that there are existing callers of this method in fieldmapper. was it not accurate before? i get thrown off that we look at field mappers later, and runtime
Candidate: i wonder if we need this method in the additional method is called instead?
Reference: you know that i get nervous about this functionality :) i would prefer that we don't need this, because i have the feeling that it is going to be misused.
Candidate: i think we need getmapper getmapper in this method class in mapperservice?
Reference: i don't think 7_17_1 is the earliest possible version though, right?
Candidate: let's chat about this.
Reference: please consider using `.tolist()` instead of `.collect(collectors.tolist())` in new code. it is concise and also produces immutable list
Candidate: i don't think this is any benefit to `true`.
Reference: this is hacky but we need some context to call context.path().add and remove. i did this to keep things simple.
Candidate: can you add a comment on why do we need to do this in the `preprocessor`.
Reference: @hendrikmuhs is this ok? i've made the builder not output xcontent for it's defaults and most of this was the defaults. like the comment says.
Candidate: can you add a comment on why this is changed?
Reference: most of the other checks run against a default value by way of a variable that's explicitly named as such; i know this default isn't likely to change but is
Candidate: can we use `this.earliestlastmodifiedage == false`?
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to add some kind of concurrency. i think we can lease lease with the
Reference: maybe good to put a comment here in word saying what this does.
Candidate: can we need to move this logic in the
Reference: maybe more readable with `} else if {`
Candidate: this is a bit that we always need this method in the actual class is always (once all tests)
Reference: i think you should move the v_8_2_0 thing to a different pr. it'll save a byte which is great but it makes the pr hard to backport.
Candidate: i wonder if we need need this method into the superclass always (once all source" stays              
Reference: this gets decided when the `lucenedocument` is built - no need to check.
Candidate: i wonder if you could method the method method method method method method method method method method method method method method method method method method method method method method method
Reference: does it mean that nested documents can contribute dimensions into the root document? i don't think we should allow it.
Candidate: ```suggestion      withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: a lot cleaner this way. happy to see the conditional leave 👍
Candidate: i wonder if you could method the method method method method method method method method method method method method method method method method method method method method method method method
Reference: i'm not sure about this change here. it is a bit unrelated to the direct issue this pr is addressing, and needs discussion with a larger group of folks. can
Candidate: nit: extra empty
Reference: i think it'd be better to capture the context deeper down. perhaps within the constructor to `restoreclusterstatelistener` (solving two problems addressed in this pr), but actually maybe the `clusterapplierservice` should
Candidate: i think we should bias towards `scaledrandomint`?
Reference: this one is suspicious to me: this doesn't seem like a place where the context might get lost since we're just executing an action on the remote client. again i'd
Candidate: i wonder if we need this test for newer fix, i wonder if i wonder if i wonder if i wonder if i wonder if i wonder if we should
Reference: this one's also suspicious to me. i'm guessing one of the inner actions loses the context? would be better to fix the action itself rather than doing this imo.
Candidate: here
Reference: ah oh no, hang on, this will break `removelistener()`
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: randomize the leniency value.
Candidate: can comment really really really really really really really really really really really really really really really really really really really really really really really really really really really really
Reference: nit: there is also `randomboolean()`
Candidate: can comment really really really really really really really really really really really really really really really really really really really really really really really really really really really really
Reference: small comment, we usually would do `dotproduct(queryvector) / (densevector.getmagnitude(queryvector) * getmagnitude());` since it's more readable (similar to how you'd write it mathematically) and potentially a little faster.
Candidate: i wonder if we need the concrete "doesn't plugins, are using `scaledrandomint`?
Reference: removing this if check is safe here. now any node will attempt to start the downloader task if it hasn't started all ready (the start task call is executed on
Candidate: i wonder if we need to do it in source" stays we need to do it nicer?
Reference: fly-by comment: i believe we can initialize `throwable t` in one go with a ternary operator```javathrowable t = e instanceof remotetransportexception ? e.getcause() : e;```
Candidate: can we assert that `gap.oncompletion();` can skip the version of the
Reference: nit: it seems we need a whitespace before `failed to remove` otherwise the class name won't be separated from it.
Candidate: can we assert that this is in the
Reference: ideally, authentication headers are already filtered and converted to minnodeversion when persisted as part of a task configuration. when they are retrieved and used, there is no need to filter
Candidate: i don't think it is no need to `true`.
Reference: nit: we might use `org.elasticsearch.common.util.maps#newmapwithexpectedsize` to avoid resizing the map
Candidate: can you add a comment for the
Reference: this should probably be captured and cause the assertbusy to fail with an assertion?
Candidate: i think we need to execute(randomfrom("-p", principal here for the `apply()` is unwritten unwritten unwritten unwritten unwritten unwritten unwritten = unwritten unwritten unwritten i think we are sure i think
Reference: converting to a set isn't anymore efficient than just looking through the list. is there som other reason we need an intermediate set to assert the feature was processed?
Candidate: i think we need to execute(randomfrom("-p", principal here for the `apply()` is unwritten unwritten unwritten unwritten unwritten unwritten unwritten = unwritten unwritten unwritten i think we are sure i think
Reference: adding this here because i can't arbitrarily add comments to lines that haven't changed :/ :should we log a warning when we load client_authorization_type and it is set to client_authorization_type_none
Candidate: can you add this method (missing 's')
Reference: i think we will need a few more test methods in this class:- verify that jwts with invalid signatures are rejected- verify jwts that are tampered are rejected- verify unsigned
Candidate: do we put this into intermediate ?
Reference: this and above type cast could be avoided. see my other comment
Candidate: i think we should bias towards the
Reference: ```suggestion            keys = shufflemap(keys, collections.emptyset());```looks like this was accidentally missed
Candidate: i think we should bias towards the
Reference: i am not sure i follow this, is that not identical to the default `threadedrunnable` behavior (used by `schedule`), except not checking that the threadpool was indeed shutdown?
Candidate: for this suggestion, this is just for this for `esrejectedexecutionexception`-handling, for this method?
Reference: a true nit, but i prefer to capture the `threadpool.relativetimeinmillis()` explicitly right after the write to not have to worry about any time spent in any of the (obviously fast)
Candidate: i wonder if we need to do this check?
Reference: all nodes to be on
Candidate: i wonder if we need need need to have a minimal method that we need to do it.
Reference: here's an idea for how to refactor this so we don't need this new `lookupfieldcollector` abstraction:* update `valuefetcher` with a new method `fetchdocumentfield` that returns `documentfield` and can be overridden
Candidate: i wonder if we should remove the instance of the var in the rest ?
Reference: any reason we both assert and throw here?
Candidate: i wonder if we need to have a minimal version of tests for it? i am i we usefully just for consistency case for consistency case for consistency case i
Reference: we don't need to check this for subsequent scroll requests, but it's okay to leave this check as is here.
Candidate: preferably this method into intermediate validacceptmediatypes()
Reference: could we have a nontrivial `keymapper` in the test, e.g. take the first couple of characters of the string?
Candidate: i think we should bias towards
Reference: this fixes the test problem where transport client used in testing is missing systemindexmigrationtaskparams/state entriesi think these entries should be the same as in node classhttps://github.com/elastic/elasticsearch/blob/7.17/server/src/main/java/org/elasticsearch/node/node.java#l538how about the namedxcontentregistry in
Candidate: nit: nit is using the comment.
Reference: is there a case where the cursors would not all use the same internal writeableregistry regardless of the user request?that is, why isn't it a constant and has to be
Candidate: does this method be called called
Reference: unnecessary empty line.
Candidate: ```suggestion                             
Reference: we don't actually need the license state anywhere in 8.x (yet), but i figured while i was doing all this work to make 8.x more consistent with 7.x i might
Candidate: let's add a update setting
Reference: should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: small comment, but i wonder if it would be better if it is better to way.
Reference: again, should we be using `autoconfig_dirname` instead of `"certs"` here?
Candidate: small comment, but i wonder if it would be better if it is better to way.
Reference: can we replace this assertbusy with something like:```java// wait for the geoip-downloader persistent task to be assigned to 1 node        clusterserviceutils.awaitclusterstate(logger, state ->
Candidate: i think you can (sometimes, randomly) of the `apply()` method is used in all tests)
Reference: assertacked() here too
Candidate: i think you can (sometimes, randomly) of the `apply()` method is used in all tests)
Reference: i thought the place to do this was now `machinelearning`? xpackclientplugin is just for the transport client that is being removed no?the fact that we do named writeables vs named
Candidate: i think we should catch in the base assertions in i think we should in case i think we should catch assertions in all in the cluster state in in
Reference: since this assertion is to test different username, technically the realmref should be kept identical, i.e. ```suggestion             
Candidate: nit for completeness, can you add an alternative to itself, which can just drop the lists itself, which did not an alternative three self-signed pkcs12, for all files in files
Reference: i wish java has `val`
Candidate: i wonder if we should invest in the `preprocessor`.
Reference: same as above: `private` vs `public`
Candidate: i think we need to execute(randomfrom("-p", principal "doesn't in source" stays                   
Reference: we want to apply this logic to all inter tests tasks that are created in a module / plugin project
Candidate: i think we should bias towards the
Reference: i suggest we add a comment here or at the method level to explicitly emphasize that we *only* consider domain information from the incoming authentication (`this`), and *not* the ones
Candidate: i wonder if we should fully bad but i wonder if we should open a bad it?
Reference: what's the policy around setting this wrt experimental features?  i'm not totally sure how this is used.
Candidate: ```suggestion                             
Reference: ```suggestion                "invalid configuration for [" + prefix + "] - the truststore [" + path
Candidate: ```suggestion                             
Reference: nit: i wonder whether it would be a more realistic test if this keystore file contains just private keys instead of being truly empty?
Candidate: i don't we need set the default options?
Reference: the need for an explicit cast here is a little unfortunate. is it disruptive to rename the builder method, to say putallfrommap or something?
Candidate: ```suggestion   withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: i don't think i like this assert, because if the cache were to fail (let's say someone comes along and changes some of the `if` statements above), then it could
Candidate: i think we should be log in newer tomerge
Reference: can you add an assert error message to this? (it's so much nicer than getting back a generic `assertionerror`)
Candidate: i think we should be log in newer tomerge
Reference: can we add a test for this such that it fails and moves ilm to the error step?
Candidate: i                             
Reference: optional thing, but if you want this can be changed to `.values()` instead of `.entryset()` since the key is never used
Candidate: i think you usefully usefully guard with the authors usefully with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests` with `includeexcludetests`
Reference: xcontent parsing is currently only used for testing.
Candidate: unrelated unrelated to this case, i went in the case, can theoretically be guarded case, theoretically theoretically theoretically theoretically theoretically theoretically theoretically theoretically theoretically theoretically theoretically theoretically theoretically the case,
Reference: according to the line above it is always not null
Candidate: i wonder if we need to check whether we is a reduction, given that the is configured all detour but i think it is
Reference: now that `readresults()` is not called in the try-catch block in the result processor, this could throw here and it'll be unhandled.
Candidate: ```suggestion                             
Reference: when would we ever hit this case for settings? aren't all values in the flat settings map either string or list<string>?
Candidate: i wonder if we need this kind of the
Reference: i guess we could include all the logic within this privileged block, that would simplify this code.
Candidate: i think we should bias towards ?
Reference: i think we need to close this inputstream once we're done with it?
Candidate: i think we should bias towards ?
Reference: i think we need to use a `put` request method here? https://docs.aws.amazon.com/awsec2/latest/userguide/configuring-instance-metadata-service.html
Candidate: i think we should bias towards ?
Reference: another way to write this, without a compound expression, would be:```if (boolean.false.equals(aliasmetadata.ishidden())) {```
Candidate: can you rename this method answered to accept an update that @original-brownbear suggested.
Reference: nit: why not import `java.security.accesscontroller` and use the simple name instead of the full qualified name? everywhere else seems to use the simple name.
Candidate: ```suggestion                             
Reference: nit: why bother with the `if`? the comment makes it clear why this is here, and it shouldn't make a difference to just always do it.
Candidate: i wonder if we re-wrap
Reference: should we authenticate with the token here?the test is checking that the token is created correctly with the right realm, and it feels like the best way to check both
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: since the pr description seems to indicate this change leads to better error messages, i wonder if there is a possible test that could be written to show that case?
Candidate: i think that `gap.oncompletion();` can be on the type "doesn't rather than `scaledrandomint`?
Reference: looking at the code, needsnormalize does quite an extensive check, so i presume this adds some performance cost?
Candidate: i think we need to make this for `pbkdf2_stretch` for the for the for the
Reference: the additional checks in the tesselator also add some performance cost.
Candidate: maybe better for better for better for better for better for better to for clarity.
Reference: i am not sure why this change is needed? i wonder if using `documentparser` is no longer legal?
Candidate: why did before?
Reference: can we also add `assert id != null`? just to prevent that the exception is caught and handled in tests.
Candidate: i wonder if we need to do this method in the `preprocessor`.
Reference: i think this is a user-facing error message. i wonder if we should special handle the `null` to be more user-friendly, like say "auto-generated id"? i could imagine someone opening
Candidate: can you remove intermediate
Reference: will you tackle this todo here or in a follow-up? seems relevant to have recovery tests run with the tsdb id field mapper.
Candidate: can you use `scaledrandomint`?
Reference: the `getvalue` method was on the `sum` interface and duplicated the `value` method on the internal classes.
Candidate: i think we need to add some kind of concurrency. i think we can lease lease with the
Reference: can we call this inside the assert to avoid test only code be executed in production?
Candidate: can you add a comment here why reckon:
Reference: should this only test `createcomponentfromindicators` (which can be default protected) ?
Candidate: can we need to execute(randomfrom("-p", more idiomatic for the
Reference: there are a lot of these with the same implementation.  does it make sense to have an `abstractdocvaluesscriptfieldsource` that implements `toscriptfield`?
Candidate: ```suggestion  withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: what do you think about changing this to `getdefaulttoscriptfieldfactory`?
Candidate: i wonder if we should bias towards using `scaledrandomint`?
Reference: `docvaluesscriptfieldfactory source`->`docvaluesscriptfieldfactory factory`
Candidate: i don't need to me.
Reference: this seems like it shoud be `fielddata.getscriptfield("test")`
Candidate: i took intermediate `reload()`
Reference: nice!
Candidate: i don't withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte withcompatiblemajorversion(byte
Reference: this is also used for java rest tests so i'm not sure this is correct. it "works" since the test framework is a transitive dependency but we don't actually _need_
Candidate: i wonder if we should make sense the superclass of version of the `preprocessor`.
Reference: i think we don't need `aggregationcontext` down here anymore, right?
Candidate: can you explain why this is on the
Reference: i wonder if it is better to have separate tests that only focus on this copying constructor and content type being null?
Candidate: i wonder if this is withcontent right?)so if content-type is withcontent right?)so to accept headers. are headers. are headers. are headers. are headers. are headers. are headers. are headers. are
Reference: i wonder, can't we just get the same thing we have here by enhancing `org.elasticsearch.common.collect.iterators#concat` to `null` out the iterators in its internal array once done? seems like that thing
Candidate: i wonder if we should bias towards the
Reference: i had commented earlier, but somehow it was dropped! a tiny comment that this test case is now really long and it might be nice to pull out some set-up
Candidate: i assertthat("system mismatch, expected:"
Reference: i wonder if this will always return what we expect, because the lower bound is `minindexcompatversion` but we'd want `mincompatversion` instead?
Candidate: i assertthat("system mismatch, expected:"
Reference: do we need to wrap the stream with  a namedwriteableaware stream input here? i see an empty list later
Candidate: i assertthat("system mismatch, expected:"
Reference: this method returns the first match - does headerfields normalizes keys? for example `content-type` and `content-type` have their values under the same key or separate ones?
Candidate: i think we need to have a minimal class of the class of class of class as well as well?
Reference: maybe a comment on why this is in `:test:framework` rather than `:server`, to avoid someone undoing most of this change in a follow-up.
Candidate: i wonder if we need to address this method in the `preprocessor`.
Reference: should we be calling this in case of failure as well?
Candidate: i wonder if this is only always surround the always (once the the always (once made) on the
Reference: i want to replace this predicate with a new `restrictedindices` class (possibly also subsuming the existing `restrictedindexnames` class) but that would have impacted more code than this pr needed to
Candidate: i wonder if this is kind of introducing this method answered of the getters of runtime field.
Reference: i wonder if this is worth moving up to the `aggregationcontext`.  i feel like a `hasdoccountfield()` method might be useful beyond this, and i suspect it is intuitive to
Candidate: if we can copy the task ?
Reference: i wonder if we should change the `setfailure` method instead.
Candidate: this is a bit called `testselectleft()` but i don't think we need to check that the field is called in the lambda?
Reference: is it possible to replace `arraylist` above with an `list.of` instead? this way we would not keep mutable array and will not create list every time somebody calls a getter.
Candidate: i wonder if we need this process. for the process. for consistency
Reference: java set really lacks `containsany`: `context.requestheaders.keyset().containsany(headers_to_copy)` :(
Candidate: nit: sets the null default context sets of the context sets of the context sets of the context sets it sets the null sets of null sets it is sets
Reference: is this matching for a log message or entire log line (with timestamp/thread/host/etc)?if this is just a message do we need a `*`? looks like this is an exact match.
Candidate: this is
Reference: it doesn't look like anything in `metadatastateformattests` exercises this `catch`. could you add a test that does?
Candidate: why is this is supposed to throw an exception here?
Reference: i don’t think a uuid is necessary. it also would not reproduce. instead you can use a random string or number using the seeded random of the test?
Candidate: nit: maybe check ?
Reference: this seems to be unrelated?
Candidate: i wonder if we should `fieldmapper#isaggregatable` the superclass == false though)
Reference: you are doing this todo i think. sort of. you can't making a `comparteto` for the bucket itself - but you are supporting non-double sort values.
Candidate: i wonder if we should bias towards
Reference: do we need to be that specific? if we went ahead with `logs-apm.*`,  `logs-apm-*`, `traces-apm.*`, `traces-apm-*` ,  `metrics-apm.*` and `metrics-apm-*` we'd lower the risk of missing data streams
Candidate: i'm not pretty sure if we need the additional pr here too files of files are not just for the files of scenarios, but i we shouldn't not sure if
Reference: i think we also should have a test for the literal `"kibana"` (with no suffix) which is the more likely production scenario.
Candidate: oh wow. i don't think we need to drop this for the version for the
Reference: this is a consequence of not trying to serialise anything in a one-node cluster, which weakens the (best-effort) check that we can always serialise cluster states to some extent before
Candidate: i think we should part of stabilisation as step).
Reference: can you update the comment in `injectsandboxexceptions` to document that `securityexception` is caught and rethrown?
Candidate: i think that reusing that well.
Reference: it seems odd that asking for the pluginservice is mutating the cluster. why can't this master only node be started in a `@before`, separately from trying to get the pluginservice?
Candidate: ```suggestion                             
Reference: i think we should add a message to this log statement about what's going to happen, something like "snapshot is already ongoing or in-use, this index will attempt to clean
Candidate: i wonder if we should bias == false` ?
Reference: can you format in a bit more context on this log message? maybe something like `snapshot [somesnapshotname] is already ... for index [someindexname], will attempt ...` (you could even use
Candidate: i think we should bias == false` in source" stays                    
Reference: wouldn't it be better to just use project references here and then have the test cluster convert that to a proper artifact dependency?
Candidate: i think we should bias towards the
Reference: the orignal test was almost identical to `testrefreshingtoken`. i therefore recycled it into a token create/refresh with run-as .
Candidate: ```suggestion                             
Reference: ```suggestion                             
Candidate: imho,
Reference: sanity check: we should be checking on all attributes, including encrypted ones, correct? assuming this is the case since enc. attribute name clash can lead to the same misconfiguration and
Candidate: i think we need to use `scaledrandomint`?
Reference: i'm checking the unwrapped query now instead of the original query, is this correct?
Candidate: i appreciate this change for the test for targets for tests. for (initializing) = targets tests.
Reference: unrelated but this was just the weirdest way ever to call two functions ...
Candidate: i wonder if we can rename this method and/or
Reference: i was wondering why you chose to always read and ignore the timestamp field instead of using the version of es to slowly remove the field from here.
Candidate: ```suggestion                             
Reference: since we are using the strings util, should we test for non zero length but still empty?
Candidate: ```suggestion                             
Reference: i think this is more in line with normal exception logging:```suggestion                logger.error("fatal error {}: {}\n{}",
Candidate: can we use `this.earliestlastmodifiedage == range`?
Reference: interesting, was this covered before through the isruntimefield method?
Candidate: i don't think we need this method into getmapper in the indexanalyzer? method instead?
Reference: since this is a public method, can you add javadoc for it?
Candidate: i was any way of using `scaledrandomint`?
Reference: i think it might be worth adding a comment about why this doesn't use `metadata.builder(this).etc(...)` but directly constructs the metadata, so that it doesn't get accidentally undone in the future.
Candidate: i was any way of using `scaledrandomint`?
Reference: i had a chance to review it only after the pr was merged, may be we could consider this for a followup or a future change:may be we should have
Candidate: i think if we need need the failure if we need need to starvation if we need lazily if ilm
Reference: i think i'd keep the return type on this one.
Candidate: i wonder if we need to do this in this methods?
Reference: i'd probably keep the return type on this one too.
Candidate: can you add a comment for this, but did did did did did did did did did did did did did did did did did did did did did did
Reference: ```suggestion                    "cannot start a new model deployment as not all nodes
Candidate: i                             
Reference: would it save anything to check whether `name` matches the `name` from the previous iteration and re-use the previous reader instead of doing another lookup? i expect in practice we
Candidate: can you put the method into empty, the class is used in the `openidconnectauthit#getredirectedfromfacilitator`.
Reference: i think i'd just do the comparisons directly here. i'm not sure what the comparators buys.
Candidate: i wonder if you could do
Reference: nit: maybe replace this with stream/maptodouble.
Candidate: can you of the
Reference: might be worth adding another test showing that for non-drivers the cbor is not enforced, when no binary format is provided.
Candidate: can you use `scaledrandomint`?
Reference: do the tests require an always `false` value, or could it be random boolean?
Candidate: ```suggestion                             
Reference: please use an anonymous class for sending the response:```return channel -> client.executelocally(sqlclearcursoraction.instance, sqlrequest, new resttoxcontentlistener<>(channel) {    @override    public restresponse buildresponse(sqlclearcursorresponse response) throws exception {//
Candidate: ```suggestion                             
Reference: i presume this means that the last fetch field that matches dominates?
Candidate: kind whether you wrap in ccrreposity glance.
Reference: i presume `searchhits.getfields()` contains the subset of `request.getfieldandformats()` that was actually found? so this way we skip fields not found?
Candidate: i wonder if we should bias towards rather than introducing the tz and just `scaledrandomint`?
Reference: i presume this defensive coding it not really required because the fix in restvectortileaction should already remove the nulls? do we have this code in case there are other code
Candidate: ```suggestion                             
Reference: sanity check: i'm assuming there generally won't be many roles so it's fine to include them all. is that valid or should i add a e.g. `limit(5)` to keep this
Candidate: :+1:
Reference: this should be the first argument after the string message.
Candidate: ```suggestion                             
Reference: this if statement does look a bit complicated.can we instead have two simpler if statements for the valid cases?one if statement for when `indexabstraction` is a data stream and one
Candidate: i wonder if we need this `fieldtype` rather than a single field at master added that only added to master if that's
Reference: we should use list, not arraylist, whenever passing these arround (ie in return types and local variables).
Candidate: nit: i think we need to rely on this.
Reference: small comment -- to me this test doesn't add much except guard against someone accidentally changing the skip factor. i think it'd accomplish the same to add a code comment
Candidate: nit: do this changes
Reference: is this needed again?
Candidate: should catch this?
Reference: ```suggestion                inferenceindexconstants.index_pattern, inferenceindexconstants.nativedefinitionstore(), ````inferenceindexconstants.index_pattern` for the config and `inferenceindexconstants.nativedefinitionstore()` for the vocab and model definition.
Candidate: same kind of fetchcontext#mapperservice()
Reference: do a cheap check that there is something to load before checking the indices. this method is called on a schedule```suggestion        if (loadingmodels.isempty())
Candidate: same kind of fetchcontext#mapperservice()
Reference: i would rather do this within the `catch` blocks above, using the exception that is thrown by the repository creation attempt. at the moment these blocks catch `repositoryexception` but we
Candidate: i wonder if we should add them here. (we can call the them (we can preserve them (we can preserve them (we can preserve them (we can preserve them (we
Reference: ah, this won't totally work because we catch `throwable` below. we'll need to set a `success` flag here and then assert that `success == false` outside the `catch` block.
Candidate: can you add a this method that this is always (once all tests)
Reference: `repository` cannot be `null` here any more i think.
Candidate: i wonder if we should add them here. (we can call the them (we can preserve them (we can preserve them (we can preserve them (we can preserve them (we
Reference: nit: i would not extract this unless absolutely necessary. not sure if this is saving a lot method size wise...
Candidate: i wonder if we should bias towards
Reference: you might be able to use a request parameter within the routes that are returned here. might make this code much easier to read? this way you can just pick
Candidate: can you use `this.earliestlastmodifiedage == range`?
Reference: would it make sense to rename `includedetails` to `computedetails` to indicate we'd like these not only to not be included but not calculated as much as possible?
Candidate: this is reduntant if we are `scaledrandomint`?
Reference: shall we add a comment to document the why for this `&&`? (ie. we're drilling down so we don't know don't display the top level status as it would be
Candidate: i wonder if we should bias towards rather than using `scaledrandomint`?
Reference: do we 404 anywhere if the component/indicator combo is invalid? ie. `data/blabla` ?
Candidate: this is reduntant if we are `scaledrandomint`?
Reference: is this `||` operation needed since we have `computedetails` passed in?
Candidate: this is reduntant if we are `scaledrandomint`?
Reference: can we avoid checking this flag again inside `healthcomponentresult` as we're already doing this here? ie. mark `healthcomponentresult#status`as `@nullable` and only display it if it's non-null?this would avoid leaking `showcomponentsummary`
Candidate: can you add some kind of fetchcontext#mapperservice() to me that we need to do it in source" stays            
Reference: do we even need to handle this anymore at this point. the "x-pack" plugin hasn't been a thing for many versions. i assume this was only added to ease migration
Candidate: i love this extra test for testing extra test for testing extra test for testing tests for testing tests still testing for testing extra test for testing extra test testing
Reference: same as above```suggestion                tokeninvalidation invalidateresponsetwo = invalidateaccesstoken("fooobar");```
Candidate: this test that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing
Reference: same here```suggestion        tokeninvalidation invalidateaccesstokenresponse = invalidateaccesstoken(accesstoken);```
Candidate: this test that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing
Reference: ```suggestion        tokeninvalidation invalidaterefreshtokenresponse = invalidaterefreshtoken(refreshtoken);```
Candidate: this test that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing
Reference: ```suggestion                var newresponse = invalidaterefreshtoken(refreshtoken);```
Candidate: this test that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing that reusing
Reference: this method should be rewritten to use the new convenient methods from testsecurityclient. i can follow up with a separate pr (since i wrote the original version).
Candidate: i think we need to create a instance pkcs12, i instance pkcs12, i pkcs12, but i keeps instance of instance of instance of instance of instance of instance of instance
Reference: nit: maybe change `doccounts` to `doc_counts` since this is a constant
Candidate: i don't think we need this into the `pbkdf2_stretch` description, 1`,
Reference: 🤦
Candidate: oh nitpick: did all the mind are all the mind are all the mind are all the mind are are all the to show all it?
Reference: @mark-vieira there appears to have been a change since 18 in the binary url, which this change addresses.
Candidate: should we should be pretty hard with the same with in the previous line with `optionalmatchers`.
Reference: is this a change after 18 or just because this is the `.0.0` release?
Candidate: should we should be pretty hard with the same with in the previous line with `optionalmatchers`.
Reference: i suggest completing the listener _after_ submitting the task to the reroute service, so that if there's ever a need to wait for the followup reroute to complete you can
Candidate: i think this actually actually 10 actually 10
Reference: given our datastreams [docs](https://www.elastic.co/guide/en/apm/guide/8.1/apm-data-streams.html) and [code](https://github.com/elastic/apm-server/tree/main/apmpackage/apm/data_stream)```application traces: traces-apm-<namespace>rum and ios agent application traces: traces-apm.rum-<namespace>apm internal metrics: metrics-apm.internal-<namespace>apm profiling metrics: metrics-apm.profiling-<namespace>application metrics: metrics-apm.app.<service.name>-<namespace>logs-apm.error-<namespace>``````diffapm-*logs-apm.*logs-apm-*"metrics-apm.*-metrics-apm-*traces-apm.*traces-apm-*```i don't think we strictly need access to the
Candidate: why seems pretty bit place of the agg string?
Reference: maybe make a to `ingestservice` instead of modifying this method (which does get invoked in other places too)?i think we can add the following to `ingestservice#innerexecute(...)` method at line 873:```object
Candidate: i think we can make this method in the class of `pbkdf2_stretch` that it is that we can do it in consistency?
Reference: are we loosing an optimisation here by deleting the check for any geometries not being points when we have contains?
Candidate: i think it might throw an unsupported i think it might be nice to call it in an unsupported
Reference: just call the new api directly.
Candidate: i think we need to create this in the future, i don't think we can create a key),
Reference: ```suggestion        return geoshapequeryable.geoshapequery(context, fieldtype.name(), shaperelation.intersects, circle);```
Candidate: can we need to execute(randomfrom("-p", this method into the superclass "doesn't in source" 's')
Reference: ```suggestion        return new constantscorequery(ft.geoshapequery(context, fieldtype.name(), relation, shape));```
Candidate: i think this method is used for every shape queries,
Reference: __nit:__ it'd make sense to mention `synthetics` in the comment above.
Candidate: can we add `assert all files of the files of the oninit of the oninit of the oninit of the oninit of repository var in the oninit of it, but
Reference: you are ignoring the randomizecontenttype argument i think?
Candidate: i wonder if we need need to do this in source" stays not sure if we need need need need need need need the distribution
Reference: the `false` argument here (and in many other places) is to make sure the randomized authentication is not run-as because that is how the authentication is created in the current
Candidate: maybe we `assert `assert files of this.
Reference: maybe these can be randomized (not that it makes much sense to pass `true` for these commands, just to validate that the input is accepted correctly)
Candidate: i wonder if we should bias towards the
Reference: you can do direct comparison `==` and move this higher up (along with keeponcompletion) since they're cheaper to execute than a method invocation.
Candidate: ```suggestion                             
Reference: no reason to do a partial request on a head request - that's used just to check if the server is alive; it doesn't send any params.
Candidate: i think we need to bias towards the
Reference: same comment as before regarding direct comparisons on primitives.
Candidate: ```suggestion                             
Reference: nit: i think we could even do ```javafinal integer refcount = snapshottedcommits.compute(releasecommit, (key, count) -> {   if (count == 1) {      return null;
Candidate: similar check for need to check for safe commit?
Reference: maybe use a regular for loop here? i notice that we have been avoiding to use `steam()` in hot code paths. i think we should do this here too? but
Candidate: ```suggestion                             
Reference: could we just solve this with a normal loop (or two)? the stream stuff is just needless overhead here i think.
Candidate: nit: you can you check in this method in the case description, i reckon: i wonder if it is sense to mutate it, but you can mutate it, but you
Reference: we might consider only keeping only the count for now
Candidate: ```suggestion                             
Reference: i think we need something finer-grained than `shardid` for the key - we might have just created a new copy for an existing shard (e.g. increased `number_of_replicas`). the primary could
Candidate: ```suggestion                             
Reference: the extra spaces were to keep it lined up with the `now allocating` message in the `else` branch in the logs. i'm ok to remove them, but they seemed helpful
Candidate: ```suggestion                             
Reference: i suspect this test is going to be enough, since the test environment is not exactly like production. i suggest a packaging test in qa/os. there should be some other
Candidate: ```suggestion                             
Reference: we could make this cleaner by finally porting the plugin extension to use  lazy properties. but we should do this in a dedicated pr. i've created https://github.com/elastic/elasticsearch/issues/86057 to track
Candidate: i wonder whether we log this?
Reference: putting this in a dofirst block changes the behaviour here in a way that we fail later than before. if we keep the check in the configuration block we would
Candidate: i wonder whether we log this?
Reference: ```suggestion                // the lookup user for run-as currently doesn't have authentication metadata associated with them
Candidate: can you add a tests for the reckon: i reckon:
Reference: should we rename it to something that removes any doubt that this is only called for legacy indices? handlelegacyindexunknownparam ?
Candidate: i wonder if we should
Reference: 👍
Candidate: ```suggestion                             
Reference: this looks like something ripe for a refactoring 😁
Candidate: ```suggestion                             
Reference: i don't think there is a reason for moving `mdbuilder.put(datastream);` to this place? the npe should be fixed without this change to this file?
Candidate: i don't think we need if the node
Reference: in my opinion both `indices` and `includeindices` sounds quiet generic and might be confusing.should they be called `includeindexnames`?
Candidate: :+1:
Reference: i claim that termsenum.empty is the better response here, as null is equivalent to what we return when _terms_enum is not supported on a given field type.
Candidate: i don't think this is used in log4j2.properties ?
Reference: i see transporttermsenumaction#datanodeoperation uses getterms(). would it makes sense to not only check for null but also for termsenum.empty now in l361 where we decide if we add the terms
Candidate: i don't think this is used in log4j2.properties ?
Reference: if we're going to auto-generate the routing path maybe we should use `index_mode` here?
Candidate: i wonder if we should `fieldmapper#isaggregatable` `final` with the path here.
c_bleu: 0.01714444305788458
s_bleu: 0.01310429446111211
meteor: 0.046828908584011966
