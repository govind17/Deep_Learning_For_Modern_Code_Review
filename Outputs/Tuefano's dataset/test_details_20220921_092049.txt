Reference: iffy formatting
Candidate: why do we need to check the the precision of the <UNK> <UNK>
Reference: don't return null, throw unsupportedoperatedexception instead
Candidate: should this be <UNK>
Reference: that is unusual, as the parser should be on start_tag of the element. why do you feel it is necessary to check for this condition?
Candidate: why do we need to check whether the locks is be fetched in the db. we don't need to check whether the is is not the
Reference: should this not prefer the token over the raw?
Candidate: if <UNK> == null) { <UNK> = <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> }
Reference: it would have been shorter to inline this variable and not have it in scope. :-)
Candidate: should this be <UNK>
Reference: is tostring() required? it's already of string type.
Candidate: why do we need to use <UNK> here?
Reference: move the check and assignment before the other checks to ensure the behaviour is not changed.
Candidate: should we be the <UNK> here?
Reference: might it be clearer if you said rawbytes.length - (endoftablename + 1)? not particularly fussed here
Candidate: use <UNK> objects.tostringhelper() for <UNK>
Reference: edit: this is identical to what liam just said. just making sure i'm following along - this bump from 8 to 10 is to allow for these two new log
Candidate: nit: you could use <UNK> <UNK> <UNK> expected) <UNK> expected)
Reference: [minor] could you name it resourcegroupname
Candidate: [minor] should be the discussion security key.
Reference: utilktkt isn't a great name.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: consider using a switch(res) {...}
Candidate: this should be the <UNK>
Reference: for perunobserver you can return all resources immediately.
Candidate: what happens if the is is the
Reference: udp is a datagram protocol, so it doesn't require frame decoder.
Candidate: why do we need the <UNK> here?
Reference: maybe we can return an empty properties here (perhaps a static constant empty props so we don't create a new one for each instance). it would save a null check
Candidate: this should be the <UNK>
Reference: why this change?
Candidate: remove this line
Reference: we cannot do this - this is a really bad practice. please don't write code that resembles this either. we need symmetric encoding/decoding that's done for all databases, not targeted
Candidate: why do we need the <UNK> here?
Reference: you should check the cache doesn't exist, plus that no suggestion to use the cache is logged
Candidate: should we throw an exception?
Reference: make sure to unescape the url path before using it. i've hit this in actual usage.
Candidate: minor nit, && <UNK> != 0) { 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) 0) { 0)
Reference: a future refactor might place this method in the enum directly.
Candidate: i don't think this matters, if we matters, that this is matters, but i don't think we matters, that it matters, but it would be better to do we need
Reference: we have async_init_delay * 5 + 1 twice here (well, the other time, it's 5*aid+1 ). is it worth extracting a constant here, like several_init_delays?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: i don't think this helps, because as long as the number of available threads is smaller the number of core threads, the executor will create new threads for each submitted
Candidate: can we use static"
Reference: this bloc of code is repeated many times, should be centralized in a single method.
Candidate: why do we need need to the <UNK> here?
Reference: i don't see sense from this if (mobilecontexthelper.isinwebviewcontext())
Candidate: why do we need to use <UNK> here?
Reference: this if-else block can be simplified to: menu.finditem(r.id.menu_item_search).setvisible(config.getcoursediscoveryconfig().iscoursediscoveryenabled())
Candidate: class<? extends <UNK> { <UNK> <UNK> = <UNK> groupname = <UNK> groupname = <UNK> groupname = <UNK> item = <UNK> item = <UNK> item = <UNK> item = <UNK> <UNK>
Reference: can this be changed to createsubjectroleattribute?
Candidate: i don't understand why the <UNK> ?
Reference: @jimdeanspivey can we go with a foreach? for (final linerange range : ranges)?
Candidate: why do we need need to the <UNK> here?
Reference: do not try to parse the sever list if the command has failed (mstatus.code != 0)
Candidate: you could use the sizes of the sizes of the sizes
Reference: floating semicolon
Candidate: please remove the method("post")
Reference: thanks for these cleanup items, too. will you please put them in a separate commit (same pr)? that is, any code changes that aren't directly related to the new constructor,
Candidate: why do we need to use <UNK> here?
Reference: please remove debug codes.
Candidate: i don't understand why, but you should.
Reference: please use long
Candidate: i don't think we need to check if the is is the
Reference: is there a reason this isn't implemented?
Candidate: should this be <UNK>
Reference: nit: unnecessary generic type declaration
Candidate: should we throw an exception instead of returning null?
Reference: probably safer to replace the null check with stringutils.isnotblank(changelogpartition)
Candidate: should we return <UNK> <UNK> ? <UNK> : <UNK> ?
Reference: out of interest why can you not do builtinaggregator.values()?
Candidate: why do we need to use the here?
Reference: need to catch ioexception from getfilestoretry as well as it may throw this exception for nn failures and need retry.
Candidate: i don't think we need to throw an exception if the is is null.
Reference: minor: you can use quickmath.modpoweroftwo(l, 8) == 0 instead of ((l >> 3) << 3) == l, to make it more readable. i misread this like ((l >> 3) <<
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: why not use capabilities directly here?
Candidate: this should be setemptyelement().
Reference: do you assume that if startcolumn is not null, endline and endcolumn will not be either? or is it fine to have two last as null? if it's the first
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: @ekondrashev why not just rsp = opt?
Candidate: please use the fixture.
Reference: why use a java.lang.boolean and not a primitive boolean?
Candidate: if oldvalue is is not be the
Reference: merge the try/catch with the one below?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: @snleee this is handled with the api refreshsegment()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: probably just wants to be start or startphase or something if now generic.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: nit: any chance to make the message assertion more specific? :)
Candidate: why do we need to here?
Reference: we can do the same thing here too right?  public list<modification> latestmodification(file basedir, final subprocessexecutioncontext execctx) { p4client p4 = getp4(execctx.isserver() ? basedir: workingdir(basedir)); return p4.latestchange(); }
Candidate: why do we need the <UNK> here?
Reference: check to make sure notificationuuid is not null
Candidate: should this be <UNK>
Reference: java if (genericutils.isempty(expected)) { return new pair<>(false, getfingerprint(key)); }
Candidate: why do we need need to the <UNK> here?
Reference: probably premature, but if in most usage validatelocksonreads is going to be false, then flipping the arguments makes sense.
Candidate: why do we need need to the <UNK> here?
Reference: we don't need super here
Candidate: rename to <UNK> <UNK>
Reference: does it make sense to continue here? or just return false.
Candidate: i don't understand this matters, this matters, this matters, but this is the the <UNK> is the
Reference: here i would just say return true. then fall through return false, instead of creating a variable.
Candidate: why do we need to check for the <UNK>
Reference: it's better to use **isblank** here
Candidate: this should be the <UNK>
Reference: also here please use short.max_value
Candidate: can we use the configurator configurator configurator in the configurator in the value?
Reference: this synchronization block should be replaced with a collection that handles concurrency, like concurrencylinkedqueue or collections.synchronizedlist()
Candidate: why do we need to tear down the <UNK>
Reference: here too we may use ianalinkrelation.edit?
Candidate: why do we need to check for the <UNK>
Reference: coudl be just arraylist since now it is imported ^^ vv
Candidate: why do we need the <UNK> here?
Reference: log
Candidate: why do we need to here?
Reference: collections.<string, object> singletonmap can be replaced with just collections.singletonmap
Candidate: can be simplified to <UNK> <UNK> ?
Reference: do you want to check if the thread count changed because right now this log message will be logged on every catalog update which affects kipling
Candidate: you should be factorized to spaces.
Reference: please move compilation of pattern to class field, to be done ones, for whole execution of checkstyle.
Candidate: should this be be specific?
Reference: i don't like imavenprojectholder. i think targetpart.getadapter(mavenproject.class) is more appropriate here.
Candidate: this should be injected, so we don't need to use the <UNK>
Reference: indentation, here and rest of pr
Candidate: this will need to check the error will not work for the error list.
Reference: replace with objects.requirenotnull.
Candidate: should we use the <UNK> here?
Reference: i wonder if this change would result array allocation and extra cpu/memory consumption issues
Candidate: should we be the <UNK> here?
Reference: may be static imports for timeunit values here and below?
Candidate: do we need to the exceptions?
Reference: similar to distinctcountaggregator
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: statistics-enabled were introduced in 6.3.0, so there is no need to set them to true for 6.3.0, only for 6.2.0
Candidate: use map<> <UNK>
Reference: printstacktrace() must not be used. use a logger instead.
Candidate: throw exception exception throw exception exception exception throw exception exception throw exception exception throw exception exception throw exception exception throw exception exception throw exception exception throw exception exception throw exception
Reference: i think this could just be: if (searchpacksagain(plist)) continue search;
Candidate:
Reference: the list supplier should fail, calling onerror and oncompleted this way is just a plain protocol violation. do something this instead: java flowable.empty() .buffer(10, 10, timeunit.seconds, schedulers.computation(), new callable<list<object>>() {
Candidate: hmm. this should be the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> (actual == null) { <UNK> = <UNK> }
Reference: i would prefer the use of local variables to resolve calls to something.somethingelse.somefunction()
Candidate: this should be the <UNK>
Reference: you could just use string.replace() to replace the role_prefix with an empty string and use the resulting value as the role name,
Candidate: typo: <UNK> -> <UNK>
Reference: you can use parameterized logging here
Candidate: can we use <UNK> <UNK> <UNK>
Reference: style nit: unneeded curlies
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this.redistemplate
Candidate: can be replaced with <UNK> map?
Reference: fetch should already happen in service
Candidate: use iu
Reference: thread.isunterupted not necessary?
Candidate: why do we need this?
Reference: i assume this was meant to be removed?
Candidate: the syserr should be be the
Reference: what do we do, if the result is null?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i'd do the increment outside of the if (log.isdebugenabled). the call is cheap, and if the log level gets changed on-the-fly to debug then we want the message to have
Candidate: why do we need need to be overridden?
Reference: return early so you don't enter starting state? call handlestopkeepalive with error_invalid_packet?
Candidate: consider renaming these two variants. boolean)
Reference: i think we always display view names capitalized to users.
Candidate: should be be <UNK>
Reference: unrelated change. should be in a separate commit.
Candidate: should we use the <UNK> generation?
Reference: this may impact web-ui code. do we want to expose snapshot in api?
Candidate: do we need to check if <UNK> != null) || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> ||
Reference: this seems to fail the test when smartlock for passwords pops up the dialog for selecting a saved email/pass combination.
Candidate: what is this to do?
Reference: callnode are only present in sequence diagrams, so i would recommend eliminating the first (presumed defensive) clause atype == diagramtype.sequence because of the potential confusion if may cause.
Candidate: why do we need the <UNK> here?
Reference: replace with logger
Candidate: use objects.hash()
Reference: i still think that this is pretty strange. what about just returning a framelayout in oncreateview and re-inflating its content in onconfigurationchanged?
Candidate: why do we need need to check for the <UNK>
Reference: sounds like a workaround for host misconfiguration issue.
Candidate: should we be the specific?
Reference: could you please rename also _result?
Candidate: please use <UNK>
Reference: i think it would be good to perform this logic in outputemitter.
Candidate: ![major](<link_1> 'severity: major') replace this with <UNK> [![rule](<link_2>](<link_0>
Reference: i'd prefer that we call this something like default_request_id. it'll be easier to read and easier to change if we decide zero isn't the best number (which i suggest it
Candidate: the syserr should be be <UNK>
Reference: we should probably check in the canexecute whether we reached the start of the list
Candidate: i don't think we need to check whether the <UNK> is the <UNK> <UNK> is the <UNK> <UNK>
Reference: why to use: try (connection connection = getjdbctemplate().getdatasource().getconnection()) { return connection.createarrayof(typename, array); } catch(sqlexception ex) { throw new runtimeexception(e); }
Candidate: can we use <UNK> <UNK> <UNK>
Reference: magic number
Candidate: i don't understand this matters, if we matters, but this matters, if you matters, this matters, but i don't understand this matters, if the matters, but i don't understand why,
Reference: i would prefer that the exception were re-thrown as a different typed exception (e.g. platformservicesexception) and handled by the caller rather than just eating the exception here.
Candidate: use long.valueof() instead of <UNK> long()
Reference: usually we use requestmonitor.issuccess(). is there a reason you use the istatus directly?
Candidate: this should be the <UNK>
Reference: is the reason that we have to have isincludeallproperties because of the search index? seems like we would really only need the one you loaded.
Candidate: shouldn't this be invoked in the method?
Reference: why does this need to be ordered by the synthetic primary key?
Candidate: why do we need to use <UNK> here?
Reference: the exception is never thrown.
Candidate: this (check exception 422 422 422 422 422 422 422 422 422 422 422 422 422 exception).
Reference: is a null check for the passed in "date" required here for safety?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: since numberofvotes can be null you should replace this with objects.equals(numberofvotes, other.numberofvotes)
Candidate: this should be the same here as above.
Reference: nit: call it uae?
Candidate: i'm not sure how about changing the first thing of the <UNK>
Reference: could have been wordutils.capitalize(delivery.state.rejected) so the test is more stable (will cause compilation errors) if we at some point change the delivery api.
Candidate: hi, we can do we need need to the the the <UNK> the the getcredentials
Reference: repeating code line.
Candidate: this should be the <UNK>
Reference: if we attempt an operation and it fails, recordfailure will be incremented, but recorderror only tracks the cases where the when we encounter a problem that the framework cannot retry
Candidate: why do we need to brackets?
Reference: better way to get the proper schema is to say datacontext.getdefaultschema() ... taking schemas[1] is actually not guaranteed to work since schemas are sorted alphabetically and then you rely on
Candidate: can we move this to the 83 <UNK> <UNK> contents?
Reference: any reason for disabling cache for descending order queries ?
Candidate: should this be <UNK>
Reference: assertfalse is kind of weird here (it's like saying we expect that it should be anything but self). can we change this to assertequal (and the following assertfalse(s) as well)?
Candidate: please remove the method("post")
Reference: maybe it's just me but that mixture of functional and non-functional programming doesn't look right, i know it works, but still
Candidate: you can use the syserr
Reference: assertequals and remove the expected value from message string
Candidate: why do we need to re-throw the exception here?
Reference: should be possible to provide one
Candidate: this should be <UNK>
Reference: looks like a duplication to me. how about this.json().getstring("name")?
Candidate: unsupportedoperationexception should be <UNK>
Reference: should we also validate that datatype != null.
Candidate: please use <UNK>
Reference: i think we need to close this inputstream at some point
Candidate: should we use the <UNK> here?
Reference: do you clean up these files on exit? or the root level dir is deleted on exit ?
Candidate: what happens if the exception is is the
Reference: in range yet you're not providing a range; perhaps "'count' must be at most %s"? also, shouldn't that be %d?
Candidate: can you use the getconnection here?
Reference: hear i think we could handle this error gracefully by if (toast != null) check and not send the traceback to crashylytics using zlog.logexception(e)
Candidate: why do we need the <UNK> here?
Reference: should this support a null address? same with the other one, which make support a null or empty address.
Candidate: can be replaced by: <UNK> <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: this is followup of above, it should not be required.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: i should probably have asked this in the previous review, but why "addfollowingaccounts"? we don't talk about accounts mostly in other parts of the code. it could be ambiguous with
Candidate: you don't need to check the <UNK>
Reference: please make sure this is properly formatted. "else" should be on the same line as the }.
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to check for the <UNK>
Reference: throw exception?
Candidate: can we use stringbuilder?
Reference: please change user back to user_yoda here.
Candidate: can we use the istraceenabled() here as far as as far as far as far as far as far as far as far as far as far as far as
Reference: you don't take any resourcees from player when buying dev card
Candidate: why do we need to <UNK> here?
Reference: @serranya the same here. see above.
Candidate: @serranya same here above.
Reference: what is the use of this metric? there are no i/o or cpu intensive stuff being done within this method.
Candidate: we should restructure this in this method?
Reference: could you: - call treeutils.annotationsfromtree() - use annotationutils.containssame to look for the annotations then you don't need to change the visibility below.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: not sure if this description will be displayed anywhere. if it gets displayed, please change the name dataflow to spring cloud data flow
Candidate: why do we need to use the <UNK> here?
Reference: string.matches can be expensive. if we're caching the list of pattern per site, it would be best to cache compiled java.util.regex.pattern objects.
Candidate: why do we need the <UNK> here?
Reference: it would be better to make value a constant too
Candidate: why is the payload?
Reference: don't we need to reset alpha here? drawables share a global state.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: there should be a space here between expected and school.roster()
Candidate: please use <UNK>
Reference: we should put the url fragments into static vars in a common file then select them based on version in one place rather than scatterred throughout code.
Candidate: can we make this private? specific?
Reference: this should be in the if(v != null) check i am thinking
Candidate: can we call <UNK> <UNK> <UNK>
Reference: initialize it to collections.emptymap() right away so you can forget about the null in getopenstackmetadata(). it will also save some unneeded allocations.
Candidate: should this be null?
Reference: i guess you mean !o.isnull("name")? which by itself would be enough. no need for the o.has("name")
Candidate: the syserr should be be the
Reference: since we're not doing any extra validation here this is confusing to me. how about java if (fields.isempty()) return new factory(delegate); return new realfactory(delegate, fields.toarray(...
Candidate: <UNK> *= 2;
Reference: missing unstable attribute.
Candidate: why do we need the <UNK> here?
Reference: shall we extract that setup step? it's repeated in every test below.
Candidate: why do we need need to the <UNK> here?
Reference: rename 'variablename'
Candidate: i'm pretty minor, but i'm pretty minor, but i'm pretty minor, but i'm pretty sure that offset on the offset on non non 0, non 0 ?
Reference: good catch, thanks. fixed <link_0>
Candidate: we should print snapshotid in the log message.
Reference: the cleaner way would be to use nio classes only: path path = paths.get(filename); if (files.exists(path)) { // yada yada
Candidate: i don't think we need to throw an exception
Reference: edgecachedns as a static variable since it's used a few times?
Candidate: i don't think we need to throw an exception
Reference: if a future completes successfully and returns null, then do not want to take the exception handling path. maybe the code should do : java if(exception != null) { //handle
Candidate: why do we need the exception here?
Reference: the dao should not swallow exceptions. utilities need to propagate exceptions and let the calling code handle them (or the utility will have limited reuse and can only be used
Candidate: i don't think we need to throw an exception
Reference: let's do the same way @jleandroperez did on ios here <link_0>
Candidate: should we log the error message in the messages.properties case.
Reference: are there any pa genres that we don't have a mapping for? i.e. is this an exhaustive mapping? we're gunna get nulls in our set otherwise
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: what does this do if key is null?
Candidate: i don't think we need to check for the <UNK> <UNK> the <UNK> situation.
Reference: the output of this call should be checked and if it's false i think it should bail.
Candidate: the syserr should be the
Reference: @ikhvostenkov please name it json
Candidate: @exper0 let's move this meaningless to the meaningless tests.
Reference: why var4? resources.notfoundexception e would be a bit nicer..
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: check for illegal arg or are we happy with a classcastexception here?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: mutualize with the other matcher on tags
Candidate: why do we need to <UNK> the <UNK> image?
Reference: maybe using a constant here for "://"
Candidate: why do we need need to the <UNK> here?
Reference: suggestion deletedalarmids.foreach(alarmid -> {
Candidate: why do we need to use the <UNK> here?
Reference: you don't need to call the validator, it's called automatically via aop advice around the saveobs method.
Candidate: the syserr should be be the
Reference: consider 'ternary if' here
Candidate: why do we need the <UNK> here?
Reference: power down
Candidate: @unyoungwax, speaking it is be pedantic, but if the == null) { return; } false; } else { if <UNK> == null) { <UNK> = false; }
Reference: i don't think "resolvemember" should create a new symbol. we should find another approach
Candidate: why do we need to use <UNK> here?
Reference: let's make this internalservererror
Candidate: this should be the <UNK>
Reference: 1. unless there are other reasons i'd rewrite this as context.get(config.class).getrendering().getdebug(); and i'd avoid storing the config. 2. can you check if by any chance the renderingconfig class is available
Candidate: let's move this line please.
Reference: just want to make sure i'm understanding this correctly, previously we weren't looking at these childnodes but now we are?
Candidate: this is be setemptyelement().
Reference: why not extract receivedid before switch block? (reduce the duplicate code)
Candidate: <UNK> *= 2;
Reference: feels like this null check can be included above.
Candidate: this should be the <UNK>
Reference: extra space
Candidate: why do we need the <UNK> here?
Reference: this method has a really weird contract. 1. why is it public? 2. why does it return its incoming argument without any adjustment? the name of the method makes it
Candidate: ![major](<link_1> 'severity: major') remove this unused method. [![rule](<link_2>](<link_0>
Reference: i think this test should be moved to options instead
Candidate: <UNK> *= 2;
Reference: since the classes in the cache are now changed, we shouldn't do this. we can either change the keys here. that will give us new space in cache. or we
Candidate: should we be the specific?
Reference: @nadahar i just read that the one used by the ps3 are .**atrac**. did you tried to stream this kind of file to the ps3 ? **p.s.** .omg (from the
Candidate: why do we need to use the <UNK> here?
Reference: setspecialdays should be tested on an e-meter device_identification_g_label -> device_identification_e_label getdeviceidg -> getdeviceide
Candidate: should be tested on the e-meter device_identification_g_label -> device_identification_e_label getdeviceidg -> getdeviceide
Reference: you could have launcher_name be an abstract method in the base class, and print this message in the base class.
Candidate: use iu
Reference: what is this doing? is there a reason we are setting the max frame size to anything but rsocket max frame size?
Candidate: can we use the <UNK> <UNK>
Reference: call intvalue() and then there is no cast
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i think you can probably change the return type to list<? extends target>
Candidate: can we use the getconnection here?
Reference: this is passing isbackgroundlogic but the param name for processjobfordisplay is callforegroundlogic. seems like we are flipping the logic here when we should not? or just one of the names
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: i'm pretty sure it ends up being lower cased because the registries do not support capital letters.
Candidate: the syserr should be be <UNK>
Reference: why is this changed? we want to resolve the product content on the incoming data (pinfo) not the existing product (pdata)
Candidate: why do we need the getconnection here?
Reference: remove /dev team
Candidate: we don't want to throw an exception if we don't want to re-throw the exception
Reference: you could move this line to presave. that way the topoliogy can be used both in effectively once as well as atleast/atmost once mode
Candidate: should this be <UNK>
Reference: i see no reason to introduce msg here, you could just use serializedpayload
Candidate: use <UNK>
Reference: put the test in the same package (not directory) and you can at least use package private or protected
Candidate: use the syserr
Reference: a very small impovement, but you can use the method notation when the mapper is on second place and params vararg is on 3rd place. that will allow to pass
Candidate: can be simplified to <UNK> <UNK> ?
Reference: suggestion objects.requirenonnull(filter, "filter cannot be null");
Candidate: the syserr should be be <UNK>
Reference: isn't (ctx.executionmask & mask_write) == 0 && (ctx.executionmask & mask_flush) == 0 the same as: (ctx.executionmask & (mask_write|mask_flush)) == 0
Candidate: i think we should delay the stage delay of the delay
Reference: @fraggjkee would recommend to put something to make test fail if inside the catch block. because right now the test will still pass even if parsing completely fails (line 43).
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: need a null check here.
Candidate: do we need to <UNK> the <UNK> <UNK>
Reference: this is actually not an effective way to test that the exception is thrown. if the exception is not thrown, the catch block is never executed, so the asserttrue() will
Candidate: why do we need to here?
Reference: as the all() is used just internally i think we can rewrite it as: java public collection<datatype> all() { return datatypes.values(); }
Candidate: why do we need to check the <UNK>
Reference: nit: maybe we can save the result of getpartition(topicpartition)
Candidate: if getstate() != null) { return; }
Reference: i think these instance of are getting away from why we should have inheritance in the first place. can we throw an uoe in other non table data source data
Candidate: can we use <UNK> <UNK> <UNK>
Reference: two ;;
Candidate: i don't think we need to do we need need to check the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: test the change against an account in prod tenant which still doesnt have dec-12 bits .
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: verify(client != null, "client cannot be null");
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: since a lot of these catch blocks have essentially the same error, it'd probably be better to use the multi-catch syntax, just to clean things up a bit. the original
Candidate: do we need a <UNK> here
Reference: would be nice if this could be incorporated into the checkforaddremovelistener method? perhaps checkforaddremovelistener(listener, checkfornull) ?
Candidate: should this be <UNK>
Reference: should treehash be a hashcode?
Candidate: hmm. this should be the fixture.
Reference: final
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: suggestion this.ignoreabove = mw.ignoreabove;
Candidate: @unyoungwax, do we need to trim entries?
Reference: i'm not sure we actually want to eat this error silently. a parse error here means that hq is setting the header, but in the wrong format, which means that
Candidate: i don't think we need to check if the is is the
Reference: wrapper#getx() : float use float instead of double.
Candidate: why do we need to use the <UNK> here?
Reference: seems like all of this could be extracted into a strategy function to compute the topic given the table id (e.g., topicname(tableid)), and a second method to compute the partitions
Candidate: <UNK> *= 2;
Reference: :question: is it safe to use charset.defaultcharset() here? some systems have different default charsets. for example, windows vs linux.
Candidate: should we throw an exception here instead of the exception?
Reference: implutils has a isnullorempty method that should handle these checks.
Candidate: can we use <UNK> here?
Reference: could you use strings.repeat or something?
Candidate: please use <UNK>
Reference: the original code does not make tolowercase(). why did you add it?
Candidate: i don't understand this matters, this matters, this matters, this matters, but you don't need to do we need need to check the <UNK> <UNK>
Reference: this can be reduced to protected.
Candidate: please remove the method("post")
Reference: we have a stringmarshal helper class that does all of this utf8 logic for a string.
Candidate: please use <UNK>
Reference: shouldn't it be no handler was subscribed **for** command?
Candidate: should we throw an exception?
Reference: this is again an assumption. anything in the try block can throw illegalstateexception right? i would suggest logging the exception message here.
Candidate: should we be the the dialog here?
Reference: shouldn't we call postlocation.companion.equals here?
Candidate: can we be simplified to <UNK> <UNK> ? <UNK> : <UNK> ? thanks!
Reference: please don't use sysout. logging is your friend.
Candidate: you can use the chunks with the <UNK> <UNK>
Reference: you can replace java if (tfj.gettask(name) == null) { throw new jobcreationexception("unknown dependence: " + name); } else { t.adddependence(tfj.gettask(name)); }  by java t.adddependence(optional.ofnullable(tfj.gettask(name)).orthrow( () -> new jobcreationexception("unknown dependence:
Candidate: should we use the <UNK> here?
Reference: should the condition here and the condition on 153 the same?
Candidate: nit: it looks like we should be the <UNK> <UNK> <UNK>
Reference: what if the vm is highly-available (so it was automatically restarted) or the user managed to run the vm before coco got it? i think this command should lock the
Candidate: we should need to do we need need to check the the <UNK> the <UNK> detection. if oldvalue is the <UNK> detection.
Reference: it's unclear to me what's going on here. this appears to check that the service *isn't* bound before calling unbindservice(context).
Candidate: this should be the <UNK>
Reference: -1 for using objects.hash(...) for hashcodes, as it will create an array and i think that it is important to make such thin places as cheaper as possible. if you
Candidate: can be replaced with <UNK> interface)
Reference: isn't the topology always a localizedcachetopology?
Candidate: can you rename this to <UNK> <UNK>
Reference: assert.fail inside a callback like this seems kinda weird -- usually asserts run inside the main test code. would it work if this is just a re-throw? like throw throwables.propagate(e)
Candidate: please use <UNK>
Reference: copy-paste and you haven't changed the member name. is it wise to have a wtextarea called wtextfield?
Candidate: why do we need need to the <UNK> here?
Reference: you missed new stringbuilder().append("[test: \"").append(m_name).append("\"")
Candidate: <UNK> "config job.name is missing" ?
Reference: see above about not blocking the calls for futures. in any case it is probably less verbose to just block and work with the result directly. also, the contract for
Candidate: is this tested? this is be tested? i don't think we need to pull the test out of the pull request?
Reference: remove cast
Candidate: should we throw an exception?
Reference: what's the reason for this change? we want people to use setfields to change the fields, so it's good practice to return unmodifableset here.
Candidate: this should be <UNK>
Reference: this commandcontext seems unused.
Candidate: why do we need to check the <UNK> here?
Reference: twice the same call.
Candidate: why do we need need to the <UNK> here?
Reference: what is a propertyvaluewrapper? why do you need it?
Candidate: please import?
Reference: consider replacing 96-97 with just one try block (see line 455)
Candidate: i don't think we need to throw an exception
Reference: so we are back to the same perf issue that you mentioned in my pr :) i would be curious to know how do you propose we solve this.
Candidate: should we be the if the == null) { return <UNK> } else { if (throwable { <UNK> { <UNK> { <UNK> }
Reference: not good to add sth when calling getter
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please don't do unrelated refactor work next time
Candidate: i don't understand the matters, but you need to use the for the <UNK>
Reference: this check seems a little fragile at first glance (not sure why.)
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: isn't this dataset automatically executed?
Candidate: ![major](<link_0> 'severity: major') either remove method(s) conditionally. [![rule](<link_1>](<link_2> or [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2>
Reference: if i understand correctly the *_key strings aren't needed now, and what you want to do here is pass to "params.setaffinitygroupmap" directly the result of "mapaffinitygroupmapping": params.setaffinitygroupmap(mapaffinitygroupmapping(...)); what am i
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: add invariants
Candidate: should this be be the <UNK> ?
Reference: just pass sparkjarfilepath.tostring less number of changes will be required in the code.
Candidate: you can use the chunks to use <UNK> <UNK> <UNK>
Reference: nitpick: please pre-compile this value on class creation by adding it as a private static final   line below the definition of searchproviderurls above.
Candidate: i think this should be the if the is is the
Reference: the same.
Candidate: can we make this a property?
Reference: the phrase "repartition" has a better ring to it. but here i prefer partitionby for 2 reasons: 1. consistency between the operation name and the operator spec name. 2. repartition
Candidate: wouldn't it be better to throw an invalidator that we wouldn't easily easily easily internally be easily easily easily easily easily easily be easily easily easily easily easily easily easily
Reference: need to be a bit careful here since getrealmidentity should only return a non-null value. i think we should throw an illegalstateexception here if we have a null value at
Candidate: can be replaced with <UNK> <UNK> ?
Reference: we tend to use illegalargumentexception for these kind
Candidate: i don't think we need to do we need need to the the in the <UNK> we don't need need to do we need need to do we need to
Reference: add "balanced" ?
Candidate: should we be the <UNK> here?
Reference: conditional is more clear as: !getzookeeperinstance().isempty()
Candidate: why do we need the <UNK> here?
Reference: if we encounter the opposite is there anything we could do to fix it? or would it not matter?  if (latency <= 0) { logger.trace("computed a suspicious latency of
Candidate: please remove the method("post")
Reference: this seems to be unnecessary. i also get the label after removing this.
Candidate: java return <UNK> java <UNK> java java java java java java java java java java java java java java java java java java java java java java java java java
Reference: @jomarko thanks.. i'd have made this integer.class.getname() too
Candidate: we should need to use the <UNK> <UNK>
Reference: log/throw?
Candidate: i don't think we need to check the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: stringbuilder instead of stringwriter would be more traditional choice, not that big of a deal though.
Candidate: why do we need to use the <UNK> here?
Reference: this should be on system.err
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: i don't think the new method resolveprovidedproducts is needed. we could simply use the existing resolveproduct/resolveproducts methods to lookup any existing provided products we have, assuming they were already created.
Candidate: why do we need to here?
Reference: read the values and validate
Candidate: do we need to <UNK> the <UNK> <UNK>
Reference: need to remove this leftover debug output
Candidate: this should be the <UNK>
Reference: how can this work? this is going to insert maxed_pool_marker into the bag.
Candidate: why do we need the <UNK> here?
Reference: no need to explicitly load tables with query if you are using the latest build
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: json -> "json" (do a search-n-replace)
Candidate: why do we need to use <UNK> here?
Reference: could we move this call elsewhere given that in some cases it becomes unused? (e.g. if partitioned and partionedindexname != null then we don't use the result here)
Candidate: i don't understand this matters, this matters, if you matters, this matters, this matters, that this interfere with <UNK> for( <UNK> = <UNK> ? <UNK> : 2; : 2; :
Reference: not a field
Candidate: this s?
Reference: the line .map(l -> l.stream().findfirst().orelse(null)) might be equivalent to .flatmap(l -> l.stream().findfirst()).
Candidate: this should be the <UNK>
Reference: i would suggest providing more clue about the exception like  throw new illegalargumentexception( "starttimenanos [" + starttimenanos + "] should be greater than 0!" );  to help debugger
Candidate: the syserr should be be the
Reference: why swallowing?
Candidate: can we make this private?
Reference: why public?
Candidate: should this be <UNK>
Reference: remove this log
Candidate: i don't think this the <UNK> is the the <UNK> the <UNK> is the <UNK> <UNK>
Reference: is double call to structisnull.tobooleanarray() intentional?
Candidate: @unyoungwax, do we need to trim entries?
Reference: suggestion log.debug("{} old entitlement certificates deleted", count);
Candidate: <UNK> *= precise, precise, we should have fps in the precise, situation.
Reference: replace the if ... else block with  return querystatemap.remove(queryid) != null ? true : false;
Candidate: this should be setemptyelement().
Reference: make the code fold to the next line when the code is too long. and probably put this text in the strings.xml?
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK>
Reference: seems unlikely that dataref would be null having just assigned the result of a class constructor to it.
Candidate: if oldvalue is the <UNK> costs it is the the <UNK> part, but it should be be the <UNK>
Reference: nit: try to avoid string concatenation in the log.  logger.info("setting quota mode to {}", mode.name());
Candidate: why do we need need to the <UNK> here?
Reference: can we make this method delegate to a package-private static boolean isprejava8(string javaversion) which we can invoke directly from the test? the reflective method is likely to cause failures if
Candidate: why do we need the <UNK> here?
Reference: static import
Candidate: this should be <UNK>
Reference: byte[] sysmutexphysicaltablenamebytes = getsysmutexphysicaltablenamebytes(); if i understand correctly what @chinmayskulkarni described in the ticket, this call will still result to an admin.tableexists call to check the existance of system.mutex/system:mutex and
Candidate: should we be the <UNK> here?
Reference: [error] alluxio.client.file.cache.store.localpagestore.get(pageid, int) may fail to clean up java.io.inputstream on checked exception [alluxio.client.file.cache.store.localpagestore, alluxio.client.file.cache.store.localpagestore] obligation to clean up resource created at localpagestore.java:[line 78] is not dischargedpath continues at localpagestore.java:[line 79]
Candidate: this should be setemptyelement().
Reference: this statement slot.getvaluelist().getvalue()) could cause an npe
Candidate: this should be <UNK>
Reference: columnstatistics
Candidate: if the understood the previous statement.
Reference: curly braces aren't required
Candidate: why do we need need to check the <UNK> <UNK>
Reference: why do we handle error like this?
Candidate: should this be <UNK>
Reference: why parsedouble and then convert that to int instead of directly parsing to int ?
Candidate: this should be the feedid
Reference: this can be removed? (being added later.)
Candidate: please use the fixture.
Reference: please move it to line 168, just to make it look cleaner :)
Candidate: do we need to check here?
Reference: to match the old format, do "network parameters:\n " here.
Candidate: why do we need the <UNK> here?
Reference: do we missing some enums here?
Candidate: please use <UNK>
Reference: these could be renamed to not use nonascii.
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: the change to optional requires now to do a check here for presence and a get at line 87 and 85 which internally does that same check again.
Candidate: please use <UNK>
Reference: suggest json related capabilities be isolated to the jsonutil class.
Candidate: can we use the builder here?
Reference: what if it takes longer to initialize? would it be possible to use something like await().atmost(1, minutes).until(() -> kafkaproducer.isready())?
Candidate: you don't need need to wait for the the chunks
Reference: the code point loop that now exists in this codepointcursor is sort of duplicated elsewhere too. would it be a good idea to port those places over to using it
Candidate: you can use the <UNK> here
Reference: what's the reason for this extra variable container?
Candidate: why do we need the <UNK> here?
Reference: we should first find out if we have to select one/deselect all and then do the right thing in the ui only once after the if-block. this avoids unnecessary ui
Candidate: if <UNK> == null) { <UNK> |= <UNK> { <UNK> }
Reference: i wonder if people running with locale german, chinese etc would get localized error messages from the jdk? you may need to just check the exception type, or maybe try
Candidate: why do we need to use the here?
Reference: check if monitor is cancelled?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: @irenyak1 why return false here?
Candidate: should this be <UNK>
Reference: these should be done through a sink.
Candidate: should we be the specific?
Reference: if the length of the legal last name is already the max length, then the legal first name would get truncated to an empty string. i think this code may
Candidate: should we use the exception here?
Reference: how about raising an audit log for failure? otherwise, it may be difficult to track which snapshots failed
Candidate: shouldn't this be <UNK> here?
Reference: i'd go with if (fileentry == null) {return false;} without else allowing to remove one indentation level for the successful case.
Candidate: i don't think we need to throw an exception if invoked?
Reference: check for null and make a defensive copy java this.signature = requirenonnull(signature, "signature is null").clone();
Candidate: why do we need to call <UNK> <UNK>
Reference: making the hierarchical project representation default breaks the test coverage. i ran the build on our ci, you should be able to check the results [here](<link_0> (credentials: guest/guest). if not,
Candidate: should this be specific?
Reference: the annotations are inherited, so you don't have to repeat them. but it doesn't hurt i guess.
Candidate: please use <UNK> <UNK>
Reference: !strings.isnullorempty(name)
Candidate: should this be <UNK>
Reference: do not like the idea of an automated test relying on some mutable repository in some personal account.
Candidate: rename to <UNK>
Reference: extract to assertclassandmethodname(stacktraceelement, classname, methodname)
Candidate: please remove the <UNK>
Reference: calcite allows a pure string interval value, if bigquery only allows int64 format, we should check and throw for other non-integers values.
Candidate: why do we need this check?
Reference: @davidfestal formatting in if(. probably it would be better to extract it to some method e.g. ishttp(string url) could you please clarify what exactly is done in updateserver and why
Candidate: should this be <UNK>
Reference: i wonder if for future-proofing this check should come _after_ all of the internal ones? seems like we might want to default to the assumption that we override the superclass's
Candidate: we should need to log the exception here instead of the disk, so we don't need an additional additional additional additional additional additional additional disk,
Reference: just return the day value. don't need to recomute millis_per_day.
Candidate: can you use the <UNK>
Reference: can we java docs about what formatdatestring is used for?
Candidate: @unyoungwax, do we need to the <UNK> the <UNK> <UNK>
Reference: same typo as above
Candidate: please use readasstring(...) instead of <UNK>
Reference: can simplify using objects.equals <<link_0>,%20java.lang.object)>
Candidate: do we need need to use <UNK> anywhere else?
Reference: doesn't seem necessary to keep this function, the two lines below should suffice pauseselfscanning(); mhandler.postdelayed(mscanrunnable, math.round(1.5 * teclaapp.persistence.getscandelay()));
Candidate: this should be the <UNK> via: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: since there is no marker, it seems that containsmarkerforemptytxn should be false.
Candidate: this should be <UNK>
Reference: you can return this from here to expose kind of fluent api.
Candidate: should this be <UNK>
Reference: this.size for consistency
Candidate: please use jclouds <UNK>
Reference: why is millisecodnspersecond a function. sounds like it should be a constant
Candidate: why do we need the <UNK> here?
Reference: is that needed? is not isautorefresh sufficient? in any case, forcerefresh represenatations will be refreshed once because representationstorefresh is a set.
Candidate: why do we need need to be static?
Reference: add a check here to verify that the serialdatareceived method was not called.
Candidate: why do we need need to the <UNK> here?
Reference: do we still need to do all this reflective bullshit now that it's in a separate artifact?
Candidate: why do we need to use <UNK> here?
Reference: if jdk 6/7 returned a double and jdk 8+ return integer, can't we just simplify this whole block to java assertequals(3, variable);  since we're expecting jdk8+ from now on?
Candidate: i don't think we need this check?
Reference: after throws exception is dropped from rollbacklocks, seems like this code should be : java completablefuture<void> getfailureop(commitdata cd) { return rollbacklocks(cd); }
Candidate: suggestion completionstage<void> asynccompletelocaltransaction(advancedcache<?, ?> cache, cache, long timeout) { { { { {
Reference: this test fails  java assertthat(empty().leftpadto(1, 1)).isequalto(of(1));  i believe <code>if (length <= 1)</code> should be removed
Candidate: should we throw an exception here instead of an exception?
Reference: suggestion "the @messagehandlerinterceptor must be on a method."));
Candidate: i don't think we need to do we need to do we need need to do we need need to do we need need to do we need need to
Reference: build the log message when needed
Candidate: <UNK> *= 2;
Reference: should be removed
Candidate: should we throw an exception here?
Reference: new local variable does not seem to be used anywhere.
Candidate: if oldvalue is the <UNK> detection. if <UNK> { return; } else { if <UNK> { if <UNK> { <UNK> }
Reference: can be static to avoid to avoid redundant object creation on startdownload
Candidate: if (actual == null) { <UNK> }
Reference: wonder if here we should remove the tbl_posts.is_wpforteams_site and tbl_blog_info. is_wp_for_teams . wdyt?
Candidate: do we need to the <UNK> <UNK> <UNK> <UNK>
Reference: lowercamelcase please, also enderpearl**s**. p.s. 0-1
Candidate: use <UNK> instead of <UNK>
Reference: can we not duplicate the text here?
Candidate: should we throw an exception here?
Reference: suggestion if ((en instanceof gunemplacement) || (en instanceof fightersquadron) || (en instanceof jumpship)) {
Candidate: what is this happen if <UNK> is the <UNK> <UNK>
Reference: please remove alias setting (should be encapsulated in addmanageddevice
Candidate: alias encapsulated encapsulated in addmanageddevice
Reference: this can be replaced with a lambda. also some nesting can be removed from the conditional:  java boolean isdoubleclick = ... && ...; if (isdoubleclick) { ... } 
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this assertion should not be removed. it fails because getpayload() now sets the position to 0 before returning the bytebuffer. then flip() will make the bytebuffer empty (limit=0). but it
Candidate: why do we need need to the <UNK> here?
Reference: (list<?>) (3 places)
Candidate: should this be <UNK>
Reference: append "from state manager"
Candidate: why do we need to 1st scheduler too? stead of stead of <UNK>
Reference: what about using org.apache.commons.io.filenameutils to simplify the code? java string.format("%s%s%s", filenameutils.getbasename(filename), count, filenameutils.getextension(filename));
Candidate: nit: can be replaced with <UNK> <UNK>
Reference: use methodtype.generative.getcode()
Candidate: should this be <UNK>
Reference: add a line break before ||
Candidate: why do we need the <UNK> here?
Reference: it would be nice if this can be a tunable. also please give it a meaningful name.
Candidate: please rename the <UNK> to <UNK>
Reference: rfc7252 responses may be piggybacked. if so, a ack for a ack is not compliant. dose oscore change this? are piggybacked responses not used with oscore?
Candidate: we should need to use the "?" instead of string concatenation
Reference: i would suggest using objectutils to check for nulls here
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: what if clock.currenttimemillis() + timeoutms overflows?
Candidate: why do we need to use <UNK> here?
Reference: i'm a little confused by this, and its likely just me not knowing the full code. why synchronize something that you're spinning off into a thread anyway? are you getting
Candidate: if we is the software stripe { <UNK> <UNK> } } } } } }
Reference: extract false to a constant declared in the beginning of the class to declare the intent of the parameter, which then can be reused throughout the test file
Candidate: please use <UNK>
Reference: for troubleshooting, should more specific information be output about the vendor generating the error, such as pmw vendor id or kfs vendor id?
Candidate: if <UNK> != null && <UNK> || <UNK> { return; }
Reference: why do we need this?
Candidate: why do we need to mock <UNK> here?
Reference: same here, we should be relying on [dateformatterprovider](<link_0>
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: :ant: safer to use  groovy def port = img.withrun('-p 12345:80') {c -> c.port(80)}
Candidate: select <UNK> from the fixture.
Reference: could use long.bytes and float.bytes
Candidate: why do we need to use the <UNK> here?
Reference: given the problems we've had with other properties of storagedomain with converstion of integer to int and the npes resulting i think it's best that the return type will be
Candidate: should we be <UNK> to <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> (actual == null) { return; }
Reference: i'd suggest to introduce a lock to guard accesses to running and all other places where it is accessed. that way we will prevent concurrency when shutting this component down
Candidate: should we catch exception and throw an exception if you { throw } { throw (long <UNK> }
Reference: do we want to keep pretty printing on?
Candidate: should be be <UNK>
Reference: works with two duplicates but what happens if 3 or more?
Candidate: why do we need to mock <UNK> <UNK> <UNK>
Reference: ![minor](<link_2> 'severity: minor') remove this unnecessary cast to "object". [![rule](<link_1>](<link_0>
Candidate: broken lot of readability?
Reference: without testing i dont think file.createnewfile will change the access and modification time of a file if it already exists?
Candidate: i don't understand this matters, if you matters, this matters, if the matters, but i don't understand this matters, this matters, if you matters, this matters, but it matters, the
Reference: add check on list-length==3 here too? it would be a better error messsage.
Candidate: should be be specific?
Reference: i think for simplicity you can even have addresshelper.getsocketaddresses method return addresses and do the primary secondary separation internally (it seemed to me that such generation can be the responsibility
Candidate: should be be the vdsid here?
Reference: according to the druid formatting rules, should break all or none arguments.
Candidate: this should be setemptyelement().
Reference: i believe this is incorrect - if no configuration is specified, we should use the global configuration, not 'no' configuration (i.e. an empty map). please confirm with @alzimmermsft (and maybe
Candidate: can be replaced with <UNK> ?
Reference: not the right implementation, permissions other than the one at zeroth index would get ignored.
Candidate: can you move this into a separate method?
Reference: supportingconditionvalue -> supportingconditionstringvalue
Candidate: i don't think we need to check if the is is the
Reference: this is not a deep copy
Candidate: please use @since <UNK>
Reference: i think we should detect bad keys during initialization rather than runtime, store the cache as a field, and simply log rather than throwing an exception. the runtime exception can
Candidate: i don't think we need to do we need need to do we need need to do we need need to do the getcredentials
Reference: there is no getiscsiinitiatorsbyvdsidandstoragetargetid in interfacedao only getiscsiinitiatorsbyhostidandstoragetargetid (host instead of vds)
Candidate: can we log the iae if <UNK> is null? if not, we don't need to throw iae if iae is an error?
Reference: consider using system.currenttimemillis instead, since it has better performance (not much, from date().gettime() i reckon), but it will save on gc execution, by skipping the creation of a new object,
Candidate: why do we need to use <UNK> <UNK> <UNK> <UNK>
Reference: 1.65 looks like an interesting value (instead of 4).
Candidate: i don't think we need to check for the <UNK>
Reference: guava's iterables.getonlyelement might be more crisp.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: same here, don't requery and maybe use a single logger object?
Candidate: please add <UNK> here as well as well.
Reference: @pjain1 and @gianm this means if only the first 5000 events are not properly formatted you won't see the log. i will use an exponential backoff strategy.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: removing datasource before restoring snapshot is not necessary imo.
Candidate: i don't think we need to close the dispatcher and then we don't need to catch the exception, so you don't need need to close the connection
Reference: can be put as single statement --> final containerinfo containerinfo = containerstatemanager.allocatecontainer(pipelinemanager, type, replicationfactor, owner);
Candidate: if (args.length && <UNK> { <UNK> body: <UNK> } { <UNK> }
Reference: same question: it doesn't seem to be necessary?
Candidate: i don't understand this matters, this matters, this matters, this matters, but we don't need to do we need need to do we need need to do we need to
Reference: throw new unsupportedoperationexception
Candidate: this should be <UNK>
Reference: please, use fail(). <link_0>
Candidate: let's use "ignore" to "ignired" please use <UNK>
Reference: i don't think these messages should be localized. imagine a situation when you get an bug report from a user from china with these messages in the log.
Candidate: if oldvalue is is missing" ? "on" : <UNK> { ... }
Reference: suggestion return _addedfiltersnoduplicates.add(filtertoadd.withid("avoidduplicatefiltersthatonlydifferintheirid"));
Candidate: should this be <UNK>
Reference: i believe this will be flagged as a potential npe by android studio. it makes sense that this will never happen so i recommend adding a readinglist != null to
Candidate: we should use the <UNK> <UNK> <UNK>
Reference: the behavior as implemented seems appropriate. if called on a nonexistent file, we return false; if anything else goes wrong, we throw an exception. right?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: actually, in that case the winding order parameter would be set, but with a enum value that is not handled here. so it would be good if the message would
Candidate: why do we need the <UNK> here?
Reference: can be replaced with a lambda.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: use stringutils.isempty()
Candidate: this should be null if (state != null && <UNK> != null) { <UNK> }
Reference: any reason for this exact rng function? also, how about using this.rand provided in the world class
Candidate: why do we need the <UNK> here?
Reference: take a look at object executescript(string script, object... args) method in apppage
Candidate: why do we need the <UNK> here?
Reference: do we always have to use amqpannotatedmessage even for messages that don't need this?
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: nit: extra space here
Candidate: please use the feedid
Reference: same as above. the new value should be lockvalue
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: please format this code correctly. enter and { after else.
Candidate: this should be the <UNK>
Reference: configurationadmin.getconfiguration(pid, "?")
Candidate: should we throw an exception?
Reference: ![codacy](<link_0> issue found: [these nested if statements could be combined](<link_1>
Candidate: should this be <UNK>
Reference: any factory with parameters we could use for testing?
Candidate: why do we need to use <UNK> here?
Reference: if "analyzetypes" has its own methods, then there should probably be a new "analyzeservices" method.
Candidate: use <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + ", <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: add this here: registerhandler(getview().getfeedbackimage().addclickhandler(new clickhandler() { @override public void onclick(clickevent event) { if (feedbacklink != null && feedbacklink.length() > 0) { window.open(feedbacklink, "_blank", null); //$non-nls-1$ } } }); this automatically
Candidate: this should be the fixture.
Reference: can you please rename those intents to expectedwhateverintent and actualwhateverintent. its really hard to read the way it is now, and really hard to comprehend which part is test setup,
Candidate: why do we need to persist the properties? on the request?
Reference: no isdebugenabled()
Candidate: do we need need to check the <UNK> here
Reference: also check this
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: you can avoid using arrays by using atomicreference<>
Candidate: stringutils.isnotblank()
Reference: missing blank line. don't know why the formatter doesn't add it in some cases.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: @vidurananayakkara do the necessary changes to fix above todo
Candidate: should this be null? if we { return; } } }
Reference: why we need totalnum != 1? i think currentnum <= totalnum / 2 also applies to video cluster where some colos have only 1 replica.
Candidate: i don't think we need to throw an exception
Reference: these assertions are checking the wrong thing, copy/paste err?
Candidate: this should be the fixture.
Reference: model needs to be set dirty. this was a bug in the original code, please fix it on the way
Candidate: should be be <UNK>
Reference: <link_0>
Candidate: this should be setemptyelement().
Reference: this should be removed
Candidate: why do we need to the <UNK> here?
Reference: extract layeronmap.getdefaultpolygonstyle() to intermediate variable?
Candidate: should we use the exception here instead of catching the exception?
Reference: yep, this is correct. would it be worth having some preconditions check on the exception (that it is an interruptedexception)? - in case someone later on tries to re-use this
Candidate: why do we need the <UNK> here?
Reference: other.hashcode() is only fast for immutable tuples with cachedhash, not for volatiletuples. if obj is volatile, we can jump straight to internalequals() i believe. though this should not matter a
Candidate: this should be the islocal as well?
Reference: please use a parametrized message <link_0>
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: confusing parameter name. the type is that of the aggregate, not the event. the fact that it's the type derived from the first event, it not relevant in this scope
Candidate: can we use the <UNK> of the properties?
Reference: can't we return just a value here? why do we need a) supplier b) future?
Candidate: why do we need to here?
Reference: i think we could improve further by hiding the isdefault parameter. there's only one default version, but all those calls have to mention this false argument, which is obscure unless
Candidate: unused variables.
Reference: shouldn't we keep a test to check that in this situation an array of object is returned? i remember that in past this was not the case.
Candidate: should we be the <UNK> here?
Reference: suggestion if (mmictoolbar == null) {
Candidate: please use <UNK> <UNK> <UNK>
Reference: what are some benefits of using retained fragment in this case?
Candidate: do we need need to override the here?
Reference: is it the messagehandler's job to mark the message as handled successfully? would it make sense to put that responsibility in here, and then maybe on error we could know
Candidate: please use <UNK>
Reference: why do you need both authenticationscheme and authorizationmode to determine if you have to retrieve an access token?
Candidate: use <UNK>
Reference: object not result
Candidate: please remove the try/catch here.
Reference: remove space at end of string
Candidate: can we use an exception here instead of returning an exception
Reference: ok, this is a bad message. i'm someone that says that there's no such thing as an expected exception in general, because exception really are an extraordinary event per definition.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: shouldn't need to specify the event types, as this is handled by the annotation itself. this is for remote listeners which we don't have access to the annotations at this
Candidate: the syserr should be be <UNK>
Reference: in main(), since this is a usage warning, please leave as println().
Candidate: why do we need need to the <UNK> here?
Reference: use java 8's optional.
Candidate: should be be <UNK>
Reference: this should be a tracef or removed.
Candidate: should we be the <UNK> here? if we { return; } }
Reference: should not be needed.
Candidate: this should be <UNK>
Reference: isn't this a normal compensateuri which passed from user? so it can be user-endpoint:user-port/something/compensate? how can we be sure that parent lra can be extracted?
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: i don't feel very good about this constructor. it seems counter-intuitive to have the fscontext as an argument here. there is already an fscontext embededed within the fs object. is
Candidate: please use <UNK>
Reference: make these constants?
Candidate: the plural of the <UNK> of the <UNK> of the <UNK>
Reference: if run in the ui, when mutiple validators are used, this will lead to multiple dialogs being displayed to the user, each after one validator succeeded. it might be better
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: as you are negating the result when using this function, it'd be better to avoid the double-negation by just returning the result here directly.
Candidate: why do we need to check for the <UNK>
Reference: should we add a sort here?
Candidate: can be simplified to: java public int <UNK> = <UNK> <UNK>
Reference: typo, should be timeelapsedmillis
Candidate: why do we need the <UNK> here?
Reference: usually we just put tests in testbackgroundhivesplitloaderforbucketedtables.java into this testbackgroundhivesplitloader.java class. in this specific case, i understand the tests and other helper methods in testbackgroundhivesplitloaderforbucketedtables.java are very specific and may
Candidate: why do we need the <UNK> here?
Reference: the condition could also be changed to !brand.getchipvalues().isempty()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i'd recommend updating this error message slightly to return the id (as it's more useful to reference the problematic object). so, something like "the id " + id + "
Candidate: please use <UNK> <UNK> <UNK>
Reference: submit?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: intend was fine before
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: (current = toprocess.takefirst()) != reporting_none) ?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: you may not intend to change it.
Candidate: i don't understand why, but it matters, afaik. afaik.
Reference: rewrite messages without we
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: please add new helptag and hashname (as in storagelistmodel)
Candidate: shouldn't this be the <UNK> here?
Reference: what if you just sort the process instances based on their id, and start aborting the highest ones first? a child process should have a higher id than its parent.
Candidate: please use the <UNK> <UNK> <UNK>
Reference: is this notification ever removed? if not, will this have the potential to affect other tests?
Candidate: you could use the test for the expectations
Reference: would be better to make this test class based on the @runwith(springjunit4classrunner.class) anyway: less context loading - better performance! yes, the outbound-adapter-parser.xml should be renamed to the cassandraoutboundadapterparsertests-context.xml to be
Candidate: why do we need to permission?
Reference: this should call authorization(list<authinfo> authinfos). e.g.  return authorization(lists.newarraylist(new authinfo(scheme, (auth != null) ? arrays.copyof(auth, auth.length) : null)));
Candidate: i confusion: <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: watch out the naming: timer/threshold, getios/getstreammapping
Candidate: why do we need need to use <UNK> here?
Reference: what if the application name is an empty string?
Candidate: should we throw an exception here instead of returning an error?
Reference: but in this case, the uninstall part will be executed only if the script part succeeds, right? if script fails, there won't be any uninstallation...
Candidate: why do we need to use the here?
Reference: would you mind declaring two new constants default_read_timeout = 80*1000 and default_connection_timeout = 30*1000 and using the named constants here?
Candidate: this should be <UNK>
Reference: the removal here of public breaks the namegenerator module - generally the headlessenvironment is available for other things to use, an ide might just not think it is in-use if
Candidate: why do we need to permission?
Reference: again naming
Candidate: i don't think we need to check if the is is the
Reference: i feel like there should be a better way to build these strings. maybe there should be a static method in every interface that takes a bool and returns the
Candidate: if oldvalue != null && <UNK> != null) { continue; }
Reference: nit: expected value should be the first argument in assertequals.
Candidate: please use <UNK>
Reference: it appears appendtime now simply truncates at micro precision. that would seem to mean that nanos += 1000; would be sufficient here.
Candidate: i don't think we need to check if the is is the
Reference: should this is iskotlinandroid?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please catch (illegalparameterexception e) directly (same in other methods)
Candidate: why do we need to use @test(expected = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: will this ever be true anymore?
Candidate: <UNK> *= 2;
Reference: same here - this would be good to assert that the explain plan looks as expected once those changes are made.
Candidate: why do we need this?
Reference: why did you choose 9999? that's a valid pid.
Candidate: i don't understand this matters, if we matters, but we don't need to do we need need to do we need need to do we need need to do the
Reference: can start the search at nul: cmd.indexof("\0\0", nul)
Candidate: if <UNK> != null && <UNK> != null) { <UNK> }
Reference: instead of having to do this, should line 248 call tcmf.createclusteredcachemanager instead of addclusterenabledcachemanager? this avoids the leak altogether.
Candidate: why do we need the <UNK> here?
Reference: it was written in lambda expression? any reason why you change it?
Candidate: do we need the synchronized redundant? redundant? redundant? redundant?
Reference: if we removed the ambiguity, this can be reverted
Candidate: ntc
Reference: this default case could be merged with the 3 known claims above (which are dates as well), or rephrasing, this could be deleted: java case publicclaims.expires_at: case publicclaims.issued_at: case publicclaims.not_before:
Candidate: <UNK> *= 2;
Reference: please also set invoicedetailentity.ad_org_id here
Candidate: why do we need to use the <UNK> here?
Reference: use oseewebapplicationexception
Candidate: why do we need the <UNK> here?
Reference: please abstract index2chrom to a class, this is a bit odd
Candidate: this should be the <UNK>
Reference: we can remove this
Candidate: should this be <UNK>
Reference: connection leak, needs to be closed. instead use the non-static version test_util.getzookeeperwatcher()... that is automatically closed with htu teardown.
Candidate: should we use the <UNK> here?
Reference: why have you made this public?
Candidate: i don't understand if you matters, this matters, if you matters, but if the volume creation, has explicitly) explicitly)
Reference: should we pull this string into a constant?
Candidate: we should need to log the exception here and the the exception if we is software software software software software software software software software software software software software software software
Reference: do we need all of these extra constructors?
Candidate: why do we need need to be <UNK> here?
Reference: i think this is in-correct. don't we want to use getidletcpconnectiontimeout ?
Candidate: please use <UNK>
Reference: only one uses intvalue(). let's remove it.
Candidate: can we use <UNK> to use the enum?
Reference: why not check for null?
Candidate: unnecessary check for <UNK>
Reference: you do not use the return value here (which should be complained by our qa tools). and you instantiate a bytearrayoutputstream each time this method is invoked. better use an
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this should just be " + rules.select(quantity)
Candidate: why do we need to use <UNK> here?
Reference: why?
Candidate: why do we need a <UNK>
Reference: compared to the previous use of compareandset(), i think this block is much easier to understand, so let's keep it as is here.
Candidate: should this be <UNK>
Reference: suggestion: i doubt we can have a null set since we initialize this with new set on fullentityovfdata. but i guess that since we also let it be initialized with
Candidate: you can do we need to <UNK> the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: i see you making this pattern several places in the code to loop through all the states. it seems really inefficient to me. is there a reason we can't just
Candidate: <UNK> *= 2;
Reference: wouldn't you want the conditions check prior to assignments?
Candidate: please import?
Reference: nit: is it necessary to do this only if the networkagent has ever connected? or can we do it all the time?
Candidate: i don't understand why, but it matters, but if you do, but it is be the <UNK> <UNK>
Reference: nitpick: space
Candidate: should this be <UNK>
Reference: this approach would scan through all aggregations and sum up the retained count every time it's fed data. as an alternative, we could use a system similar to the way
Candidate: why do we need need to the <UNK> here?
Reference: at least on the mac with a retina display, the last line is not included in the rectangle. maybe this is the reason: isn't this is the top of the
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but i don't understand why,
Reference: shouldn't these 3 removexxx be in the same transaction?
Candidate: i don't think we need to check for the <UNK>
Reference: why do you need declaration of this variable here?
Candidate: the syserr should be be <UNK>
Reference: the "remove" method is not part of the interface, so the client will never be able to invoke it, so there is no need to prepare a nice response for
Candidate: should this be null? if we { return; } } }
Reference: please remove alias setting (should be encapsulated in addmanageddevice
Candidate: why do we need need to be the <UNK> <UNK>
Reference: move this block into the if (format) case.
Candidate: can you use <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: 3 is a magic number. i assume it is due to the following: <<< outputbuffer.putint(systemmetadatarelativeoffset); outputbuffer.putint(usermetadatarelativeoffset); outputbuffer.putint(datarelativeoffset); ideally 3 is iether a method call or a constant.
Candidate: this should be the <UNK>
Reference: new hashmap<string,object>(0) or collections.<string, object>emptymap() if immutable
Candidate: why do we need the <UNK> here?
Reference: propose to put for (map ...) into if clause in current implementation log.trace will be not executed
Candidate: please remove the <UNK>
Reference: similar to above, this layout comparison would fail if there is transformation. probably want getbaselayout
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: is that a good enough debug print? you're not really printing the vms you have
Candidate: you can use <UNK> <UNK> <UNK>
Reference: rename to image
Candidate: why do we need the <UNK> here?
Reference: likewise doesn't need the if check.
Candidate: check if <UNK> == null) { return <UNK> } else { if <UNK> == null) { return <UNK> }
Reference: better handle numberparsingexceptions here?
Candidate: i don't think we need to throw an exception if the exception is skipped, throw an exception, it will throw an exception if invoked?
Reference: should we use removecacheditem here?
Candidate: please use <UNK> <UNK> <UNK>
Reference: please use time_format instead of "hh:mm:ss"
Candidate: if case case case case in case case case case case case case case case case case case case case case case case case case case case case case case
Reference: just to make sure the volume is at maximum, since you removed this line: <link_0> suggestion simpleexoplayer.setvolume(ismuted ? 0 : 1);
Candidate: why do we need to use <UNK> here?
Reference: remove this line
Candidate: the syserr should be the <UNK> <UNK>
Reference: neither -> either
Candidate: what is there is no cluster guide of the cluster guide of the cluster guide of cross again?
Reference: suggestion try { prrevision.validatemergehash(repo); } catch (abortexception e) { fail("validation should succeed, but: " + e.getmessage()) }  if the validation fails the way it is written it will be
Candidate: why do we need need to the <UNK> here?
Reference: this is the core of the fix, isn't it ?
Candidate: if wrongepochexception wrongepochexception wrongepochexception is filechannel catching the filechannel filechannel wrongepochexception filechannel catching filechannel filechannel catching the filechannel wrongepochexception filechannel wrongepochexception filechannel wrongepochexception filechannel wrongepochexception filechannel wrongepochexception filechannel wrongepochexception wrongepochexception
Reference: this should not be necessary if we set linkedartifactnamesuffix in cclibrary
Candidate: why do we need the <UNK> here?
Reference: loop can be replaced by passing the collection to ctor: suggestion list<string> referencepoints = new arraylist<>(idtoreferencepointmapping.keyset());
Candidate: can be simplified to <UNK> <UNK> ?
Reference: is it possible for this listener to return null?
Candidate: please use syserr
Reference: i would move this logic to get an enum from an int to a static method in the enum, similar to the method fromvalue here: <link_0> that way you could
Candidate: if we is the software <UNK> software <UNK> && <UNK> { <UNK> } else { if <UNK> { <UNK> } else { if <UNK> { <UNK> }
Reference: final result can be written directly (without computing the intermediary values: return y1 \* math.pow(y2 / y1, (value - x1) \* xdiffinv); (remove lines 55 and 56). this should save
Candidate: why do we need need to the <UNK> here?
Reference: @erimerturk we should keep the catch for interruptedexception separate in my opinion. in that case i believe the thread should stop.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this looks like it's fixing a bug in datasketches, is that right?
Candidate: why do we need need to evict the <UNK> here?
Reference: why don't you account for the size of hivetypename
Candidate: can be replaced with <UNK> ?
Reference: we can replace the iteration with labels = collections.unmodifiableset(new hashset<string>(parameters.labels));
Candidate: the syserr should be be <UNK>
Reference: should we expect a more specific exception here?
Candidate: should be be <UNK>
Reference: given you only check the bloom filter for brands it might be good to not updated it with the ids of series and episodes. reduces the chance of a false
Candidate: can we move this to the <UNK> <UNK>
Reference: nitpick: can be simplified to script.getcommands().stream().anymatch(cmd -> cmd instanceof descriptiorcommand);
Candidate: why do we need need to the the <UNK> <UNK> the <UNK>
Reference: are you sure that this "name" pattern is the same as the name pattern for groups? because it seems to be used for user name in this class.
Candidate: @unyoungwax, do we need need to check the <UNK> the <UNK> is meaningless that will do.
Reference: no need to do this, just this.url is enough
Candidate: this should throw an exception exception instead of exception
Reference: we need to review a message which makes sense for someone who doesn't know the db structures. and match it with a troubleshooting doc stack trace.
Candidate: should we be schedule() here?
Reference: could be simplified by returning immediately if null - would save having to indent the whole block.
Candidate: this should be null if (state != null && <UNK> { <UNK> }
Reference: same here with the lock and leaderlistener.
Candidate: should we throw an exception?
Reference: hrm, i think there are more whitespaces in this method then there needs be?
Candidate: rename <UNK>
Reference: with those 2 lines, you'll instantiate a new filterinputstream whenever this method is asked. instead, the generated filtered inputstream must be stored as a field and returned if already existing.
Candidate: why do we need the <UNK> here?
Reference: take care: you should _copy_ every single field you set in the binder. to avoid having to manually keep them up to date, better use the [httputils#copy](<link_0> method.
Candidate: why do we need the <UNK> here?
Reference: @reggie7 was there bugs in the impl? if this is updating the test to work w/ jdk11, why are there a bunch of changes to the impl itself? changing the
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: static import
Candidate: wdyt about catching the exception if the exception is not found.
Reference: if the profile isn't set you'll have npe here.
Candidate: this should be <UNK> <UNK>
Reference: i don't think you actually need this flag - you are cancelling the job anyhow, so no further calls will be done.
Candidate: if (actual == null) { return null; }
Reference: will be easier with a generic parseblock() method, we don't need to parse the packet header, etc.
Candidate: please import?
Reference: you could simplify this using the ternary: this.clustercriterias = stringutils.isblank(clustercriterias) ? empty_json_aray : clustercriterias;
Candidate: the syserr should be be <UNK>
Reference: mexecutor.shutdown() ?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: we need to fix this
Candidate: can we use the <UNK> here?
Reference: change to fine level as if this ever happened it could happen a lot and fill logs
Candidate: why do we need to use <UNK> here?
Reference: please add a case like { ? = call pack_getvalue}
Candidate: you don't need to use the <UNK>
Reference: problem here: getcontentresolver() returns a null value when in context of syncadapter. it's necessary to check that the returned value is not null and, otherwise, call instead getcontentproviderclient(). have a
Candidate: should we throw an exception here?
Reference: optional ... sorry to repeat myself.. just pointing out occurrences.
Candidate: if you is a <UNK> of <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: what happens if 2 aspects have the same name?
Candidate: can we use the "?" instead of <UNK>
Reference: this.joinaddressindex seems to mean "last processed position", but you're existing here with joinaddressindex (the loop index variable) being not processed. am i missing something?
Candidate: <UNK> *= 2;
Reference: i think we should simply supply a default header in the beginning.
Candidate: the syserr should be be <UNK>
Reference: i may be mistaken, but i think this will result in a desired row group size of 128 bytes, not 128 megabytes. i would suggest using the parquetwriter.default_block_size constant instead
Candidate: i don't think we need to check the if the is is the
Reference: wrong filter -- it must be "another target creature", not "you don't control". see example of fallofthehammer with target tags usage for same ability (but please, test it after changes
Candidate: rename to iu
Reference: break before the second ||
Candidate: nitpicky <UNK>
Reference: i like that you move the checks for feature toggles to their own private method, it removes clutter. however, i would suggest to be more precise in the naming: you're
Candidate: the "used"
Reference: what if the above command fails?
Candidate: should we be <UNK> here?
Reference: to clarify, + 1 is for the local operation, right?
Candidate: should we be the getconnection here?
Reference: i think you should use assertions from junit/assertj.
Candidate: <UNK> + <UNK> + <UNK> + <UNK> + ", <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: else is redundant.
Candidate: this should be the <UNK>
Reference: adding an assert here might stop codacy from complaining
Candidate: should this be <UNK>
Reference: it's a minor detail, but three of these four checks are faster than issupertypeof and isabstract actually weeds out many.
Candidate: why do we need the <UNK> here?
Reference: how about :  if () { } else if (){ } else { } return null;
Candidate: this should be the <UNK>
Reference: debug, not warn?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: here task for each cache group can be executed by different threads. let's use single-threaded execution here.
Candidate: <UNK> *= 2;
Reference: i think the name "arrivaltimeus" is a little confusing.
Candidate: why do we need to the the payload?
Reference: i assume you're scanning all supertypes because the model may implement different interfaces? what about if the model inherits from an ancestor that implements realmmodel or overrides realmobject? this should
Candidate: i don't think we need to check for the <UNK>
Reference: why do you have this construct here? why are you not printing a stack trace on an ioexception? isn't there a way to hand over the exception to junit?
Candidate: what happens if the is is invalid?
Reference: applicationid and applicationversion might both be null. or one of them. we need to handle this here
Candidate: can be simplified to <UNK>
Reference: this is a bug, we need to pass requestoptions instead of options since you are oof, i will fix it in your branch and push it.
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: im console log des builds der jenkins instanz!  j.assertlogcontains("id checkstyle is already used by another action: io.jenkins.plugins.analysis.core.views.resultaction for checkstyle", build)
Candidate: why do we need to mock here?
Reference: when can this happen in practice?
Candidate: typo: -> <UNK>
Reference: as we log the metrics periodically, i think logging this message should be enough with fine (or below) level.
Candidate: rename to <UNK> <UNK> <UNK>
Reference: typo: nonexistent ??
Candidate: i don't understand this matters, this matters, this matters, but you don't need to do we need need to use the <UNK> <UNK> <UNK>
Reference: should the variable name then remain as messagebuilder?
Candidate: use <UNK> <UNK>
Reference: ha... thanks so much! i have not been following this section of the code so i was not aware of what changes have been made recently.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: @tarilabs you can use kieserverassert.assertsuccess(serviceresponse<?> response) here - <link_0>
Candidate: you need to assert that the the actual values are not the output.
Reference: it's bad to use a common port as 8080...
Candidate: why do we need the <UNK> here?
Reference: deleting donor(228l), and then testing by searching for donor(000233)? also, a lot of donor numbers and ids are using characters [a-z] in them, but donor number and donor id formats
Candidate: please use <UNK>
Reference: you know what it is about
Candidate: we should mutualize checkstyle from checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle
Reference: something wrong with indentation. use 4 spaces.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand this matters, if we matters, but i don't understand
Reference: good call in checking for size > 0, and having it assigned to a var so it's not evaluated every time. thank you!
Candidate: can we use <UNK> <UNK> <UNK>
Reference: rename to keyevent or ignoredkeykevent
Candidate: i don't think we need to check for the <UNK>
Reference: any chances to see consumed messages and verify their headers for that integrationmessageheaderaccessor.acknowledgment_callback? and probably after pending verification call the ack and see if there is no pending afterward left.
Candidate: i don't think we need to tear to the <UNK> <UNK>
Reference: this conditional is probably not necessary, even from a performance point of view. the meaning might be clearer with only the put() call and no conditional.
Candidate: why do we need to enummap <UNK> <UNK> <UNK>
Reference: why are 38,39 lines the same?
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: what is the point of putting the application mode in the session? anywhere we would read that information can't we simply read the configuration?
Candidate: i don't think this is the be the the <UNK> is the
Reference: if wanting to express the real count of the children with the child_count constant, rather use intstream.rangeclosed(1, child_count).boxed().collect(tolist())
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: @fanifieiev let's put this in a constant.
Candidate: @exper0 remove the format
Reference: should we swallow typo-case without even issue a warning? delete email method above doesn't really matter, because if a mail doesn't exist, all is fine. here someone rellies on this
Candidate: why do we need the <UNK> here?
Reference: in ceramics, i made [a helper](<link_0> to get a list from a enumobject. might be a little cleaner than the loops.
Candidate: why do we need to the <UNK> here?
Reference: unless you want to allow <null> values, use the primitive boolean instead of the java.lang.boolean object.
Candidate: should this be <UNK>
Reference: wouldn't setting this to false cause a correctness issue? getblobinfo relies on getting and returning the blobproperties of the metadata chunk. so shouldn't this be passedinblobproperties.isencrypted()?
Candidate: you don't need to use <UNK> <UNK>
Reference: i think this method doesn't work properly, please follow steps below: - log as usera - open pricing loans table, append row / change some data - keep the table
Candidate: i don't think we need to check if the is is the
Reference: i think returning null is problematic because it might cause an npe in backendsnapshots - disks/cdroms/nics - resource, which invoke this method and reference the returned vm. also, i wonder
Candidate: this readasstring(...) instead of <UNK>
Reference: keep own check
Candidate: this should be the islocal as well?
Reference: if we confirm that special characters are not supported in catalog/schema names, we should definitely simplify this as this is hard to understand.
Candidate: why do we need the <UNK> here?
Reference: i'd rename other with current, or something like it, to make it more clear that we're overriding. i'd also log info or warn when the converter didn't override the current
Candidate: should we use the <UNK> here?
Reference: instead of setting the field to null and handling that case in all of the methods, it would be easier to just have a private class for the empty marker
Candidate: this should be <UNK>
Reference: why do you need to change this?
Candidate: why do we need this tear to the <UNK>
Reference: maybe suggestion list<action> actions = new vector<>(getpersistedactions());  for clarity.
Candidate: please use <UNK>
Reference: same fix as the other array usage.
Candidate: if <UNK> { <UNK> }?
Reference: why add this whitespace! could we remove it?
Candidate: we should need to use the <UNK> of the <UNK>
Reference: canexecute() does not check for this case but relies on candisconnect(getdata()...) to make the decision. it would be consistent to do the same here and delegate that case to disconnect().
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: the construction of the mavenbuild object is mostly the same for the 4 new projects. it should be factorized.
Candidate: why do we need the <UNK> here?
Reference: there is a high potential of npe with concatenated calls.
Candidate: should this be null?
Reference: since you are touching this line, can you change (long)(-1) to -1l?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: does this receiver gets close() , so that builder close the connection.
Candidate: why do we need snapshotid here?
Reference: @grainier can we get the meta data size calculation out of the for loop so that the if condition and retrieval of meta data size does not repeat for each
Candidate: can we use the <UNK> here?
Reference: why not call makeremotechanges?
Candidate: why do we need the <UNK> here?
Reference: @bgevam just inline null
Candidate: i don't think we need to clean up with the param.
Reference: make it more functional and return here a data structure that contains three module classes and then if you remove those three module fields this object will be completely stateless.
Candidate: should we use the <UNK> here?
Reference: it's very nice that you used the new logging approach to all of the tests. i think we can use it also here. what do you think?
Candidate: rename <UNK>
Reference: i believe you should return a 404 in this case. if you go to a private github repo that you don't have permissions to, you get a 404, not an
Candidate: the syserr should be be <UNK>
Reference: i think you can use the 2-parameter method instead of passing an empty map.
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: do this outside the if
Candidate: should we be <UNK> here? if we { return; } <UNK> } } } }
Reference: interesting: is there a reason we wrote this as opposed to just nanos.get();? the memory semantics are different (this does a volatile *write* as well), though i don't understand why
Candidate: this should be <UNK>
Reference: unneeded surrounding lines for line 206.
Candidate: why do we need to the the sizes of the sizes
Reference: worth wrapping this call, the response might be big.
Candidate: why do we need to use <UNK> here?
Reference: shouldn't this be a field so we don't have to create one each time
Candidate: shouldn't we create a field for each time
Reference: please use, networkcommonutils.isvlan
Candidate: please extract the networkname as part of the nic as part of dao, as part of dao, as part of dao, as part of <UNK>
Reference: on end_date, discount factor should be 1.
Candidate: why do we need to use <UNK> here?
Reference: the queuenames must be wrapped to arrays.aslist(): ![array_in_sout](<link_0>
Candidate: should we throw an exception here?
Reference: code congruity with upstream libanki is important, so i'd prefer if you didn't do this. <link_0>
Candidate: why do we need the <UNK> here?
Reference: so this means we are not doing any validation on requests with a "path:" "email_collection_mode"?
Candidate: i don't think we need to throw an exception
Reference: @oak experts: using readoperation here (and in 2 new methods below) which only does an is-session-alive check (which we want). this is not a write as it does not change
Candidate: <UNK> <UNK> <UNK>
Reference: filename here should actually be the derivative directory, which i don't think is currently being created. you should create a subfolder in the tmpdir for that.
Candidate: why do we need this?
Reference: thread.interrupted resets its state (<link_0>, so this should include 'else { break; }'.
Candidate: i don't understand why, but i think why, but it is be the <UNK> <UNK>
Reference: i don't see these changes in hot-fix branch. can you provide context on why are we changing this to exception from throwable?
Candidate: please use fail(); in <UNK>
Reference: why not use harness#deploycontrib directly ?
Candidate: why do we need need to the <UNK> here?
Reference: should we only do this for send only folders?
Candidate: why do we need to permission?
Reference: can it be just a regular for ?
Candidate: i don't understand why, but it matters, what about the if the is is empty?
Reference: prefs.hideemptypane() if you look elsewhere in this code e.g. onlinenumbers at line 292 above you will see we "wash" the value through the prefs object and get back the value
Candidate: i don't think we need to check for the <UNK>
Reference: can you add a timber log line here.
Candidate: why do we need permission?
Reference: this if does not seem necessary. totalsessionscompleted is not used to prevent new sessions when maxsessionsallowed is reached in getnewsession
Candidate: if we is the software <UNK> software error?
Reference: this test implicitly relies on timing, and hence it may be flaky. otoh 10-second timeout should be enough
Candidate: please use <UNK> <UNK> <UNK>
Reference: defaultid+".default.layer"
Candidate: why do we need to the <UNK> here?
Reference: can we assert the value instead of assert size?
Candidate: why do we need to <UNK> eq here?
Reference: url is used only once, so i guess we could use it inline i.e. driver.getcurrenturl().contains()
Candidate: please remove the method("post")
Reference: getusage(...) expects a localization key.
Candidate: please use <UNK>
Reference: what about this else case. here also scheduling fails but we are not showing any error?.
Candidate: i don't think we need to do we need to check for the <UNK>
Reference: not required if nothing is happening
Candidate: why do we need to check the <UNK> <UNK> <UNK> ?
Reference: and sessionidcol
Candidate: can we use the <UNK> here?
Reference: @pynicolas maybe the failing message could be added as a parameter to give more info about this condition ? wdyt ? something like "instanciating a separatedlist with inconsistent number of
Candidate: sonar rules. no brackets around single line blocks
Reference: we should not catch the specific exception at util class. catch it in api class and send the response code accordingly.
Candidate: do we need to <UNK> the <UNK>
Reference: method access specifier plz.
Candidate: this piece of this piece of code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code, code,
Reference: let's check the parameter for null and test this case via nullpointertester.
Candidate: please use <UNK>
Reference: withmillisofsecond(0) could be done here.
Candidate: this should be setemptyelement().
Reference: try-with-resources?
Candidate: i don't think we need to re-throw the exception in the exception if we is the software exception we don't want to throw an exception
Reference: all enablex and disablex in this class could return boolean for better understanding of the api and their respective invocations.
Candidate: why do we need to use assertj's here?
Reference: this might not work as well if mainactivity wasn't singletask. i know the api isn't great but have you considered specifying the parentactivityname and updating onoptionsitemselected()? <link_0> <link_1>
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: why was this test removed?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: shame the constructor can't throw exceptions direct. catch only the exception's known to be raised, and don't convert rtes or, especially, errors.
Candidate: we should need to use the <UNK> <UNK>
Reference: p can be pendingmove.
Candidate: this should be setemptyelement().
Reference: this seems like logic that should be split out into it's own function.
Candidate: rename <UNK> <UNK>
Reference: i would put the super.candoaction() at the beginning of the cda because the implementation of initializevds() already uses the storage pool by id (getstoragepool()), so i think it will fail
Candidate: please remove the <UNK>
Reference: it would be nice if you could also log the total elapsed time since the script started. that makes it easier to estimate how long the conversion will take.
Candidate: why do we need to check on the username?
Reference: can a result be null? (i.e. do we regularly need to consider whether source is attached)?
Candidate: why do we need to use the <UNK> here?
Reference: is this the only type possible? what about reflection?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you could inline the variable isconnected.
Candidate: why do we need to check for the getcredentials
Reference: i bet you love next(null) right? :p
Candidate: i don't understand this matters, this matters, this matters, that this is is the
Reference: max ? this could be bad if there are a lot of these endpoints. i wonder if we should really be blocking here; smartlifecycle has stop with callback.
Candidate: should we throw an exception?
Reference: do not squash here, propagate as ioexception
Candidate: why do we want to use the exception here?
Reference: do we want to state no value initialized?
Candidate: should this be <UNK>
Reference: how about wikipediaapp.getinstance() instead?
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: ![minor](<link_1> 'severity: minor') immediately return this expression instead of assigning it to the temporary variable "user". [![rule](<link_0>](<link_2>
Candidate: please import?
Reference: this should be r.attr.multi_select_background_color, to account for dark/black mode.
Candidate: can we move this into the constructor?
Reference: there is a chance that cluster will be null at this point which would cause npe.
Candidate: can be replaced by: <UNK> = <UNK> ? <UNK> : <UNK> ? <UNK> : <UNK> : <UNK> : null;
Reference: the way backgroundlocationhelper is being used here really reminds me of the ["delegate" pattern](<link_0> would it be too nerdy to call it a backgroundlocationdelegate instead? on that, it could be
Candidate: please use <UNK> <UNK> <UNK> expected)
Reference: new duration(1, second)
Candidate: this should be the <UNK>
Reference: may be, i wrong, but on my first impression: if the parameter message is a rst for a original message, the soruce/destination is already exchanged. > emptymessage.newrst(message); would exchange source/destination
Candidate: we should need to do we need to do we need to do we need need to do we need to do we need to do we need to the
Reference: you should check that you are not yet in an entity.
Candidate: should this be <UNK>
Reference: dataconstants please.
Candidate: this.key this.key this.key this.key this.key this.key this.key this.key this.key this.key
Reference: remove, nextdouble is in [0,1) range
Candidate: why do we need to use <UNK> here?
Reference: exception should be logged
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: does maven build output contain warning that there is switch without default section?
Candidate: i don't think we need to check if the is is the
Reference: the internet claims that "broadcast" is a single word
Candidate: i disagree by: <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { ... } <UNK> <UNK> <UNK> <UNK> { ... } <UNK> <UNK>
Reference: you could use streamcapturedevents.
Candidate: suggestion <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> rectangle <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> rectangle <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: iterating refandcountmap.entrieset() is more efficient. realmcachetype.values() allocates new array in every call, but refandcountmap.entrieset() caches returned object. and it can also avoid hash table lookup.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i would also mark the deletion of the temp file when jenkins exits with [zipfile.deleteonexit()](<link_0>
Candidate: what happens if the exception is the
Reference: nit: i haven't saw this. used in this code. is this new pattern?
Candidate: i think this should be the <UNK>
Reference: rename to container or sourcecontainer
Candidate: why do we need to <UNK> the <UNK> size?
Reference: this doesn't work, instead of removing /q? it removes /q and leaves the ? behind. i guess we need something along the lines of uri = uri.replacefirst("q\?", "#") or something
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: need to use parameterized logging instead of string concatenation.
Candidate: should we throw an exception here?
Reference: so these read/write methods for histories scare me a bit. could there be multiple knoxshells reading/writing at once? can we lock the file via the java nio methods? should these
Candidate: why do we need to use the here?
Reference: can these be initialized inline?
Candidate: do we need to catch <UNK> here
Reference: one of the constructors calls init() directly, so this could still create a thread at construction. or are we sure that one is never called from "fake traces"? i think
Candidate: please use <UNK> instead of repeating the <UNK>
Reference: i assume for apple pay this is going to be under six digits (because we don't have a full card number, just the last four digits) but i don't fully
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: can makeobservable call subscribeon before returning so that you do not have to repeat it everywhere?
Candidate: this should be <UNK>
Reference: you are still changing things that are unrelated to your change. 'assertthat(entries).hassize(3)' as it was before is better.
Candidate: please remove tabs
Reference: i think it's a little bit more than this. there shouldn't be any "+" concatenation. should all be .append() i already proposed to addressed this issue (hive-23540), but happy to
Candidate: the syserr should be be the
Reference: so parallellevel is 1 because aggregation is done client-side instead of pushed to the cluster, right? would be good to doc the thinking behind calculating the cost throughout.
Candidate: why do we need need to the <UNK> here?
Reference: add connector to the message. include catalog name?
Candidate: why do we need this?
Reference: should this be returning a string? i would think it would be desirable for it return hudson.util.secret like its internal type. @stephenc what are your thoughts?
Candidate: should this be the enum?
Reference: move these into a separate function.
Candidate: please move the collections collections collections collections collections of collections as collections collections as collections collections collections are collections collections collections are collections collections collections to collections collections collections collections
Reference: please stick to java convention for naming variables - first letter should be lower case. also this is another case where local variable is not needed just return it directly.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i see that updateparameters updates the command params and persist the command. i'd recommend to do the persistence here, i.e. out of the updateparameters method
Candidate: @unyoungwax, do we need to check for the <UNK>
Reference: do we need .publishon(schedulers.parallel()) here?
Candidate: should this be <UNK>
Reference: nit: sameas would be sufficient.
Candidate: why do we need to use the here?
Reference: a more readable alternative to this would have be: stringbuilder builder = new stringbuilder(getactivityid()); addwithhypen(builder, getactivityname()); addwithhypen(builder, getworkpackageid()); addwithhypen(builder, getname()); return builder.tostring(); where addwithhypen is: private void addwithhypen(builder, string value){
Candidate: should we be the <UNK> here?
Reference: then we should use a builder: java boundstatementbuilder statementbuilder = videosbyuser.boundstatementbuilder(userid).setpagesize(items_per_page); if (page != null) { statementbuilder.setpagingstate(bytes.fromhexstring(page)); } resultset rs = session.execute(statementbuilder.build());
Candidate: cant we trim the entries? if <UNK> { <UNK> } <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> }
Reference: can be removed altogether, since typemanager is just passed through. let mapblockencodingfactory and singlemapblockencodingfactory validate that
Candidate: why do we need need to the <UNK> here?
Reference: this is constant and can be extracted, should help with the nutty indentation going on here.
Candidate: i appid
Reference: yes!
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: maybe it'd be better to use ioutils.copy here as in <link_0> i forgot about it when i introduced this method.
Candidate: i don't think we need to throw an exception if invoked?
Reference: minor: the dbactivity != null clause in updatablestatus is redundant with the dbactivity != null in the if statement. you could simplify the whole thing to if (dbactivity != null
Candidate: i don't need to check for the <UNK>
Reference: avoid using system.out
Candidate: why related related related related related related related related related related related related related related related related related related related related related related related related related related related related related
Reference: condition is backwards again.
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: redundant variable name - just use "name"
Candidate: should this be <UNK>
Reference: use new hashset<>
Candidate: i don't think we need to check for the <UNK>
Reference: what is the plan for usage this method? from my point of view it must be like that:  id = savesubscription(subscriptiondata)
Candidate: should we be schedule() here?
Reference: i think you should strip the % sign only if present. what if gluster changes to return 90, instead of 90%?
Candidate: can be replaced with <UNK> ? <UNK> : 2; : <UNK> : <UNK> <UNK> <UNK> : 2;
Reference: name of operator: validator ? also rename variable accordingly.
Candidate: why do we need the <UNK> here?
Reference: if we allow for the unknown type we should probably store the actual name of the tag used and use it also in the equals method and the tostring method
Candidate: please use object.equals for the object.equals as well
Reference: why are we doing a list query when we are only expecting one result. if we use unique result we will not need to use get(0)
Candidate: please use <UNK>
Reference: maybe a log statement slipped through?
Candidate: this should be setemptyelement().
Reference: simplereportentry should _always_ use testidentifier.getlegacyreportingname() as name and testplan.flatmap(plan -> plan.getparent(testidentifier)).map(testidentifier::getlegacyreportingname) .orelse("<unrooted>") as source.
Candidate: why do we need to use <UNK> here?
Reference: same issue here, this breaks dependent-post-aggregators
Candidate: can you use the <UNK> <UNK>
Reference: this *must* be backwards compatible and also work with with old saved states that do not have that caret position.
Candidate: the syserr should be be the
Reference: we can use '==' to compare two constants
Candidate: can we make this private?
Reference: it would be clearer imo to have .anymatch indent on the newline, preferably inline with .concat() - i initially read this as only performing the anymatch on right, and was
Candidate: this should be <UNK>
Reference: are all these needed?
Candidate: should we use the exception here?
Reference: we've been following the format where the async apis call the async overloads, and the max overload api calls the pl. similarly, the sync apis call the sync overloads, and
Candidate: should we throw unsupportedoperationexception instead of returning null?
Reference: suggestion solverstatus previoussolverstatus = solverstatus.getandset(solving_active); if (previoussolverstatus != solverstatus.solving_scheduled) { // this job has been canceled before it started return problemfinder.apply(problemid); }
Candidate: i don't think we need to do we need to check whether the <UNK> is the <UNK>
Reference: i think we should log the next flush
Candidate: do we need to the <UNK> <UNK>
Reference: should this refer to a platform-relative constant?
Candidate: please use setemptyelement().
Reference: minor: we don't need this, as in line 827 it is already being done.
Candidate: why do we need need to the <UNK> here?
Reference: nit, add a space after the comma
Candidate: should we use the getconnection here?
Reference: shouldn't we test the return value of createwithprimarykeyfield()? how about  realmobjectschema objectschema = realmschema.createwithprimarykeyfield("foononnull", "pkfield", string.class, fieldattribute.required); assertsame(objectschema, realmschema.getschemaforclass("foononnull"));  ?
Candidate: should we throw an exception instead of returning null?
Reference: i realized this is just moved, but should this be synchronized to this as it is in the running state?
Candidate: if you is the the <UNK> costs the <UNK> costs the <UNK> is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: why not simply objects.hashcode(logentry)?
Candidate: use objects.hash()
Reference: the original line 949 is correct. if path is null, filesystem.access should throw illegalargumentexception and that's what calling makequalified(path) will do.
Candidate: why do we need to use the here?
Reference: i'd make this a throw new nullpointerexception("metric == null"); instead
Candidate: can we use <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: they're milliseconds now ;). please check other locations in the change too.
Candidate: i don't think this should be the <UNK> <UNK> the main thread should be the the main loop will be the
Reference: what about characters from other languages like chinese or japanese? or some special french characters?
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: not needed
Candidate: should we assert that the username?
Reference: i think the typical case is that the metricslabel is not empty. so, let's put that in the first part of the "if" block and let's handle the metricsmode.isempty() case
Candidate: check for null check for null check.
Reference: uue dicom_client constant if possible "+" + dicom_client
Candidate: use <UNK>
Reference: both cursor.getoffset() and cursor.getpartition() are not marked as @nullable. why have you decided to check it for null here?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: include portletclass in the exception message
Candidate: why do we need the <UNK> here?
Reference: @1m2c3t4, thanks for the pr! can you please format the code in order to follow cloudstack code conventions [1]? from:  if (obj == null) return false;  to: 
Candidate: this should be the islocal as well?
Reference: for consistency reason with the prev line please use "validatevm" (small "m")
Candidate: why do we need this check?
Reference: technically you can express this as two filters for slightly easier readability
Candidate: should we use the <UNK> here?
Reference: use lambda here instead of anonymous ??
Candidate: why do we need to permission?
Reference: would prefer this to happen in serveradded rather than the event listener.
Candidate: why do we need to here?
Reference: suggest you return an optional<string> since you can return a null. your code where you use this function doesn't check for a null, which makes an argument for why you
Candidate: why do we want to re-throw the exception here?
Reference: please change it to internally use task.getscheduleaslong(). otherwise you need to implement same supplementary methods as in task object, including changes in serializer. same goes for getstarttime and getendtime().
Candidate: this should be <UNK> <UNK>
Reference: we don't need to compute compactiontime at the end of this method anymore.
Candidate: should we throw an exception if block?
Reference: can we use string.format for readability? applicable at other parts too
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: public synchronized void notify(final list<url> urls)
Candidate: why do we need the exception here?
Reference: nit final, applies to next line too.
Candidate: rename <UNK> <UNK> <UNK> <UNK>
Reference: i think a more comprehensive test would be to first check that the number/size in columnmetalist matches the expected final size. then check each individual column that is there, if
Candidate: why do we need to mock <UNK> here?
Reference: what about using of "seleniumwebdriverhelper#getaction()" method?
Candidate: i don't understand this matters, this matters, but you can use the <UNK> <UNK> <UNK>
Reference: please simplify boolean expressions above. here ignoredstatic and ignoredfinal contain isstatic and isfinal in their initialization.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: can you somehow also check that it actually hasn't tried to connect?
Candidate: why do we need to mock <UNK> here?
Reference: you should use not_include_defaults
Candidate: <UNK> => readattributeoption.not_include_defaults
Reference: would recommend checking if contract is an instance of reactivec and only warp of not
Candidate: should be setemptyelement().
Reference: you probably want to add adaggregationid into here as well.
Candidate: should we throw an exception here instead of an error?
Reference: include version in message.
Candidate: why do we need to call <UNK> here?
Reference: this at least needs to check if the chunk is loaded. unloaded block = inactive block.
Candidate: this should be <UNK>
Reference: string.format("kafkaindextaskclient-%s-%%d", datasource) should work too, although changing is unnecessary
Candidate: typo: <UNK> -> getcredentials
Reference: what about using: java string ext = filenameutils.getextension(zipentry.getname).tolowercase(); boolean issupported = supported_extensions.contains(ext);
Candidate: why do we need the <UNK> here?
Reference: this class seems version-agnostic, but you hardcode version 2.4 here. perhaps this should be a parameter to getnewconnector?
Candidate: why do we need the <UNK> here?
Reference: ### option b change this from setting currentimage to the new image, just set the _texture_ to the new texture. if you wanted to get really fancy you could also
Candidate: the syserr should be be <UNK>
Reference: i need to spend a bit more time understanding the interactions between exceptions and bugsnagexception but so far its a little confusing how bugsnagexception now represents an array rather than
Candidate: should this be <UNK>
Reference: please return raw value, on end-user code you can wrap it simply with booleanutils null in return value means that there is no value. no value != false from req/rsp
Candidate: should this be null?
Reference: shouldn't it be after eventhandle() below?
Candidate: i don't think this <UNK> is the <UNK> itemstack.
Reference: can this cause memory overflow? don't we need to limit buffer?
Candidate: should we be <UNK> to <UNK> <UNK> ?
Reference: should it just show that the target is invalid?
Candidate: this should be <UNK>
Reference: not necessary?
Candidate: use map<> 422
Reference: can this be a more specific activemq exception? even if its just activemqexception
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: for my understanding, does that mean hadoop api requires target path to exists before call to concat?
Candidate: i don't understand what if you do, can we move this to bit?
Reference: ah yes, sure. "protected" then maybe. the public constructor together with the default_instance constant made me stumble.
Candidate: should this be <UNK>
Reference: s/resturning/returning s/staring/starting ???
Candidate: should this be the exception here?
Reference: as discussed, please file an issue for further investigation on this. this is good for now to release this as this issue was already noticed in smoke tests and would
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper userreportingsettingshelper array.
Reference: is this not an unstable state and calls for manual investigation ?
Candidate: i don't understand this matters, what about the if you want to do we want to trim the lock on the request?
Reference: use constant (also later in this file)
Candidate: if the != null && <UNK> != 0)" <UNK> != 0)"
Reference: better to have variable name in the message: handlerclass can not be null
Candidate: please use <UNK>
Reference: don't use filereader; it doesn't handle encodings properly
Candidate: why do we need the <UNK> here?
Reference: isn't the test class that uses it in the same package?
Candidate: this should be injected, via: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: do this after setting the closed flag
Candidate: why do we need to use <UNK> here?
Reference: i used my powers to push a rewritten version of this method :-)
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: we're not guaranteed that this is an authheader, so maybe a better name is extraheader or something similar
Candidate: can be replaced with checkargument
Reference: to start client grid startclientgrid() should be called.
Candidate: why do we need need to here?
Reference: @artemkuzmenko extend from customeventrewardedvideo and override hasvideoavailable() instead of isready().
Candidate: this should be the <UNK>
Reference: same as for nio, lets set servercnxnclassctr to nettyservercnxn by default
Candidate: we should need to evict the to the the the udp stripe { <UNK> = <UNK> }
Reference: i would extract the code in the brackets into another protected method - "connectionclosed()", for instance. we can pass the reason of the closing as an attribute. overriding this method
Candidate: use <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: why not just: if (deleteemails.contains(preferredemail)) { throw new unloggedfailure(1, "--preferred-email and --delete-email options are mutually " + "exclusive for the same email address."); }
Candidate: if the == null) { <UNK> groupname = <UNK> } { <UNK> } else { if <UNK> { if <UNK> { <UNK> } else { if <UNK> { null) {
Reference: what would happen #cleartestusers threw an exception? will the ldap port kept open? may be the #stopldapservice need to go to a finally block.
Candidate: why do we need need to tear to the
Reference: @erdemedeiros let's remove all the system outs
Candidate: should this be private?
Reference: use assertequals here instead
Candidate: please remove the <UNK>
Reference: now there is missing space:)
Candidate: we should need to use the <UNK> <UNK> <UNK> <UNK>
Reference: could we change this to "/services/soap/u/" + apiversionstrings.getversionnumber(context)? it's easier to update api versions in 1 place.
Candidate: i don't think we need to catch the exception, so that you don't need need to do you need need to do we need need to do you need need
Reference: streamestimator should never be null right?
Candidate: should this be <UNK>
Reference: extract to constant
Candidate: should this be <UNK>
Reference: looks like it should be 1, not 0.
Candidate: why do we need to use the <UNK> here?
Reference: why adding the second condition?
Candidate: should we move this into the messages.properties method?
Reference: ifexists => ifexists
Candidate: please use <UNK> <UNK> <UNK>
Reference: unnecessary empty line. moved up one line it might work though.
Candidate: let's move the closer to the closer to the fbo closer to the fbo closer to the fbo closer to the fbo closer to the fbo closer to the fbo
Reference: i'd make that method take a health url as parameter, so it can be ~unit tested
Candidate: i don't think we need to do we need need to check the the <UNK> the <UNK> is the
Reference: probably best to throw an exception or create a failure if quantity, short quantity and long quantity are all not populated. silently setting quantity to 0 feels dangerous; it's reasonable
Candidate: please use <UNK> <UNK> <UNK>
Reference: please use trimquotes method in literalutils : <link_0>
Candidate: i don't need to <UNK> the <UNK>
Reference: there is no need to mock api calls to implement this test.
Candidate: why do we need the <UNK> here?
Reference: consider moving all setters of disktoupdate to a separate method for more readable code. perhaps it's also better to prepare the object disktoupdate before the transaction is opened and not
Candidate: you can use the <UNK> the the <UNK> of the <UNK>
Reference: this is where it gets tricky again. the client is not aware of the version of the cluster it is connected to. so it might happen that the function is
Candidate: the syserr should be be <UNK>
Reference: why not using valueof( updates[1] ).asobjectcopy() ?
Candidate: please use <UNK>
Reference: we should also preserve byte[] suggestion if (value instanceof number || value instanceof byte[]) {
Candidate: should we use the <UNK> here?
Reference: can we assume all jvm/os nodes in the cluster are clock synced? are the nodes configured to sync system clock from a central server regularly?
Candidate: why do we need the <UNK> here?
Reference: you should always pass in e as the cause (and thus make your exception types accept an optional cause).
Candidate: why do we need to use the <UNK> here?
Reference: pass the visualizerid to the above method. doing this will help avoid that method being moved to a place where the visualizerinstanceid is not set yet
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the macroexpander knows info and global nodes. why should treewalk care to call all this in the correct order. that knowledge about how to merge current,info,global should be hidden in
Candidate: <UNK> *= 2;
Reference: validation?
Candidate: please use <UNK>
Reference: you can extract value.name() to a local var.
Candidate: i think this should be the <UNK> <UNK> the <UNK> is the <UNK> <UNK> the <UNK> <UNK>
Reference: note that the type parameter is new, so you need to consider that this parameter might not exist for some old mentions: maybe it's handled later in the code?
Candidate: why do we need to clients?
Reference: why shuffle these? if you need to shuffle them can we use a set random seed? testutil.random_seed is a good option.
Candidate: should we be the <UNK> here?
Reference: its not hooked up to the okhttp client right now, how are you envisioning wiring in the metric registry?
Candidate: this should be the fixture.
Reference: note that file#touri() produces an invalid uri. convert to nio path first and then to uri.
Candidate: you can use assertj's via:  <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: please remove this duplicated line.
Candidate: this should be the <UNK>
Reference: can we have: private static final int vertical_padding = 1 and private static final int horizontal_padding = 2 instead of having magic 1's and 2's everywhere?
Candidate: please use <UNK> <UNK>
Reference: what do you think about moving this logic for "normalizing" urlpattern to jerseyenvironment#seturlpattern, if we expect users to invoke this method from the application class?
Candidate: we should need to use the in the
Reference: you should return an empty repositorydto here
Candidate: this is eating the exception in the eating the exception
Reference: channelids => channelnames
Candidate: can we use the getconnection here?
Reference: maybe list the set of known commands here?
Candidate: do we lines? lines?
Reference: missing braces here, checkstyle is failing.
Candidate: please use objects.isnull
Reference: please, check that runtime is not null
Candidate: please use <UNK>
Reference: i wonder (in the other patches too) if we really care what the absolute values are. wouldn't it be enough to check which one is higher?
Candidate: this should be the <UNK>
Reference: was this a mistake?
Candidate: this pagelogging
Reference: looks like there are a lot of these instances. please update all these to use booleanutils
Candidate: storagetype can be replaced by <UNK>
Reference: maybe it's just because i'm new to the *handler code, but it's not clear to me why one would handle exceptions locally vs. handle them from this handleexception method. i
Candidate: why do we need to here?
Reference: yes it should be 0 as it is already the case for the defaultrcpmatchengine registered in o.e.e.compare.rcp plugin. we could add a more detailed description to this match engine to
Candidate: why do we need need to be the <UNK> <UNK>
Reference: given/ execute/ assert
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK> <UNK>
Reference: can we do this atomically?
Candidate: should we use <UNK> <UNK>
Reference: could you remove final keywords ?
Candidate: should we throw an exception?
Reference: what about creating a separate put method with no environment parameter to avoid using null?
Candidate: i think (filter.getrelationshipdirection() == direction.incoming) {
Reference: why are you using the serializer that does the lexi encoding as the default here? the simple type encoders should be faster and potentially smaller.
Candidate: please use readasstring(...) instead of <UNK>
Reference: this should not be public - we don't want folks from outside the plugin calling this.
Candidate: s.a.
Reference: why are you not using the spring test framework here and just injecting all this stuff via annotation?
Candidate: i don't think we need to throw an exception?
Reference: extract properties.getrest() into a variable.
Candidate: should we use the <UNK> here?
Reference: socketchannel is configured in both sourcetcp/sinktcp and tcpeventhandler (i.e. send buffer size, etc) , would be better to have a single or at least not a duplicated place where the
Candidate: i don't think we need to close the getconnection in the eating the exception in the finally block.
Reference: shouldn't this be in else statement as right now i believe it will be executed twice in case security manager is enabled
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: probably better to use long.bytes.
Candidate: should we use the <UNK> here?
Reference: this should remain a .equals test. feature maps have some peculiar handling and i remember "==" being a problem on these
Candidate: please use <UNK> <UNK> <UNK>
Reference: tests should never do things like exit()
Candidate: why do we need this?
Reference: string logarg = log ? "true" : "false" feels more pythonic to me.
Candidate: please use <UNK> <UNK>
Reference: i think it's better to use try-with-resources here, it will also fix sonar complaining about it. i mean it should be smth like: java try (repository repo = egitutils.getrepository(project)) {
Candidate: why do we need need to tear down the <UNK>
Reference: maybe better to do indexsegment.getversion()? (if you still have that function).
Candidate: should this be the <UNK>
Reference: include in the message that we're ignoring the passed config and using 1.
Candidate: why do we need to use <UNK> here?
Reference: recommended to use >= instead of ==, even if there is a problem with the write lock, it will not cause not limit cache
Candidate: if we is software software software software software software exception software software software software software software software software software software software software software software software software software software software software
Reference: always use isempty() (negate when needed) instead. rationale: <link_0>
Candidate: can be simplified to: <UNK> <UNK> = <UNK> ? <UNK> : ""; <UNK> : ""; <UNK> : ""; <UNK> : ""; <UNK> : ""; <UNK> : ""; <UNK> : "";
Reference: the truncation handle is not an hsid, you should use txnego.txnidtostring() instead.
Candidate: can we use the <UNK> here?
Reference: these are all listenablefutures, you should be able to use futures.allaslist().get() for future -- the driver uses guava quite heavily, so most of their future stuff is listenable* and uses
Candidate: i disagree with the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of
Reference: i suppose to avoid double get of volatile field which will be cached in most of the cases better to do  fileid = bonsayfileid.get(); if (fileid == 0) {
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: we could still use suppresswarnings.class.getsimplename().equals(getannotationname()) instead of the strings ... but for readability improvement, this probably should go into a simple private method issupresswarnings().
Candidate: this should be repelaced on the sides of the previous line.
Reference: does every put needs the offset initialization?
Candidate: use this.key
Reference: @serranya same here. see above.
Candidate: @serranya use joinedtext
Reference: this seems a duplicate so it can be removed or (maybe better) changed to potential.
Candidate: why do we need to use <UNK> here?
Reference: this should be checked at construction time. don't create the object with an inconsistent state.
Candidate: this should be the <UNK>
Reference: this api looks much cleaner
Candidate: the syserr should be be the
Reference: (there is no action required; just thoughts when reading the code) i see. previously, if it's not variable, then it's constant and can be simply ignored. now, if it's not
Candidate: why do we need the <UNK> here?
Reference: else exit?
Candidate: shouldn't this be an exception here?
Reference: instanceof dataset is redundant -- why not just a single instanceof filesystemdataset check?
Candidate: this should be repelaced userreportingsettingshelper on the array.
Reference: what happens when there are multiple hadoopy shard specs?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: iog the node information there with these warning messages. i am guessing it would be useful for debugging in case of issues.
Candidate: do we need need to wait for the <UNK>
Reference: throughout the file you're calling the same file() constructors several times (even on the following lines), it would be better to store it in a variable
Candidate: why do we need this?
Reference: this kind of indirect testing could be dangerous. if the code changes for any reason your can end up with a test that tests nothing. prefer to use the assert
Candidate: why do we need to test eq here?
Reference: same with this, should also be debug
Candidate: why do we need the newline here?
Reference: you can use lambda syntax here to save some indentation
Candidate: this should be the <UNK> <UNK> the <UNK> <UNK> yes i don't think why, but it should be the why, but it will be good to read.
Reference: compunitcost -> compblockcost? or blockcompcost?
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: this seems like an unsafe type cast...
Candidate: why do we need the <UNK> here?
Reference: better solution for oshi, definitely, although i still think we should trap the null in the other code. but why use -1 here when we have a hres variable (already
Candidate: the syserr should be be called via:  public boolean <UNK> { <UNK> = <UNK> <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: making methods public for test purposes is not a good idea, esp. for azureblobfilesystem class. find alternative.
Candidate: this should be <UNK>
Reference: > blank [](start = 81, length = 5) blank. #closed
Candidate: <UNK> would be good to clutter
Reference: nit: 1 -> map.size()
Candidate: why do we need need to the <UNK> here?
Reference: this could be one line
Candidate: can you move this into a single commit?
Reference: value == null is not a real case ? you can rework your condition as it: castedvalue.values().stream().allmatch(objects::isnull)
Candidate: suggestion <UNK> <UNK> = 2;  <UNK> *= 2;
Reference: isn't this repeating the same feature id as the method ingesttimerangedata() - if so, thats dangerous, feature ids are meant to be unique
Candidate: why do we need the layout here?
Reference: we can move this variable to class level, because it is used by more than one method.
Candidate: should we be <UNK> here?
Reference: there should be a normalized() method you can call that avoids the lowercase string allocation.
Candidate: why do we need the <UNK> here?
Reference: any reason for not calling super?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this will be set to 0 from the json if grpcport is not set. you can check for 0 and put -1
Candidate: <UNK> *= 2;
Reference: this should be a debug, not a warn.
Candidate: can you use <UNK> <UNK>
Reference: getworld().getworld()? also, why not just pass in mintime to compare here?
Candidate: this this repelaced e1 && <UNK> { return false; }
Reference: why does the test constructor need to be public?
Candidate: please remove the <UNK>
Reference: one thing to be careful of here is that write access implies read access in our model.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: this is not so good - messages is an unmodified collection wrapping a linkedblockingqueue. contains has to iterate over the contents which is not good for a large group. we
Candidate: this should be the <UNK>
Reference: are we deliberately choosing to do nothing if the publisher is not found? that is, is this expected to happen for some requests? if not, i'd suggest we change this
Candidate: should we throw an exception instead of returning null?
Reference: use identityextractionfn when it is null that will reduce the amount of if/else imho
Candidate: can we use the builder here?
Reference: nit: it seems to me this should be just before the return at the end of the method.
Candidate: should we be schedule() here?
Reference: i think that neither backlog nor keepalive are useful for udp...
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: @benjilee if you pull my changes from master, you can just pass the componentname to isegment and use isegmentimpl.getsharetypefromcomponentname(componentname)
Candidate: can we use the <UNK> here?
Reference: not required. will be collected with the connector object.
Candidate: if (actual == null) { return; }
Reference: the comparators could be organized under one class in the core plugin: syscallcomparators.start_time syscallcomparators.end_time etc.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can just chain it right? dfscluster = new minidfscluster.builder(conf);
Candidate: why do we need to mock <UNK> here?
Reference: this only takes rtp into account, right? is this intentional?
Candidate: this should be the <UNK>
Reference: this appears unused.
Candidate: why do we need to use try-catch-fail here?
Reference: please use sanitizationhelper.sanitizeforcsv() here too.
Candidate: should we use <UNK> <UNK>
Reference: createpackagemapping was a better name
Candidate: please use syserr
Reference: rename to sash
Candidate: why do we need need to the <UNK> here?
Reference: suggestion: maybe introduce a noopqueryupdateemitter for this purpose?
Candidate: can we make this private?
Reference: thank you, i hate these traces. they are confusing as hell since they don't trace exit from all possible paths. based on what you did below, didn't you mean to
Candidate: should we be schedule() here?
Reference: suggestion namedarraylist.select(all, messages.githubscmnavigator_withinrepository(), namedarraylist
Candidate: can we use <UNK> <UNK> <UNK>
Reference: traditionally we use "type_resources" for logs related to app installs/updates/etc.
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: static import
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: collections.singleton(uri.fromfile(file))
Candidate: please import?
Reference: nit: don't really like this flagging concept in the same method. i would suggest putting the related code to the place where the flag is true.
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: the "else" seems unnecessary
Candidate: should this be the <UNK>
Reference: this validateandthrow(prefetch) , in other pr we were validating earlier when user is setting prefetch . should't this go there.
Candidate: report date date date date date date date date date date date date date date date date date date date date date date date date date date date date date
Reference: map<object, list<itestngmethod>> instead of linkedhashmap<object, arraylist<itestngmethod>>
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: assert the instance of the parent instead o the class
Candidate: why do we need to here?
Reference: checkit
Candidate: this should be <UNK>
Reference: style nit: no braces around single line blocks
Candidate: the syserr should be be the
Reference: do we have a test of a remover spec with an or?
Candidate: please use <UNK> <UNK>
Reference: maybe we can add [commit_cursors] as a part of the logger definition?
Candidate: suggestion <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i decided to strip the trailing slashes here. the caller here don't care if it is "dir" or "dir/", so we will get the "native git" behavior. i decided not
Candidate: why do we need to check for the <UNK> ?
Reference: in this test method and the one below it, i would suggest including an assertion that also checks the formcode field.
Candidate: this should be the <UNK>
Reference: do we really want that? needs probably be discussed at the demo
Candidate: <UNK> ??
Reference: or just assert equality to singleton list, or use matchers
Candidate: please use import <UNK>
Reference: throws exception can be reduced to throws ioexception.
Candidate: why do we need the <UNK> here?
Reference: make the "super" dex field protected and remove this one? or a protected getdexbuffer() method?
Candidate: why do we need to check for the <UNK> ?
Reference: can you please use specific exceptions in the method definition instead of perunexception ? thank you.
Candidate: please fix.
Reference: you could check that we are still at branch_1 and file b exists/has the right content. otherwise the checkout may have just completely ignored the specified path.
Candidate: shall we use the <UNK> instead of "userid"
Reference: stick an @override on this.
Candidate: please use <UNK> <UNK>
Reference: ![codacy](<link_0> issue found: [a method/constructor shouldnt explicitly throw java.lang.exception](<link_1>
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: double check that the group is still here
Candidate: double check that the double check that the group has been anonymous anonymous anonymous
Reference: wrap this function in a method
Candidate: this should be the fixture.
Reference: probably typo in serizalize ?
Candidate: please use fail(); in <UNK>
Reference: rename to toremove
Candidate: can you use the sizes of the sizes properties?
Reference: :point_up: this seems like not everyone would be using references to ebi? put it in defaults.java
Candidate: should we catch (throwable e) { throw } catch (throwable e) { .... e) { throw } throw (long <UNK> }
Reference: why is this not based on context.getcurrentuser()?
Candidate: the syserr should be be <UNK>
Reference: i think it'd make sense to only register this unwrapper if javafx actually is present. hv currently runs on java 6 and later, and on 6 (and earlier releases of
Candidate: why do we need the <UNK> here?
Reference: nit: you can use monitors.foreach((server, monitor) -> { ... })
Candidate: prefixing the <UNK> of the <UNK> of the dictionary,
Reference: it is safer to have constant on the left of equals
Candidate: should this be the <UNK>
Reference: the reason why i suggested to make the retry method package private and write tests against it is because you can override the policy for tests. with the current setup,
Candidate: why do we miss? miss?
Reference: maybe add a es- prefix to these values or change logindexerprocessor.class to elasticsearchindexerprocessor.class ?
Candidate: why do we need to wait for the <UNK> ?
Reference: i don't see a swt.selection event when i click, except if there was a non-empty selection before, then clicking clears the selection.
Candidate: why do we need this check?
Reference: if you do this, might the retryperiodms exceed the retrytimeoutms? is that ok?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: drs should be dns ;-) or any other name, but drs doesn't fit at all
Candidate: can we use <UNK> <UNK> <UNK>
Reference: even though currently statsloaderimpl#needsload() is hardcoded to true, it still should be called here first.
Candidate: why do we need need to the getcredentials here?
Reference: the reason it was named cb was so it'd be short when statically referenced. but, either way -- no biggie...
Candidate: you don't need to use the <UNK>
Reference: is this necessary?
Candidate: should we throw an exception?
Reference: please don't change it to static. it is usually a bad design decision. static classes and methods complicate tests.
Candidate: why do we need this?
Reference: the initial state of this test represents an out of sync cache-through setup. not sure we want to try to make sense of behaviour with a broken initial setup.
Candidate: i think the others, the result of the result of the local strategy matches returning part part part part part part part part part part part part part part part
Reference: <b>reporter: </b>pmd<br /><b>violation: </b><a target="_blank" href="<link_0>">junittestcontainstoomanyasserts</a><br /><b>notes: </b>junit tests should not contain more than 1 assert(s).
Candidate: <b>reporter: </b>pmd<br /><b>violation: </b><a target="_blank" href="<link_0>">junittestcontainstoomanyasserts</a><br /><b>notes: </b>junit tests should not contain more than 1 assert(s).
Reference: interruptedexception should never be handled this way because it eats the interrupted flag. look for other catch interruptedexception's in the code on how to handle it properly.
Candidate: why do we need the <UNK> here?
Reference: let's throw this error, so it'll be handled by the test runtime.
Candidate: please use assertthat
Reference: did you mean assertthat(mutated.gettimestamp()).isequalto(1519200753)?
Candidate: why do we need the <UNK> here?
Reference: i don't think, that voadmin and voobserver should be able to use this. for resource it's ok, since they can somehow manage resource, but facility settings belong to facility manager.
Candidate: please use <UNK> facilities
Reference: i think the correct format is $var, ie: $vmname
Candidate: beware that the cda is is convenient in the <UNK>
Reference: arraycolumngetter didn't support array of decimal type. this change supports decimal array, but decimal values will be converted into string values such as "[""1.0"",""2.0"",""3.0""]". could you fix the problem?
Candidate: if the == <UNK> && <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> <UNK> { <UNK> }
Reference: please also make sure the sessions is valid getsessionvalid(sessionid, false) there could be sessions that are not valid because the user has logged out but not cleaned up yet.
Candidate: can we move this logic into a separate method?
Reference: in = fs.open(filepath)
Candidate: why do we need the exception here?
Reference: just one minor thing - this can be simplified to  java return new stream.cons<>(head, tailsupplier);
Candidate: the syserr should be be the
Reference: grammar. these should be two separate sentences. personally, i would also change "can't" to "can not" or "cannot"
Candidate: shouldn't this be null?
Reference: you should probably look at how users were dealt with on line 239. i believe that additionally prints the email. some users may have the same fullname, it helps disambiguate.
Candidate: should this be <UNK>
Reference: the widget should draw this
Candidate: why do we need the <UNK> here?
Reference: bitset seems like a good idea. i think it's worth changing streamsupplier.buildstream to take a bitset for segmentstofilter. i'd also add a check for log.istraceenabled() to avoid the tostring().
Candidate: i think we should be <UNK> to the the <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> software stripe { <UNK> <UNK> }
Reference: replace with .contains(checksumtype.getalgorithmname()) to be less confusing?
Candidate: why do we need the <UNK> here?
Reference: not a huge fan of this method name. a bit obtuse :)
Candidate: why do we need to use <UNK> here?
Reference: it seems we can use a bit more advanced algorithm to find a match. we rely on the fact that all indexes (positions) returned by the iterators are ordered ascending.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why catch throwable and not just resourceexception?
Candidate: can we use static"
Reference: i don't know much about robolectric testing really. do you think this should: a) generally match the targetsdkversion? b) generally match the minimumversion? c) just be consistent? currently it's 21
Candidate: why do we need need to the <UNK> here?
Reference: double ;
Candidate: why do we need to mock <UNK> here?
Reference: instantiating the download monitor could also be in the condition succeeded block
Candidate: <UNK> *= 2;
Reference: this is line-wrapping ugly. i'd prefer (assuming you change scanpath to return file): file gitexe = scanpath(...); if (gitexe != null) { gitexe = gitexe.getabsolutefile(); file bin = gitexe.getparentfile(); //
Candidate: why do we need need to the <UNK> here?
Reference: you could extract this (and from method above) to a private method like getcuratorclients(manager)
Candidate: why do we need to permission?
Reference: remove distinct
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: i guess you should also check if an error is empty
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: nice simplification!
Candidate: why do we need to check on the username?
Reference: i don't understand what this check is doing here. maybemove is already taking check of checking rights.
Candidate: why do we need the <UNK> here?
Reference: check for return value and throw if false?
Candidate: let's use the file '" + <UNK> + "' '" + <UNK> + <UNK> '" tempdir + "' '" + <UNK> + "' '" + <UNK> + "' '" +
Reference: i think we should have a null check here but i don't think we need a blank string check. locale.forlanguagetag("").tolanguagetag() or locale.forlanguagetag(" ").tolanguagetag() or similar will return "und" (undefined), which
Candidate: please use <UNK>
Reference: companion
Candidate: typo: <UNK> -> <UNK>
Reference: you can find out if it was manually aborted with the following pseudo code  java interruptedbuildaction a = build.getaction(interruptedbuildaction.class); for(causeofinterruption cause : a.getcauses()) { if (cause instanceof userinterruption) {
Candidate: the error message should be included in the messages.properties message.
Reference: we had the check for containment in a method of, i think, addtooltipmanager. so it should be extracted, if it doesn't exist already in a util class.
Candidate: please use <UNK>
Reference: i think we should log a warning message here, as it makes no sense to have a joinfield without the proper annotations.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: no need for the debug lines here, please.
Candidate: please import?
Reference: same for this return
Candidate: the syserr should be be the
Reference: you do not need to include the thing uid in the message as this is the status of exactly that thing.
Candidate: should we print stack trace to debug level?
Reference: don't see purpose of using a focuspanel here.
Candidate: please remove the method("post")
Reference: pull the help printing behavior into it's own function or class
Candidate: this is uiexception.aide.wrap(e);
Reference: rename to contribution
Candidate: this syserr should be <UNK>
Reference: this might be triggered by submitallstoreddownloads right? would it be better to say: "already running download for downloadbatchid: %s , ensure you are not duplicating identifiers."
Candidate: if <UNK> overflows?
Reference: no reason to include an unused constructor.
Candidate: please remove method("post")
Reference: this should be a function derived from routinecharacteristics.language. actually is it better to expose language rather than implementation type?
Candidate: this should be <UNK>
Reference: why boolean instead of boolean?
Candidate: this should be setemptyelement().
Reference: perhaps move this variable out of the try blocks as well and close it in the finally before transport is closed. that way there would be a single try block
Candidate: ![major](<link_0> 'severity: major') use rethrow this exception. [![rule](<link_1>](<link_2>
Reference: it's probably best to throw an exception here; someone has called process with a programmeid, and expects that programmeid to be processed. if that doesn't happen because of an error,
Candidate: could we create a new <UNK> instead of the magic <UNK>
Reference: minor: would be better to add java docs for this the method.
Candidate: why do we need to use <UNK> here?
Reference: better error message please :) something along the lines of "must be a relative path" reads better than a regular expression.
Candidate: why do we need need to the <UNK> here?
Reference: since site is assigned by msitestore.getsitebylocalid(getselectedsite().getid()) just above this, can we pass it to getmysitefragment().onsitechanged() like getmysitefragment().onsitechanged(site) and avoid calling getselectedsite() with refreshselectedsitedetails(getselectedsite()) in mysitefragment.onsitechanged()? the mysitefragment.getselectedsite() method just calls
Candidate: i don't think we need to check if the is is the
Reference: it seems to cause overflow when the difference of two table volumes are more than the range of integer value.
Candidate: this should be <UNK>
Reference: why this change? the policy regarding asserts, project-wide should be discussed in the dev mailing list, probably.
Candidate: can we reduce the logic in the first <UNK>
Reference: this double-try-catch logic for extracting a long-or-double seems to appear multiple times in this pr, i would suggest wrapping the whole thing into a helper method in numberoperations so that
Candidate: the syserr should be be the
Reference: i believe this shouldn't run if tryassigntasks.putifabsent returned non-null, as it means some other thread is handling this task.
Candidate: why do we need the exception here?
Reference: why do we set these false? it seems that we should set them true.
Candidate: this should be setemptyelement().
Reference: maybe group this all into a function "initializeidenticon" or something like that
Candidate: do we need need to check the <UNK> in the case?
Reference: you don't need this. builduseraccount() has a null check.
Candidate: why do we need to use <UNK> here?
Reference: nit: processor: {} has executionenvcontainerid: {} to be consistent in other places. i remember prateek made a whole clean up pr for this :)
Candidate: rename <UNK>
Reference: in addition, if you have question passed to the studentfeedbacksubmissioneditquestionswithresponses, you don't really have these two variables.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: items -> items
Candidate: why do we need need to the <UNK> here?
Reference: rename to adapterfactories
Candidate: i don't understand this matters, if we matters, but we don't want to do we need need to check the <UNK> <UNK>
Reference: this is not needed - the finally clause closes it anyway.
Candidate: why do we need to use <UNK> here?
Reference: nit: i think it would be cleaner if we usestring.format(..) here
Candidate: rename to <UNK>
Reference: is the double wait needed?
Candidate: this should be the <UNK>
Reference: why you are not verify updateadapter(patientlist) method ? you can check if it was called with the proper list
Candidate: this should be <UNK>
Reference: are you sure this is the correct method!? from what i can see (from the code) that will show a popup to restore the file to the current version. other
Candidate: this should be <UNK>
Reference: we don't need this else block. just return the otherfactory.gettransport(trans)....
Candidate: please use syserr
Reference: this should return boolean (primitive, not reference). no need to complicate things with the return type suggesting the value could be null.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: as dicussed early today.. changes in this class should be removed from pr
Candidate: this should be the <UNK>
Reference: same here - check env variable before returning true.
Candidate: i don't need to check booleanvalue()
Reference: it's better to it in try catch finally
Candidate: if <UNK> != null && <UNK> != null && <UNK> { return <UNK> }
Reference: let's use violationmessage for these test methods
Candidate: should this be <UNK>
Reference: i wonder about throwing everywhere, as most of the reportissue message are calling the same on line 123/127.
Candidate: why do we need to check for the <UNK>
Reference: same thing, public api that may now return incorrect values.
Candidate: why do we need the <UNK> here?
Reference: why add the reference back to the uml element?
Candidate: should we be optional.ofnullable()
Reference: this listener is not being added to zap.
Candidate: should this be <UNK>
Reference: app profile id is a value provider, the null check doesn't make sense
Candidate: can be simplified to <UNK>
Reference: *in*sufficient?
Candidate: why do we need the <UNK> here?
Reference: cache manager is being leaked here. hr server won't stop cache manager... to avoid such leaks, it's better to extend existing classes, e.g. singlehotrodservertest
Candidate: why do we miss? miss?
Reference: is new random().nextlong() really ok for sequence numbers? i would have expected them to be increasing - but guess this works for testing
Candidate: @unyoungwax, do we need to check for the <UNK>
Reference: again, not sure why the constant renames, what do they have to do with fixt?
Candidate: why do we need the <UNK> here?
Reference: this will never be seen.
Candidate: can we return null?
Reference: this will look weird in the logs :smile:
Candidate: what happens if the is is the
Reference: checkstate(spillenabled, "revocable memory requested when spill to disk is not enabled");
Candidate: should we be the <UNK> here?
Reference: npe if there will be no metrics in test group .
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: you are loading this class again from the new class loader and setting manifest? that seems only necessary because of my earlier concern about modifiableurlclassloader not delegating to parent first,
Candidate: i'm not sure it is better to catch <UNK>
Reference: i would suggest adding an error message to the response.
Candidate: log.debug probably?
Reference: method deprecated. use clientbuilder.version() instead.
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: why not using bridge.getid().replace("fffe", "") like below? get it once, store it in a serial number and reuse it below.
Candidate: should this be <UNK> blah instead of <UNK> here?
Reference: shouldn't this have already been set based on either being set when changing the combo or when the user deliberately switched the combo? or is this set the true change
Candidate: this should be setemptyelement().
Reference: this should be private method.
Candidate: please use <UNK>
Reference: i think it's enough and i'm sure someone will complain if it's not :d
Candidate: can we use the <UNK> here?
Reference: static strings or enum for list targets would be helpful
Candidate: why do we need to call <UNK> here?
Reference: why does this return a pagedflux if it's only going to return a single (first) message?
Candidate: should we throw an exception here?
Reference: why are you writing these dockerfiles to the user's home directory?
Candidate: i don't understand this matters, this matters, if we matters, but i don't understand why, but it matters, afaik.
Reference: add a method getandclearlogentries(type), call it from the handled, deal with nonexistent types in that method not the handler. the handler should have no business logic preferably.
Candidate: this should be setemptyelement().
Reference: call it ..._divider please :)
Candidate: can be replaced with <UNK>
Reference: @aleffert i might prefer more methods rather than a concrete "viewmodel". but i gave it a try. is this what you are imagining? <link_0>
Candidate: why do we need the <UNK> here?
Reference: could you extract a constant for this pattern?
Candidate: why do we need need to the <UNK> here?
Reference: there was no invocationdispatcher in this version.
Candidate: do you driver driver driver driver driver driver null? driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver driver
Reference: is this the right error message for when context.getchangerequest is null? the "if" part doesn't seem to have to do with the status of the developer, but i could be
Candidate: i don't think we need to throw an exception if invoked?
Reference: some of these codec constructors are public and some are package-protected. seems like they should all have the same access, unless there is some specific reason for it ?
Candidate: nicer: <UNK>
Reference: was looking at this line and was wondering if that is really needed, is it not sufficient to just check for noavailableexecutors exception? also, pickedexecutioncount will include executions that was
Candidate: i don't think we need to check if the is is the
Reference: i'm not quite sure i get why we need this. could you please explain?
Candidate: why do we need the <UNK> here?
Reference: please use {} for blocks.
Candidate: why do we need to use the here?
Reference: the rule manager is a mandatory reference, so it cannot be null if the component is active.
Candidate: please use <UNK> <UNK> <UNK>
Reference: i feel like the callers might want to know if it completed successfully or timed out?
Candidate: we should need to do we need to do we need need to do we need need to do we need need to do we need need to do the
Reference: 32 should be replaced by integer.size
Candidate: why did you touch the old generation?
Reference: this shouldn't be present - super() the base class is object which doesn't have a special constructor to call.
Candidate: super() should be spared
Reference: closerepo should be set to true, otherwise the repo is not closed
Candidate: why do we need need to synchronize on the <UNK> ?
Reference: whitespace: brake "=" to a new line.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: single statements don't need a transaction.
Candidate: should we expecting the exception here?
Reference: this can be improved as well. there are a few ways to format query results into appropriate format. json is one, this plain format is another. how about 1. create
Candidate: why do we need need to check the <UNK> here?
Reference: use rexbuilder?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: beware that not all queries _can_ have an order by clause. for instance a "select count(*) from table" cannot have an appended order by
Candidate: why do we need to use the <UNK> here?
Reference: worth to use try with resources: java try (final inputstream inputstream = ioservice.newinputstream(path, standardopenoption.read)) { final string drl = decisiontablefactory.loadfrominputstream(inputstream, null); return filldrlindexbuilder(path, drl); }
Candidate: why do we need the exception here?
Reference: it's better if simpler/shorter branch goes first
Candidate: the syserr should be be the <UNK>
Reference: the siteidentifier is unique enough that we don't need to check the past history anymore (imo).
Candidate: should we use the <UNK> here?
Reference: this can be static.
Candidate: you don't need need to use the <UNK>
Reference: should be 1024 \* 1024 = 1048576 = 2^20
Candidate: since we will add <UNK> since we will add <UNK> since we will add <UNK> since we will add <UNK> instead of
Reference: we cannot move eobjects to another resource because this can have side effect to other tools (using the resourceset).
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: this exposes mutable internal state. a copy is needed.
Candidate: the syserr should be be <UNK>
Reference: you're removing index objects from a set containing strings. you probably want to do:  set<string> original = stringifyindices(originalindices); set<string> updated = stringifyindices(updatedindices); set<string> added = new treeset<>(updated); added.removeall(original); set<string>
Candidate: i don't understand if we matters, but i don't understand why, but i don't think we need to check the <UNK>
Reference: just a minor note: throw org.apache.calcite.util.testutil#rethrow(java.lang.throwable) should be used to rethrow exceptions in the test code.
Candidate: why do we need to use <UNK> here?
Reference: assert is empty
Candidate: this should be cheapest check on the bytecode page. this stage should be a <UNK>
Reference: this should be configurable, no?
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: statements may be not only on items, but also on properties - are you validating those somewhere?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: we should make this configurable in the properties file, using a property called http.auth.preemptive=true/false
Candidate: this should be the <UNK>
Reference: i am not super familiar with this but the usage pattern elsewhere seems to be 1) inject an executor 2) call context.asynchronous() 3) perform the work which may block in
Candidate: should be be the <UNK> ? <UNK> : <UNK> ?
Reference: the int here is the concurrency level not the size of the collection, we should be using default constructor. also all of these are declared as concurrenthashset, i think it
Candidate: why do we need the lock here?
Reference: this should be true since your test is withclientauthentication?
Candidate: i don't think we need to use the to the
Reference: one line: ) throws ...
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: a test would be nice here. if the textformat had an interface and didn't have static methods it could be mocked
Candidate: please use readasstring(...) instead of re-parsing?
Reference: the compiler guarantees this is not null
Candidate: this should be the <UNK>
Reference: use in try-with-resources to avoid leaking fs instances
Candidate: why do we need the <UNK> here?
Reference: we should use {} and parameters instead of string concatenation
Candidate: please use <UNK> <UNK>
Reference: these two parts can be extracted
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: seems like the description setter could handle the null-checking logic so you don't have to do it here.
Candidate: should we log the error message in the messages.properties ?
Reference: @davidmsantos90 why not use a fixed locale? getdefault() varies form computer to computer and that is not something that we want to test in this test.
Candidate: why don't use <UNK> ?
Reference: no questions during refactoring progress.
Candidate: rename to occurrence
Reference: make this test consistent with the default authentication type, and change it to use api key credentials?
Candidate: what happens if the controller is happen in the master, i understand, it will be happen if the player's cache, so we should happen if the server-side.
Reference: checkargument for negative numbers?
Candidate: we should use the <UNK>
Reference: an illegalargumentexception should be thrown.
Candidate: why do we need to use the here?
Reference: would a switch be easier to understand? the two cases that should be treated the same way can just fall through, as in:  switch(currenttoken) { case start_array: case start_object:
Candidate: why do we need the layout here?
Reference: two more times(1).
Candidate: assertthat
Reference: another note: you may want to use the new command interceptor in testkeyonlywrittenonceonoriginator
Candidate: this should be <UNK>
Reference: should this be "boot/h2-1.4.196.jar" ?
Candidate: why do we need need to the <UNK> here?
Reference: this should return rowmapper<string, t>
Candidate: should we use the builder here?
Reference: / is missing from the file name. as a result, your file is now in the root directory. :rofl:
Candidate: you don't need to use the <UNK> <UNK>
Reference: cut and paste error
Candidate: we should need to use the <UNK>
Reference: this should be error.
Candidate: can we be validating the permission too?
Reference: use slf4j api:  log.info("connecting to atsd at {}:{}", servername, port);
Candidate: do we need need to be the here?
Reference: @abdelaty don't remove this - this is a functionality of the no internet connection snackbar. just create another if statement below it.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: shouldn't this also 'put' to ensure that a re-used regex is treated as new in the list.
Candidate: should we use the <UNK> here?
Reference: constant?
Candidate: rename to iu
Reference: we could check if the index is writable before creating the indexer: suggestion if (!isindexwritable(i)) continue; index.indexer idxr = i.indexerfor(update.partitionkey(), update.columns(), nowinsec, ctx, indextransaction.type.update); if (idxr != null)  the
Candidate: why do we need to use <UNK> here?
Reference: i know it's unlikely, but if something happened where the failed login count jumped over the maxlogins value, and somehow didn't actually lock the account, then we never would, right?
Candidate: should we throw an exception here instead of the exception?
Reference: instead of set csv separator in singleconsole contructure.. it might be better to set it with separate setter. singleconsole.setcsvseparator(string csvseparator)
Candidate: should we throw an exception instead of returning null?
Reference: usually, static variables accessed not by instance but by class.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this doesn't seem like the right place for this. why are we collecting interface info for a latency collection set here?
Candidate: groupname --> groupname should be groupname of groupname
Reference: change "devices" to "devices.xml" so user knows specifically the file name that cannot be read.
Candidate: why do we need the <UNK> here?
Reference: why catching an exception and throwing it directly again? i would earlier argue for a check of 'unknown' types and put a check on the known ones.
Candidate: can we be the division here?
Reference: i would tend to use decodehex(char[]), not sure how charset sensitive this will be, however, given only <127 ascii should be used.
Candidate: why do we need need to evict the <UNK> here?
Reference: okay. i think we should probably inform people that a consequence of this could be that the backup lock might not have been released properly - and if there are
Candidate: i don't think we need to use the <UNK>
Reference: the order of the arguments is not correct. it should be:  assertequals("task attempt's internal state is not " + "success_finishing_container", taskattemptstateinternal.success_finishing_container, taimpl.getinternalstate());
Candidate: you can use the <UNK> here as well
Reference: this will not clear the mdc if it was initially empty. iow keys and values set inside an executor's thread will not be cleared, if the outer context (when calling
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() for the <UNK>
Reference: provide the defaultlabel as argument of defaultislastcase, so you will just have to check if the last label equals() the default tree, and not check again for keyword matching.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: it would be better to declare this in the throws clause and not handle it, since it should trigger a test failure.
Candidate: why do we need to permission?
Reference: similar note for local variable app renamed to application in other methods. maybe it should be:  map<string, object> application = actioncontext.getcontext().getapplication();  that would mean changing existing references to
Candidate: do we need to call <UNK> anywhere else?
Reference: rogue log statement
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: is this the end of the added? can you mark it?
Candidate: should we be the <UNK> here?
Reference: i am not sure "later jobs" is a clear label. then again, i can't think of an optimal label. "later jobs" seems like jobs that will be handled later. maybe
Candidate: why do we need to use the <UNK> here?
Reference: it looks like this change ended up being unnecessary
Candidate: why do we need to use the here?
Reference: the same synthetic method here.
Candidate: why do we need need to the <UNK> here?
Reference: i did not understand why adding that. in general, adding api to ast or framework is carefully discussed before. you can do that to go ahead in your experimentation, but
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: use logger templates instead of string concatenation
Candidate: can we move this into a single method? if <UNK> { return false; } else { if <UNK> { return <UNK> }
Reference: you can use lambdas in tests now.
Candidate: why do we need miss?
Reference: we can move this right above cgroupmemresourcehandler.prestart() similarly
Candidate: i don't understand this matters, this matters, this matters, that this is matters, but i don't understand why, but it matters, but i don't understand why, but it matters, but
Reference: would it be possible to cache the databasedescriptor in the initialize() method similarly to what we do with the schemadescriptor, so that we don't have to throw standardexceptions all over
Candidate: can be replaced with <UNK>
Reference: be consistent, return "entity " + id + "could not be moved"; also, either remove trailing "world" from above or add it everywhere else
Candidate: why do we need the <UNK> here?
Reference: typo *intput*
Candidate: use <UNK>
Reference: can we remove the version variable since it's always equal to the constant?
Candidate: why do we need the <UNK> here?
Reference: minor, you could use count(id), in general it's faster
Candidate: nit: this tweak the <UNK> <UNK>
Reference: typo in variable name. you can test if there is any change in trackedsymbols and create instance only if necessary. it will be often the case that symbols won't be
Candidate: can you use the builder builder builder builder builder builder builder builder builder builder builder builder builder pattern.
Reference: suggestion client.incrementcounter("jenkins.job.stage_completed", hostname, tags);
Candidate: i don't understand this matters, this matters, but we don't need to do we need need to do we need need to do we need need to do we need
Reference: npe if interface number is null
Candidate: should this be <UNK> <UNK>
Reference: if done with a ternary then no intermediate declare/storage is necessary. not a huge difference, but simpler and shorter... suggestion return sb.length() > 0 ? sb.insert(0, '(').append(')').tostring() : "";
Candidate: feedid should be the feedid
Reference: what's the purpose of this?
Candidate: rename to iu
Reference: nit: nothing wrong here, of course, but seems a bit funky that we didn't use putall in the same way as in when setting up the request
Candidate: why do we need to <UNK> eq here?
Reference: ...and these two above...
Candidate: please move this line to <UNK> costs the <UNK> costs <UNK> costs <UNK> costs the <UNK> costs <UNK> costs
Reference: please provide more meaningful field names. also consider prefixing field names with f and parameter fields with p
Candidate: should this be <UNK>
Reference: i guess the path should have been "jersey-2643" instead of "test3"
Candidate: please use <UNK> <UNK> <UNK>
Reference: should this be inverted?
Candidate: why do we need need to the the variable?
Reference: nit: this check rather looks like an assertion. no matter what arguments are passed to this function the equals function should never return null, as the null case is explicitly
Candidate: if <UNK> != null && <UNK> { <UNK> } else { if <UNK> { return false; }
Reference: again, use a map
Candidate: should be be the <UNK>
Reference: i don't think the first segment of the file name should be treated as an 'extension'. i should be able to create, for example, profile.di because that's not a *.profile.di
Candidate: why do we need to use the payload?
Reference: do a url encoding of this value. the service name can, for example, have spaces and/or special characters.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: why do we need to add gcm_tag_length here? recordbytes doesn't seem to include any tag field. cipher.dofinal(recordbytes) appends a tag implicitly?
Candidate: nit: you can use <UNK> int <UNK> = 4..
Reference: logger.trace are not very useful in unit tests.
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: with the changes to the getters, this can be reverted, right?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: avoid _null_.
Candidate: the syserr should be be the <UNK>
Reference: use lambdatestutils.intercept(). not only simpler, it will (correctly) fail if the rest operation didn't actually raise an exception
Candidate: should we catch (throwable e) { return; }
Reference: why add saslexception here?
Candidate: why do we need the <UNK> here?
Reference: would objects.requiresnonnull() be better here?
Candidate: the syserr should be be <UNK>
Reference: there's really no value in debugging the same thing that you're throwing here. we might want to hide the internals from the user (although as a command line utility, i'm
Candidate: why do we need to here?
Reference: use new loop strucutre: for(category cat: rescategories) {...
Candidate: please use english here
Reference: use node.ispartial(), to maintain the properties of the node being rewritten
Candidate: the syserr should be be <UNK>
Reference: @maria-farooq we should provide a description to the log message
Candidate: @maria-farooq catch the exception?
Reference: typo
Candidate: should this be <UNK>
Reference: you can make expiration an integer and already assign it here, like this: java integer expiration = ns.getint("expiration"); if (expiration != null) { m.setexpirationtimer(number, expiration); }
Candidate: should we be the exception here?
Reference: esource -> resource also you probably don't want () around {} which is replaced for attr name, since in other messages you don't do that.
Candidate: why do we need to check for the <UNK> ?
Reference: the arguments are swapped.
Candidate: i am not sure we acquired lock acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired
Reference: base64 sometimes contains = as a trailing padding character. if that is present, and you just run "token=$base64" back in as post input as a form, maybe the = is
Candidate: why do we need need to the <UNK> here?
Reference: i don't know that we want to return generic server exceptions in the payload to the ui. this has the nasty habit of exposing pieces of the workings of a
Candidate: please use <UNK>
Reference: this is only used for eclipse-update-site. it has a special "aggregator pom" (poma.xml) which i don't understand why it should be there/what it should be useful for, so just ignore
Candidate: why do we need the exception here?
Reference: this should never be filtered, as in theory the list of allowed origins doesn't depend on the permissions of the user. i think you can use vdsdao.getall(), without parameters. i'd
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: all the above logic should be called only if reconfigure gluster option is selected?
Candidate: i don't need to fetch the <UNK>
Reference: could be implemented directly in kubernetesauth implementations as a method such as public void decorate(configbuilder builder). it would require pushing the kubernetes-client dependency up to kubernetes-credentials, or at least the
Candidate: can we use <UNK>
Reference: safely()
Candidate: should we catch (throwable e) { throw exception } catch (throwable e) { throw { thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); throw new <UNK> e) { throw <UNK> }
Reference: make it abstract public or public with a default implementation and move specific implementation in the child classes
Candidate: why do we need to check the <UNK> here?
Reference: so deep! can't we extract some of this stuff?
Candidate: why do we need the <UNK> here?
Reference: no need to store the return value here - you could just write it as: java assertions.assertdoesnotthrow(() -> { dynamodbstreamrecordtransformer.tostreamrecordv2(streamrecord); });
Candidate: why do 49
Reference: size is missing in the message
Candidate: if <UNK> != null && <UNK> != null) { return state; }
Reference: tasks should always relate to a organization, we should set a public flag for this, if a non-coduno organizations owns the tasks, they should be able to update it etc,
Candidate: why do we need this?
Reference: suggestion "logical slot %s for execution vertex (id %s) from the physical slot %s",
Candidate: if you is the <UNK> <UNK> is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: style nit: i would phrase this loop as: int qi = 0, ii = 0; for (entry q = head; q != null; q = q.next) { if (++qi %
Candidate: why do we need to <UNK> <UNK> <UNK> ?
Reference: replace 4 with visibility_values_per_byte
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: exceptions should really not be swallowed. keep and eye on formatting too ("}catch" -> "} catch"). since these are new files, it's handy to just go with an ide and
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: another good candidate to use builders.
Candidate: please use <UNK> <UNK>
Reference: isn't this like eventually(() -> store.load(1) != null)?
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK> expected)
Reference: please indent inside the try
Candidate: why do we need to use the payload?
Reference: getfreshtimestamps(numtimestamps)
Candidate: you don't need to use the <UNK>
Reference: can this be renamed to withmandateid?
Candidate: why do we need to use <UNK> here?
Reference: same here, it seems that validatebeforeundeploy is doing the exact same thing as the code below.
Candidate: the syserr should be be <UNK>
Reference: can we fix formatting here?
Candidate: can be simplified to: java results.stream().anymatch(entry -> value.getk1().equals(entry.getkey()) && value.getk2().equals(entry.getvalue()))
Reference: please, do not mix german and english. please use one language or use a translation key for translatable error messages.
Candidate: the syserr should be the <UNK>
Reference: maps.newlinkedhashmap()
Candidate: if <UNK> == null) { groupname = false; }
Reference: this and the below methods should be protected rather than public so that they can only be accessed by subclasses
Candidate: why do we need the <UNK> here?
Reference: i think this is wrong (there's also tool configurations). better to retain the existing behavior and just adapt the predicate as needed.
Candidate: why do we need to check the the enum?
Reference: val
Candidate: why do we need the <UNK> here?
Reference: else keyword must be on the next line accordingly to code style.
Candidate: throws runtime exceptions?
Reference: line length 120
Candidate: can you use the criteria of the <UNK> <UNK>
Reference: this should just set patientprogram without creating another instance
Candidate: should this be <UNK>
Reference: why this format and locale.italy is used? maybe locale.root to make it more or less locale-agnostic? is there some fixed date format in tsd like rfc822/2822/5322 one?
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: i'd rather run only the purgelistener on the executor.
Candidate: can we be **log** here?
Reference: why not use [transactionstatus#canrollback()](<link_0> here?
Candidate: should we be the <UNK> here?
Reference: it is not the responsibility of our callers to deal with our exceptions after we've hidden them. do not propagate this, log it and fall back out of the catch
Candidate: this should be the <UNK>
Reference: this change (stage-->i) is completely pointless, and makes the code less readable.
Candidate: can we be collapsed to <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: checkstyle will complain here, missing {}.
Candidate: the syserr should be be <UNK>
Reference: same here, what's the usage of this output?
Candidate: why do we need this?
Reference: -1 as a time is plausible on embedded systems, i recommend long.min_value.
Candidate: completely continue completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely completely
Reference: this public has to be remove. see travis report.
Candidate: please use <UNK>
Reference: good catch suggestion int lengthoflongestentry = stringutil.encodeutf8(stringdefaultvalue).length;
Candidate: <UNK> *= 2;
Reference: you are updating the dependencyinfoavailable flag here, but you should also cover your tracks in the "catch" block below. if the query fails, you can be sure that no dependency
Candidate: do we need a <UNK> here
Reference: another alternative would be to add a method like skiplockduringclone() that clonecommand can call.
Candidate: google rather than google google google than google google google google google google google google google google google google google google google google google google google google google google google
Reference: you can use values.mapwithindex() here, which avoids the unsafe below
Candidate: consider extracting this into a local array. also, replace pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern
Reference: no need for a separate declaration.
Candidate: why do we need the traceid onto the other?
Reference: just use context as sync obj.
Candidate: this should be the <UNK>
Reference: should this be a separate method? i find finish a bit big. but i don't feel too strongly about this.
Candidate: should we throw an exception?
Reference: i think hasout is being deprecated here <link_0>, i think is better to use getmessage instead
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: adding a check for this listener?  caused by: java.lang.nullpointerexception: attempt to invoke virtual method 'float com.github.chrisbanes.photoview.photoview.getscale()' on a null object reference at org.wikipedia.gallery.galleryitemfragment.lambda$oncreateview$1$galleryitemfragment(galleryitemfragment.java:128) at org.wikipedia.gallery.-$$lambda$galleryitemfragment$it7mfodmyoidodz3rdijxj5sw2c.onmatrixchanged(unknown source:2)
Candidate: can you move this to the <UNK> <UNK> <UNK>
Reference: these (glowing methods) were added on day 1 of 1.9 builds, so no check is required here.
Candidate: why do we need need to check for <UNK> here?
Reference: this could be optional (same for other fields not required), to not have to add all the properties to all entries.
Candidate: <UNK> *= 2;
Reference: shutdown the pool in a finally block
Candidate: you need to call <UNK> byte.
Reference: localname can now be inlined
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: this conditional is unnecessary. list element is never null.
Candidate: should this be be specific? if we { null) { throw new <UNK> }
Reference: definitely agree. i might make this error very, very explanatory since i'm not sure what people would expect to happen here.
Candidate: should we be the <UNK> here?
Reference: the old formatting was easier to understand.
Candidate: why do we need to <UNK> the <UNK> here?
Reference: this dropout section is obsolete. replace if statement and content with applydropoutifnecessary(training);
Candidate: can we use the <UNK> the <UNK> generation?
Reference: propose to populate queries in the constructor or init method
Candidate: why do we need to use <UNK> here?
Reference: icdkmolecule instead of smilesmolecule adaptertype is the class that is asked for in this case icdkmolecule as indicated in plugin.xml
Candidate: why do we need the <UNK> here?
Reference: there's no evidence this must be non-null (though it might've been the original intent).
Candidate: why do we need to check for the <UNK> ?
Reference: put this logic in a separate method?
Candidate: :disappointed:
Reference: this is a regression. can we not throw a cce here? if not, we are re-introducing #357.
Candidate: please use <UNK>
Reference: this is a bit expensive as it allocates an array list for every entry. since drag events can fire very quickly and impact performance we need to use fast/low level
Candidate: why do we need to use the <UNK> here?
Reference: maybe failed to reload lua scripts after reconnect
Candidate: why do we need need to the <UNK> here?
Reference: open the drawer at the end of this function, so if user changes this to use a different gpkg with no feature tables, the same code still works.
Candidate: can we move this into the method?
Reference: true usually means success. this is a bit confusing. can you make it opposite. meaning handlefailover would return true if succeeded.
Candidate: if <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: nit: parameterized logging
Candidate: you can use <UNK> <UNK>
Reference: the loadfromfile allready logs errors on failures. is this warn really what we (all) want to do here? i'd expect a return or even a throw of some sort.
Candidate: what happens if the is is invalid?
Reference: i wonder if this api is good enough, when you consider vertical zooming (ctrl+plus and ctrl+minus). here we don't know which entry's font is being set, you can't rely on
Candidate: why do we need the <UNK> here?
Reference: should this line be conditioned on whether prometheus is enabled?
Candidate: should we throw an exception here instead of returning null?
Reference: do all the functions being passed here need to be instantiated each time? or could we use a singleton for them?
Candidate: why do we need to use <UNK> here?
Reference: maybe you should extract d.getkey().getid() to var
Candidate: do we need to <UNK> here?
Reference: verifying the html won't be able to tell us whether the element is actually displayed or not. for that, we need to use the iselementvisible() method provided in apppage.java (perhaps
Candidate: why did you mean to take the payload. the payload. that look at the <link_0>
Reference: suggestion default @nonnull collection<view> getallviews() {
Candidate: this should be the fixture.
Reference: this could be a pre-defined (static final) instance of a static class, rather than an instance class instantiated anew each time.
Candidate: should we throw an exception here?
Reference: this query, however, *does* need the division by two, as we have two blocks of params in the query.
Candidate: feedid should be feedid
Reference: you're using the registrationhelper in the lostpasswordcontroller ... maybe it's time to rename the class or extract some logic to a separate one.
Candidate: should we log the getconnection here?
Reference: in the descriptor builder, we usually read the file immediately to fail fast. i think it would be better to move the reader code here for the same reason. it
Candidate: i don't think we need to check for the situation.
Reference: suggestion optional.ofnullable(allitemscache.get()).orelseget(hashset::new).stream()  small optimization.
Candidate: the syserr should be be <UNK>
Reference: can you externalize this string to the messages.properties aside this class since it can be displayed to the user
Candidate: why do we need the <UNK> here?
Reference: move this validation to pluginprofileservice.
Candidate: why do we need to test here?
Reference: you can remove this line, this is done in transactionalfeature.nexttransaction()
Candidate: this should be unsupportedoperationexception
Reference: we usually do this with the holder. add a new field the in holder class, which is initialised and related code is created on demand (lazily, when we call holder.getviewdestroyedfield()).
Candidate: we should need to check if (throwable null) { return; } <UNK> { throw new <UNK> { <UNK> } <UNK> { throw new <UNK> { <UNK> }
Reference: it's a very strange use of generics. why configuration property is not defined as t ?
Candidate: we should need to check for null check?
Reference: i would suggest to put this in a "finally" block.
Candidate: rename to res
Reference: opensanssemiboldfont  rename it to a general name like semiboldfont.
Candidate: should we use the id id here?
Reference: shouldn't you save the returned parameters in the list?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: variable names should not start with a capital letter, that's for class names
Candidate: why do we need the <UNK> here?
Reference: i would skip that as it doesn't harm to use the openshift lookup with a registry. prefix, too. its probably more confusing to have this special case here.
Candidate: can we extract an instance of an instance of an instance of throw?
Reference: a couple of nits: - bulkdownload should be final. - rename bulkdownload to bulkdownloadicon
Candidate: @unyoungwax, do we need to check the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: declare it as a member of the class. we will gain in readability. to be generalized on others test classes.
Candidate: why do we need to the <UNK> here?
Reference: change exception
Candidate: the fixme termination should inspections we should throw an illegalstateexception instead of printing the placeholder.
Reference: why do we do it at the individual file level rather than dir level? each consumer is writing to a dir composed of pid and thread id, so those dirs
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: we'll want to keep the existing host support around.
Candidate: typo: <UNK> -> getcredentials
Reference: a refresh is missing here in between the updates
Candidate: why do we need to use the here?
Reference: use the constant here?
Candidate: the syserr should be be <UNK>
Reference: use expireafteraccess
Candidate: why do we need to use the <UNK> here?
Reference: you can get the bundle even easier: frameworkutil.getbundle(getclass());
Candidate: why do we need to use <UNK> here?
Reference: perhaps also log the stacktrace, it is useful in a lot of cases, or better yet use processexception
Candidate: we should software software software software software software software software exception software software software software software software software software software software software software software software software software software software software
Reference: isn't it from another pr?
Candidate: i don't think we need to check the <UNK>
Reference: @cuenyad use termid.location_id instead of 8190
Candidate: compare enum enum enum enum enum enum enum != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: what if store is missing?
Candidate: why do we need to use the here?
Reference: it might be interesting to allow cnull here, actually, to allow for more flexible code. setting a cnull would clear the command.
Candidate: should we use the <UNK> here?
Reference: the selecttracetype method could probably get the tmftracetype.getinstance() directly, that would avoid the tt variable at the caller and changing the signature of the method.
Candidate: please import?
Reference: how about return expiresatms == utils.infinite_time ? utils.infinite_time : math.max(0, timeunit.milliseconds.toseconds(expiresatms - creationtimems)); ?
Candidate: this should be the if the cr is the
Reference: this is just a suggestion, but when author and blog name are same, maybe we could show txtauthorname instead of txtblogname which is bolder and more prominent. what do you
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK> the <UNK> bottleneck.
Reference: instead of this, inc numfailed in the loop above.
Candidate: i don't think we need to check if the is is the
Reference: mtype is originally 0 anyways so its k
Candidate: should we be the username?
Reference: i don't think pinning should disable this action.
Candidate: if <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK>
Reference: instead of making delete operation a special case, in case of delete we can just push a null value into the cache. so it will automatically return null.
Candidate: i don't think we need to check if the is is the
Reference: any methods that override should be annotated with @override. otherwise i can't quickly say if it is correct or not.
Candidate: should we throw an exception?
Reference: i don't follow this bit. if it is persisted then return?
Candidate: this should be the <UNK> probably?
Reference: we should avoid creating the instance when we don't add it.
Candidate: please import?
Reference: revert this change please.
Candidate: can we use the <UNK> here?
Reference: we should also reset progress and hide it here?
Candidate: why do we need the <UNK> here?
Reference: code not required? its taken care in the next addrepresentation call
Candidate: please use <UNK>
Reference: nicely done! just one consideration: the ioobexception contains the information on what went wrong (i.e. what the actual index was and the size of the list) and by catching it
Candidate: should we throw an exception here?
Reference: tricky! validateaddallowed currently checks if you have the write_meta permission on the entity. acl gets created after the check. this breaks oneclickimporter
Candidate: why do we need to use the <UNK> here?
Reference: is this really possible that urlprovide is null? we require canonicalweburl now.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: rename this url variable to location and then simply use the variable name url in the foreach loop below
Candidate: should we be the <UNK> here?
Reference: clear() won't shrink the hashmap. [weakhashmap](<link_0> maybe better in this case. an entry in a weakhashmap will automatically be removed when its key is no longer in ordinary use.
Candidate: <UNK> *= 2;
Reference: this is definitely not necessary, the try-with-resources block will call walk.close() automatically.
Candidate: can be simplified to <UNK> <UNK>
Reference: use <code>strings.isnullorempty</code> that is more efficient than equals with another string.
Candidate: <UNK> *= 2;
Reference: in general we don't mark local variables as final in presto source code.
Candidate: why do we need need to the <UNK> here?
Reference: this does not have to be final
Candidate: can we use the <UNK> here?
Reference: don't need to call setup() here
Candidate: why do we need to assert that the "expected" here?
Reference: we should probably use stringutils.commadelimitedlisttostringarray here.
Candidate: why do we need to check for the <UNK> ?
Reference: can be changed to lambda
Candidate: ntc
Reference: no need to do +1 inside in the loop just do iteration from 1 till <= dimension
Candidate: why do we need to check for the <UNK> ?
Reference: i _think_ this will get run twice. once on the indexer and once on the local worker. true or false?
Candidate: what is the reason for the the <UNK> properties? why do we want to trim the properties?
Reference: should be smackexception that is expected to be thrown here. and that by getnodeconfiguration() i'd assume, hence the lambda should be smaller.
Candidate: why do we need the <UNK> here?
Reference: method alljobswithonannotation has 32 lines of code (exceeds 25 allowed). consider refactoring.
Candidate: we should software software software software software software software software exception software software software software software software software software software software software software software software software software software software software
Reference: could we not just stash the apns objc?
Candidate: do we need to do we need to do we need need to do we need to do we need to do we need need to do we need to
Reference: i wouldnt use regex matcher inside this in this way. because if a label contains a special char... it would not be matched properly.
Candidate: this should be be the <UNK> <UNK>
Reference: hardcoded string (+1 more below).
Candidate: the syserr should be the <UNK>
Reference: could possibly avoid the linear search in each loop iteration with something like the following before the loop. java set<string> importing = arrays.stream(exportedfiles).map(fstat -> fstat.getpath().getname()).map(filenamemapping::get).collect(collectors.toset()); set<string> imported = arrays.stream(importedfiles).map(fstat ->
Candidate: should we throw an exception here?
Reference: rename to childitem
Candidate: rename to
Reference: why not use early return constructs everywhere instead of zonenumber = ?
Candidate: why do we need the <UNK> here?
Reference: is this the purpose of having this class?
Candidate: this should be the <UNK>
Reference: can be cached
Candidate: why do we need the <UNK> here?
Reference: sinksemantic or kafkasinksemantic? it maybe confusing that it also works for source.
Candidate: should this be the <UNK>
Reference: this method name is unclear
Candidate: this should be repelaced on the <UNK> userreportingsettingshelper ?
Reference: are these really severe logs, or can we log them as warning?
Candidate: this should be the <UNK> <UNK> the <UNK> is the the <UNK> <UNK> the <UNK> is the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: could we set this string to a pre-defined constant ? i've seen it being used everywhere. easier to maintain if we can define all system properties used in test cases
Candidate: should this be private?
Reference: fix formatting here please
Candidate: can we call <UNK> <UNK> <UNK>
Reference: same thing with this one. also i don't see any fields annotated with @mock for initmocks?
Candidate: why do we need to use the <UNK> here?
Reference: you may want to log the exception
Candidate: please use map<> on the <UNK>
Reference: if the object is currently instantiated by relying on the statically defined values within importinformationspaceconstants class do we need to check the nullability of those fields here and in similar
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: yes this is syntactically correct but it would be nice for things to be consistent. opening curly brace on function declaration, code, closing curly brace on a separate line.
Candidate: use <UNK> <UNK>
Reference: can you factor out the first conversion to make the if more readable? moreover, why not use a switch-case statement?
Candidate: this should be be the <UNK>
Reference: what about if geometrydata.setexcludedtypelist is no set ?
Candidate: please use <UNK> instance of <UNK> string instance of <UNK> string instance of <UNK>
Reference: why not fail quickly here as well since you claim to require a tasklistener below in getrequiredcontext?
Candidate: can we use <UNK> <UNK> <UNK> mapboxwebviewmapfragment
Reference: i think this should be a copy, not a reference. we wouldn't want changes to one jdbi context changing the behavior of another.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: remove printstacktrace and catch and log the proper exception
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what does changed mean here ? better name ?
Candidate: can we be the <UNK> if we don't do we need need to evict the <UNK> init.
Reference: you can remove the need for the finally statement by using a [try with resources statement](<link_0>
Candidate: should we re-throw the exception here?
Reference: since this property typed boolean, you can use: boolean.tostring(vminterface.isportmirroring())
Candidate: can you use the rhs of <UNK>
Reference: word "check" is overkill
Candidate: should we use the <UNK> here?
Reference: when we're passing () -> false in, we could pass in something like commitlogprocessor.neverprofile()
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: shouldn't this need to be done in the refresh instead of during the creation of the controls?
Candidate: this should be <UNK>
Reference: can this bit be extracted in a method?
Candidate: should this be the <UNK>
Reference: would also be nice to add validation for partition keys and check that the column names for clustering and partition keys are correct and that the ordering is right.
Candidate: can we move this into a separate method?
Reference: you don't have to check for id equality if the listener is defined on sign_in_button
Candidate: should this be <UNK>
Reference: what about calling closeentry instead? will that work out?
Candidate: i don't understand this matters, if we matters, but i don't understand why, it matters, but it matters, but it would be nice to do the <UNK> of the <UNK>
Reference: the event description is wrong, the account is being deleted it may not even mention the users and simply say removing all users under the account.
Candidate: i don't think we need to do we need need to check the <UNK>
Reference: how about bytecontainments? especially an "s" is missing.
Candidate: this should be <UNK>
Reference: i think this whole thing will be more intuitive if you name this variable as waitenabled or something, and do the following where this method is called:  java boolean
Candidate: should we be the <UNK> here?
Reference: same as above, i think you should mix timezones.
Candidate: should we print the fixture.
Reference: i know this isn't introduced here, but is it actually useful? this check looks like it has been here since the initial oss commit, though in that form it looks
Candidate: why do we need to the the payload?
Reference: i think a static import for common preconditions checks would be reasonable i believe?
Candidate: please remove the method("post")
Reference: ditto. it appears you have a room reference on exam directly.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: please remove "public" (our mistake, because the other constructors in this class should be package-private, too).
Candidate: should this be <UNK>
Reference: i think you should separate _expectation_ section from _given_ and _action_ sections, this test case is not obvious
Candidate: why do we need to mock <UNK> here?
Reference: you should actually call super with false as a third parameter.
Candidate: this should be <UNK>
Reference: this is wrong design, we should not touch inner classes ever. instead, let's use new provisioned(..).acquire()
Candidate: you don't need to use the <UNK>
Reference: i think it's clearer to add else { return true; } here
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: not sure this is correct: * catalogeffectivedate = now() * that.catalogeffectivedate = null * => catalogeffectivedate != null && that.catalogeffectivedate is false and that.catalogeffectivedate != null if false * =>
Candidate: i don't think we need to use objects.isnull == null && <UNK>
Reference: this can be made simpler using the fact that remove returns null if the mapping doesn't exist, and we have putifabsent at our disposal. java final string tag = tags.remove(fromtag);
Candidate: this getstate() { <UNK> <UNK> } <UNK> <UNK> { <UNK> }
Reference: entitymanager.find(sessiondata.class, sessiondata_id) ?
Candidate: why do we need snapshotid here?
Reference: this is wrong as you ignore thrown exception - i suggest to not use streaming api as its also terrible sometimes as in this example being overly complex and causing
Candidate: use <UNK> <UNK> <UNK>
Reference: why do you set the username here?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't think we need to do we need to check the
Reference: please do compile and save it in final field of class, to improve performance a bit.
Candidate: why do we need to check the <UNK> here?
Reference: we can replace the method call of(partialfunction) by providing a type hint <r>:  java return () -> try.<r> of(partialfunction::apply).getoption();
Candidate: rename to <UNK> <UNK>
Reference: based on the work done in the pay/receive pr's, the checkpindialog will be replacing unlockwalletdialogfragment
Candidate: this should be <UNK>
Reference: the i == const.points_not_submitted might not be necessary because the return value is the same as the else clause.
Candidate: the syserr should be be the <UNK>
Reference: you already synchronized at line 261, do we still need this?
Candidate: should we log the exception here?
Reference: i am not sure that a needs here, i think renderassource will be better
Candidate: you don't need to use the <UNK>
Reference: please, change as discussed.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: as mentioned on previous patch, there is no guarantee that 2 objects with the same hash code will be identical. you would have to be very unlucky with a typically
Candidate: this should be the getallregistrations() method...
Reference: can you put this into a private method or so. that will help to make clear what this is doing.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: can you elaborate in which cases stop can throw runtimestartinterruptedexception?
Candidate: i'm not sure that this is work on the <UNK>
Reference: suggestion log.debug("the underlying yarn version does not support external resources.", e);
Candidate: why do we need this again?
Reference: why return atomicinteger?
Candidate: should be replaced with <UNK> ?
Reference: also this should be probably split to two methods, one for tcp and one udp, see usages, where you are using this method in context when you are actually want
Candidate: i don't understand why, but it is be the if it matters, but i am not sure why, but it would be good to
Reference: could you remove 'final' off this line for consistency with line 88? i see that you need it on line 87.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please put this in a subsystem.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: partially my patch solves an issue with trylock. whenever we receive an event and the lock is already taken we loose data. do you think the code will handle using
Candidate: i don't understand what if you want to trim the
Reference: suggestion if (getdateofdeath() == null) {
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: shouldn't this be error()?
Candidate: i don't think we need to throw an exception
Reference: can this logic be added in the catch, this eliminating the need for both this "if" statement as well as the "setdefaultvalue" variable?
Candidate: should we use the <UNK> here?
Reference: rename
Candidate: please use <UNK>
Reference: string url = selfredirect(item.geturl());
Candidate: please use <UNK>
Reference: there are a bunch of places where getlinkedaddresses are iterated over, and the collection is not thread safe. we need to double check those are covered by an external sync
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: commited->committed
Candidate: why do we need need to the <UNK> here?
Reference: not sure about this; sure, this is a lot of exceptions in the method signature, but this encourages throwing whatever you want and not caring about what you catch.
Candidate: please remove the method("post")
Reference: this should be conditional: if (action.issetvnicprofilemappings()) { ... } we do this in general to avoid the possible side effects of running that code when the request doesn't contain the
Candidate: should we be <UNK> here?
Reference: cleaner to use gauva's threadfactorybuilder instead of having to write our own. you could also remove the atomicinteger then
Candidate: this should be the <UNK>
Reference: should fail if the list is empty
Candidate: i disagree with an exception?
Reference: another char loop
Candidate: can be simplified to: java <UNK> = <UNK> .filter(s == null) ? <UNK> : ""; <UNK> : ""; <UNK> : null;
Reference: shouldn't this be not equals ? as the semantics says cluster modified ? you can cache the time if the check equals to avoid doing the expensive call. but the
Candidate: should we be schedule() { <UNK> } (throwable { <UNK> { return <UNK> }
Reference: it will fetch heliun.json from web everytime. it this intended?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: why is aslist called? the callee, getcombinedanno, will make a copy anyway.
Candidate: please use map<> on the same as above.
Reference: if you find yourself nesting further down then two levels its generally a good practice to refactor the code into smaller methods.
Candidate: can be replaced with <UNK> names?
Reference: is that called a lot? because we now have a o(n*m) instead of o(n) given that value.buffer is an arraylist
Candidate: why do we need the <UNK> here?
Reference: i think that gomethoddeclaration is not appliable for gobench, so something like  type t int function (t) b<caret>enchmarkname() { }  shouldn't produce gobench run configuration, right? if so
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: super minor point that if this was a stack you could pop(), or a queue you could poll() and it would be a bit more clear how you're using the
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: please add ioe to the exception.
Candidate: please use <UNK>
Reference: getclass().getsimplename() is quite expensive. you could extract it a a constant
Candidate: should this be null? if we { null) { throw new <UNK> { <UNK> } <UNK> { return null; }
Reference: use logger instead.
Candidate: should this be <UNK>
Reference: the log level needs to be reset to default after this test done.
Candidate: why do we need to permission?
Reference: please drop this, we don't log the rest anyway. the plugin framework logs everything if in debug mode.
Candidate: do we need to catch <UNK> here
Reference: why is this an option exactly, when it could simply return an empty seq instead? @danieldietrich?
Candidate: what happens if the is is invalid?
Reference: look like this is not used anywhere. also if we do need it it should not be public
Candidate: this readasstring(...) instead of <UNK>
Reference: you missed to add comparelist as parameter here.
Candidate: why is not needed here as far as far as far as far as far as far as far as far as far as far as far as far as
Reference: can we keep this test case? "s3a://" + bucket_name + "/test/"
Candidate: why do we need need to the <UNK> here?
Reference: logging
Candidate: i don't think we need to check for the <UNK> the <UNK> <UNK> <UNK>
Reference: java 8 has uncheckedioexception which would be perfect fileexception is going away so let's not even talk about him again... @swankjesse any thoughts?
Candidate: why do we need to here?
Reference: i'm not following this logic. why have two script hashes for loading the same script, lpoplpush_lua? is this second one supposed to load workerscripts/frommultiplepriorityqueues.lua?
Candidate: this we expecting the getconnection in the presenter.
Reference: i guess instead of setting to 0, it may be more future-proof to and-off the bit.
Candidate: i don't think we need to log the exception in the software exception we don't want to log the
Reference: static string constants
Candidate: why do we need to use <UNK> here?
Reference: hm, why "ruleimpl" instead of "rule"?
Candidate: should we use the <UNK> here?
Reference: is it possible to set it to left align? looks better imho
Candidate: nit: this breaks backwards compatible. breaks backwards backwards breaks backwards backwards backwards breaks backwards caused but it seems to me.
Reference: i would rather choose eclipse or jboss tools for the default product version
Candidate: why do we need to use <UNK> here?
Reference: another space after add
Candidate: i don't think we need to check if the == null) { throw <UNK> } else { if <UNK> { <UNK> }
Reference: unnecessary concatenation on the same line after some formatting changes
Candidate: why do we need the <UNK> here?
Reference: the test fails for me on the regular basis:  org.junit.comparisonfailure: expected :3 actual :4 <click to see difference> at sun.reflect.nativeconstructoraccessorimpl.newinstance0(native method) at sun.reflect.nativeconstructoraccessorimpl.newinstance(nativeconstructoraccessorimpl.java:62) at sun.reflect.delegatingconstructoraccessorimpl.newinstance(delegatingconstructoraccessorimpl.java:45) at org.springframework.integration.ftp.inbound.rotatingserverstests.testvariablelocaldir(rotatingserverstests.java:144)
Candidate: we don't need to do we need need to do we need need to do we need to <UNK> detection.
Reference: this means, if the number of partitions are set to more than one, then a threadpool with multiple threads will be created. i think we just need a single thread.
Candidate: can we be null?
Reference: style-nit: use curly brackets and wrap the return to next line.
Candidate: why do we need the <UNK> here?
Reference: would it be possible to move the save/replacer logic into a shared impl class + interface with default methods? it seems to be a common use-case for jenkins which could
Candidate: i don't think we need to do we need need to check the getcredentials for the getcredentials
Reference: remove this if statement
Candidate: should this be <UNK>
Reference: this method should just check if the maven-executable is present in ${karaf.data} (in the correct version)
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: i tend to think that this check should not be required if flowfrommethodinvocation return an empty list.
Candidate: why do we need the <UNK> here?
Reference: we should be testing for feed with two clusters.please make that change so that your code is thoroughly tested.
Candidate: <UNK> *= 2;
Reference: unrelated change
Candidate: why do we need to use <UNK> here?
Reference: collectors.toset()
Candidate: why do we need to use <UNK> here?
Reference: not sure if it matters, but to be on safe side, collect to a set that can preserve order?
Candidate: why do we need to mock <UNK> here?
Reference: i'd remove this error handling here? (as it presumes createhandled)
Candidate: why do we need the <UNK> here?
Reference: v should be renamed to view and follow adequate variable names everywhere
Candidate: can we move this into a messages.properties method?
Reference: returnedcomponent.setforeground((item != null && !item.ispublicattribute()) ? jbcolor.gray : table.getforeground());
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: why there is no gettestsuitenametoexecute in this case?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, but it matters, what is happening.
Reference: technically, after a return, no need for an else.
Candidate: why do we need the <UNK> properties?
Reference: this is currently pulling from the training date, not the date for the new training completion.
Candidate: why do we need the <UNK> here?
Reference: i think we can drop the enum and make this public abstract string getname();
Candidate: should this be the <UNK>
Reference: should this be done internally by retrypolicyexhaustedexception? what other uses are there for it?
Candidate: this should be <UNK>
Reference: s.a.
Candidate: should we use the sting to use the enum?
Reference: i wonder if we should have it as a configuration property (see testcontainersconfiguration) /cc @rnorth @kiview
Candidate: what is this a <UNK> of the <UNK>
Reference: should use settablename() here.
Candidate: why do we need need to the <UNK> here?
Reference: shouldn't this raise an exception instead of logging if the put is not applied?
Candidate: i don't think we need to check the if (state { <UNK> } <UNK> { <UNK> <UNK> { <UNK> { <UNK> }
Reference: please move this line right below .settotalwaitingstatcount(totalwaitingstat.getleft()).
Candidate: why do we need need to the <UNK> here?
Reference: the if can be replaced my introducing an apply(frameworkmethod method, description description, object target, statement statement) method in ruleentry.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: math.pow(10, -10) is a magic constant.
Candidate: feedid is the feedid
Reference: minor - but should be hashtoinstancessn rather than hashtoinstancessn
Candidate: should this be <UNK>
Reference: consider using spaces (instead of tabs) for indentation, to keep the same format as the rest of the file.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: since this is an enum now, wouldn't it be better to use switch here?
Candidate: this should be the if (throwable <UNK> { return <UNK> } { return false; } else { if (throwable { null) { <UNK> { <UNK> { <UNK> { <UNK> {
Reference: do you want to switch this to the same jooq pattern as clientdao?
Candidate: why do we need the <UNK> here?
Reference: first note: your cast could leverage a classcastexception (no instanceof check) here should should try to change the next page (each pattern will have its own configuration page) if this
Candidate: why *= 2;
Reference: !isempty and throughout the cl
Candidate: the syserr should be be the
Reference: this will create flood in the event tab
Candidate: i don't think we should need to the the <UNK> <UNK> <UNK>
Reference: shouldn't here be a selectednetworkelements.clear()
Candidate: can we make sure that the <UNK> is the the <UNK> types? wouldn't it easier to follow the same as the same as the same as the same as the
Reference: weird argument names, inconsistent with usual naming expressions.
Candidate: should we log the error message in the messages.properties ?
Reference: no need for a static import here.
Candidate: why do we need need to the <UNK> here?
Reference: add not-null check here.
Candidate: this should be the <UNK>
Reference: have you tried this with a task plugin? won't this fail? i mean, if you have a task plugin as well, registered, then this can cause a problem, right? every
Candidate: should we throw an exception here?
Reference: the way this is done, you're giving the sum of all reds, greens and blues and give the "divider" as a multiplier (which are the opposite of each other). might
Candidate: please use <UNK> <UNK> <UNK>
Reference: minor nitpick! this duplicates code from getcanonicaluri. we should have a private method that generates the appropriate uri for any given domain, and have getcanonicaluri and getmobileuri call that.
Candidate: why do we need to use <UNK> here?
Reference: these are deliberate. using for each allocates an iterator, which we avoid by writing the loop ourselves. same with the rest of the loops unfortunately.
Candidate: should we throw an exception?
Reference: it might be better to just remove this line.
Candidate: you should use the exception in the constructor?
Reference: math.max
Candidate: can we use <UNK> <UNK> <UNK>
Reference: you may want to use assertequals ? the advantage would be that, when assertion fails it will tell you what's mismatching. there are lot of asserts like this, please change
Candidate: please remove the unused line.
Reference: suggestion logger.info("request diagnostics: {}" readresponse1.getdiagnostics());
Candidate: why do we need need to the <UNK> here?
Reference: should be a private constructor, because builder is used.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: debug/trace/remove?
Candidate: this fail()?
Reference: why assume, not assert?
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think the mockwebserver can be removed since it doesn't look like it's needed for this test.
Candidate: why do we need the <UNK> here?
Reference: suggestion if (util.isemptystring(rolename)) {
Candidate: should we use the <UNK> here?
Reference: query builder not sure to be set here, needs check?
Candidate: please use <UNK> <UNK> <UNK>
Reference: please keep the todo
Candidate: this should be setemptyelement().
Reference: hmm... a tricky date format. this is usable right now, but anybody that wants to use it will have to convert it to something usable. either in this pr or
Candidate: please use <UNK>
Reference: better to use logger here so that it can be used in other places?
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: with n and p?
Candidate: unsupportedoperationexception should be <UNK>
Reference: use closer
Candidate: why do we need need to check the <UNK> here?
Reference: nonexistentlockservice for consistency.
Candidate: please remove the method("post")
Reference: align this class with double version. e. g. in double version methods go in different order, and the logic is different.
Candidate: this should be returning null if possible?
Reference: you could consider adding a logging statement here. this method has three code paths of which two contain a logging statement. keeping this the same for the three paths could
Candidate: do we need to here?
Reference: suggestion log.warn("could not remove referencepoint, no referencepoint is registered with id: " + id);
Candidate: this should be repelaced e1 { <UNK> } <UNK> } } } } }
Reference: java docs ?
Candidate: should we use the getconnection here?
Reference: since the log is now detached from the build log i think we need a timestamp at the beginning of every log line to be able to correlate better with
Candidate: do we want to do we need need to do we need to do we need to do we need to do we need need to do we need to
Reference: isn't this more the currenttotalwidth?
Candidate: nit: space after the left , after "if 0) { 0) { 0) { 0) { 0) { 0) { 0) { 0) { 0) { 0) { 0) {
Reference: this can just be replaced with docmatches.matches.compute(), i think?
Candidate: should this be the <UNK>
Reference: find a unified way to report result, all by metrics or logs
Candidate: should we catch (throwable e) { return; } catch (interruptedexception e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw
Reference: shouldn't this be replaced by the other procedure? or do we need two?
Candidate: please import?
Reference: the first double could be double
Candidate: use <UNK> <UNK>
Reference: this looks suspicious: both minstr and maxstr are initialized from values[1]
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: if parambrickfromvolume == null or parambrickfromvolume.getid() == null again, you could return false
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: this warning suppression can be removed if the below line is changed to partitionattributes<string, string> attributes = new partitionattributesfactory<string, string>()
Candidate: why do we need to use <UNK> here?
Reference: please use easybind.map(statemanager.activedatabaseproperty(), ...) instead of createbooleanbinding. it's a bit more readable and shorter.
Candidate: why do we need to use <UNK> here?
Reference: this became complex to understand because you're ending with tests leveraging @before setup and some tests don't. i would rather keep the design of the test which is shared between
Candidate: this this for?
Reference: a fragment should not use the settingsdatasource, it's the presenter who should invoke request to save data in data layer but through of a use case, please create also savesettingsusecase
Candidate: this should be (throwable <UNK> { <UNK> } (throwable { <UNK> { <UNK> { <UNK> }?
Reference: what happens with parsing? failure or silent?
Candidate: the syserr should be be <UNK>
Reference: avoid unwanted blank lines.
Candidate: this should be <UNK>
Reference: this should be done before fixaddressesfordomainmode
Candidate: why do we need the <UNK> here?
Reference: three more lines of english.
Candidate: this should be null if (state != null && <UNK> != null) { return state; }
Reference: while this made sense for consumercompliancejob ( no point in calculating compliance of a consumer that has been deleted ), is the same true for import as well? i feel
Candidate: can we remind me that we expecting the getconnection on the <UNK> already?
Reference: rulesdao.getrules() already returns a list.
Candidate: why do we need need to mock <UNK> here?
Reference: there is the potential for an uncaught illegalstateexception from the call to case.getcurrentcase if there is no open case.
Candidate: why do we need to use <UNK> here?
Reference: should this be before ranger
Candidate: what happens if the is is rejected
Reference: this can be extracted and be reused below.
Candidate: can we wait message?
Reference: nitpick: wouldn't step = -step be clearer? (and is this check even necessary?)
Candidate: should we call <UNK> <UNK>
Reference: if this is a generic executor service provider, then i don't think we can be this specific and call the payload a "message". what about s/message/payload/?
Candidate: why do we need the <UNK> here?
Reference: suggestion if (direction == direction.outgoing) {
Candidate: can you use the <UNK> <UNK> <UNK> <UNK>
Reference: when would sql be null?
Candidate: why do we need to use the <UNK> here?
Reference: keepbranch ?
Candidate: google name of skipping of skipping <UNK>
Reference: nit: pass cause in constructor.
Candidate: typo: <UNK>
Reference: do this in resetscaleandtranslation or resetinternalstate.
Candidate: can you move this into a separate method?
Reference: do we need synchronization here? will the object be created multiple times?
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() here?
Reference: we don't need this variable if you improve the code structure.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please write a unit test for this. that will probably reveal a bug. i think what you wanted to write was resolvedcomparisonbranchname.matches(resolvedbasebranchname). <link_0>
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: this variable is called twohoursago, but in fact it could be any number of hours ago.
Candidate: why do we need the <UNK> here?
Reference: i think you can just do instanceof map here and cast object to map, to avoid the copy. the instanceof check would make it safe to use @suppresswarnings("unchecked")to suppress the
Candidate: can we use the getconnection here?
Reference: style : 8 spaces continuation indent
Candidate: why do we need the <UNK> here?
Reference: i believe the minimum is 1 for each of these, don't think it matters too much here, but would be good to consistent
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can you change the variable name to newmember
Candidate: please use <UNK> <UNK> <UNK>
Reference: can you file an issue about this? the fact that these aren't pluggable for varying sql impls is not ideal. this shouldn't have to have a this kind of translation.
Candidate: why do we need to mock <UNK> here?
Reference: <link_0>
Candidate: why do we need to mock <UNK> here?
Reference: i think this can be a foreach loop as well.
Candidate: i don't understand why, but it matters, but it seems to me to do, but it would be easier to read explicitly)
Reference: the implementations of cache (such as net.sf.ehcache.cache.java which we use by default) are all highly concurrent. there should be *no* reason to synchronize on the cache object. please don't.
Candidate: the syserr should be be the
Reference: with the key-value set introduced i don't think each header element passing by will be a messagepriorityelement, so that name had better changed to something more general.
Candidate: why do we need the <UNK> here?
Reference: this will introduce a easy to exploit security issue as the referer information can contain any kind of string which must not be a valid uri nor a uri leading
Candidate: i pagelogging
Reference: this return seems redundant.
Candidate: why do we need the <UNK> here?
Reference: please consider adding a preconditions.checkargument to check that certs is not null.
Candidate: should this be specific?
Reference: be positive: return vnicprofile.getnetworkqosid() == null || getnetworkqos() != null ? validationresult.valid : new validationresult(vdcbllmessages.network_qos_not_exists) ;
Candidate: if <UNK> != null) { getparameters().getstoragedomainid() { getparameters().getstoragedomainid() { <UNK> = <UNK> }
Reference: gratuitous, revert
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> <UNK>
Reference: since getstreamids returns a set, could you change the expected values to compare to set? i realize that testgetstreamids should have been originally written to compare to a set instead
Candidate: why do we need to use <UNK> here?
Reference: remove the reversal here, and let the jdk 8 implementation return it in reverse, and the jdk 9 implementation *not* reversed.
Candidate: this should be <UNK>
Reference: should this be error() instead of info()?
Candidate: why do we need this?
Reference: suggestion if (segment.getrelationshipdirection() == direction.incoming) {
Candidate: if (filter.getrelationshipdirection() == direction.incoming) {
Reference: in a try with resources statement the resource is implicitly final, so here you can remove the final modifier.
Candidate: the syserr should be <UNK>
Reference: let's either just say jwt since that is the name of the class or json web token since that is what jwt stands for.
Candidate: this s?
Reference: we shouldn't default to enrollment. mpower 2.0 configs are going to change anyway, so back-compat is a non-issue. adding a special case for enrollment just adds complexity and confusion. if
Candidate: can you use the <UNK>
Reference: rename this to refchildelement or refchild
Candidate: rename to <UNK>
Reference: need only ioexception
Candidate: <UNK> <UNK> expected)
Reference: now when we conditionally added comma we don't need to do a substring(0, length - 2)
Candidate: can we use the getconnection in the <UNK> generation?
Reference: collectors.toset() is terser (and set<> is a better return type than hashset<>).
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: the isbindtovm is misspelled, please rename to isboundtovm. this line is being repeated in different broker implementations. please introduce the method below in cloudlet interface (and the implementation in cloudletsimple):
Candidate: i don't think we need to throw an exception if the is is null.
Reference: you can use collections.singletonmap.
Candidate: please use <UNK> <UNK> <UNK>
Reference: we should cleanup when the bundle is destroyed rather than using a shutdown hook.
Candidate: btw i don't think we need to repeat the check?
Reference: should this be a warning and not an info level message? it seems like it shouldn't happen.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: suggestion if (null != cookies) {
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: you could use system.lineseparator().
Candidate: can we use the <UNK> the the properties? :-)
Reference: i'm wondering if we should use validclientsbytaskloadqueue (with a (c,t)-> true predicate) instead of a plain priorityqueue here, since our queue now nicely enforces uniqueness of elements.
Candidate: why do we need need to the <UNK> here?
Reference: should require permission on disk only, calling super will add requirement for vm as well
Candidate: should be replaced with <UNK>
Reference: what about to use 2 methods authorizedinternal in 1 if clause with different objects? like:  if(!authzresolver.authorizedinternal(sess, "removespecificuserowner_user_user_policy", collections.singletonlist(user)) && !authzresolver.authorizedinternal(sess, "removespecificuserowner_user_user_policy", collections.singletonlist(specificuser))) { .. }
Candidate: please fix.
Reference: the rule is that hashcodes must be the same if equals returns true. it's not the case here if pagenumber is equal and some other field is different. the easiest
Candidate: use objects.hash()
Reference: builder is not the perfect name here. uniontype.
Candidate: please use <UNK> <UNK> <UNK>
Reference: is there a reason we don't batch the ids in the deleterequest?
Candidate: could you matches matches null) null) null) null) null) null) null) null) null) null) null) null) null) null) null) null) null) null) null) matches null) null) matches null) matches null)
Reference: well the animation looks really cool, but i think it's not needed!
Candidate: this we complains about narrowing the to to do, but we don't need to do we need need to evict the <UNK> <UNK> <UNK>
Reference: i'm not a huge fan - keyedstream.of(historyqueries).mapkeys(...).map(...) gets you most of the way, although i'll confess that i'm not sure how to do the merging resolution in keyedstream (although you
Candidate: you can use <UNK> <UNK>
Reference: static imports (of e.g. iterables.transform) or no static imports? mixed bunch further down, e.g. ec2listnodesstrategy **with** imports and plenty of other cases **without**.
Candidate: can we use <UNK> boolean.class)
Reference: this should take the input content-types as parameter to sort out which processors to use.
Candidate: why do we need need to override <UNK> here?
Reference: should be protected at most.
Candidate: please use <UNK>
Reference: check for null here?
Candidate: i don't think we need to check the <UNK>
Reference: rename the job_name constant to app_name.
Candidate: please remove the print.
Reference: maybe it is a good idea to log this (as warn) ?
Candidate: the syserr should be be the
Reference: is includechildren ever used?
Candidate: why do we need the <UNK> here?
Reference: meh: could swap these two conditions, so that !singlevalue can short-circuit the isiterable call.
Candidate: can we move this piece of this piece of this piece of this piece of the piece of the piece of the piece of the piece of the piece of
Reference: should be baseedit
Candidate: why do we need need to the <UNK> here?
Reference: nit: need a space after "class"
Candidate: why do we need need to the <UNK> here?
Reference: missed a null check...
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: this looks like the same implementation from instancedconfiguration, but maybe we can extract this into a function in formatutils or commonutils so we don't have the code in both places?
Candidate: i don't need to check for the <UNK>
Reference: no use for printer. session can be a local variable. no need for putting in the constructor.
Candidate: this should be <UNK>
Reference: !isempty
Candidate: can be replaced with <UNK> ?
Reference: same here, move to a reusable predicate and get it injected.
Candidate: use try-with-resources here instead of <UNK>
Reference: uh, oh - there is no function equality. a function cannot be part of a map key.
Candidate: why do we need to use the here?
Reference: you can remove leaseholder == null && it will always be true
Candidate: i don't understand this matters, what about the use-case for the <UNK> <UNK> is the <UNK> <UNK> is the <UNK> <UNK>
Reference: please invert if condition
Candidate: iterable<integer> afaik.
Reference: remove before merging
Candidate: this should be the <UNK>
Reference: i think we can't modify the code like this. the contextid can be either joblet node or context node
Candidate: 4.2 1.0.rc5
Reference: i guess you need to also run the background task (i.e call execute()). but i don't like the fact that the constructor has the side-effect of running a new thread.
Candidate: why == null || <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> ==
Reference: extra line
Candidate: why do we need to use <UNK> here?
Reference: should this be getsession(false) ? getsession() is the same as getsession(true). i ask because create() below does an exists() check and if false does a getsession(true). but it seems like
Candidate: if <UNK> != null || <UNK> && <UNK> { <UNK> }
Reference: better to rename like fetchdatabannerinfo as isproblemxblock seems boolean return type method.
Candidate: you should need to call the <UNK> to the <UNK> and then the <UNK> is called <UNK> <UNK>
Reference: space missing
Candidate: if <UNK> == <UNK> || <UNK> && <UNK> { <UNK> }
Reference: i would set it private as this class ought to be externalized at one point.
Candidate: why do we need this method("post")
Reference: original failed to read was correct.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: one downside i see is that we have two constructors now with differing implementations. perhaps debatable, but it can be easier to reason about a class when there is one
Candidate: use <UNK>
Reference: can you elaborate what this operation does, because it is not obvious why result of this operation is never used.
Candidate: should we log the exception?
Reference: i feel like my last feedback got ignored
Candidate: this should be <UNK> as c, etc..
Reference: this is problematic for the following situation. * open rfile with config for myblockcachemanager * open 2nd rfile with config for tinylfublockcachemanager seems like the 2nd rfile will use myblockcachemanager
Candidate: why do we need to call <UNK> here?
Reference: again, insufficient. filewriter is also autocloseable.
Candidate: why do we need this?
Reference: still using ctx here
Candidate: should we throw an exception? if we { null) { throw new <UNK> } { throw new <UNK> { throw new <UNK> { throw new <UNK> { return <UNK> }
Reference: perhaps replace by: return chain[0].getissuerx500principal().getname().equals(chain[0].getsubjectx500principal().getname()) (there's no need for the if/else)?
Candidate: if this { return false; } else { if (throwable { <UNK> { return false; }
Reference: albeit not related to this patch - shouldn't be called explicitly, but via its getter.
Candidate: you don't need to the <UNK> <UNK>
Reference: just return "kudu" here
Candidate: @exper0 let's use <UNK> instead of <UNK>
Reference: extra space
Candidate: this should be <UNK>
Reference: @slubwama why uses patient.getuuid().tostring() when the uuid is already a string
Candidate: why do we need the <UNK> here?
Reference: is there a reason not to clean this up in a finally block sooner?
Candidate: typo: <UNK>
Reference: we can remove this.
Candidate: please use <UNK>
Reference: ditto here, no need to move the validation to datadoghttpclient
Candidate: the syserr should be be the
Reference: double ||?
Candidate: should we throw an exception?
Reference: usually this ) { is on the next line
Candidate: why do we need need to clone the <UNK> ?
Reference: java.util.map.entry -> map.entry -> entry is enough (already used in other places).
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: final
Candidate: why do we need to here?
Reference: do you mean this to sort team1 before team2 if either of them are null? it seems like it should sort the null one to be first?
Candidate: i don't understand this matters, this matters, this matters, if you matters, this matters, but you don't need to use the <UNK> <UNK>
Reference: we have already make use of generic type so why here we still need to cast?
Candidate: why do we need the <UNK> here?
Reference: have a bytebuffer based impl?
Candidate: can we use checkargument to the <UNK> generation?
Reference: please shorten the exception message to method name: getsponsoredmembers, since this text is wrapped in sentence by exception constructor and passing own sentence would result in nonsense text. thank you.
Candidate: .. should be called .. should be called ..
Reference: i didn't understand why you are traversing the inputstream but returning when the first element is retrieved.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand this matters, if the matters, but i don't understand
Reference: verify the body of the request too.
Candidate: please import?
Reference: lets use vectorutils.of(...).
Candidate: why do we need to evict the here?
Reference: call this variable accountservice
Candidate: why do we need to use <UNK> here?
Reference: this should be method.methodprefix.equals(prfx) test scenario:  @test public void getisolationmethodtest() throws exception { physicalnetwork.isolationmethod method = new physicalnetwork.isolationmethod("bla"); final physicalnetwork.isolationmethod isolationmethod = physicalnetwork.isolationmethod.getisolationmethod("bla"); assertequals(method, isolationmethod); }
Candidate: this should be <UNK>
Reference: i'm sorry i didn't notice/think of this on my first review, but i just realized that i was envisioning us sharing/sending the file itself, rather than sending the log contents
Candidate: i don't think we need to check the <UNK> <UNK>
Reference: check null edit part, model checl view type for element before casting
Candidate: can we return an empty collection instead of returning null?
Reference: static imports
Candidate: please remove the method("post")
Reference: i guess it will be better to allocate arraylist with fixed capacity (alternativenames.size() +1) and then add all the names. this will prevent from potential reallocation.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: nitpicking here - wouldn't it be better to place the 10 constant on a static field?
Candidate: if the == null) { return; } else { if (context { <UNK> { <UNK> { <UNK> } else { return; }
Reference: nit: you can iterate from offset to offset + length as done in other loops in this pr. there are several similar loops below if you want to update them
Candidate: rename <UNK> to <UNK> <UNK>
Reference: as discussed in main issue, this should be in the check for the entire method. maybe this should be moved to the ischeckedmethod method?
Candidate: please use <UNK> <UNK> <UNK>
Reference: please fix 'packagenamewithsuffix' name
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { return false; }
Reference: not sure why you need this here. by adding this as part of the activation logic, then we don't have to worry about it.
Candidate: why do we need this check?
Reference: suggestion if (s.isempty()) {
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: not possible to combine with the test below?
Candidate: this should be the <UNK>
Reference: i don't think we need this check nor this method. simply call georepdao.getbyid(getparameters().getgeorepsessionid()) when needed, if getparameters().getgeorepsessionid() we will simply won't get any result
Candidate: this should be the <UNK> situation.
Reference: ![major](<link_1> 'severity: major') make "getpluginkeyandresourcepath" a "static" method. [![rule](<link_2>](<link_0>
Candidate: i don't think we need to check for the <UNK>
Reference: since this method no longer returns null, let's change the return type to int.
Candidate: the syserr should be be <UNK>
Reference: you also need to check it doesn't end with "/", which would indicate a folder
Candidate: should this be the <UNK>
Reference: typo
Candidate: i don't think we need to hide the exception in the
Reference: is community using only one language? if so this text should be in some kind of final in this class
Candidate: use <UNK> instead of stringbuilder?
Reference: i think "parent" here is going to be a confusing word to whoever is reading this error. it would be more helpful to describe "there was no xform definition defined"
Candidate: the syserr should be be the
Reference: this specific if(){} else if(){} has two branches with exactly the same code. what is the reason for that?
Candidate: why do we need the <UNK> here?
Reference: same here, shouldn't we stop startup, when roles are missing and can't be created ?
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: need to validate that action has glusterservicetype parameter
Candidate: please use the unmodifiableset instead of <UNK>
Reference: seems like we'll get stuck in the "build in progress" state if the user decides not to proceed with the build after seeing that they have busy terminals?
Candidate: should we be the <UNK> here?
Reference: i know this method wasn't added in your pr, in fact i added it so freetypebitmapfontdata can be subclassed to override methdos, but this feels weird. probably would be better
Candidate: shouldn't this be be non-null?
Reference: i believe that is true instead of false
Candidate: please remove the <UNK>
Reference: this isn't how you implement cooldowns
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: bit verbose, we probably just need the stack trace suggestion e.printstacktrace();
Candidate: this should be the <UNK>
Reference: style-nit; we don't use braces for simple single stament constructs
Candidate: this should be the same as above.
Reference: actually, i think initlinemodel() should be no-op too; the semantics of it are what happens when a different key is picked, but in this case nothing should change when a
Candidate: wait.forelementclickable() should be null
Reference: let's use ternary operator here.
Candidate: why do we need the *= 2;
Reference: we need a small correction here. spec says: > return false if any item is false, else true if all items are true, else null the previous implementation was wrong,
Candidate: you can use the <UNK> here as well
Reference: do you want to go ahead and make this change? if you are unsure either i or @hschmack can help you with it. if not, open a work item.
Candidate: i don't think we need to throw an exception
Reference: i would replace those statements above with this(handledexceptions,failurewindow,halfopenafter,threshold,false).
Candidate: hmm. this should be the fixture.
Reference: isalloweduser was purposely put below matchessyncpath logic since it's a more expensive operation. trying to ensure this function is as absolutely efficient as possible for resource fetches not involving remote
Candidate: why do we need to check for the <UNK> <UNK>
Reference: rather than hard-code "people" here, how about "person_id in (select person_id from " + people_table + "where..."
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: where is this logic around rendering a json array to string used in this pr ?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can you structure this as a series of tests rather than a nested if/else clause? it's easy to miss that return validatepredicatevalue(...) in the middle.  java if (!(clause instanceof
Candidate: should we be the <UNK> here?
Reference: does this need to be instantiated again?
Candidate: the syserr should be be <UNK>
Reference: this line can be pulled outside directly in line 158.
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: is there a reason this is a set? set seems suspicious to me (vs. list) for two reasons. - i think druidcluster is meant to only have a single copy
Candidate: should be setemptyelement().
Reference: logging should removed / disabled before merging
Candidate: why do we need to use <UNK> here?
Reference: this could possibly break iterators that extend wrappingiterator and override getsource(). i don't think we should make this change. maybe it would be better to deprecate wrappingiterator and introduce another
Candidate: this should be the <UNK>
Reference: in this method you are doing the commit on both the resourceresolver and the jcr session wrapped with the rr. please just stick to the rr and omit doing the
Candidate: please use <UNK> <UNK> <UNK>
Reference: does this .useplaintext(true) change the behavior?
Candidate: why do we need the getconnection here?
Reference: is this the default in the new api?
Candidate: if you is the <UNK> <UNK> && <UNK> || <UNK> { <UNK> } <UNK> { <UNK> }
Reference: this constructor should have package visibility instead of public
Candidate: use getclass().getsimplename() instead of stringbuilder?
Reference: one question. run() is called in every iteration, right? if so i'm curious it would be reasonable to generate a plan which can be possibly changed due to the migration
Candidate: i don't think we need to do we need need to do we need need to do the getcredentials getcredentials
Reference: @nielscharlier please refactor to try-with-resources. shorter. less error prone. in this case, an error will leave the inputstream unclosed.
Candidate: why do we need the exception here?
Reference: why are you using hour here? hour returns the 12-hour clock representation, while hour_of_day returns the 24-hour clock. if you used hour_of_day, then you would not need the next two
Candidate: should we print stack trace to debug level?
Reference: this is only valid for a standby, isn't it more intuitive if they see the status is ongoing? or do we aim to reflect the status of the replication from
Candidate: should this be <UNK>
Reference: does this mean that if i change the runtime config to something invalid (or invalid but of a different type), that the system will fall back to the default config?
Candidate: why do we need to permission?
Reference: making this configurable makes no sense. for mongo, it will always be the string "mongo".
Candidate: this should be the <UNK>
Reference: to make things refactoring-safe use something like simpletaskrepository.class.getname(), same for jdbctaskexecutiondao.
Candidate: should we be the <UNK> here?
Reference: i'd prefer that we handled it (the snapshot type) in a separate change.
Candidate: should we use the <UNK> here?
Reference: i think we should also check that there aren't existing etag conditions. if they pass in an old etag that they want to target, and we just got a new
Candidate: <UNK> sounds like little repetitive code should be moved to <UNK>
Reference: are not we unconditionally expecting exception cause due to internet connectivity here. suppose to take error message from errorutils.geterrormessage function.
Candidate: if we is the software <UNK> software <UNK> should be the if the is is the <UNK> velocity { return; }
Reference: using this specific cunstructor probably prevents using any other inplementation of dbenginedialect (in fact there is a single imlementor), because only this class has that. if that the only class
Candidate: please use the exception here instead of the try-catch-fail try-catch-fail
Reference: this can be dropped.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: why do we remove the first character?
Candidate: should we throw an exception?
Reference: i think it makes more sense to calculate a weighed average here (weighted by the isotope intensity). in other words, if i have 2 isotopes in the same container and
Candidate: can we be null? if we is null? if we { null) { <UNK> groupname = <UNK> } { <UNK> }
Reference: i would suggest defining a new error code for this type of exception. bkexception.zkexception is a bit confusing.
Candidate: please use <UNK>
Reference: for an empty slice (slices.empty_slice, we have a single instance per jvm) value.getbase() is null so we can overtrack those in the else branch.
Candidate: use e2
Reference: immutablelist.copyof
Candidate: this should be <UNK>
Reference: i think would be good to rephrase this kind of messages to be something like "findnodes by multiple property names and values are not supported."
Candidate: please use <UNK>
Reference: didn't you yourself publish a library to avoid having to call this directly? could be useful here.
Candidate: why do we need the <UNK> here?
Reference: how about adding an initialize() method to mod11checkvalidator which takes the actual argument types instead of the annotation. that'd be a bit more straight-forward than creating the annotation proxy just
Candidate: the syserr
Reference: bad, do not return null. return is either one loader or other, there is nothing between. if you get here and have to return null you obviously didn't carry out
Candidate: this should be the <UNK>
Reference: what was wrong with this line?
Candidate: the syserr should be the
Reference: unsafe addition, can cause integer overflow. use long instead of integer
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: how about "just now."?
Candidate: why do we need to use <UNK> here?
Reference: do you want to return null from here?
Candidate: why do we want to catch <UNK> and throw the exception
Reference: match all initial values using a separate methods as said earlier.
Candidate: i don't understand this matters, what about testing the number of <UNK> <UNK>
Reference: maybe extract processoldordeletedmessage() to reduce the nesting here.
Candidate: if <UNK> != null) || <UNK> && <UNK> { <UNK> }
Reference: you probably don't want to have this return null, it should return an empty list worst case scenario.
Candidate: the syserr should be be the <UNK>
Reference: you need to verify that the preference is about the email format, and not the alert one (a.ka. the notifications in the menu).
Candidate: should we throw an exception here?
Reference: are start /end / duration necessarily here?
Candidate: can we move this into a single loop?
Reference: here you are initializing the taskgroupsuccess with true while it is true by default. we should set the task group success with false and only then update it to true
Candidate: can we make sense to initialize the creation of creation of the creation of creation of the creation of creation of creation of creation of creation of creation of creation
Reference: despite type named multithreadmodeconfiguration i would prefer singlethreadmodeconfiguration for variable, as in fact you have single thread mode here.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: there are some system.out and system.err print-outs in this class. what's that about?
Candidate: why do we need the <UNK> here?
Reference: you will hate me, but i meant of course all places where display.getdefault() is used :)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if we are changing this code, then relying on optional could be a good move.
Candidate: unsupportedoperationexception should be
Reference: in tests, most of the time, we use incrementing numbers to make obvious the order in the tree. this confused me a little as 3 is the parent of 1
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: you've switched the key and value order.
Candidate: this should be the <UNK>
Reference: it could just concatenate instead of going through the formatter.
Candidate: should be setemptyelement().
Reference: this breaks the feature of changing log levels at runtime
Candidate: shoud be replaced with <UNK>
Reference: instead of passing null, is it possible to use the oids listed in the openjdk link i provided for the other algorithms? thoughts?
Candidate: nicer: <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: break from for loop if annotation is found
Candidate: use stepverifier instead of keys.
Reference: again, no need to use filehandler... you should use propertyconfigurationlayout: java config.getlayout().load(config, cleanup(in));
Candidate: @exper0 let's use the enum?
Reference: is there a response code enum we could use instead of '200'?
Candidate: what happens if the exception is the eating the exception?
Reference: we don't need this. see super-super-super class:  public eventobject(object source) { if (source == null) throw new illegalargumentexception("null source"); this.source = source; }
Candidate: why do we need to check here?
Reference: some log finer/finest that this happened?
Candidate: if the != null && <UNK> { return; }
Reference: this token is used for login right ? since this is confidential information avoid from logging them
Candidate: do we need to use <UNK> <UNK> <UNK> + <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: getmacaddress() -> getinterface().getmacaddress() why this change?
Candidate: we don't need to print stack trace to printing the information about printing the output.
Reference: we always check for the positive case. for example isnotprivate. hence we should name this doesnothavetraceannotationandreturnvalue or sg like that.
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. [![rule](<link_1>](<link_2>
Reference: maybe just return path here? can somehow url.tostring() differ from path?
Candidate: can we use the <UNK> here?
Reference: add fail() after insert
Candidate: this should be <UNK>
Reference: moving integer.tostring here seems cleaner.
Candidate: why do we need to check the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: null or "null" ?
Candidate: should this be <UNK>
Reference: duplicate code (see line 76). create method?
Candidate: you don't need need to evict the <UNK> <UNK>
Reference: please separate the two lines so that it's readable. boolean isleft = mergeviewerside.left == side; if (getcompareconfiguration.ismirrored()) { isleft = mergeviewerside.right == side; }
Candidate: i don't need to check if the == null) { return false; } else { if <UNK> { return false; }
Reference: please watch the spacing, and be sure to never use tabs.
Candidate: rename <UNK> <UNK>
Reference: we could raise exception there.
Candidate: why do we need the <UNK> here?
Reference: have acquireserialdevice return the serial device, and get rid of the member variable.
Candidate: what happens if the is is invalid?
Reference: why is this any more reliable in java versions lower or higher, even in java 1.8, system.gc() is just a hint.
Candidate: i don't understand this matters, if we matters, this matters, but i don't understand this matters, if we matters, but i don't understand this matters, this matters, but it is
Reference: s/b "sending back not supported."
Candidate: if we is the software stripe { <UNK> <UNK> } } } }
Reference: can you update this block to avoid double call on openapiresolver?
Candidate: please use syserr
Reference: it seems this could result in null. this may be rare but shouldn't this be tested ?
Candidate: we should need to check if the is is the software <UNK>
Reference: to avoid null check and get in a state when servercapabilities is never expected to be null, this could be made async with getinitializedserver().thenrun(() -> { if (supportsworkspacefolders(servercapabilities)) { languageserverplugin.logwarning(...);
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> <UNK>
Reference: nit: put args on a separate line
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: you could do this in a single line
Candidate: this should be the <UNK>
Reference: we have too many nested try/catch/finally blocks here mixed with throws statements. could we simplify this?
Candidate: why do we need to here?
Reference: it's not great to rely on this without knowing what it relies on. in particular, you replace it with failing test elsewhere, but it's not immediately obvious that this is
Candidate: why do we need to mock here?
Reference: what if there was a write setting this to null inbetween the check of null
Candidate: should we throw an exception?
Reference: i think it is clear enough even without the additional id variable same for below
Candidate: why do we need to use the <UNK> here?
Reference: could we avoid converting the integer to a string and then back again in the isvalid* function?
Candidate: can be replaced by: <UNK> <UNK> { return <UNK> <UNK> } else { return <UNK> }
Reference: when performing actions after a long-running async task, we must always, always check whether the current activity still exists, either by checking isdestroyed(), or isadded() in the case of a
Candidate: why do we need to permission?
Reference: suggest debug message along the lines of log.debug("closing [%s]", id);
Candidate: why do we need to synchronize on the <UNK> ?
Reference: check if command is null.
Candidate: should this be the <UNK>
Reference: as discussed, this code should never be executed for connections. should be checked above in stack trace.
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: might be nice if you can skip save if doc is not changed.
Candidate: do we need a constant for <UNK>
Reference: nit: you can shorten column_a to a or x
Candidate: typo: <UNK> -> getcredentials
Reference: could you add the word "status"? the old message had missed it.
Candidate: <UNK> *= 2;
Reference: why null is acceptable situation?
Candidate: why do we need the <UNK> here?
Reference: null != settings
Candidate: why do we need to use <UNK> here?
Reference: does this need to be synchronized somehow?
Candidate: <UNK> -> <UNK> -> <UNK> .collect(collectors.tolist());
Reference: suggestion assertthat(params1).hassize(2);
Candidate: why do we need need to the <UNK> here?
Reference: will this condition be ever met?
Candidate: why do we need to synchronize on the lock ?
Reference: change to new gocipher().encrypt(..)
Candidate: why do we need the <UNK> here?
Reference: for this and many instances above this line, align [c]alendar with [t]imehelper.
Candidate: should we throw an exception here?
Reference: we must only take the first show and the first enable rule into account, or better only one of each type (so it is generic)
Candidate: can be simplified to: if (throwable == null) { <UNK> = <UNK> } { <UNK> } <UNK> { <UNK> } (string <UNK> { return <UNK> } else { return <UNK>
Reference: is preferrable not to nest all of the if/else if we can return. its easier to follow that way.
Candidate: should we throw an exception here instead of returning null?
Reference: the variable returnme is probably useless as it can be replaced by a simple return everywhere it is assigned (lines 79 and 84).
Candidate: if the == null && <UNK> { <UNK> } else { if <UNK> { <UNK> }
Reference: can we define "" as public static string metadata_uri_for_peer_download in commonconstants.segment and reference the same thing in the server as well, to detect peer download? once we decide it is
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: initialise in constructor
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: this if block can also be replaced with contextcompat.startforegroundservice(context, intent).
Candidate: this should be the <UNK>
Reference: please review. if watcher is null, removeallwatches is done. if not null, removewatches.
Candidate: why do we need the exception here?
Reference: you should be using equals to compare strings
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: closing curly-bracket should be at the new line.
Candidate: use optional.ofnullable()
Reference: could this be lower-cased since the contains checks are looking for lower-cased strings? unless there is a reason this must be case sensitive.
Candidate: should we use the payload?
Reference: you should be able to do ((number) original).intvalue() instead of checking the class. should be a little more robust in case there's a silly jdbc driver that makes all numbers
Candidate: i don't understand what happens if we want to do we want to do the lock forever?
Reference: remove
Candidate: i don't think we need to check for the <UNK>
Reference: - typo ("for with") - log message could be more clear ("unknown session while logging in anonymous" or sth) because warn is visible with the default log settings - should
Candidate: use <UNK>
Reference: this is soooooo much slower than usefulpsitreeutil.getchildoftype(expr, haxereference.class);. and i'm really starting to wish we had static extensions in java. maybe it's time to look into using manifold (http://manifold.systems) in
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: that way the parameters will be remembered and saved on mzmine exit
Candidate: i don't understand this matters, this matters, but i think we need to do the tear down the <UNK>
Reference: i would recommend putting the boolean condition in parentheses for readability.
Candidate: please use <UNK> <UNK> <UNK>
Reference: public method, where is readwritelock
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: please make checks explicitely. onview(withid(r.id.dfghjkl)) will always work in espresso because it doesnt do anything. so it would be nicer if you would add an explicite statement that youre actually
Candidate: should this be <UNK>
Reference: <>()
Candidate: can we move the math.abs to the the data? we don't need need to do we need need to do we need need to do we need need need to
Reference: please try to omitted the steps that are not necessary...review this in of all your tcs
Candidate: remove the method("post")
Reference: switch all the tests s/client_recv/client_send as it makes more sense (because it would be an error to have only a recv annotation)
Candidate: why do we need the <UNK> here?
Reference: shall we change the order of equals checking as well?
Candidate: why do we need this check?
Reference: can you remove the 'return' or replace it with 'setwindow(null)'? (to prevent a blank dialog)
Candidate: storagetype should be done in <UNK>
Reference: there is no cluster deactivation, forcedeactivation should be false.
Candidate: please remove the <UNK>
Reference: just return azureblob.containerexists("system"); also wrap it in a try/finally block to close the context.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: move to parserhelper
Candidate: why do we need the <UNK> here?
Reference: could you add the exception e as the cause to this newly thrown exception.
Candidate: why do we need the getconnection here?
Reference: listnode.aslist()
Candidate: if you is the <UNK> of the <UNK> is the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> g, <UNK> g, <UNK> g, <UNK> g, <UNK> dictionary,
Reference: looking at this pattern, i wonder if this would be cleaner: * introduce a new usableresource class * have it have the same three states are we have now, but
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this condition is little hard to read. i would prefer return isnormal && (substitution.isempty() || isground()) ? this : (term) this.accept(new substituteandevaluatetransformer(substitution, context));
Candidate: should be be <UNK> name)?
Reference: suggestion if (!(obj instanceof idtoken)) {
Candidate: this should be the islocal as well.
Reference: we should watch out for applicationcontext::getid returning null suggestion if (event instanceof contextrefreshedevent && ((contextrefreshedevent) event).getapplicationcontext() == this.applicationcontext) {
Candidate: if we is the software stripe { return; }
Reference: missing doc blocks on all of these methods.
Candidate: should we be the <UNK> here?
Reference: why was this removed? not sure what it is trying to accomplish but seems unrelated to the overall goal of the pr.
Candidate: rename to <UNK>
Reference: nit, most given methods should take a parameter. something like:  givenunitwithattackpower(2)  if there is no parameter, and the return value is very generic, then something like the following
Candidate: can be replaced by: <UNK> <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: both are toggled offline?
Candidate: if the == null) { return; } <UNK> } <UNK> { return; }
Reference: possible to make it private?
Candidate: typo: <UNK>
Reference: why is hashcode and equals implemented like this? two userresourceprofilepk instances with the same userid and gatewayid should be equal and should hash to the same value, right?
Candidate: why do we need to check the <UNK> here?
Reference: these variables are used in both methods. can they be declared as class variables?
Candidate: <UNK> *= 2;
Reference: @overrding public should be on the same line according to ignite code style.
Candidate: why do we need the tableid here?
Reference: you can replace to originalpath = (!originalpath.endswith("/"))?originalpath + "/":originalpath;
Candidate: if <UNK> != null) { <UNK> }
Reference: this just gets sent down from hq, i assume?
Candidate: can you use <UNK> <UNK>
Reference: should we be using a secure cxf client here? @stustison
Candidate: i don't think this the <UNK> is the <UNK>
Reference: i'd suggest returning the id instead, the key is more likely to change than the id.
Candidate: why do you need to mock the <UNK> <UNK>
Reference: needs jgittext entry, i think
Candidate: can we use the <UNK> here?
Reference: shouldn't this be anything active after claimed?
Candidate: why do we need the <UNK> here?
Reference: list<partition> results is not used.
Candidate: i don't think this is the the the <UNK> is the
Reference: make the number a constant and explain there why.
Candidate: rename to <UNK>
Reference: it seems we should not filter nulls here.
Candidate: why do not -1l ?
Reference: if bad version is passed, there will be a ugly message like "file not found...etc" maybe it is make sense to prettify it somehow, wdyt?
Candidate: why do we need the <UNK> here?
Reference: i would make sure this isnt going to throw an arrayindexoutofboundsexception
Candidate: should we use the getconnection here?
Reference: should create a new arraylist to wrap this.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: i would rather do this calculation in tested method as in case of cores.
Candidate: i don't understand this matters, if you matters, but you don't need to use the <UNK> <UNK> <UNK>
Reference: having a class wide testingrpcservice would avoid this casting here.
Candidate: you don't need the param.
Reference: use 'l'
Candidate: use long.valueof() instead of <UNK> long()
Reference: should be gte ?
Candidate: why do we need the layout here?
Reference: copy&paste-error? suggestion minlucenescore = engine.getsettings().getfloat(settings.keys.lucene_min_score_filter, 30);
Candidate: this is be used in the previous line.
Reference: if the element we are looking for is "<log>", this code returns the location of the 'l'. it must be the location of the '<', otherwise it requires an extra
Candidate: if (state != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return state; }
Reference: is it possible for mediafile.gettitle() to be null?
Candidate: should this be <UNK>
Reference: just checking you want these to be java asserts? production jdks are almost never run with asserts enabled
Candidate: why do we need this?
Reference: let's move this into an else {} to the if() clause in l.1001 to avoid clearing then putting up the notification again.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: defensive copy here instead?
Candidate: why do we need to permission?
Reference: maybe we could follow up on some jmh benchmarks for this kind of stuff. given the amount of work that has happened already up to this point i'm wondering if
Candidate: can be replaced with <UNK> <UNK> ?
Reference: the new structure of winery uses restutils instead of utils. please follow that.
Candidate: the syserr should be an exception message in the error message.
Reference: usually i do either  ioexception|runtimeexception or if doing throwable, use propagateiffatal
Candidate: do we need the races on the if we failed?
Reference: or properties. well. looks like there are a few of these.
Candidate: should we use the exception here?
Reference: use log pls
Candidate: can be simplified to <UNK> <UNK> ?
Reference: this might all be clearer if you call this eventclass? at the moment the line below  event.eventtypeforclass(eventtype)  is a bit confusing
Candidate: we should need to hide the threw an error message.
Reference: nit: getlocalversion may not always be cheap. it would be good to cache the result instead of calling it twice.
Candidate: this fail()?
Reference: why are you operating on blocks rather than comparing lazycompactpagesindex.getestimatedsize() with eagercompactpagesindex.getestimatedsize() ?
Candidate: can you use <UNK> <UNK> <UNK>
Reference: maybe the common stuff could be moved into a utility class or something that avoids repeated code.
Candidate: why do we need to check the <UNK> here?
Reference: minor nitpick: logger message is not equal to the method name :smile:
Candidate: why do we need to use the <UNK> here?
Reference: i suppose this is always true the first time because there are no connections initially?
Candidate: starttime ahead
Reference: i'd prefer to return empty string rather than "null"
Candidate: can we use <UNK> enummap <UNK> <UNK> <UNK>
Reference: do we know instances when it won't be a textanalyticserrorexception?
Candidate: log log log
Reference: this method consumes the entire monitor twice for each pass through the for loop, so won't report meaningful progress. consider fixing using submonitor.
Candidate: should we be the <UNK> here?
Reference: suggestion boolean notingraphatall = candidatesfordeletion.isempty();
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: add expected offset to exception message
Candidate: should we use the <UNK> here?
Reference: [waves hand] this is not the validator you're looking for...
Candidate: why do we need to use the <UNK> here?
Reference: try / catch coingi missing
Candidate: should we throw an exception here instead of returning null?
Reference: i think that we can remove setresult(ok) soon, since it's for compatibility with vraptor 2x.
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: in the refactor patch i changed a logic reconstructing the original initialization method here, to avoid depending on jp data on input.
Candidate: why do we need the <UNK> here?
Reference: the .contains() should probably be in the synchronized block too
Candidate: if (actual == null) { <UNK> } <UNK> { return false; }?
Reference: @weisebrazil all indentations should be 4 spaces, not 8.
Candidate: why do we need to use the <UNK> here?
Reference: please use if statements with braces (that's why ci fails)
Candidate: why do we need to use <UNK> here?
Reference: the fixing comes from method.getgenericreturntype instead of method.gettypeparameters ?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: how are these changes related to jdk 8?
Candidate: this should be the <UNK>
Reference: if this catch is only for that new uri(..) on l 495, it might clarify it some to just wrap that one line that is throwing the error, that way
Candidate: why do we need the getconnection here?
Reference: ph -> pagehelper
Candidate: why do we need to check the <UNK> <UNK>
Reference: unrelated feature. please add a new pr for this one.
Candidate: this should be the <UNK>
Reference: user should be in constructor right ?
Candidate: this should be the <UNK>
Reference: in general, you want to avoid bytearray{input,output}stream classes. they are excessively synchronized. we have bytebuffer{input,output}stream in the aqute.lib.io package as replacements.
Candidate: i don't think we need to throw an exception
Reference: i think the flag should be true for it to be in prefix mode?
Candidate: this fail()?
Reference: you may use string constant here, move to constant file and refer from there. eg:- driver_name = org.apache.ignite.ignitejdbcthindriver;
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: is passing 'null' for subject intended change?
Candidate: why do we need to use the here?
Reference: use strings.isnullorempty?
Candidate: please use <UNK>
Reference: as discussed verify substringbetween does the right thing for us
Candidate: the syserr
Reference: similar problem here too .. exception handling seems to be misplaced.
Candidate: why do we need the <UNK> here?
Reference: can we please agree on adding brackets even around single line conditionals ? this is according to the existing style and less error-prone (believe, i hit that when adding a
Candidate: do we need to here?
Reference: delete the if, ispresent will work fine as gabe says below.
Candidate: if the ifpresent should be removed.
Reference: sorry to rehash this, but i have to say it at least once: this stuff is so hard to read.
Candidate: i don't think we need to do the unconditionally, in the situation.
Reference: for some reason (probably because it was a convenient way to override the optional attribute for reference for this tool) reordersam has a duplicate command line arg for reference. there
Candidate: i realize this <UNK> is the <UNK> below (as we realize the realize the realize the realize that the <UNK> below (as the <UNK> below (as we realize that the
Reference: there is no format specified for parsing. isn't it better to do so?
Candidate: this should be <UNK> <UNK>
Reference: not so sure about this guard. if notifiers isn't empty shouldn't the destroy run even when not disabled? what if i do the bootstrap, disable the service and then get
Candidate: this should be the <UNK>
Reference: i don't see how this is going to work, readinbound is an object and b is a byte array, we want the method assertthat(byte[], byte[]) for correct comparison. i have
Candidate: why do we need the <UNK> here?
Reference: setting dateformat is redundant
Candidate: please remove the method("post")
Reference: move boolean.true.equals(ignorepolicy.get()) to a static method called isignorepolicy
Candidate: i don't understand why, but it matters, what is it matters, but it does)
Reference: can we use batch evaluate of expression here?
Candidate: can be replaced with <UNK> ? <UNK> : <UNK> ?
Reference: can't you just set the style in the uibinder file?
Candidate: you should be the <UNK>
Reference: actually the file name is "gitgit.index.v3.skipworktree"
Candidate: i don't think this connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections connections
Reference: the naming of this field might be confusing if one looks at the complex map importer and this class side-by-side (both maps are "extended" in a sense, but the additional
Candidate: the syserr should be be the
Reference: what about make a new method in associativecommutativecollection which returns the union of all three collections? in this way, you have shorter code in visitors and transformers. besides, next time
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: i don't understand why we need to wait here. could you explain?
Candidate: why do we need the layout here?
Reference: don't you need to pre-emptively serialize this string so that the pl deserializes it back into the string that the user provided?
Candidate: should we be the <UNK> permission?
Reference: check formatting
Candidate: should be the fixture.
Reference: can we assert anything?
Candidate: why do we need the <UNK> here?
Reference: 4 spaces
Candidate: why do we need to check for the <UNK> request?
Reference: we should also animate transitions.
Candidate: unused line.
Reference: i see test which check messages for containing no viable alternative, but do they also cover failedpredicateexception?
Candidate: can you move this to <UNK> mapping?
Reference: the comma looks odd to me. i suggest either removing it or replacing it with a semi-colon.
Candidate: why do we need to use the payload?
Reference: how about adding the message from the exception to the log message to provide more information?
Candidate: typo: <UNK>
Reference: why not use [transactionstatus#canrollback()](<link_0> here?
Candidate: i don't think we need to check the <UNK> the <UNK> is the
Reference: i believe this method should be getworkermetricconf()
Candidate: why do we need need to the <UNK> here?
Reference: this is useless since clear() below resets position to zero?
Candidate: partial packet header should be replaced with <UNK>
Reference: nit pick, but collections.emptymap() would be better optimized here.
Candidate: do we need to check if <UNK> != null) { throw null; }
Reference: what happens if next() is filtered out? does this attempt to retrieve the next flux emission or is mono.empty() returned?
Candidate: do we need to <UNK> the <UNK> <UNK>
Reference: you need to get the previous state if it is changed.
Candidate: should we be <UNK> to <UNK> the <UNK> <UNK>
Reference: i am a bit concerned about the coding style here. azkaban uses a different coding style than linkedin. if we are moving to linkedin standard, let's change the entire codebase
Candidate: why do we need need to be <UNK> here?
Reference: shall we change this log to service removal failed. microservice class '" + service.getclass().getname() + "' doesn't contain a root path.
Candidate: i don't understand this matters, what about the use-case for the <UNK> <UNK> is the
Reference: does this lock the table from inserts while the query is being processed?
Candidate: do we need a <UNK> of <UNK>
Reference: query better to put the extra keys in class constants
Candidate: i think this should be used anywhere in the previous line (line <UNK> { <UNK> }
Reference: java string testedpage = urlbuilder.geturlforfandompage(article); adsfandomobject fandompage = new adsfandomobject(driver, testedpage); getjquery();  what do you think about creating one method in adsfandomtesttemplate and be more dry?
Candidate: please remove the method("post")
Reference: this part won't work with the keys you registered selectors under though?
Candidate: <UNK> *= 2;
Reference: if you have made equals final then you also need to make hashcode and compareto final
Candidate: why do we need this comparison here?
Reference: all the following methods should also do size checks like readbyte does and throw eofexception. otherwise we will get indexoutofboundsexception instead.
Candidate: why do we need to check the <UNK> here?
Reference: see general note on error handling and recovery.
Candidate: static?
Reference: won't this break if the system's standard charset isn't utf-8?
Candidate: please import?
Reference: might need a junit test for the case where translate is requested with a url and no version, but the requested conceptmap is not versioned in the repository.
Candidate: should this be <UNK>
Reference: worth including the sender address?
Candidate: should we use the exception here?
Reference: this sounds like an error, too.
Candidate: why do we need to check the <UNK> <UNK>
Reference: asynctask's tostring is a tad large. perhaps joining this list with a newline would make the log easier to read?
Candidate: why do we need to use <UNK> here?
Reference: one of these should be host
Candidate: please use <UNK> <UNK>
Reference: what's going on here? this seems awfully complicated. is there a reason you didn't just use a stringbuilder and concatenate the ints 0..expectedresults-1?  java stringbuilder sb = new stringbuilder();
Candidate: use <UNK> <UNK> <UNK>
Reference: why don't we have rate metrics
Candidate: if the vm is null, so we don't need to check if the vm != null && <UNK> { return; }
Reference: souldn't that hashmap be configured once at object allocation instead of recreating it each time getmeta() is invoked ?
Candidate: i pagelogging
Reference: this line can be pulled into setactionmessageparameters() method in the networkqoscommandbase class since it repeats in any of the networkqos commands.
Candidate: this should be <UNK>
Reference: we reject the file because its name does not end with .xml, i do not think we should read it.
Candidate: should we catch (throwable e) { throw } catch (throwable e) { .... e) { throw } throw ioexception e) { throw }
Reference: i think it's more readable if it doesn't fit on one line, move all parameters to the next one.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this is silly nitpicking, but, i just had issues reading this code, so, could we use a rcvrclass local variable? then we also avoid twice the .getsomclass(). not that it
Candidate: why do we need the <UNK> here?
Reference: too many single letter vars. perhaps make t -> txn and v -> snapshotversion
Candidate: should we be the payload?
Reference: s/moved/requested move since we are expressly not checking if it worked.
Candidate: should we throw an exception here instead of exception?
Reference: there's a typo in this error / log message "ctp" should be "tcp"
Candidate: you should want to use <UNK> <UNK> refers to <UNK> <UNK> refers to a mapping.
Reference: no, please log these. the activator has a static log() method on it to make it easy.
Candidate: this should be the <UNK> <UNK>
Reference: resolve() can return null but class<?> getreturntype(method method) is expected to return non null values. maybe we should use resolve(class<?> fallback) variant or assert the returned class is not null
Candidate: please use setemptyelement().
Reference: this always returns a string, so why are you down-casting it to an object?
Candidate: if you is e1 && <UNK> { return false; } else { if <UNK> { <UNK> }
Reference: no need to check the value of startupcontext.getinjectioncontainer() here before assigning it to this.injectioncontainer.
Candidate: this should be the <UNK>
Reference: the ids here should be a concat of appname + instanceid as their combination uniquely identifies.
Candidate: the syserr should be be <UNK>
Reference: same as above -- pending all queries infinitely might be hiding another issue in the cluster
Candidate: why do we need the <UNK> here?
Reference: returning java null here won't work - what you have to do is to send a channel state update undeftype.null. imho the best place to do the colormode check would
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: is it possible to keep return type of asc() as is (ie collation) ? while it doesn't add functionality it hides all methods from user during ide auto-complete (that was
Candidate: please use <UNK>
Reference: as above, this seems wrong.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: this should be conflictexception
Candidate: blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank
Reference: doesn't this risk overwriting files? e.g. if a project had resources config/foo and config2/foo. if possible the approach should be to copy the files with their directory structure intact.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: the iterator contract is to throw nosuchelementexception if there is no next
Candidate: should we throw an exception here?
Reference: one large window might skew the avg even the process are invoked after it, so this logic will catch both contiguous long window or spikiness. please make sure it's our
Candidate: why do we need to here?
Reference: put the close() into a finally block so that an attempt is always made to close the session, even on commit failure. if closing the session fails, there's not really
Candidate: why do we need to permission?
Reference: empty reporting rules are the default so this line is redundant.
Candidate: please use syserr
Reference: we should increase errorcount, log a warning and return null instead of propagating the error so the query can still complete even if the cache is having problems.
Candidate: please use syserr
Reference: i don't understand, why do you think fqn should be fn?
Candidate: why do we need to use <UNK> here?
Reference: can you change limit.intvalue() / 1000 to (int) (limit / 1000)
Candidate: this should be the <UNK>
Reference: this is called etag elsewhere (see cosmosasyncitemresponse.java: public string getetag()). you have it as etag. we should be consistent on this.
Candidate: why do we need the <UNK> here?
Reference: you split images string into tag and image name multiple times in the code. to avoid duplication you can probably extract that logic in a new method.
Candidate: you don't need to use the
Reference: ismathematicalinteger and "pair +" commonality
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: should this be based on total pending size in bytes vs msgs?
Candidate: why do we need to permission?
Reference: should be public.
Candidate: public.
Reference: collections.emptylist above and .emptymap here?
Candidate: should this be <UNK>
Reference: dejaria directamente el return asi: _return numtasksrunning == numtasks;_ (poner lo otro al final es redundante)
Candidate: why do we need the <UNK> here?
Reference: unneeded?
Candidate: why do we need to here?
Reference: if maxvalue is near long.max_value (i.e. 2^63-1) and minvalue is near long.min_value (i.e. -2^63), then maxvalue - minvalue is going to overflow
Candidate: should we throw an exception?
Reference: this should have a meaningful error message (i.e. a message added to the relevant logger), and should include the exception stack trace (like what you have done below).
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to check the the <UNK>
Reference: i think there is no reason to push publisher here, if we push connectionfactory via four lines above. else if (this.applicationeventpublisher != null) { would be enough.
Candidate: do we need to <UNK> <UNK>
Reference: for readability/consistency, consider invoking searchablelistmodel -> forcerefresh() instead...
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: space after comma.
Candidate: why do we need the <UNK> here?
Reference: please do not use system.out.println, log may better way
Candidate: can we use the <UNK> here?
Reference: conjunction (and disjunction) are commutative... should we implement that in the equals / hashcode ? (no, i'm just messing with you, don't loose any time on that :).
Candidate: please use <UNK>
Reference: the whole purpose of fulllistadapter is to abstract the implementation details of querying the device list from the caller - so how about moving the changes that are done in
Candidate: should this be <UNK>
Reference: authenticationattribues --> authenticationattributes
Candidate: you can use <UNK> <UNK> <UNK>
Reference: the following code can be used to create this nhintargetsystemtype from nhintargetcommunitiestype extracted from request. this would reduce 3 methods from this class. nhintargetsystemtype target = getmessagegeneratorutils().convertfirsttonhintargetsystemtype(targets);
Candidate: why do we need need to the <UNK> here?
Reference: can we just use !getisnew() instead ?
Candidate: if <UNK> != null && <UNK> != null) { <UNK> } <UNK> { return false; }
Reference: move this line into the if statement. we don't need to execute it if groups is null or empty
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: minor nit: missing line carriage after @visiblefortesting
Candidate: i don't privacy callbacks should be privacy <UNK> privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks privacy callbacks
Reference: why not let the setup() method itself throw an exception in case of failure, instead of returning false? that way it'll be able to provide much more detail regarding the
Candidate: <UNK> *= 2;
Reference: looks to me like a possible or even likely issue. please add logging ob **warn** or **info** level. suggestion } else { logger.warn("skip copyobject reason: identical reference"); }
Candidate: please rename to iu
Reference: we should use categorized errors when possible: java if (!partitionstatistics.containskey(partition.getpartitionname()) { throw new prestoexception(hive_metastore_error, "statistics result does not contain entry for partition: " + partitionvalues); }
Candidate: if the child entry is null.
Reference: @fanifieiev the same above.
Candidate: @fanifieiev the same above.
Reference: what's the goal of this assertion ? isn't it .isempty() ?
Candidate: why do we need need to the <UNK> here?
Reference: if this was the self-assignment, i think it's still there.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: why this function write the headinfo information by read this.thisreadsequence ?
Candidate: this should be the <UNK>
Reference: not sure this is necessary? the fieldtype should already take that into account. see org.hibernate.search.backend.lucene.types.dsl.impl.lucenestringindexfieldtypecontext#getfieldtype. in particular, if the field is not searchable, indexoptions should be forced to indexoptions.none. you
Candidate: i don't think we need to use the for the <UNK> <UNK>
Reference: should this throw an exception?
Candidate: i don't think we need to check the <UNK>
Reference: not synchronized?
Candidate: should we be expecting the <UNK> here?
Reference: empty partitions -> should we say empty topics ? just to clarify that some partitions from _different_ topics are empty?
Candidate: @unyoungwax, do we need to check for the <UNK> <UNK>
Reference: this doesn't seem right. i would have assumed this would be stream(), not streambypage().
Candidate: why do we need the <UNK> here?
Reference: same as above, this is deprecated and should no longer be used.
Candidate: @exper0 let's use <UNK> instead of <UNK>
Reference: suggestion. move this nested try block into a separate method or catch the exception under the main try-catch block.
Candidate: can we use the getconnection in the console?
Reference: we look at enum_def and examine all children for comma and see if it has another trailing constant def. so we are manually doing our own looping here. wouldn't this
Candidate: why do we need to check the <UNK>
Reference: <link_0>
Candidate: please use readasstring(...) instead of <UNK>
Reference: style nit: no braces around single line blocks
Candidate: should we be the <UNK> here?
Reference: verify result (e.g. it's not empty)
Candidate: why do we need the <UNK> here?
Reference: does not support an no? how about requires a instead?
Candidate: should we be <UNK> here?
Reference: i'm not sure if return null in zs is that great. perhaps just return current state and log a message of some sort? at least log a message.
Candidate: if (state != null && adsize == <UNK> && <UNK> { ... } else { if <UNK> { ... }
Reference: in the past two lines you can now use outputfbourn.
Candidate: can we move this to check the the <UNK> and double-check to mapping. if the { <UNK> { <UNK> { <UNK> = <UNK> } { <UNK> }
Reference: also log if it is enabled or disabled
Candidate: why do we need this?
Reference: we just want to remove the onesignal.getvibrate() call here. as a backwards compatibility for pre-o devices the onesignal backend will still send "vib" depending if the notification category has this
Candidate: i don't understand why, but it is be the <UNK> the <UNK> is the
Reference: null-check
Candidate: can be replaced with <UNK> <UNK>
Reference: i don't think this is necessary for string types like language -- only the primitive objects need the special bindnull workaround.
Candidate: please use <UNK> <UNK> <UNK>
Reference: also a mapping rather than grouping
Candidate: use <UNK> <UNK> <UNK>
Reference: does the instance become unusable or why create the builder twice?
Candidate: why do we need to use the here?
Reference: why make this static? shouldn't this method operate on data within a message instance?
Candidate: this should be the alternatives to <UNK> <UNK> <UNK>
Reference: static import?
Candidate: this should be <UNK>
Reference: this device seems to be unused. can it be removed?
Candidate: please remove the method("post")
Reference: perfect, that's just like i expected it how it should work.
Candidate: why do we need the <UNK> here?
Reference: nitpicking: better to have error message with human readable text there otherwise it throws illegalargumentexception without any explanation
Candidate: why do we need to synchronize on the request?
Reference: this is hard to understand, because it's a field and a default value at the same time. it's an interesting idea, but i don't think we use this anywhere else
Candidate: should we throw an exception instead of returning null?
Reference: i think you could return a byte[] here to have cellularinfo final
Candidate: why do we need to the <UNK> here?
Reference: space after for ... e.g. for ( ... )
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: 1. we are providing core level support by protected. any reason ti change it to private? 2. create one more method with multimap than change it here.
Candidate: why do we need need to the <UNK> here?
Reference: this.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: are this class and datagramsocket designed for inheritance ? if so, programs that derive from this class will not be able to override these methods (they're hidden). will that break
Candidate: why do we need to use the here?
Reference: hi, we use "stopicon" instead of "cancelicon" for generic "cancel" button action. please change it here. otherwise it looks great and can be merged afterwards. thanks.
Candidate: typo: <UNK> -> <UNK>
Reference: maybe just .foreach() instead of stream().foreach()
Candidate: nit: this should be the <UNK> <UNK> the contents?
Reference: the log seems to be a copy & paste error.
Candidate: please remove the <UNK>
Reference: why this magic value?
Candidate: please import?
Reference: i think there is no need to cast driver to js executor
Candidate: can we use the <UNK> <UNK>
Reference: i don't think you need replaceall here just replace since replaceall is for regex.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: assertthat( query ).assertthat( query ) ?
Candidate: assertthat( query ).assertthat( query ) ?
Reference: seems like we should return userlist (would be empty) here? or l475 should also return null? might just need to be consistent
Candidate: if we will do we will do we will do we will do we will do we will do we will do we will do we will do we will
Reference: i agree with @jeremiahjstacey here about not needing stringbuilder here. this in fact is a pretty common pattern throughout esapi and i'd prefer to not make this occurrence different than
Candidate: please use <UNK> <UNK> <UNK>
Reference: maybe specify what users should replace true with as well?
Candidate: can we use the sequence of the <UNK>
Reference: should we trim this? suggestion this.dlqtopicname = connconfig.dlqtopicname().trim();
Candidate: why do we need need to be <UNK> here?
Reference: please introduce a variable to reduce casts.
Candidate: why do we need progress?
Reference: is this just a formatting change? :) the pr is already big enough to add cosmetic changes into it :)
Candidate: should we be <UNK> here?
Reference: i prefer isempty() to size() == 0.
Candidate: why do we need need to tear down the <UNK>
Reference: doesn't it make more sense to have this in the init() method, or maybe even in the ctor?
Candidate: if <UNK> == null) { continue; } newvalue == <UNK> == <UNK> { <UNK> } else { if <UNK> == null) { <UNK> }
Reference: it's wrong, see drop in other blocks
Candidate: this should be the <UNK>
Reference: so just use getiswipeafterdelete().setischangeable(!isvmattachedtopool());
Candidate: the syserr should be be called via: <UNK> <UNK> { <UNK> = <UNK> }
Reference: can we use meaningful variable name?
Candidate: if <UNK> != null) || <UNK> && <UNK> { <UNK> }
Reference: when could the type be null in this case?
Candidate: <UNK>
Reference: no need to log anything in this case ?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: the fragment should obtain the host by calling fragmentutil.getcallback(). i think if the activity is ratained in a fragment instance, it'll cause a memory leak.
Candidate: why do we need need to override <UNK> here?
Reference: when globalminimumclock has value of greater than 0, parameter addedeval should be false. handling this case by throwing runtimeexception will make sense.
Candidate: this should be the <UNK>
Reference: use arrays.aslist(...) for short lists.
Candidate: use arrays.aslist(...) for short lists.
Reference: let's call this variable stars or starred. better avoid compound variable names: <link_0>
Candidate: @exper0 let's move the meaningless here as well
Reference: same here. let's separate the two cases of not having amount and having illegal amount. also, log that the amount is ignored.
Candidate: please use <UNK> <UNK> <UNK>
Reference: ah, thanks for pointing that out - i missed that. what is it that calls xaresource() method? something in the spring config during boot? we need to make sure that
Candidate: why do we need to check the <UNK>
Reference: this is a duplicate of the above line
Candidate: why do we need this method("post")
Reference: move this logic into certificatemanagerserviceimpl class
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: intentional at error?
Candidate: why do we need the <UNK> here?
Reference: move lines 66-73 inside rwinexpression since iastidexpression is a subclass of iastexpression.
Candidate: use rectangle <UNK>
Reference: strange name for the variable, what does it mean?
Candidate: please remove the method("post")
Reference: i know this isn't new, but might be worth investigating if there are faster hashes that are unique enough for this (not necessary in this pr, just thinking out loud)
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: nice clean up!
Candidate: why do we need the <UNK> here?
Reference: remove useless assert
Candidate: this should be setemptyelement().
Reference: can you get scheme from the location uri rather than caching the old scheme?
Candidate: this should be the <UNK>
Reference: missing final
Candidate: typo: <UNK> -> getcredentials
Reference: it is done automatically, yes. all of us have developed java for more than a day ;) but: 1) imo this is exactly the kind of change that cause unnecessary
Candidate: java <UNK> = <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: this is likely to be called on interruption. what happens to the proc in this case? is it handled by jenkins, or we should do the cleanup ourselves?
Candidate: why do we need the <UNK> here?
Reference: why set the value if null check next? check for null value of currentsessiondetails and if not null then only call currentsession.setsessiondetails and continue further.
Candidate: if the != null && <UNK> && <UNK> && <UNK> && <UNK> { return; } if <UNK> { return; }
Reference: i think checkstate(wiki != null) is more appropriate to force a proper usage.
Candidate: should we throw an exception here instead of an exception?
Reference: sb.append('.')
Candidate: i don't think we need to use the for the <UNK>
Reference: the test might run slightly faster if, instead of reading the file twice, the test moved the originalresult up to line 37 as an initialization and used the originalresult.length for
Candidate: integer.size
Reference: good to have null checks on these helper methods.
Candidate: why do we need need to the <UNK> here?
Reference: this guy belongs in a finally clause
Candidate: is this supposed to be the fixture.
Reference: no need for a second thread in this test. it would be simpler to verify the flow control properties of the monitor if you post a bunch of events to
Candidate: i don't understand this matters, what about the use-case for the <UNK> is the
Reference: looks like you don't need to pass in the instance here since there's no formatting characters in the string.
Candidate: should this be the fixture.
Reference: stop() should be in a finally block, or you could use testingutil.withcachemanager().
Candidate: please use import <UNK>
Reference: isn't .boxed().maptodouble() equivalent to .map()?
Candidate: please remove the method("post")
Reference: mind changing the type of this to map<string, object>?
Candidate: why do we need to use the <UNK> here?
Reference: what does this change do?
Candidate: ![major](<link_0> 'severity: major') either remove this skipped or rethrow the "interruptedexception". [![rule](<link_2>](<link_1>
Reference: to align with the rest of the codebase, please leave the final keyword off of local variables.
Candidate: should we throw an exception here?
Reference: shouldn't you intersect with the original envelope first? some unit tests for this class (and the feature equivalent) would not hurt.
Candidate: this should be <UNK>
Reference: use getvalueaslong()
Candidate: we should need to use the in the <UNK>
Reference: here it is better to choose a dot notation for metrics because it easier to create aggregation rules on collector: hitcount -> hit.count hitrate -> hit.rate averageloadpenalty -> load.penalty.mean load.count,
Candidate: please use <UNK>
Reference: i believe that whether it's softirq or raised_running, in both cases you want to return softirq?
Candidate: can you use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: hmmm. so 1,.,2 will return a null value? i guess with primitive doubles we have, to...though we could use nans for that. maybe when we support 4.3....
Candidate: this should be the <UNK>
Reference: was this accidentally included into this change?
Candidate: i e1 { <UNK> } <UNK> len, { <UNK> <UNK> } <UNK> len, { <UNK> } <UNK> e) { <UNK> { <UNK> { <UNK> { <UNK> } <UNK> { <UNK>
Reference: does this need to be both or neither? sort of makes sense that they'd both be required fields, but it's not totally useless to have only one. e.g. if min
Candidate: use <UNK> <UNK> <UNK>
Reference: probably should crash if bad format string
Candidate: should probably be called called called called called called called called called called called called called called called called called called called called called called called called called called skipped
Reference: even if there is only 1 row in "for cyclus" i prefer using '{' and '}' for better reading.
Candidate: i don't understand why, but i think this matters, i think why, but i don't think why, but i don't think why, but i think this software software software software
Reference: looks like we don't have a timeout here, does it mean we will retry to verify forever if standby's apply phase is stuck? in this case, we need a user
Candidate: should we log the exception here?
Reference: using a positive variable such as first is usually easier to understand than a negated one.
Candidate: why do we need to use <UNK> here?
Reference: my mistake, interruptedexception should be catched outside the while
Candidate: what happens if the is is the
Reference: don't duplicate tokens, just re-call getrequiredtokens.
Candidate: why do we need to check the <UNK>
Reference: i think you can return arrays.aslist(...) directly, no need to create wrap that in arraylist.
Candidate: use <UNK>
Reference: i vote for making it an error level message.
Candidate: why do we need to use <UNK> here?
Reference: consider the following operation order: 1. init() and reset() is called at the same time. 2. in init(), the code reaches line 652, but not start yet. 3. at the
Candidate: typo: <UNK> -> <UNK>
Reference: wouldn't it be more readable to use transactionsupport.executeinnewtransaction() instead of the code here which does the same?
Candidate: why do we need this?
Reference: i think it could be a bit more efficient if you do  if (!hasvalidlicense()) { //when no license, we only allow the system workflow return new immutablelist.builder<workflowscheme>().add(workflowfactory.findsystemworkflow()).build(); } final
Candidate: i don't think we need to do the <UNK> <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: could this and the previous line be combined? to reduce the nesting?
Candidate: why do we need to use <UNK> here?
Reference: matter of taste and style but i tend to prefer :  programstate = pop.state; if(!instruction.hasreturnvalue()) { programstate = programestate.stackvalue(returnsv); }  one less branch...
Candidate: can we use the getconnection here?
Reference: i think this is an error: you should return an instance of exceptionloghandler, not of warningerrorhandler
Candidate: please use <UNK>
Reference: can be written as assertthat(loglist).containsexactly(logentry2, logentry1). does all 3 previous checks at once. :) i must admit i didn't use those more advanced assertions myself...
Candidate: can we use the columns here?
Reference: here you should do a negative check for the same value "bar0" as the one you check after the deserialization.
Candidate: why do we need to use the <UNK> here?
Reference: is there a convention to use ++?
Candidate: should be be the <UNK>
Reference: we still need to have an option to run with the old language format (as a subdomain)
Candidate: why do we need to evict the <UNK> request?
Reference: org.eclipse.che.api.project.shared.constants#blank_id instead of hardcoded string
Candidate: please use syserr
Reference: use install()
Candidate: why do we need the <UNK> here?
Reference: you can return on the same line or make it final
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: suggestion return mapper.orelseget(objectmapper::new).convertvalue(attributes, valueattributesinfo.class);
Candidate: this should be <UNK>
Reference: return stringutils.defaultstring(string);
Candidate: i don't think we need to synchronize on the so we don't need need to do we need to synchronize on the <UNK>
Reference: would it be useful to make this less generic? something like resource ingest has started for '{}'?
Candidate: please use syserr
Reference: if camussweeper extends configured, you can get a configuration using getconf().
Candidate: should we be the specific?
Reference: please rename objectoutputstream to use camelcase naming.
Candidate: should we throw an exception exception?
Reference: perhaps we should filter on dev pool type here in case we ever use the consumer specific restriction again.
Candidate: this should be the <UNK>
Reference: this assert can never fail.
Candidate: the syserr should be the <UNK>
Reference: can we put the objects.requirenonnull(...) at the beginning of the method? this makes it easier to read.
Candidate: should this be <UNK>
Reference: not all listener
Candidate: all listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener listener
Reference: i guess that if there are no reviewers there is no need to set the receive-pack service.
Candidate: why do we need the <UNK> here?
Reference: the exception should have some error messages.
Candidate: we should need to check if (throwable errormessage { null) { <UNK> = <UNK> } { return <UNK> } else { return <UNK> }
Reference: is there some path.join() thing you can use instead? something more idiomatic.
Candidate: why do we need this?
Reference: keep specialised exceptions, i guess this would become throws nosuchalgorithmexception, unrecoverablekeyexception, keystoreexception, ioexception, certificateencodingexception, kubernetesauthexception
Candidate: ![major](<link_0> 'severity: major') refactor this number of the number of the number of the number of <UNK> [![rule](<link_1>](<link_2>
Reference: i am not sure why we need to have types here. if the then is a literal expression of type string (the value itself could be numerical), then we are
Candidate: do we need to check if <UNK> != null) || <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: wouldn't this cause problems to actual consumers? if a user decides to build a listener that implements iclasslistener and provides implementation only for onafterclass() then they would be seeing exceptions
Candidate: should we be the specific?
Reference: .query(query)
Candidate: should this be the <UNK>
Reference: how about we use the isbetterorequal method from geneticalgorithm class?
Candidate: this should be the <UNK>
Reference: do we need to error out if beginvalidtime.isbefore(endvalidtime) not met?
Candidate: if oldvalue != direction.incoming) { <UNK> } (name == null) { <UNK> = <UNK> }
Reference: by default.
Candidate: why do we need the <UNK> here?
Reference: this looks generic can/should we move it to some utility class (and also write integration test for it)? happy to be deferred, so not in this pr.
Candidate: why do we need to use <UNK> here?
Reference: change to browser
Candidate: why do we need the <UNK> here?
Reference: can simplify to one line, no? or if you're going for readability, you can eliminate the local variable and just do "return ..." everywhere.
Candidate: this should be the <UNK>
Reference: encodings ?|? name it methods
Candidate: please use <UNK> <UNK> <UNK>
Reference: suggestion throw new illegalargumentexception("can not parse job id: " + jobid, e);
Candidate: why do we need to check the <UNK> here?
Reference: thanks, this is much clearer! i think we don't really want to crash if an app developer accidentally doesn't add extra_process_text... can you get rid of the assert and just
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: string.format or let's use stringbuilder to make it more readable ?
Candidate: <UNK> *= 2;
Reference: the epoch is usually 1970, rather than 1980 - any particular reason for the change? functionally equivalent, of course.
Candidate: should we be username?
Reference: missing call to checknotnull here which gives an extra warning
Candidate: why do we need need to check the <UNK> <UNK>
Reference: this comparison is wrong, shouldnt it be threadgroupcount > estimatedthreadgroupcount?
Candidate: why do we need to the <UNK> entries?
Reference: code smell: clarify contract of repository regarding emptyness
Candidate: if <UNK> != direction.incoming) { <UNK> }
Reference: better to use type than string , make the service less tightly coupled.
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> } } }
Reference: are consecutive reloads necessary or will be one reload at the end sufficient?
Candidate: should consecutive reloads the sufficient?
Reference: it's probably better to do this at the top of the displaynewpage() function, to capture any other cases where this might be possible.
Candidate: should we throw an exception if we { null) { throw new <UNK> } { throw (long <UNK> }
Reference: the same as above, bad performance
Candidate: rename <UNK> to <UNK>
Reference: it looks like the final two branches do the same thing. were they meant to assert different things?
Candidate: should we be the <UNK> here?
Reference: i first thought this would require a string resource but on second thought this case should never happen, right?
Candidate: this should be the subdir on the <UNK>
Reference: why do we send content change messages from here now? what's actually changed on the content..?
Candidate: should we be the <UNK> here?
Reference: another reason to initialise when declaring the fields i guess, you don't have to repeat the initialisation code there.
Candidate: if oldvalue is empty?
Reference: return false
Candidate: why do we need this?
Reference: i know this is copied from thrift, but still seems unnecessary to wrap an rte with a new rte.
Candidate: should we use the exception here?
Reference: whats significance of 47? maybe make it constant?
Candidate: i uri.create catch (throwable <UNK> { throw fail(); } (throwable e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw ioexception e) {
Reference: this seems like it would be problematic. i would have to wait a default of 5minutes for tablets to be migrated to a new server in a pool (because the
Candidate: if (state != null && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: don't need to wait for the tx completion responses before removing the local info here either, although since removing the local info is expensive you could still send the command
Candidate: i don't need to evict the <UNK> the <UNK> <UNK> the <UNK> is the <UNK>
Reference: this could be simplified to objects.equals && objects.equals to avoid nested if statements.
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think quick return helps to highlight the important code vs check code: java if (parameters == null) { return ""; } // ...
Candidate: use <UNK>
Reference: currently tal is working to remove storagetype checks from the storage pool level so getstoragepool().getstoragetype() won't be available. more than that local storage is limited to local data center so
Candidate: should be username?
Reference: entry
Candidate: entry
Reference: revert?
Candidate: why do we need the <UNK> here?
Reference: might as well guard this with an if statement as well
Candidate: should we be schedule() here?
Reference: why throw after some operations?
Candidate: should we throw an exception here?
Reference: why isemptyornullstring? should it not be just empty string?
Candidate: i don't want to the details of the details of the details of the <UNK> <UNK>
Reference: add java doc
Candidate: please use <UNK> <UNK> <UNK>
Reference: fallthrough to readfromnbt in line 47. intended?
Candidate: should we be the <UNK> first?
Reference: default should be false
Candidate: this should be <UNK>
Reference: do we need to keep  if (runtime != null) { runtime.shutdown(); }
Candidate: why do we need need to synchronize on the <UNK>
Reference: <%s> ? no strong feelings, it would be consistent with the variables view
Candidate: should we move this to debug level?
Reference: how can this be correct when the bounds above are 16 and 64?
Candidate: can be simplified to: if <UNK> == <UNK> || <UNK> { <UNK> } else { <UNK> }
Reference: i would move this check to inmemory() in the builder instead and throw an exception there instead.
Candidate: transactions should be migrate transactions transactions outside of transactions transactions - the transactions - the transactions - the transactions should be the transactions - please remove the transactions -
Reference: you can probably call only once this method. you do not need to do it in every iteration.
Candidate: why do we need to check for the <UNK>
Reference: could you move this operation into notebookservice ?
Candidate: should we throw an exception here?
Reference: necessary?
Candidate: can you rename this to <UNK> <UNK>
Reference: should get system bundle by location using the org.osgi.framework.constants.system_bundle_location constant. this is to guarantee you always get non-null. equinox regions could hide bundle id 0 from you.
Candidate: should we throw an exception instead of returning null?
Reference: same here, as droptable: return new metadatamutationresult(mutationcode.table_already_exists, 0, null);
Candidate: this should be the <UNK>
Reference: is there a way to have this check in a top-level place and avoid having this once per listener method ? like at instantiation for example, and we wouldn't even
Candidate: i don't think we need to do we need need to trim the <UNK>
Reference: fire might suggest something is wrong and confuse people on success
Candidate: can we move this into the messages.properties method?
Reference: same here, missing return statement
Candidate: why super.candoaction() is not required names?
Reference: what do you think of doing this instead?  java if(this.enduser.hasproperties() || this.enduser.getexternalid() || this.enduser.getphonenumber()) { sendupdateenduserrequest(); }  there's no validation in between so the presence should be enough
Candidate: this should be the <UNK>
Reference: not sure if teammatesexception should be used here as it seems to denote some sort of logical error in the system, rather than failure with datastore or gae.
Candidate: can we use the <UNK> here?
Reference: @yesamer i see two issues there 1) that getpropertiestohide is meant to need the selected column, so it must throw an exception if selectedcolumn is null (because it means there
Candidate: can we add <UNK> here too?
Reference: this assumes that the json helper parses the values as strings. let's play it safe and use tostring() instead of a cast?
Candidate: why do we need to mock <UNK> <UNK> <UNK>
Reference: computeifabsent() returns the proper instance of atomiclong, so you can just call incrementandget() directly on that instance like below. this is better because we can avoid unnecessary get(). java totalsuccessfultaskcount.computeifabsent(task.getdatasource(),
Candidate: do you need to use <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: should also support .less and probably some other formats
Candidate: why do we need need to the <UNK> here?
Reference: long i should be long i. please inline start and numcols here.
Candidate: hmm. *= try-catch-fail should be the fixture.
Reference: i do not know the whole context, however shouldn't use a more efficient structure here, such as set. the contains could be log (n) instead of o (n)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: possible npe, since [replace](<link_0>,%20com.fasterxml.jackson.databind.jsonnode)) can return null
Candidate: can we make this private?
Reference: belonging -> "which belong"
Candidate: belonging -> "which belong"
Reference: never ever put conditional blocks into filterby methods. handle all these in the actual request implementation instead. not sure if these are actually needed. this way we cannot filter reference
Candidate: why do we need need to evict the <UNK> the <UNK> <UNK> the <UNK> <UNK>
Reference: this reduces usability for console and other environments where the clickable text is not available.
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: we expect our schemas to be of type record. this is a good test case to have though, should check that this throws an exception.
Candidate: why do we need need to the <UNK> here?
Reference: consider using the methods with a default value parameter from helpers to avoid repeating the if-contains-key-else-return-default code.
Candidate: why do we need the <UNK> here?
Reference: why moved here if you're not injecting?
Candidate: nitpicking: <UNK>
Reference: nit: add braces (preferred for all blocks)
Candidate: you added to <UNK>
Reference: i think the "force" variable should be passed to the vdsserver method as it is, instead of converting to string.
Candidate: should we throw an exception?
Reference: should this return type be changed to avoid the list cast?
Candidate: remove this line
Reference: can you use the directlyon() version that returns an object instead, slightly better performance but also type safe?
Candidate: this should be setemptyelement().
Reference: use it directly there. (via variable)
Candidate: can we move this logic into a single method? if we { null) { <UNK> { <UNK> { <UNK> } <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> }
Reference: assert two address objects
Candidate: why do we need need to the <UNK> here?
Reference: eclipse pde put an error marker here because the plug-in is configured to use jre 1.7. changing to 1.8 makes the marker go away.
Candidate: should we use the string concatenation instead of stringbuilder?
Reference: do you just want to getfirst here?
Candidate: this should be the <UNK> (ie: the <UNK> (ie: the <UNK> (ie: the <UNK> (ie: the <UNK> (ie: the <UNK> (ie: the <UNK> (ie: <UNK> (ie: <UNK> (ie: the tree,
Reference: this should follow the normal exception handling path and let the caller handle the printing of the exception.
Candidate: should we throw an exception if (state { <UNK> }
Reference: this should only be set if the configuration contains values. otherwise the header should not be set.
Candidate: the syserr should be be <UNK>
Reference: we try to avoid usage of lambda, sorry ;-)
Candidate: i don't need to evict the the <UNK> the <UNK> the <UNK> is the
Reference: would it make sense to have those booleans hidden in mongoquerymethod so that we could just call method.iscustomquotedquery() or method.iscustomquotedfields?
Candidate: should we be the <UNK> here?
Reference: we should only create the inner filter once and re-use the same one. accept is called for every file, so this will cause an unnecessary slowdown just to recreate the
Candidate: this should be setemptyelement().
Reference: timeo should be managed...
Candidate: should be be <UNK>
Reference: { } blocks please.
Candidate: this should be the <UNK> <UNK>
Reference: for consistency, let's try to move everything to strings.isnullorempty, which may also be faster, since it does not use .equals.
Candidate: i don't think we need to check for the <UNK>
Reference: instead of creating a method setdataservicemanager, you can use telephonytest's replaceinstance().
Candidate: this don't need to do the <UNK> <UNK> clazz, on the <UNK>
Reference: do we need some sanity check to avoid newly added acls conflict with existing ones?
Candidate: this should be the <UNK>
Reference: why are you sending the not op message? they are not op already, so this should not need to be happening.
Candidate: why do we need to check on the username?
Reference: replace (inline) previewtabviewmodel by viewmodel ?
Candidate: this should be the <UNK> <UNK>
Reference: same here: includedetail ? weekactivity.gettotalactivitdurationminutes() : optional.empty()
Candidate: why do we need the <UNK> insensitive iterable<integer> here too?
Reference: space before ?
Candidate: why do we need this?
Reference: should this refer to a constant defined in family?
Candidate: i don't think this the <UNK> is the <UNK> the <UNK> is afaik.
Reference: missing checkcallable(). we also should have a variant that takes collection too.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: could you please assign the url to a local variable before opening the connection? this helps while debugging problems.
Candidate: do we need to catch interruptedexception
Reference: although it's short and neat, changing the value of a variable in the same statment as comparing it can easily get confusing. i would recommend using a for loop (e.g.
Candidate: can we use <UNK> <UNK>
Reference: remove
Candidate: log.isdebugenabled() we don't need to check log.isdebugenabled() here.
Reference: missing braces
Candidate: can be simplified to: <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: formatting issues. please use appropriate spaces between string literals.
Candidate: why do we need the exception here?
Reference: it would be clearer if "5" was replaced with epdqstatusmapper.epdq_authorised
Candidate: please remove the <UNK>
Reference: nit: blank line before method
Candidate: you should need to check for the <UNK>
Reference: this variable name and its type confuses me
Candidate: why do we need the partial size?
Reference: this can go away now...
Candidate: why do we need the <UNK> here?
Reference: consider adding an additional layer of abstraction for this block. this has very similar lines as the other two methods.
Candidate: if you are the strict segment should be the on the username?
Reference: consider moving this logic to the backend entity, you can do it simply by defining a default values for the username/port variable in the entity, the grate benefit of this
Candidate: if <UNK> != direction.incoming) { <UNK> }
Reference: as mentioned below, the option should be already resolved here to the path (if any) for calling buildarchive
Candidate: why do we need need to the <UNK> here?
Reference: the name and location of the properties file is no longer configurable. if that is the intention then just hard code it directly and don't do any getproperty calls or
Candidate: why do we need the <UNK> here?
Reference: please consider adding an overridden version of the script(string, int, logger) constructor that accepts duration to encapsulate this type conversion.
Candidate: please consider adding the script(string, int, logger) constructor that accepts duration to encapsulate this type conversion.
Reference: i'm confused about what is being put in this table. whatever object this is needs to be serializable right? does this work properly?
Candidate: should we use the <UNK> here?
Reference: maybe the boss level should be the 2nd level so maiko can test it more easily. < review
Candidate: <UNK> costs
Reference: our old code didn't throw i think, rather returned null
Candidate: i don't think we need to check if the is is the
Reference: i'm worried this will get noisy in production. looks like a debugging print out?
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: argument name
Candidate: use <UNK>
Reference: i don't believe we use this now, but to be future proof, should we do the same thing and clear caches for which the ancestor is the memory context?
Candidate: if we is the software exception here but we don't need to throw an exception if <UNK> { throw new <UNK> }
Reference: do we even need this section in here anymore?
Candidate: why do we need to check the <UNK> here?
Reference: system.out.println(".....recording id") . >>>> delete recoring id part, not needed for list
Candidate: do we need to debug level?
Reference: remove, and see below
Candidate: why do we need to check for the <UNK>
Reference: should we return an error status with the exception here?
Candidate: why do we need to check the <UNK> <UNK>
Reference: honestly i would rather recommend making a seperate piglinbarterdrop interface for this instead. (you can also just make it extend randommobdrop for simplicity). because this is a bit un-intuitive.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: this is not a correct replacement, the implementation of the stringutils.isempty is: java null == s || s.trim().length() == 0;  this is why i have been asking contributors to
Candidate: why do we need the <UNK> here?
Reference: use proxyfactory.getcontextid() instead of contextid...
Candidate: <UNK> *= 2;
Reference: consider consolidating this and the block in l:131-138  if (batchoperation.size() >= max_write_batch_size || !iterator.hasnext()) { table.execute(batchoperation) }  this will get rid off the special redundant code to process
Candidate: should we move this to debug level?
Reference: when could the cause ever not be null?
Candidate: if <UNK> { return false; } <UNK> { return false; }
Reference: the style guide [requires](<link_0> a space between if and (. might as well fix it while changing this line.
Candidate: i don't think we need to do we need need to do the tear down the <UNK>
Reference: debug statement?
Candidate: why do we need to here?
Reference: should this be an error? if a user provides the wrong data, are we going to log it everytime? for me it is an expected situation, not an error... at
Candidate: why do we need the <UNK> here?
Reference: could we have a utility method in discussionthread that returns the authorattributiontype based on this logic? also, these lines is a quite long, maybe they should be split.
Candidate: should be be called once in the <UNK>
Reference: maybe we should do some validation here, for example throw an exception if we are missing both imageid and imageurl
Candidate: this should be <UNK>
Reference: i think geoms should always be defined, and always have length 2 (hence my suggestion to use a p2 type above). if in some branch the geometry split would not
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this should be optional.of()
Candidate: why do we need need to clone the <UNK>
Reference: what happens if it's null? should we log an error or something?
Candidate: please use <UNK> <UNK> <UNK>
Reference: there is no need to explicitly have a runnable here or in the other uses:  txnrun( g, ()->asserttrue(g.contains(triple("s3 p3 o3"))) );  makes the tests shorter and clearer.
Candidate: why do we need to use the <UNK> here?
Reference: i suggest using totraceid() consistently everywhere, not mixing get- and to-
Candidate: this should be the <UNK>
Reference: i think these two cases are correct, but i kind of like the idea of all paths of this method ending up calling savedeviceid just so it's easy to verify
Candidate: why do we need to use the <UNK> here?
Reference: i don't think this needs to be a complete implementation, just return the xid[] with xid or null depending on whether its still available for recovery
Candidate: do we need to catch interruptedexception here
Reference: why eliminate count-- in the if branch
Candidate: can we use the syserr
Reference: this will fail in npe if editorinput is not an instanceof... do not leave the "else" unwritten: } else { throw new illegalargumentexception("could not save comparison model"); } or "return
Candidate: use e2
Reference: inline return statement here
Candidate: this should be the <UNK>
Reference: there's a much simpler solution here:  java mhandler = new handler(looper.getmainlooper()); synchronized void highlightview(...) { mhandle.removecallbacks(mhighlightonuithreadrunnable); mhandle.postdelayed(mhighlight..., 50 /* millis */); }
Candidate: why do we need this check?
Reference: great, thanks !
Candidate: storagetype should be the rhs of storagetype = <UNK> <UNK> <UNK> { return null; }
Reference: inline
Candidate: should this be be null? if the == null) { return false; }
Reference: here it would be nice to use a static import, just for consistency
Candidate: why do we need the <UNK> here?
Reference: you need to assert something here? the ideal thing would be to test that whatever you write to the buffer is also placed on the binary_queue. as such, i'd place
Candidate: why do we need to check for the <UNK> <UNK>
Reference: please add a java objects.requirenonnull(computation, "computation is null");
Candidate: the @since mono/flux,
Reference: stepping through the test, it appears this header is being set to "ht/tp/:///e/". don't think that's quite what we want :) i believe you need to make a pid out
Candidate: why do we need the <UNK> here?
Reference: else { is redundant
Candidate: why do we need need to the <UNK> here?
Reference: can the payload value be null? in that case, we'll get an npe when executing tostring
Candidate: why do we need the <UNK> here?
Reference: use map.of()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the tricky business here is that repositories are also commanddispatchers and eventdispatchers. let's make it impossible to use [add | remove | has ]...dispatcher(...) and  api with the ...repository-typed
Candidate: i don't think we need to check the <UNK>
Reference: can the exception type be made more specific?
Candidate: why do we need this?
Reference: redundant semicolon
Candidate: why do we need this?
Reference: you can skip encoded_tag_keys
Candidate: can we use the <UNK> here?
Reference: suggestion this.connectionfactorymap.foreach((ldap, connectionfactory) -> connectionfactory.close(); );
Candidate: this 49
Reference: nit: i like to assert the list size first and retrieve items from it second, so that if it's empty the assertion fails rather than the test throwing an indexoutofboundsexception.
Candidate: why do we need need to the <UNK> here?
Reference: since classes are objects, and methods perform something on those objects, this doesn't really make sense. here, pantsgetalltargets is a 'verb' implying a method, not an object. i'm not sure
Candidate: please use <UNK> <UNK> instead of <UNK>
Reference: we can take communityid out of this uniqueid computation, and with it, the line above that sets communityid = null. the db path accounts for userid, orgid, communityid, and all
Candidate: why do we need to check on the username?
Reference: i'm not convinced this should be the default, and i'm not sure how we should be configuring it.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: you should throw the exception at the very end - outside of your try catch.
Candidate: i appid to iu
Reference: use new defaultshell("confirm runtime delete")
Candidate: you don't need to use the
Reference: nit: what is the benefit of having an explicit variable instead of just inlining the value in line 27 below?
Candidate: should this be <UNK>
Reference: trailing space at end of the template string.
Candidate: <UNK> *= 2;
Reference: might be more obvious while reading the code if it was: suggestion return executeledgeronlystrategy();
Candidate: can be replaced with checkargument
Reference: probably more an unboost enchantement. the ai uses the outcome for some target decisions. boost is positive and means its cast on own creatures. unboost the opposite.
Candidate: rename to <UNK> <UNK> <UNK>
Reference: hi! thanks a lot for your contribution! it seems like the java 8 map implementation changed the elements order in the entryset().iterator (used in the defaultdefinedmapmetadatamodel constructor), that's why this
Candidate: this should be the fixture.
Reference: cant we make profileqname, targethostsqname constant fields.. there are several other places we can do the same.
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: the only place that uses this function is org.ovirt.engine.ui.webadmin.plugin.jsni.jsfunctionresulthelper.invokeandgetresultasboolean(jsfunction, jsarray<?>, errorhandler, boolean) by tracking back the call stack to updateactionbuttoncommand, it seems that if null is returned from getresultasboolean, you
Candidate: this should be the <UNK>
Reference: replace with this(true, true, true);
Candidate: please remove the <UNK>
Reference: if something shouldn't be there at all, it's not the debug level. it has to be the error level.
Candidate: why do we need need to the <UNK> here?
Reference: why isn't the implementation is in base class?
Candidate: <UNK> *= 2;
Reference: the finally should wrap the entire method ("always unload before returning") otherwise, if everything's fine, this will: - load the resource - go to finally => unload the resource set
Candidate: can we use the builder builder builder builder builder builder builder builder builder builder ie <UNK> builder builder builder builder builder builder builder class: <UNK> builder builder builder builder builder
Reference: debug artefact?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: you can do mfs = mcloser.register(inputpath.getfilesystem(conf)) (applies to mreader too)
Candidate: should we be <UNK> here?
Reference: for these, is there a method system.assert(condition, message, exceptiontype) that you can use rather than constructing a new exception within an if/else?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: some finals here and there.
Candidate: why do we need need to the <UNK> here?
Reference: the injectionhelper may be a bit too heavy for this. you can just grab the config (only injected field) from the root context instead.
Candidate: should this be <UNK>
Reference: use 'l'
Candidate: should be replaced with <UNK>
Reference: why not implementing hashcode at abstract level since there is nothing specific here.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: do we need to maintaining type information upon return from this method? currently, once this method returns we will lose the concrete type and the caller will need to check
Candidate: we should need to evict the to the the udp stripe { return <UNK> }
Reference: why can't you use the logging infrastructure and set the log level accordingly? include that in log4j2.xml:  <logger name="org.jabref.logic.importer.fetcher" level="debug"> <appenderref ref="console"/> </logger>
Candidate: <UNK> *= 2;
Reference: as you need to use the check in every case, why not using one assignment all the time instead of assign it twice sometimes: java string resourcename; if (name.startswith("/")) {
Candidate: if (state != null) { throw null; }
Reference: total can only be 0 once. is this what was intended?
Candidate: you don't need to check the <UNK>
Reference: this isnt needed as the delegated method you have added messagechanged() to already, same for a number of methods.
Candidate: this should be the <UNK>
Reference: metadata_view_icon?
Candidate: this should be <UNK>
Reference: i know i lgtm'ed this, but it looking at its usage makes me second guess that decision. how would you feel about amending it to: f.qualifier().exactfamilymatch("family").startclosed(...).endopen(...) or something else, range(family)
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper userreportingsettingshelper
Reference: if you make a change here make it:  if (logger.isdebugenabled()) { logger.debug(.....); }
Candidate: can be replaced with <UNK> <UNK> <UNK>
Reference: is there any reason why we can accept only uistringres and not uistringtext? have we considered using muihelpers.gettextofuistring(this, messageholder.getmessage()). ?
Candidate: this should be the <UNK>
Reference: style nit: missing braces
Candidate: <UNK> *= 2;
Reference: are you sure this will never npe?
Candidate: why do we need to the the payload?
Reference: why do we have this empty method? don't you think user should be informed about the error, in some way?
Candidate: why do we need to synchronize on the <UNK> ?
Reference: nit: space missing
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ?
Reference: visibility missing. synchronized comes before static
Candidate: this should be the <UNK>
Reference: geturl method looks nicer if parameter consist only from one variable e.g. geturl(urlscontent.filepage + filename);
Candidate: please use <UNK> objects.tostringhelper() afaik. trailing <UNK> + <UNK> + "\r\n"
Reference: this is the ec policy patch again. i don't see why abfs needs it at all.
Candidate: i don't understand why, but it is afaik.
Reference: can we merge initialize() step into the constructor itself ?
Candidate: why do we need to use <UNK> here?
Reference: i think we should return here?
Candidate: should we throw an exception?
Reference: style-nit: space before {
Candidate: what happens if the exception is thrown is the
Reference: should be true if not an exec. inter. and super.remove() was successful
Candidate: why do we need to check for the <UNK> <UNK>
Reference: te1.getpos().equals(te2.getpos())
Candidate: the syserr should be be <UNK>
Reference: i'm confused why this isn't (here and below):  getcolumn(destcolumn, destrow).replaceint(value, destrow % tuplebatch.batch_size);
Candidate: this should be <UNK>
Reference: @ok2c bot sure we want to suppress io errors in non-interactive mode
Candidate: why do we need a positive of <UNK>
Reference: this test should be testing oldvalue , this also means that condition is not covered by tests (field is never null here). however i would suggest to replace whole thing
Candidate: encapsulate tests, tests, tests, tests, tests, encapsulate tests, tests, tests, tests, tests, tests, tests, tests, tests, encapsulate tests, tests, tests, tests, tests, tests, tests, tests, tests, tests, tests, tests, tests,
Reference: initeditmessageaction logic belongs here.
Candidate: <UNK> *= 2;
Reference: can we make 1 smbconnection that takes a processconnection?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: since this is an infinite loop i think at least a warn if not an error is justified here.
Candidate: typo: <UNK> -> getcredentials
Reference: if writesegmentfile in segmentutils was made public, this code could be reduced to a one-liner (as in the methods calling the public readsegmentfile method above).
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: this should say "offsetdatetime".
Candidate: can you use the enum?
Reference: are there not more language fields set than this? there is a main audio language element, no?
Candidate: couldn't this .get() the .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get() .get()
Reference: no idea... this is not the common pattern in papyrus
Candidate: this is overwrites the <UNK> costs <UNK> costs the <UNK> costs the <UNK> is the <UNK> and the <UNK> is the
Reference: this changes the default behaviour and would lead to different results when a consumer updates mp3agic. we could do that in the future but should keep the decision to prefer
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: please compare the current and previous for the following:  flatrow.cell previous; for(flatrow.cell c : cells.values) { if(previous == null || !c.getlables().isempty() || !keysmatch(c, previous)){ combined.add(c); } }
Candidate: can be simplified to <UNK> <UNK> ?
Reference: all of these builder args (like, last 16 lines) should be handled in superclass constructor already... was there a reason for this?
Candidate: should this be <UNK>
Reference: it's strange that we use the collection interface here which doesn't reveal it is ordered but here we rely on the ordering. i think we should better use the list
Candidate: why do we need need to do the <UNK> here?
Reference: there is actually a testparser or so in the project, which is meant to have the best possible configuration for tests.
Candidate: please use <UNK> <UNK>
Reference: what is the purpose of this removal?
Candidate: please import?
Reference: i tried this on mac os x 10.6.8 with language set to english but german date format. it seems the german date format set in mac system preferences isn't respected
Candidate: why do we need need to be <UNK> here?
Reference: i would cast only once to classsymbol.
Candidate: i don't need to check for the <UNK>
Reference: config is already initialized in basetestcase.java.
Candidate: this should be injected, so we don't need to use the
Reference: we are just logging here right. why not log this in else part and remove the return.
Candidate: should we be the <UNK> here?
Reference: you probably meant private closeables() right? there is no need to instantiate this class. tbh, i think we could even get rid of this constructor, the class has default access
Candidate: why do we need need to be <UNK> here?
Reference: current database is automatically created and dropped. you don't need to do explicitly.
Candidate: why do we need the <UNK> here?
Reference: instead of using whitebox, can you make a test constructor which accepts a planner? reflection makes it harder to find usages and do refactoring.
Candidate: we can use <UNK> <UNK> <UNK>
Reference: the order here is wrong. we have to accept the query before we build the entity projection. the entity projection includes parsing code that can throw an exception/error. those queries
Candidate: lambda?
Reference: could we please change this a bit? stopping the timer is not nearly as important as actually closing the resource, and if stopping the timer throws any kind of exception
Candidate: if (args.length == 0) { <UNK> }
Reference: minor typo in error message; should be "occurred" instead of "ocurred"
Candidate: should we throw an exception here instead of returning an error?
Reference: define this as static constant: java.util.concurrent.timeunit.milliseconds.tonanos(1)/2
Candidate: can we move this to the <UNK> <UNK> <UNK>
Reference: exchangepoint
Candidate: why do we need the <UNK> here?
Reference: ditto input1
Candidate: list<linkinfo> <UNK> = <UNK> *= 2;
Reference: if there is several methods in the hierarchy, this call will raise too many issue.
Candidate: @benzonico should be replaced with semantic semantic of semantic semantic semantic semantic symbol?
Reference: this should not be removed, but rather displayed as redacted:  .add("password", "[credentials redacted]")
Candidate: should we use the exception here?
Reference: braces?
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: why not catch nodesourcenamealreadyexistexception instead of checking type ?
Candidate: should we use the exception here?
Reference: should this throwable be logged as warning?
Candidate: should we be the specific?
Reference: this whole message construction can be simplified since we have only one stage here always now, now reason to even have names variable, also now we always executing stage and
Candidate: why do we need the <UNK> here?
Reference: this can be static.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: please, add this line back as it was before (to reduce diff).
Candidate: if you want to use the <UNK> <UNK>
Reference: do you intentionally use a topicpartitionreplica which is not provided in the response here? i guess that it is to ensure that its future is not completed, isn't it?
Candidate: nit: you don't need to the <UNK>
Reference: shouldn't this condition be just "if (returnvalue)" without the negation? with the negation if something failed prior to this code (for example if the name already exists) then the value
Candidate: can we use returnvalue id is valid, the returnvalue id will not be valid, it will not be valid, locked.
Reference: nit: please extract the message to a static string
Candidate: if the is is the <UNK> <UNK> is the <UNK> the <UNK> <UNK> <UNK>
Reference: nit: should we log the effective rate here?
Candidate: why do we need the <UNK> here?
Reference: should this defensively copy, or instead just offer an add and remove interface?
Candidate: can be simplified to <UNK> <UNK> <UNK> ? <UNK> : <UNK> : <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: typo: "pipedlined"
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: creationdate, sample fetch, and permissions should be handled in service
Candidate: can you iu
Reference: null check.
Candidate: can be simplified to: java <UNK> = <UNK> arrays.aslist(new  <UNK> arrays.aslist(new  <UNK> arrays.aslist(new  <UNK> arrays.aslist(new value) { return <UNK> = <UNK> ?
Reference: i'd also have a capatabilities test for completeness (checking the feature type is gone, but the others are still there)
Candidate: you don't need to wait for the <UNK>
Reference: move this assignment and check as first in the method to not change behaviour.
Candidate: why do we need to use <UNK> here?
Reference: isempty
Candidate: did you removed
Reference: why are you changing this? if the object is null, then of course there would be no fields to validate so i would expect no filed errors
Candidate: please use <UNK>
Reference: error messages need to be externalinzed (anything other than debug, really)
Candidate: should we catch (throwable e) { throw { .... } catch (throwable e) { blah e); } throw new runtimeexception(e); } throw { .... }
Reference: maybe use contains() instead.
Candidate: why do we need need to check for the <UNK> ? <UNK> : 2; thanks!
Reference: would prefer to have it joined here. there's no need to leak the info about how recent changes formats its argument all over the code.
Candidate: why do we need to use the <UNK> here?
Reference: use try with resource ?
Candidate: should we use the exception here?
Reference: no need to have this check as it is already done in the enclosing if condition.
Candidate: should we be <UNK> here? if we { return; } <UNK> } } } } } }
Reference: looks like you can use subquery(lookup_lookyloo) here instead?
Candidate: please use <UNK>
Reference: do it
Candidate: why do we need the <UNK> here?
Reference: string.equals?
Candidate: this should be <UNK>
Reference: no need for parentheses
Candidate: hmm. sink param.
Reference: why not just always call the update and have the update either apply the change if it is different or ignore it
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: again seems weird
Candidate: why do we need to check the <UNK> here?
Reference: got out of the dashed line
Candidate: cant we pull request, out into a request, request, request, request, request, pull request, request, request, request, request, request, request, request, request, request, request, request, request, request, request, request, request,
Reference: rename 'selectionchangedlistener'
Candidate: if getstate() != null) { return; }
Reference: if status is ok then ombucketcreateresponse must be non-null right?
Candidate: this should be the <UNK>
Reference: but we have already clicked the button in the command before, haven't it?
Candidate: should this be <UNK>
Reference: not needed?
Candidate: should this be be the vdsid here?
Reference: @shivtej1505 what about extracting the lines above to a separate method ? you are doing same thing twice so i think it would be better plus the method name like
Candidate: why do we need the <UNK> here?
Reference: maybe microseconds instead of nanoseconds are better here. i don't we need nanosecond precision for wait time, and it'll be consistent with the procedure execution time statistics.
Candidate: this should be the <UNK>
Reference: either just set or pass the return value to the next line.
Candidate: why do we need to here?
Reference: best practice is for the first letter to be lower-case, so it should be idpsectoken. (this also applies to the other 2 similar usages below in this file)
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: you must draw shadow after last item too
Candidate: i don't understand this matters, if you matters, but you can use the <UNK> of the <UNK> <UNK>
Reference: note that since this is waiting in node but not sh it only exercises part of <link_0> (when <link_0>/commits/58b127fa34cd10bfc76659b86292832965fe7c95 was added).
Candidate: 49
Reference: please extract a result variable.
Candidate: why do we need to use <UNK> here?
Reference: here too, ditch the timing information, no one will use it. at some point i'll finish metrics and it can go there
Candidate: why do we need to the the payload?
Reference: this is much easier to understand! i still think the tests we have for this should be more comprehensive in terms of properly checking the properties on refunds, that refunds
Candidate: you don't need the <UNK>
Reference: required?
Candidate: why do we need the <UNK> here?
Reference: unknown is not exactly accurate because some other types (e.g. instructor_course_join, new_instructor_account) are known but we just don't cater for them, maybe not now, maybe never. email type ... is
Candidate: do we need to here?
Reference: please add an assertion message to the asserequals() call.
Candidate: this should be the fixture.
Reference: is there a reason why we need the color picker for this test? why was this changed from .setcolorresource(r.color.pocketpaint_color_picker_transparent) ?
Candidate: please remove the <UNK>
Reference: extra blank line
Candidate: should this be <UNK>
Reference: redundant modifier. see travis report and seems for me the whole class can be private.
Candidate: should this be <UNK>
Reference: maybe better log message would be: string.format("resource %s is not found on the classspath so the property %s is not replaced.", classpathresource, key)
Candidate: why do we need to the <UNK> here?
Reference: i would prefer to create the defaultasprovider without using reflection
Candidate: why do we need to use <UNK> here?
Reference: same issues as the region class.
Candidate: let's use the <UNK> of the <UNK>
Reference: better set timeout ?
Candidate: this catch (throwable classnotfoundexception e) { throw e; } (throwable e) { throwable, e) { thread.currentthread().interrupt(); throw new runtimeexception(e); } catch (throwable e) { throw ioexception e) { throw {
Reference: can we make this static?
Candidate: why do we need to use the payload?
Reference: please add todo lines for incomplete methods.
Candidate: why do we need to use <UNK> here?
Reference: what happens if the init fails? shouldn't this be in the finally? that way even if it fails it won't get other threads stuck.
Candidate: why do we need to use <UNK> here?
Reference: can you change the new asserts to org.testng.assertjunit.\* instead. thanks.
Candidate: should we throw an exception here instead of exception?
Reference: s3 in message
Candidate: this should be the <UNK>
Reference: if this method can be called more than once, then clusterparticipant should be either volatile or atomicreference.
Candidate: i don't think we need to synchronize on the lock on the <UNK>
Reference: can you make this a constant somewhere
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return; }
Reference: i know it's awful and imperative and all, but does this look easier?  immutablelist.builder images = immutablelist.builder(); for (standarddrive drive : api.liststandarddriveinfo()) { if (drive.getmedia() == mediatype.disk) { images.add(standarddrivetowellknownimage.apply(drive));
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can this check be factored out into a separate function? that way there's no risk of openinputstream and open getting out of sync.
Candidate: replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace replace
Reference: intellij should be able to auto-generate a tostring for you (code -> generate). then you don't have to manage pulling fields out of objects like ssp. ssp already has a
Candidate: please use <UNK>
Reference: should be left null or not put in the map because the map is not meant to be a friendly output for the user (tmc does that) => tmc would
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: i would rename the method to a more descriptive name here and wrap it into the skiprole condition. e.g. java if (! isskiprole()) { addgroupsidsfrommspac(token); }
Candidate: why do we need to <UNK> here?
Reference: use macaddr.or("") and type.or("") (or another default), to have a better string representation?
Candidate: can we use <UNK> <UNK>
Reference: same as above. is this the final implementation?
Candidate: typo: <UNK> -> getcredentials
Reference: i think this check here is unnecessary since this situation should not ever happen. i think you can use here just synchronizegroupsstructuresrunning.setvalue(false)
Candidate: should be null?
Reference: i think element duplicates representation. we should reuse representation here.
Candidate: why do we need to the <UNK> here?
Reference: should this include withexpirationperiod()?
Candidate: you don't need to use the <UNK>
Reference: return on the next line.
Candidate: i don't think the <UNK> is an integer argument to be null. if an argument is null.
Reference: suggestion server.getfilestreams().foreach(uncheckedfiles::closeinputstream);
Candidate: please use <UNK> <UNK> <UNK>
Reference: maybe it is better to log each hook run? i would also consider moving the loop into runhooks method or so
Candidate: this is this to the exception instead of the <UNK> (after <UNK>
Reference: unrelated changes
Candidate: why do we need the layout here?
Reference: plase add {} to improve readability.
Candidate: should we be the <UNK> here?
Reference: these look like they are for debugging. could we make them debug logs instead?
Candidate: why do we need to here?
Reference: wrong indent, and the previous line should be wrapped
Candidate: typo: <UNK> => <UNK>
Reference: remove extra new lines
Candidate: rename <UNK> <UNK> <UNK>
Reference: return the buffer to the pool?
Candidate: should we throw an exception here instead of an error?
Reference: shouldn't the order of the parameters be the other way? since first argument is "expected", so this might mislead you when you see the assertion error.
Candidate: why do we need need to the <UNK> here?
Reference: i wouldn't add the break unless we have a performance problem and we know its here?
Candidate: this should be the feedid
Reference: maybe keep this buildfrom. the intent is to improve existing stats, so retaining any new fields should be ok. if, however, you insist on setting all fields explicitly, using ctor
Candidate: rename <UNK> <UNK> <UNK> <UNK>
Reference: shoudlnt there be a haserror() method?
Candidate: please remove the method("post")
Reference: better use the same logic as on line 81: stringutils.isnotblank(prvdr)? prvdr : unknown_provider;
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: i guess to begin with, this call 'removeifledgernotexists' is redundant here. 'removeifledgernotexists' should be already taken care by "entrylogmetamap = extractmetafromentrylogs(entrylogmetamap);" in 'runwithflags' method. 'removeifledgernotexists' call should be removed from
Candidate: why do we need to here?
Reference: use systemreader.
Candidate: you can use the payload?
Reference: maybe "generatereadlink", and name the generated method "readlink", just to be consistent with the "readone" and "readmany" methods.
Candidate: this this <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: is set.union(scalarvariables, arrayvariables) = freevariables ? if that is expected then i think we should add a check for that to be true to catch any potential bugs.
Candidate: why do we need to check for the <UNK> ?
Reference: we might want to consider using <link_0> instead of the string "/"
Candidate: this should be the <UNK>
Reference: why not fail in un-supported versions ?
Candidate: <UNK> *= 2;
Reference: beware - if the string contains multibyte characters, this will blow (a german umlaut will be encoded as 2 bytes if the native encoding is utf-8). i would create a
Candidate: i don't think we need to do the getcredentials getcredentials getcredentials getcredentials
Reference: cleaner if you do datastores.stream().filter(ds -> ds != callingdatastore).foreach(ds -> ds.updatesessionattributes(id, sessionattribute)
Candidate: this we move this to clean up the into the packet:  <UNK> <UNK> e) { <UNK> <UNK> <UNK> { <UNK> } <UNK> e) { <UNK> <UNK> e) { <UNK>
Reference: this separation is awkward and results in our calling the icommitmessageprovider2 twice, which is unnecessary since it already returns both the message and the desired caret position in the first
Candidate: why do we need to permission?
Reference: @nisalaniroshana , provide more context to above debug log. include username as well to the debug log.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: what happens when format is null?
Candidate: should this be <UNK>
Reference: why the synchronized, the segment store is thread safe? making fpixel size a local variable rather that an class variable might be a better fix for concurrency?
Candidate: i don't understand this matters, if you matters, this matters, but it is the <UNK> the <UNK> is the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: we usually don't go through the double check...
Candidate: why do we need the <UNK> here?
Reference: could you please perform an extract method and put the common parts in one method that both letterify methods call? thanks
Candidate: the syserr should be an exception
Reference: you could return and test something here
Candidate: use stringutils.empty
Reference: i think you can probably remove this method altogether
Candidate: can you out out out of httpconnection out of httpconnection out out out out out out out out out out of httpconnection out of httpconnection scene, out out out out
Reference: maybe add this statement to the glowplayer#setgamemode method instead? that way, this fix would also apply to plugins changing a player's game mode.
Candidate: please use <UNK>
Reference: final.
Candidate: please use <UNK>
Reference: does start get assigned a new value? or it will always be 0? if always 0, then should it be a constant instead.
Candidate: this should be the <UNK>
Reference: i think this can be set by spring application.properties without creating bean explicitly.
Candidate: why do we need need to use the <UNK> here?
Reference: why use a random number? did you try a graduated system (spin for n times, yield for m times, park)? also, did you try runtime.onspinwait() in any variation? i think
Candidate: i don't understand this matters, what about the <UNK> the <UNK> is the
Reference: why we have extra log in here? can it combine into 1
Candidate: should we be the <UNK> here?
Reference: this introduces a dependency on the java scripting api. is this desirable?
Candidate: storagetype fail in <UNK> fail in fail fast fail fast fail fast fail fast fail fast fail fast fail fast fail fast fail fast fail fast fail fast fail fast
Reference: in terms of code readability it would have been easier if the cases were grouped (conditions keep being repeated): if (pathfragment.startswith("/") { if (currentpathendswith('/') { ... } else { }
Candidate: i don't think we need to check if the is is null.
Reference: temporaryfolder should take care of this.
Candidate: i don't understand why, but we do, but we don't need to do, but we don't want to do, but we don't need to do the <UNK> scenario?
Reference: add here a condition on issequenceelement, the below code is unnecessary if issequenceelement == false
Candidate: i don't think we need to check if the is is the software <UNK>
Reference: ok, let's move this back to the methods, because we don't have any benefits of extracting here. sorry :)
Candidate: can be simplified to <UNK> <UNK> ?
Reference: maybe i am missing something, but won't this fail if we're removing an internal snapshot?
Candidate: i don't understand why, but it matters, but it seems to me to do, but i am expecting a few times in the
Reference: this is 3.3 feature, not 3.2
Candidate: should we be the <UNK> here?
Reference: what about the case whereby a unit is assigned to this transport according to the unit but not according to the transport ship?
Candidate: why do we need to use <UNK> here?
Reference: synchronized is unnecessary because context is (must be) instanciated for each thread. the purpose of context class is making invoketemplate single-threaded.
Candidate: why do we need the <UNK> here?
Reference: redundant cast
Candidate: why do we need to use the here?
Reference: this sentence ("in case of large.... ) is too long and not clear. please reformulate it using 2 sentences.
Candidate: rename <UNK> <UNK>
Reference: s/"+/" + an extra space
Candidate: what is this mean?
Reference: optional<region> instead of null please
Candidate: we should need to hide the exception here
Reference: calling a protected method in the constructor of the base class is not a good idea ;)
Candidate: why do we need the <UNK> here?
Reference: it's beeter to used int type.
Candidate: should we throw an exception here?
Reference: might as well make it  java for (isessioneventlistener target : v) { ... }
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: ![minor](<link_2> 'severity: minor') catch a list of specific exception subtypes instead. [![rule](<link_1>](<link_0>
Candidate: can we use the <UNK> here?
Reference: looks like these 2 lines can be before try-catch block, wdyt?
Candidate: please use <UNK>
Reference: if there are no hosts available for this op, shouldn't you warn that all the domains were not synched?
Candidate: i don't think we need to check for the <UNK> the <UNK> <UNK>
Reference: must be protected against concurrent accesses
Candidate: can be replaced with <UNK>
Reference: do we need to do something special here for windows directory separators?
Candidate: why do we need the <UNK> here?
Reference: same question as above
Candidate: can be simplified to return <UNK> ?
Reference: since this is the only place where mcallback is used, perhaps we can avoid holding a reference to mcallback and simply use this here:  if (gettargetfragment() instanceof callback) {
Candidate: this should be the <UNK> the presenter. on the username?
Reference: a path limited revwalk is needed here to find the commit that last modified the file at the selected path or else the previous commit may contain the exact same
Candidate: why do we need to use <UNK> here?
Reference: suggestion private boolean addtoresources(offheapresourceidentifier identifier, long capacityinbytes) { atomicboolean status = new atomicboolean(); resources.computeifabsent(identifier, (k) -> { status.compareandset(false, true); offheapresourceimpl offheapresource = new offheapresourceimpl( identifier.getname(), capacityinbytes, (res, update) -> {
Candidate: rename to iu
Reference: qq: can anyone create the container or only the processor which holds the lease on the blob? since i haven't looked at the azure jobcoordinator, i just want to make
Candidate: why do we need to use <UNK> here?
Reference: shouldn't be a need for this line.
Candidate: this should be the <UNK>
Reference: please print all status messages to system.err. it's generally good practice, and it'd be nice to try to keep system.out clean in case we ever want a command that outputs
Candidate: you can use <UNK> <UNK>
Reference: remove the unused 'e's
Candidate: why do we need to use the here?
Reference: (args[0], args)?
Candidate: why do we need this?
Reference: what's the meaning of returning false without truncating? is the file in a consistent state?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: need to implement
Candidate: should this be <UNK>
Reference: the principal id is the user id not the object, you should increment for the object id only if it is of type vm
Candidate: use back back back back back back back back back back back back back back back back back back back back back back back back back back back back back
Reference: same here, just remove by dn without fetching entity.
Candidate: i don't think we need to do we need need to check the getcredentials for the getcredentials
Reference: same as below (constructor without criterion)
Candidate: i don't think we should check whether the is verifier should be null.
Reference: remove rounding... 3rd strike ;)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the correct way to get the type from an object is to use entitydictionary.gettype. look at how it works with dynamictype.
Candidate: can we be simplified to <UNK> <UNK> ?
Reference: would nice to have a sanity check that the cohort doesn't contain an active membership for the patient before
Candidate: why do we need to mock <UNK> here?
Reference: is that type of exception suitable for the 'keys' service? (openstackexception)
Candidate: should we re-throw the exception here?
Reference: invoking m_es.shutdownnow() again before throw exception would guarantees the shutdown.
Candidate: i don't think we need to throw an exception if we don't want to re-throw it?
Reference: attach the exception to the warning.
Candidate: should we throw an exception here?
Reference: it won't be safe to use null/not-null here to signify anything. after the first threadlocal is initialized by a timeout, it will be non-null forever thereafter.
Candidate: the syserr should be be <UNK>
Reference: try with resources
Candidate: why do we need to use <UNK> here?
Reference: you probably only need to call setx() once :)
Candidate: iterable<integer> = optional.ofnullable(req.expectedstates).orelseget(collections::emptylist);
Reference: should be jsonone. this is assuming that the numeral part of the variable name is the expected number of fields in the serialized version. if that's not the case, then
Candidate: why do we need the <UNK> here?
Reference: numblocks? or numlocalblocks?
Candidate: do we need need to hide the exception here?
Reference: return forbidden too. no need to play nice if the user doesn't have rights to call this.
Candidate: should we throw an exception?
Reference: groups cannot be null.
Candidate: can be simplified to: if <UNK> != null) { <UNK> = <UNK> } <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> { <UNK> } <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK>
Reference: why jschsession.sendkeepalivemsg() doesn't work for us?
Candidate: i don't think we need to throw an exception
Reference: why not using the @inject annotation?
Candidate: why do we need this check?
Reference: i feel like logputcountsperiodically() depends on put method. that is, if put method, for some reason, is not invoked then logputcountsperiodically() won't be called. i am thinking if a background
Candidate: if <UNK> != null && <UNK> { <UNK> } else { <UNK> }
Reference: please, use text "project name" (name was fixed after sending this pool request) thank you.
Candidate: please, use <UNK>
Reference: hi, thanks for elaborating on the previous patch :) the problem with this code is - a. it's not clear (but you were nice and explained ;) ) b. i
Candidate: this should be the feedid
Reference: it looks this method is not called in prozessverwaltungform - so it displays all processes and templates.
Candidate: this should be <UNK> to iterable<integer> to be response.status.internal_server_error?
Reference: worth using an empty set (i.e. collections.emptyset()) when null/empty instead.
Candidate: should this be <UNK>
Reference: missing final
Candidate: use long.valueof() instead of <UNK> long()
Reference: this looks backwards. this would attempt to create basicawscredentials when neither awssecretkey nor awsaccesskey is provided.
Candidate: why do we need need to the <UNK> here?
Reference: i18n
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: not part of this commit but could change "updatevideobutton" message to be consistent with method name "clickclosebutton" :)
Candidate: i think we should be the <UNK> the <UNK> <UNK> the software stripe { <UNK> <UNK> }
Reference: unsafe cast. i would recommend to check the class and to default the field to something if it is not <code> staplerrequest</code>
Candidate: why do we need the <UNK> here?
Reference: this condition should be reverted - else, index-out-of-boundaries-exception guaranteed.
Candidate: if the vm != direction.incoming) { return; } if <UNK> { <UNK> { <UNK> { <UNK> = false; }
Reference: it has been wrong before your commit, but as you touched this line could you use {} instead of string concatenation?
Candidate: why do we need the <UNK> here?
Reference: this should be refactored to be if/else if/else, instead of using conditional operator.
Candidate: you should be the database query on the database query on the database query on the stage database stage
Reference: how is this meant to work? are you assuming that assertions will only be enabled in testing? if you need some logic to only be executed during testing shouldn't there
Candidate: the syserr should be be the
Reference: unused variable
Candidate: trailing <UNK> -> objects.tostringhelper()
Reference: intstream.range?
Candidate: this should be the <UNK>
Reference: the null check should be unnecessary.
Candidate: should we throw an exception instead of returning null?
Reference: aren't you supposed to test if the previousorder field has been set
Candidate: why do we need to evict the <UNK> the <UNK> <UNK>
Reference: because this is a text box, it will need the 'modifylistener' like the spinner widgets. without it modifying the contents of the text box don't register as needing an 'apply'
Candidate: we should need to do we need need to raise an exception if <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: this should be role_anonymous. however given the defaults in anonymousspec you should just delete it
Candidate: should this be <UNK>
Reference: could this raise an ioe? if so, that disconnect() afterwards still needs to be called, so make close() a catch/log operation. ioutils.closestream could do this (and it includes the null
Candidate: [![rule](<link_1>](<link_0>
Reference: i am happy with either, does geometrytype capture coverage cleanly?
Candidate: can be simplified to: java <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK>
Reference: why this intermediate step, couldn't we transform into a biconsumer which accepts an entity and a stringbuilder or even biconsumer<prefixsearchableentity, consumer<string>> and then invoke with (entity, this::addcontentstring) or the like
Candidate: please use <UNK> <UNK>
Reference: instead of having the id as constants, why don't you create all the entities as constants? this makes the unit test shorter and easier to read
Candidate: the syserr should be be the
Reference: why do we need to open project in setup()? it's better to do it in the appropriate tests to avoid skipping of all tests execution in case of error, and
Candidate: you don't need to use <UNK> <UNK>
Reference: can we create a constuctor for componentparameter?
Candidate: why do we need need to the <UNK> here?
Reference: did you intend to leave the printstacktrace() here?
Candidate: should we be the exception here?
Reference: i think that this one is used only here. can you consider changing it to private?
Candidate: this should be the if <UNK> is called <UNK> the the username?
Reference: please add @nullable for the param.
Candidate: i don't understand this matters, but i think we need to do we need need to terminate the the the lock threw the <UNK>
Reference: i am unsure: return ret;
Candidate: do we need to check the <UNK>
Reference: i don't think the loadclientsinternal method should exist. use getclients.
Candidate: why do we need the <UNK> here?
Reference: use consolelog
Candidate: do we need a <UNK>
Reference: no need to log all of these separately, the exception message / stacktrace will say what it is, can you collapse it in to one catch block please
Candidate: why do we need need to the <UNK> here?
Reference: minor style issue - finally should be on the same line as the closing brace of the try
Candidate: @unyoungwax, do we need to check the the <UNK> <UNK> <UNK>
Reference: can you put some dummy object into the expectedresult? otherwise, this is just a check for any empty list.
Candidate: why do we need to check the <UNK> <UNK>
Reference: what should happen if the network is not connected to any host? two notifications?
Candidate: can be simplified to: java return <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK>
Reference: the ismaskvalid parameter is irrelevant here. this test only checks that the input is in valid prefix format.
Candidate: should this be the fixture.
Reference: we shouldn't catch the exception over there.
Candidate: please use <UNK> <UNK> <UNK>
Reference: you could have this method (optionally) take an exception and add a button to show the exception's tostring.
Candidate: should we use the <UNK> here?
Reference: extract method suggestion asserttimeoutpreemptively(ofseconds(5), () -> executor.run());
Candidate: why do we need to brackets?
Reference: extra lines
Candidate: collection.emptylist() instead of <UNK>
Reference: why the token is supported only for resource but not for page ? in case of a page there will be locking on the page instance and it will work
Candidate: please remove the <UNK>
Reference: add sanity check?
Candidate: use <UNK> objects.tostringhelper() for <UNK>
Reference: would .size() > 1 instead of !.isempty() make sense here? do you think assuming that a tank that has a tank list of 1 will stay at 1 and return
Candidate: do we need to use the too?
Reference: is there some reason why are you declaring these variables before initializing them? it reduces readability for no apparent reason.
Candidate: why do we need the fully-qualified here?
Reference: this method can be moved to the graphandedges class with together with makekryo(), save(outputstream outputstream) - making the graphandedges responsible for serialization.
Candidate: should we catch exception here?
Reference: i think the call to getlocaltableblogidforremoteblogid(remoteblogid) should be changed here, since getlocaltableblogidforremoteblogid doesn't ensure the dotcomflag=1. maybe it's a really edge case, but on self hosted network installations of wp,
Candidate: this should be the <UNK>
Reference: do this globally for all the error emits.
Candidate: do we need to catch the interruptedexception block?
Reference: tldr; i would return null here. i can see a two ways we're handling "issue with the file" .... here, we're returning empty string in case the filename does not
Candidate: why do we need to use the <UNK> here?
Reference: lets rename this to removepipelinemetrics
Candidate: why do we need the <UNK> here?
Reference: since min <= max, this can be reduced to: xmin >= x && xmax <= x + width && ymin >= y && ymax <= y + height
Candidate: if <UNK> != direction.incoming) { return; }
Reference: fyi, the recently-added timers.singleshot(200, () -> { ... }) would be a more succinct way of expressing this. <link_0>
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: nit. make this string literal a top-level constant
Candidate: why do we need to permission?
Reference: the else is not necessary (the if returns).
Candidate: the syserr should be be <UNK>
Reference: you don't need to do a == true check, a simple check works if (getcontentvaluespopulator().populate(contentvalues, data)) { .... }
Candidate: this should be the <UNK>
Reference: please add check for exception cause type and message, we must be sure that it's really expected exception.
Candidate: please sure that the exception
Reference: using an npe catch as control flow is not a good pattern. it's better to do the null check by hand.
Candidate: we should need to do we need to check the the <UNK> <UNK> <UNK>
Reference: rename -> cosmosdbfactory to cosmosfactory
Candidate: the syserr should be be <UNK>
Reference: can be on one line and doesn't need to throw ioexception.
Candidate: use <UNK>
Reference: could be defined at line 1064 since it's not used before there
Candidate: this "config job.name is missing"
Reference: per above, can you change this to "if (containeddatadefinitions == null) { containeddatadefinitions = new hashmap... }; return containeddatadefinitions;
Candidate: this should be <UNK>
Reference: please, add translation
Candidate: if vds { return; }
Reference: @pawaschhokra looks like this metric counts the number of times a processor has become the leader. the metric name "leader-election" can be easily misinterpreted as the number of times the
Candidate: this fail()?
Reference: is this also needed for non-first parents, too? i haven't thought it through. (the non-first parents can be encountered via revcommit.carryflags. i'm not how to quickly tell what code assumes
Candidate: if <UNK> != null) { <UNK> = <UNK> }
Reference: release should be in finally block.
Candidate: why do we need to here?
Reference: nit. unnecessary 'final'
Candidate: should this be <UNK>
Reference: .equals() instead of ==
Candidate: you can use <UNK> <UNK> <UNK>
Reference: maybe we shouldn't include confusing characters together like 1 and i, 0 and o, . and ,?
Candidate: why do we need to use <UNK> here?
Reference: are you sure about the name users?
Candidate: rename to <UNK>
Reference: this looks... odd. can you tell me how to reproduce the issue you're working around? i'm concerned we may need to do more than just ignoring the call...
Candidate: why do we need the <UNK> here?
Reference: we could use the carbon.properties file as well to pass the property
Candidate: why do we need the layout here?
Reference: getintinrange() for both? or atleast neg/0 checks for each of these three configs if you don't already have them.
Candidate: please use <UNK> <UNK> <UNK>
Reference: if only one-side has been reconfigured, this method treats the other-side's metric as valid and collects them, during system reconfiguration. but those collected metrics will not represent the stable state
Candidate: i don't think we need to wait for the <UNK> the <UNK> is the
Reference: what's the difference between this test and the test on line 194?
Candidate: <UNK> *= 2;
Reference: should this be modified as well ?
Candidate: this should be setemptyelement().
Reference: this is not part of the cl, but this will not work, see here: b/141323834 #9
Candidate: should be be the <UNK>
Reference: nit: it would be more clear if udp and udp1 had more descriptive names.
Candidate: you can use the <UNK> here as well
Reference: not sure why we need activate... after you load all resources you can "activate" your-self.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: what line(s) of code do we need to catch ioexception for? seems like you're already handling ioexception internally.
Candidate: do we need a <UNK>
Reference: it would be more efficient to assign the result of get() to a local variable. i.e. one less node lookup. suggestion statement statement = statementmap.get(sql); return statement != null &&
Candidate: why do we need the <UNK> here?
Reference: i don't think this should be changed since on the reactive side we don't support anonymous users.
Candidate: is this possible to evict null?
Reference: i think we should avoid a dependency to the given uberfire module due to the pair class. i think we should use standard java map entry. for example on this
Candidate: please use <UNK>
Reference: just call getcodec().decodelong() in both cases here.
Candidate: why do we need to the <UNK> here?
Reference: i guess eclipselayerex should be in the catch block
Candidate: should we be the getconnection payload?
Reference: given that the constant string level:// appears so often in this pr, it ought to be a string constant somewhere.
Candidate: should we use the exception here instead of catching the exception?
Reference: this change is unnecessary i think, but ok.
Candidate: why do we need need to the <UNK> here?
Reference: not sure what find and account means
Candidate: gson should be?
Reference: i would recommend a suitable localized message here in the precondition.
Candidate: why do we need need to the <UNK> here?
Reference: why all these additional newlines? there should be only one
Candidate: please use <UNK> <UNK> <UNK>
Reference: can we refactor amqpconnectionmanager to make connection factory injected and avoid modification of the class that is under test?
Candidate: use readasstring(...) instead of <UNK>
Reference: there is a copy-paste error here. tsk_web_bookmark is added to orderingmap six times. it accidentally works out because all of the currently supported artifact types are all using default_ordering, and
Candidate: use assertequals instead of assertequals
Reference: extra space
Candidate: this should be the if the is is null, so we don't want to throw an exception if <UNK> { throw <UNK> }
Reference: what about refreshplugin(refreshable plugin) below? shouldn't is also call repositoriesviewrefresher.repositoryrefreshed(rp) if the plugin is a repositoryplugin?
Candidate: if you is the <UNK> the <UNK> is the <UNK> the <UNK> is the
Reference: how about inlining the concrete logic into visitcolumncheckconstraint and visittablecheckconstraint instead of having a nullable columnname and make a distinction again in visitcheckconstraint. seems like a unnecessary generalization.
Candidate: the syserr should be be <UNK>
Reference: you can delete this. you don't use mapboxmap elsewhere.
Candidate: style style style provided callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback callback
Reference: nit: use textutils.isempty instead of a null check for strings.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i don't see any advantage of using requirenonnull()
Candidate: why do we need to here?
Reference: it may need a generic exception (or other design) to indicate (or know) the capture request is issued or not. once the request is issued then it should not file
Candidate: why do we need to use <UNK> here?
Reference: you don't need to rely on a list, you have a findelementbyid. you could even use findelementwithoutwaiting(by) there with a by.id since the button is supposed to be displayed.
Candidate: why do we need need to the <UNK> here?
Reference: checks -> check
Candidate: why do we need this?
Reference: is envvars thread safe? there are multiple threads accessing this code, so you risk them overwriting eachother.
Candidate: i don't think we need to check for the <UNK>
Reference: optional: should it be "the endtime should be greater than starttime.". better: retrieve all msg from a property file so that we can change without modifying code.
Candidate: i disagree with the stack trace.
Reference: code style
Candidate: code style code style code style code style code code code code code code code code code code code code code code code code code code code code code code
Reference: nit: if we wrap one, then we wrap all.
Candidate: why do we need the fully-qualified properties? here?
Reference: so if there is a network or other valid error, this method will return 0? seems strange.
Candidate: i don't think we need to throw an exception if the exception is an exception, it will throw an exception
Reference: isn't it missing "active"?
Candidate: if the is is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: yep, would really like to find another way then breaking out transformer and serializationhandler from internal jvm packages. looks like you are using this to quickly implement an encoding?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> <UNK>
Reference: i think "valid times" should be changed to "setup time" or even just "setup"
Candidate: this should be (throwable <UNK> (context { this(config, <UNK> }
Reference: let's introduce an interface to avoid all of those instanceof checks.
Candidate: why do we need need to here?
Reference: probably set this down by where the sha1 is set for the object, for consistency.
Candidate: the exception is the exception
Reference: should we log what the result code here so we know what other junk we're getting in response?
Candidate: should we log the error message in messages.properties ?
Reference: this is not the right place to add the filter to the chain. it must be added the same way the other fillers are added in defaultfilterchainmanagerconfigurer and abstractstormpathwebmvcconfiguration (the
Candidate: why do we need to use the here?
Reference: did you mean to write "else if" here?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: it would be cleaner to replace this line with: fkind = kind; fsuffix = getsuffix(kind, value, chararrayutils.empty); fliteral = getliteral(value, fsuffix); there is no need to call resetlazyfields in constructor.
Candidate: can we make this private?
Reference: on and off equalling true and false are only applicable to html forms, so this should not be generalized here.
Candidate: why do we need to use <UNK> here?
Reference: method is too complicate to understand, pls split on different methods.
Candidate: can we move this logic into a separate method? if we { null) { return <UNK> { <UNK> } <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> }
Reference: why aren't you using 'createnic(..);
Candidate: why do we need to declare the attachments ? <UNK> : <UNK> ?
Reference: use preconditions.* for consistency with null-checks unless a caller above expects a samzaexception to be treated differently.
Candidate: should be be <UNK>
Reference: please add a static import for this method.
Candidate: should we use the exception here?
Reference: this attribute is not required, so it probably needs a default or something like that
Candidate: hmm. this should be the <UNK>
Reference: this is a style/opinion thing, but i would rather see a class/interface here instead of a triple; otherwise it's hard to know which file is which.
Candidate: if <UNK> == null) { throw <UNK> }
Reference: seems out of alignment to me.. this would fail checkstyle apparently.
Candidate: should we be the getconnection here?
Reference: and since this assertion is pretty popular, i guess you could refactor it in its own method. doing assertthat(passivemessagehandler.gettrackerclients().count()).is(x)
Candidate: should be be <UNK>
Reference: you don't need to change this method signature. i would leave this method private.
Candidate: @exper0 we don't need to use the millisecond
Reference: this function already calls findbyreferenceid as it's return value so you don't need to call dataaccessrequestservice.findbyreferenceid() again
Candidate: why do we need to here?
Reference: you must update this to gdb_7_12_version
Candidate: this should be the <UNK>
Reference: i think this can be truststorepasswordalias instead of the string?
Candidate: do we need need to close the first?
Reference: no need to check for null, releaseconnection already does that
Candidate: why do you want to use <UNK>
Reference: i'm not sure what you mean. i'm not too concerned about whether we have lots of small, fine-grained tests, or a smaller number of tests that test a more complete
Candidate: can we use <UNK> permission?
Reference: why adding unneeded braces?
Candidate: should we be the token token token token token token token token token token token token token
Reference: just my personal preference, but i'd switch the operands because of readability reasons (i.e. event.getpropertyname().equals("location"))
Candidate: why do we need to tear to inspections
Reference: any chance ":where_clause:" ends up being a valid token in the request? would be best to ensure that it gets removed in the sqlview definition before merging in the query
Candidate: why do we need the <UNK> here?
Reference: copy paste bug: must be childworkflows != null
Candidate: the syserr should be be <UNK>
Reference: hmm, what is this? what is a java template?
Candidate: why do we need to use <UNK> here?
Reference: do we need to clear the repository ? we're doing it at tear down already in clearrepo
Candidate: you can use <UNK> <UNK>
Reference: it would be great if this map could use generics so we know what it contains.
Candidate: can be replaced with <UNK>
Reference: need to update this to use safe uri generation.
Candidate: please use <UNK>
Reference: will this cause busy-loop?
Candidate: should we be the <UNK> here?
Reference: do you expect this switch to grow new cases? otherwise a simple if ("json".equalsignorecase(srcext)) is simpler.
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: nit: should we keep 2 tabs alignment for everything?
Candidate: can we make sense to make sense to provide a look up a look up a look up a look up a look up
Reference: maybe add a log statement here so it's easier to trace if things to not do what we expect.
Candidate: should this be be specific?
Reference: again this is displayed to the user "android recycle" would be better.
Candidate: @exper0 let's use <UNK> instead of <UNK>
Reference: what will happen if there will be a deadlocked delete task? if i read the code correctly we will be spinning here forever? is there any way to avoid this?
Candidate: i don't think we need to throw an exception if invoked?
Reference: iiuc "propietary" is a string and enum that you have added is pmproxytype, so you should be adding it to <pm_proxy> and validating it here.
Candidate: i don't think we need to check for the <UNK>
Reference: i'd like to see some tests using a different timezone.
Candidate: this should be (throwable <UNK> { <UNK> }
Reference: seems me a  listeners.foreach(listener -> layerdeleted(layername));  would have been at the same time more compact, readable, and faster (streams are very slow)
Candidate: why do 49
Reference: since this adds a new listener, should we clear the listeners before adding the new listener? i know setupcontent is called only once right now, so it won't make a
Candidate: should we be the <UNK> here?
Reference: this logging is not related to this pr, so please remove them all. if you want to add the loggings, please create another issue.
Candidate: we should need to check if the is is the software exception if we { return; } } } }
Reference: check for equality of error code
Candidate: why do we need the <UNK> here?
Reference: maybe define a const for "/organizations/" also, we can call only one time path.indexof wdyt ?
Candidate: why do we need the <UNK> here?
Reference: you can remove nosuchalgorithmexception now.
Candidate: i don't think we need to check if the == null) { actionreturnvalue <UNK> { return <UNK> } { return <UNK> { return <UNK> } { return <UNK> }
Reference: as already mentioned, this should be checknotnull(statistic, "statistic"), this will throw a nullpointerexception, therefore you will know it can't be null.
Candidate: should this be <UNK>
Reference: this is unnecessary
Candidate: shouldn't this be the <UNK>
Reference: simply call scheduler.schedule(new pollingrunnable(), 0, polling_frequency)
Candidate: i don't think we need to throw an exception if we don't want to do we need need to do we need need to do we need need to the
Reference: these are weird casts... could we maybe use an explicit type parameter on the singletonmap method call.
Candidate: why do we need to permission?
Reference: might not need the sleep if the persistor.write() call is moved to after the cancel
Candidate: we don't need to call the <UNK> in the test, no?
Reference: s/checkstate/verify/, also add a message in case it ever fails.
Candidate: please use <UNK>
Reference: not sure if we should create thread, dotconcurrentfactory is your friend
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: not a must fix, i just want to suggest you try lamda. it would be very convenient and simple here.
Candidate: can we be expecting the to clients?
Reference: can we use a better exception?
Candidate: why do we need the <UNK> here?
Reference: start
Candidate: i don't understand why the <UNK> ? thanks!
Reference: i suppose we do not need this now after using serializer
Candidate: please use the method("post")
Reference: should be select v.entry or v.entry.id?
Candidate: we should need to print the exception here if we want the software software software software software software software software software software software software software software software software software software
Reference: change to sexgenotypedatalist.isempty()
Candidate: you don't need to use the <UNK> <UNK>
Reference: let's name this based on what the map actually does: namespacesexhibitingviolations or something like this.
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: i thought we want to pass the current line number (linecount) here, not the starting line.
Candidate: why do we need the getconnection payload?
Reference: since this happens in every test as the first thing, this probably should be in setup(). at least the sharedpreferences call should be moved there. and i rather have the
Candidate: this should be the <UNK>
Reference: should we log case when this if is false?
Candidate: should this be <UNK> bigger?
Reference: @bharatviswa504 i think we can skip this one as throughout this class we are following this approach of using auditsuccess, mostly for code readability/correctness. i think we can discuss with
Candidate: audit consider using audit log storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage storage
Reference: or java matchers.<config>is(anotherconfig))
Candidate: should we print stack trace to debug level?
Reference: why can't we do this by dc level? i don't think that we should have different behaviour between the host in the same pool - much harder to debug it
Candidate: we don't need to use the <UNK>
Reference: i would move this directly to the variable declaration to make the constructor less complex.
Candidate: should we class" be the
Reference: throws throwable?
Candidate: why do we need the <UNK> here?
Reference: how will this be cleaned up?
Candidate: why do we need to use the here?
Reference: all 3s?
Candidate: @romani vdsdynamic assertnull
Reference: if (!meta.equals(metadatacache.get(file)) {
Candidate: <UNK> *= 2;
Reference: all caps?
Candidate: we should need to do we need need to check the the <UNK> <UNK> the <UNK> is the software error.
Reference: remove this variable and call inline
Candidate: why do we need to tear to the <UNK>
Reference: why was this added?
Candidate: should we be the <UNK> here?
Reference: isempty is not in java 1.5
Candidate: can be simplified to: java return <UNK> <UNK> .filter(s -> <UNK> <UNK> <UNK> == <UNK> && <UNK> { return <UNK> }
Reference: also (i know i keep repeating this but it's important), don't explain what the code does, that's not very useful. instead explain why you do it. in this case does
Candidate: can we use the <UNK> here?
Reference: i wonder why we need this bogus file here?
Candidate: rename <UNK> to <UNK>
Reference: not sure why we need iswaiting. notify can be called as long as it is synchronized on the object.
Candidate: what happens if the is is invalid?
Reference: do we still want this? or do we want to start all over again? this means 1 large column chunk will trigger always having more mem overhead right? even if
Candidate: this should be <UNK> if (state != null) { <UNK> } } } } } }
Reference: do we still need the if null check?
Candidate: why do we miss? miss?
Reference: should we check sessionready to prevent multiple invocations of the delegate's methods (especially double delivery of init events)? i know the driver won't do this, but application code might.
Candidate: i don't understand why, but it matters, but i don't understand why, but it matters, but i don't understand why, but i am not sure why, but i
Reference: i think one case is missing here, when esindexreplicas=autowire
Candidate: you can use <UNK> <UNK>
Reference: btw, i agree with @coverbeck on this, parallelstream is probably more complex than needed here. so which to a normal stream when templating this with the v2 version, thanks!
Candidate: why do we need need to the <UNK> here?
Reference: maybe, a better solution wrt to visibility would be to move the languagemetricsprovider out of apexhandler, and into this package. apexmetrics will probably not change for 7.0 (apart from this
Candidate: this should be called on the username?
Reference: not sure we need nor want his condition : !(context instanceof analyzermessagereporter), as soon as we introduce the concept. pretty sure it's code you can't cover as well in your
Candidate: i don't understand this matters, if we matters, but we can use the <UNK> <UNK> <UNK>
Reference: .isempty(), .size()
Candidate: please remove the <UNK>
Reference: as above, the item with an id equal to the total number of records might not be the last record if some objects were deleted from the database. it'd be
Candidate: this should be <UNK>
Reference: shouldn't that be in a specialized derived class? it might not be relevant for r4e no?
Candidate: if oldvalue is empty?
Reference: you can easily coalesce the null-check and the switch into a single if (header == set_cookie). how about set_cookie2 (i'm ok to not consider it, just raising the issue of
Candidate: how about changing this to <UNK> <UNK> <UNK> <UNK> <UNK> so.
Reference: yea agreed should go in start.
Candidate: why do we need need to check the <UNK> <UNK>
Reference: isempty() please
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: ![major](<link_1> 'severity: major') provide multiple methods instead of using "refreshmeasures" to determine which action to take. [![rule](<link_2>](<link_0>
Candidate: the syserr should be replaced with <UNK> <UNK> <UNK>
Reference: rename to namespace
Candidate: please use <UNK>
Reference: data constants.
Candidate: should we throw an exception instead of returning null?
Reference: also, shouldn't this sceneopaque connected to the writeonlygbuffer?
Candidate: please move this line to <UNK> <UNK>
Reference: ticks don't line up. the if branch consumes up to 2 ticks. consider using an unconditional call to submonitor.setworkremaining(7) here.
Candidate: why do we need this?
Reference: these should use the separated constructor, not hardcode the colon.
Candidate: please remove the method("post")
Reference: why "model.getstorage()" instead of just "storage"?
Candidate: we should need to do we need need to check whether the <UNK> is the software exception we don't need to do we need need to do we need to
Reference: can you change "2abcd" to something which describes what's happening? something like "cause-a-failure-during-retrieval"?
Candidate: i don't think that this test is be encapsulated in the db. we don't need to the future.get()
Reference: this isn't actually asynchronous. we're blocking here. we probably want to use a specialized callback for each call that aggregates responses, and calls the users callback if it's the last
Candidate: should be be the <UNK> <UNK>
Reference: use callback style instead
Candidate: style style style style style style style local style style style style style style style style style style style style style style style style style style style style style style
Reference: the product is never null, code can be simplified here
Candidate: i don't think we should need to override the <UNK> <UNK> the commit we don't need to override the commit that we should lose the dialog (from the commit
Reference: should we rather just not update the descriptions if they are empty, instead of creating a new object ?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i would add assert.fail()
Candidate: why do we need need to be <UNK> here?
Reference: maybe use switch()
Candidate: why do we need to check the <UNK> here?
Reference: please remove warning suppress and the unnecessary casting
Candidate: can we use <UNK> <UNK> <UNK>
Reference: why not use the messagelevel type?
Candidate: please use <UNK>
Reference: to keep consistency with all the operations, the beginning of the url should be got from client.getbaseurl() , not from a saved member. the responsability for server-wide data is in
Candidate: do we want to catch the exception here as well
Reference: don't set the chatsate for the entire conversations. set the chatstate for the user only
Candidate: i don't think we need to check if the is is the
Reference: hi sharad, i saw you already changed the code a bit regarding getdiskimagedao - care to refactor and replace dbfacade.getinstance().getdiskimagedao() with a "getdiskimagedao()" call?
Candidate: this is be the <UNK> <UNK> <UNK>
Reference: it makes sense to use assertequals here and below, to see the actual value in the failing case
Candidate: please use <UNK>
Reference: i think it's possible for a user to type <span id="img_container">, which would be removed by this regex. how about we make it a little more precise with <progress.*?><\/progress>|<span id="img_container.*?
Candidate: why do we need the <UNK> here?
Reference: maybe use a ternary expression? up to you
Candidate: this should be the <UNK>
Reference: a modal dialog is unacceptable during perfrom stage of refactoring.
Candidate: we don't need to the events in the console?
Reference: typo: try use inputformat -> try using inputsource
Candidate: use readasstring(...) instead
Reference: it should return readonlyarray not readonlyarrayinterface. also iirc, readonlyarrayinterface is internal for java.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: why not macpool p1 = command.getparameters().getmacpool(); p1.setranges(collections.singletonlist(range1));
Candidate: iterable<integer> = <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: same question here - can't we find a way to not rely on naming convention?
Candidate: can you remove the <UNK>
Reference: the numbers used in this method seem to be something meaningful. would you explain if they are?
Candidate: can we make this private?
Reference: does this mean that we won't allow any idle connections, even when not using tor? i'm not sure that's desirable for normal usage of the app...
Candidate: we should be the exception if the is is the
Reference: @prondzyn this will return an int which is enough as bytes.length is an int such that you can avoid casting it as a long
Candidate: @exper0 let's use system.currenttimemillis()
Reference: java if (lookupboundclass(entityclass) == null) { bindentity(entityclass); }  might be simpler or more straight forward?
Candidate: this should be the <UNK>
Reference: in this method, jdt also makes sure that the hyperlink is on a method/function. this allows it to prevent showing the "step into" hyperlink option for non-methods. can we do
Candidate: i don't understand this matters, if you matters, but you don't need to check the <UNK> <UNK>
Reference: rethink if you need so many &&
Candidate: this should be the <UNK> <UNK>
Reference: can we add enabletcpconnectionendpointrediscovery value here too. would be helpful for troubleshooting.
Candidate: should we use the <UNK> here?
Reference: consider removing magic numbers and using just source to get the the right div you want.
Candidate: you can use the <UNK> <UNK>
Reference: remove please
Candidate: <UNK> *= 2;
Reference: i'm wondering if it couldn't be more relevant to avoid having array in a single string, at least to follow what've been done for the mongodb repository. please have a
Candidate: [minor] don't need to _parallel copies of the <UNK>
Reference: shouldn't this be new fraction( t.getbitsperpixel(), 64 ) instead of new fraction( 1, 64 ) here?
Candidate: you can use <UNK> fraction( t.getbitsperpixel(), ) instead of <UNK> fraction( <UNK> )
Reference: cut at &&
Candidate: why do we need the <UNK> here?
Reference: can/should we warn if there are config options in the map that were not recognized?
Candidate: the syserr should be be the
Reference: why pass in parameter? it's already a field in the class..
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: see if you could write this more concisely, perhaps,  return stringhelper.iswhitespace(visibilitystring) ? "giver" : "giver, " + visibilitystring;
Candidate: the syserr should be be <UNK>
Reference: it should be better to use list interface instead of concrete implementation.
Candidate: why do we need the <UNK> here?
Reference: do we need the entered check here and the boolean variant below?
Candidate: should we throw an exception here?
Reference: should be metrics_metadata_name.
Candidate: we should need to the jdk consumers of the in the try/catch in the try/catch block.
Reference: wrong formatting in whole method. please fix it.
Candidate: can be simplified to <UNK> java 8 constructs java java java java java java java java java java java java java java java java java java java java java java
Reference: i think debug is enough since it is not some crucial state transition.
Candidate: what is this null?
Reference: i think this if..else could be shortened to a ternary statement, but it's not critical. :)
Candidate: why do we need to use <UNK> here?
Reference: when one runnable raises a runtime exception nothing will be executed afterwards. is this intended ?
Candidate: i don't think we need to wait for the <UNK>
Reference: why not reuse existing constructors? public permissionsoperationsparameters(permission permission, guid targetid) { this(permission); this.targetid = targetid; }
Candidate: please use <UNK>
Reference: optional: since we already have nullchecker class, should we utilize to use some method(isnotnullishignorespace) in there? or using stringutil from apache package?
Candidate: this should be <UNK>
Reference: what happens if somebody mutates the value while it's being written out?
Candidate: please use <UNK>
Reference: if i understand correctly, the purpose of introducing the internalinvokeaction() methods is to be able to get back the status of the run, that we don't have in runnable. instead,
Candidate: should we use the <UNK> properties?
Reference: won't this print the error message every time we find a mismatch? for example if we have 4 authenticator classes, this will print 3 times.
Candidate: this should be the getconnection in the finally block
Reference: no blocker in any case but does the current user ('cloud'?) have the rights on any system (think rbac). doing get tempdir syscall would be better.
Candidate: why do we need to the the payload?
Reference: would swtich make it cleaner?
Candidate: <UNK> *= 2;
Reference: why not just list<string>? this construction forces code that would like to use this method to explicit use arraylist which is often considered as a code smell.
Candidate: could be replaced by <UNK> reference: <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> = <UNK> }
Reference: this change is not related to the pr. is this fixing something else that you just witnessed? would be better to create another pr just for fixing this issue.
Candidate: should be precise, we should use the <UNK> here?
Reference: this check is no longer necessary since you verified it in the calling method. (ie. retry.getnextretryinterval)
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: just downloadable
Candidate: the finals
Reference: @ivandalbosco minor: another possibility would have been to move these tests up to visitsuper.
Candidate: why do we need this check?
Reference: discussed offline: this is ok as long as we make sure internal server doesn't say that it is fully ready until this has completed for all clients.
Candidate: this should be the <UNK>
Reference: i think this is the line of code that cause the issue in the mail-list
Candidate: <UNK> *= 2;
Reference: do base class really need to know about ssl? i suggest making 2 protected methods: clustercustomproperties and connectionstring that can be overridden and implemented in ssl test.
Candidate: please import?
Reference: make sure to use {this} in place of the name
Candidate: ideally we don't need to show the in a toast since it creates an hidden in a hidden in a commit which creates a hidden in a hidden in the
Reference: could be replaced with  headers.foreach(comparisonmetricfile::addheader);
Candidate: why do we need to the <UNK> here?
Reference: these messages should be self-explanatory (i.e. make it clear what are the strings)
Candidate: what happens if the is is invalid?
Reference: maybe we don't want to log this, but is this interrupt() really needed? or harmful?
Candidate: rename <UNK> :-)
Reference: seems like the log file name should be pulled out as a constant, or alternatively, a member variable so you could override it if you wanted.
Candidate: why do we need to use the <UNK> here?
Reference: maybe external @nonnull annotation?
Candidate: why do we need the <UNK> here?
Reference: where is there no space after the comma? it would make the annotations more readable.
Candidate: the syserr should be be <UNK>
Reference: this check fails in the case of split editors, since the target parent is the mcompositepart. i guess the more general algorithm should be to search up the target context
Candidate: i don't think we need to evict the on the <UNK>
Reference: iirc, this needs to be changed to three!=null&& three.samebounds != null
Candidate: use <UNK> objects.tostringhelper() for <UNK>
Reference: you seem to be deliberately not mapping over optionals - is there a reason for this? this bit would be fine as  return epdqgatewayresponse.getbaseresponse() .map(epdqqueryresponse::tochargequeryresponse) .orelsethrow(() -> new webapplicationexception("things
Candidate: why do we need the <UNK> here?
Reference: copy-paste bug, should be frame.toimmutable()
Candidate: should we be the <UNK> here?
Reference: could use method ref.
Candidate: can be simplified to:  <UNK> (string localpath = <UNK> ?
Reference: a matter of taste - types can be avoided for the sake of return statements from the if-else block.
Candidate: should we throw an exception?
Reference: use long.valueof(1)
Candidate: should this be <UNK>
Reference: avoid guava
Candidate: i don't think we need to do we need the future.get() to the exception in the exception we don't need need to do we need need to the
Reference: if already decided to refactor it,it would be great if it can be refactor to four different methods. it might be useful later on. btw consider adding the getintegerconfig and
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i would use serveraddressdeclaration.gettext().tostring() instead.
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: not anymore indeed. i used it with the first version of the test
Candidate: suggestion <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> rectangle <UNK> = <UNK> <UNK> <UNK> rectangle <UNK> = <UNK> <UNK> <UNK> rectangle <UNK> = <UNK> <UNK>
Reference: there is problem with the precision. when i tested it value was 1410354493.260164474 but fvaluetimestamp resulted to a tmfnanotimesatmp with fvalue=1410354493260164608 and scale -9. so, my compare filter for equal
Candidate: the syserr should be be the
Reference: is it safe if value is empty?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: change object to string
Candidate: you can use <UNK> objects.tostringhelper() to <UNK>
Reference: please add newly updatable fields expectation & verification
Candidate: please import?
Reference: what happened to the null check?
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: is that variable used?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: maybe better to use a logger here instead of system.out?
Candidate: should we use the exception here?
Reference: this might be called periodinmilliseconds
Candidate: we should need to do we need to do we need to do we need need to do we need to do we need need to do we need to
Reference: nit: might want to rename it to processdiagnostic or something to imply that this method handles diagnostic related queries?
Candidate: we should need to hide the exception if (state { throw new <UNK> }
Reference: httpheaders.location
Candidate: should be replaced with <UNK>
Reference: we could avoid creating the two date objects by returning false immediately if !shouldpublishimmediatelyoptionbeavailable(postmodel)
Candidate: i don't understand this matters, if you matters, but you don't want to use the <UNK> <UNK>
Reference: isadvanced(false) is default for channelgrouptypebuilder. we can skip this one.
Candidate: i don't think we need to evict the the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: i think we need this check because when workspace state is different to starting / running we will update its attributes and try to stop it.
Candidate: i think we need to trim the threw an exception if we threw an exception if it is not software software error.
Reference: revert to warn.
Candidate: do we need need to do the "?" here?
Reference: why not make the port property an int in the first place?
Candidate: please use <UNK>
Reference: i think it is better to keep the node source logging semantic [nodesourcename] etc
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: nicklisteners is not synchronized although it should be
Candidate: i don't think we need to do we need need to do we need need to raise an exception if we don't need to do we need need to the
Reference: stack isn't closed
Candidate: why do we need the <UNK> here?
Reference: that's one of the two changes, that are outside of test code. the change here looks correct. however, i don't know, which charset groovylexer is using or expecting... so, i'd
Candidate: should we print stack trace to debug level?
Reference: do we ever use the returned value? even the put in the cluster registry should use ignore_return_values.
Candidate: if you want to log the log level
Reference: 1. create method clearcss() with ace.edit('csseditorcontainer').setvalue('') 2. add .ace_text-input element to ui mapping - this is cursor, 3. in sendcsstext use sendkeys method to type using cursor.
Candidate: @exper0 do we need to check the
Reference: line length + the ones below
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: here too - once you change the api to use ints, you won't need all the integer mess here.
Candidate: please remove the method("post")
Reference: you can move this to the class level and mark as private static final.
Candidate: what is this a reason for the <UNK> ?
Reference: seems like the required version should be a property of the application (ui) instead. this is also a bit verbose. maybe we could drop some of the prefixes for the
Candidate: should we be the exception here?
Reference: @wezell is the uuid stuff required yet?
Candidate: can we throw an exception here instead of eating the exception?
Reference: we can remove else block replacing in just with return. (no added advantage with it for runtime, just for clean code)
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: how about defining the life cycle for file watcher like start, stop etc. and also define the state of the file watcher like starting, running, not started and stopping etc.
Candidate: you don't need to use the <UNK>
Reference: new actionresult<itemstack> -> new actionresult<>
Candidate: should we be the <UNK> here?
Reference: ps this is a logic change. it saves size to not log 2xx range responses. <link_0>
Candidate: please use <UNK>
Reference: is this necessary to special handling? following constructtrie logic will not handle the root sharding key?
Candidate: why do we need the <UNK> here?
Reference: causes npe in line 151 (connectionhandler.connect(accounttoconnect, failsilently);) when account is null and default account is not set? (npe in [connectionhandler.connectxmppinternal](<link_0> also npe in [l.117](<link_1> if account is null (if i
Candidate: please rename <UNK> to <UNK> <UNK>
Reference: should use assertthat
Candidate: why do we need to use the <UNK>
Reference: we can do this in try() - finally block to ensure outputstream is always closed.
Candidate: this should be the <UNK>
Reference: typo above, should be: return this.rpmrevision;
Candidate: please use <UNK>
Reference: nullcheck missing.
Candidate: why do we need the <UNK> here?
Reference: this one shouldn't be public.
Candidate: please use setemptyelement().
Reference: not sure why you need builder for two args. i'd have a factory method.
Candidate: this should be the <UNK>
Reference: i find it nicer to override getgraphicalviewer and cast their. similar as we do it with most getmodel methods in the editparts
Candidate: can you use syserr
Reference: it looks like this is non-trivial and it will be executed on every sign-in, which could be a lot. would it be better to move this to verify channel, which
Candidate: why do we need need to the <UNK> here?
Reference: plays the current, not the previous.
Candidate: should this be <UNK>
Reference: u return false here, but u already updated _olddisk with garbage before
Candidate: i don't think we need to check if the is is the
Reference: nice pr. maybe systemutils.java_specification_version + ": instead. do you like static imports?
Candidate: the syserr should be be <UNK>
Reference: @antonini it's a one-time variable: <link_2>
Candidate: @hdouss why 16?
Reference: it's not clear that the exception is warranted here -- is it strange and inconsistent for func_volt_regexp_position to define an extra nodes[] element and set it to null vs. just
Candidate: please use system.lineseparator()
Reference: magic number 10?
Candidate: should we be the <UNK> here?
Reference: why do you need this? are you planning to add the column to subtabnetworkhostview?
Candidate: this should be the <UNK>
Reference: avaialable -> available. ( its might be my mistake, same typo may be there in original class as well :-) )
Candidate: why do we need to check the <UNK> here?
Reference: ide says that exception is never thrown by classpathcontentretriever constructor, so we should remove the throws clause there and remove try-catch block here.
Candidate: should we throw an exception instead of exception?
Reference: could be simplified to assertnull.
Candidate: this don't need to subdir be the <UNK>
Reference: if you use lamda expressions then diamond operators should also be available)
Candidate: i don't need modifier) instead of storagetype here?
Reference: exactref
Candidate: why do we need to the the payload?
Reference: try-with-resources while getting connection to avoid connection leaks
Candidate: why do we need the lock again?
Reference: all these are the same. it's fine if they have the same message.
Candidate: i don't think we need to use the exception in the
Reference: what is the contract for the return of this method? if we are already at the state that we are trying to move to, it could be said that the
Candidate: nit: i don't think the code is the <UNK> ;-)
Reference: java throw new runtimeexception(e); // so we will see the cause...
Candidate: should we throw an exception here?
Reference: huh?
Candidate: this should be the <UNK>
Reference: defining two arrays is not very apparent of their mapping. may be a map of server error code to router error code will be very intuitive.
Candidate: please use <UNK>
Reference: may we simplify that a bit? it should be possible to fit it in a single 1-line operator.
Candidate: this should be the <UNK>
Reference: now, if there is no trace opened, the viewer has no columns. should we create the default columns at construction and add the analysis-provided ones later?
Candidate: can we use the <UNK> the <UNK> dialog?
Reference: i think when we are here, this if clause can be moved out of the catch and implemented as follow (classforname already throws classnotfoundexception): java if (classname.indexof('.') == -1) {
Candidate: please use syserr
Reference: should probably rename the above to htmlstream to advertise that its not a string
Candidate: why do we need to use the here?
Reference: this is not needed - you can use getcluster() from base class?
Candidate: why do we need to check for the <UNK>
Reference: two options... 1. this url is only for interactive - then we can use both extensions types. 2. this url serves both interactive and non interactive, and the mode is
Candidate: we should need to use the for the getcredentials
Reference: since init() is only called once, could we move it to start() so that start() and stop() become symmetrical?
Candidate: i don't think we need to check the <UNK>
Reference: the deleted field of the entity is not checked
Candidate: please remove the method("post")
Reference: this pattern was needed for the partition strategy and column mappings because we wanted to provide backward-compatibility for existing hbc schemas. since properties are an addition to the schemamanager, i
Candidate: modifier needs access access access access access access access access access access access access access access access access access access access access access access access access access access access access
Reference: swallowing stacktrace ;-) i would be in favour of:  log.error("error while playing command", e);
Candidate: please use syserr
Reference: i would consider abstracting this useful goodie into swttestutil.java as it's likely to be used in other places also.
Candidate: this expectations expectations
Reference: log.trace
Candidate: i don't think we need to check the the subdir on the <UNK>
Reference: add this to the string resource file
Candidate: the syserr can be replaced with <UNK>
Reference: i don't believe anything related to managementremotingservices is required unless http-upgrade is turned on.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: groupidexisting -> existinggroupid?
Candidate: why do we need the <UNK> here?
Reference: even though it was like this before, do we have reasons to keep it as iterator instead of using for-loop?
Candidate: can you define the as well as well as well as well as well as well as well as well as well as well as well as well as well
Reference: it's easier to read if you do:  if (type != schema.type.string)) { throw new ... } //logic here  as it removes one layer of indentation. in any case,
Candidate: rename <UNK> to <UNK>
Reference: how about  java iterable<type> resultiterable = first(1); return resultiterable.hasnext() ? optional.of(resultiterable.next()) : optional.empty();  we don't need to copy it into list.
Candidate: please use <UNK>
Reference: not dimension.used_java_heap ?
Candidate: i don't think we need to the the <UNK> <UNK> the <UNK> <UNK>
Reference: pls use querydsl instead (already in master)
Candidate: use <UNK> <UNK>
Reference: - [x] i think, these three cases are no difference in the appearance of the result screen. so, it should take page source for evidence. --- ok by btkatoutmj
Candidate: why do we need to the expectations
Reference: please use here getbackendcollection(class<t> clz, vdcquerytype query, vdcqueryparametersbase queryparams) method instead of manual query invocation.
Candidate: should be be <UNK>
Reference: how do you tell that the cause of this exception is the request being invalid?
Candidate: i think we can use the <UNK> <UNK> <UNK> <UNK>
Reference: remove word "uri"
Candidate: the syserr should be be <UNK>
Reference: let's keep this?
Candidate: why do we need to use the here?
Reference: you can put the gtk version check into the 'if (settings !=0)' block like so if (settings != 0 && os.gtk.... as otherwise the buffer is instantiated for no reason
Candidate: if <UNK> != null) || <UNK> == null) || <UNK> || <UNK> || <UNK> { <UNK> } } } } }
Reference: my original code here was also inconsistent with the reference manual. we allow a string if it can be coerced to a number. you could either fix or open an
Candidate: ![major](<link_0> 'severity: major') either remove this skipped or rethrow [![rule](<link_2>](<link_1>
Reference: let's not printstacktrace in production code
Candidate: the syserr should be the
Reference: i think this one should also get called for 1.3.0? in which case the method on ejb3remoteresourcedefinition could be renamed
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: better keep that as a field as new instantiations are expensive.
Candidate: use <UNK> <UNK> <UNK>
Reference: intellij is continuously recommending to simplify this code this way, but i think it is very hard to understand this way
Candidate: if <UNK> != null) && <UNK> { <UNK> body: <UNK> }
Reference: is this debug? otherwise, probably best to give more descriptive errors.
Candidate: should we throw an exception here?
Reference: nit: static import anylong() for consistency?
Candidate: i don't think we need to do we need to do the getcredentials getcredentials
Reference: imho such a difficult for understanding and potentially error-prone statement. i don't understand it. please consider rewriting it in a simpler way. currently, if i understand statement correctly: the environment
Candidate: can we move this into the 83 method?
Reference: can just use map.of( ) here
Candidate: can we use the <UNK> <UNK>
Reference: does not look to be enough, because currentsessions.entryset() iterator below may still collide with recordrequest(). i recommend synchronizing the entire block
Candidate: should we be the specific?
Reference: s/-//'
Candidate: should this be be the <UNK>
Reference: the same: can it be package-private?
Candidate: i tablets should be <UNK> to syserr
Reference: does arrays.equals internally have a short-circuit for a==b? if not, given that i think the majority of use cases they'll be ==, we invert this and do: if (a ==
Candidate: should we catch exception here?
Reference: this should be done in a @before method using githubbeforeafter connection. <link_0>
Candidate: why do we need the <UNK> here?
Reference: why does the session being unavailable mean that it's a demo user? shouldn't we not be here at all if a sessionunavailableexception is thrown?
Candidate: this should be setemptyelement().
Reference: is this really needed with the global suppression on class-level?
Candidate: why do we eating the exception here?
Reference: quick question: do we have blob authorization succeeded tests for delete and get operations?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: as above, the client needs to be closed
Candidate: i don't understand this matters, what about this is does.
Reference: i don't know how it works for you, but for me it fails: > incompatible types: list<object> cannot be converted to collection<? extends message<?>> > return new simplemessagegroup((collection<? extends message<?>>)
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: sql.sanitizecondition also?
Candidate: you don't need to use the
Reference: any reason why this is 26 instead of 25?
Candidate: should we be the getconnection here?
Reference: i'm not sure that we need to have loader here.
Candidate: why do we need the <UNK> here?
Reference: this method should have some logging. especially in the case where the file type is invalid
Candidate: the syserr should be be the
Reference: you should implement this
Candidate: should we be the <UNK> permission?
Reference: might wanna use the api version constant her for v28.0, so we don't have to keep switching this up.
Candidate: this should be <UNK>
Reference: the payload may not be json
Candidate: should we use the unsupportedoperationexception instead of stringbuilder?
Reference: needs to read the script name and parameters from the session.
Candidate: we should use the <UNK> <UNK> <UNK>
Reference: better to use enum comparison if availabe rather than string comparison... also im not sure this business logic should be placed here, it seems a bit obscure
Candidate: this should be <UNK>
Reference: can you move this check of whether or not we enable doas above to selectively call withremoteuserextractor, please?
Candidate: why do we need need to be <UNK> here?
Reference: why don't you call refresh?
Candidate: i am wondering if we session?
Reference: remove new line
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: why are these methods here instead of in backdoor? (just like verifypresentindatastore for example)
Candidate: you don't need to wait :(
Reference: i'm not sure if this is really an error... rather a warn. it's not that an answer is always required
Candidate: should we throw an exception if <UNK> != null) { throw null; }
Reference: if fields can be null, more null checks elsewhere might be needed. in this case, i would suggest not to use so many lines for the comparison, but use something
Candidate: should this be the <UNK> <UNK> <UNK>
Reference: shouldn't we set the cachedprofile here before we return.
Candidate: should this be <UNK>
Reference: minor optimization. if this one pattern is going to be used often you could make it static as part of the class.
Candidate: why do we need to tear to <UNK> <UNK> <UNK>
Reference: extra line can be removed to match constructor
Candidate: maybe use the builder builder builder builder builder builder factory builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
Reference: can you put brackets after the type instead of the variable? this is form is valid but [discouraged](<link_0> this occurs a couple different times in the pr.
Candidate: replace tostring()
Reference: you'll keep in mind you should remove the "dslconverter" parameter from here?
Candidate: can be replaced with <UNK> ?
Reference: can you protect this against a new severity level?
Candidate: should we be the <UNK> here? if we { return; }
Reference: hmmm, might be more efficient to just invalidate the cache when a user's limits are changed rather than checking each time. <link_0>
Candidate: why do we need to the the payload?
Reference: was this pr build using maven before pushing? seams that it was not because maven would fix the formatting
Candidate: why do we need to close the getconnection ever?
Reference: hmm... getactiveinstance() is deprecated in modern versions of jenkins (as is getinstance()) - jenkins.get() is favored these days (ever since jenkins version 2.98). rather than update this code with an
Candidate: i don't think we need to throw an exception if we don't want to throw an exception if <UNK> { throw new <UNK> <UNK> <UNK> { <UNK> }
Reference: the whole test is pagestore-only. it should not be disabled, especially in such way. i sent a possible fix in #1123.
Candidate: why do we need the layout here?
Reference: // do nothing.
Candidate: this readasstring(...) instead of <UNK>
Reference: default access is probably good enough and is consistent with partialdefaultrecord.
Candidate: <UNK> *= 2;
Reference: this one can be static.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: this could be made final
Candidate: this should be the <UNK>
Reference: casting to a byte isn't going to work
Candidate: why do we need the <UNK> here?
Reference: adding this to a field is good manner.
Candidate: adding a good manner.
Reference: do we need mutable list here? if not, can we use collections.emptylist() ?
Candidate: use <UNK> instead of <UNK>
Reference: how about collecting all active sessions and then looping over them once (avoid duplicating the counting code)
Candidate: why do we need to the <UNK> here?
Reference: since this is the same behavior on each side of the branch, perhaps put it after the branch?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: readability might be improved by using the schema.offields(name1, type1, name2, type2, ...) factory method.
Candidate: can we use the <UNK> <UNK> the <UNK> <UNK>
Reference: i don't see a 'equals' implementation in both authenticationtoken and the token class itself. if i'm correct this means that it checks for object equality (similar to ==) which will
Candidate: should we log the exception here?
Reference: should probably surround with a try catch and throw an objectmappingexception with the provided exception.
Candidate: why do we need need to the <UNK> here?
Reference: i would rather throw illegalargumentexception here.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: these actually should not be error messages. they were only printing out to err so they would display faster. i actually think we should get rid of these log messages
Candidate: should be be specific?
Reference: i'd guess the @suppresswarnings("unchecked") above this wont be needed anymore.
Candidate: should we be the <UNK> here?
Reference: don't have to use this.
Candidate: should we use the <UNK> here?
Reference: can't request be null at this point, if the request parsing failed?
Candidate: rename to <UNK>
Reference: there is no point in case sensitive check for an empty string. also, just use stringutils.isempty(connection.getid())
Candidate: please use <UNK>
Reference: leave inline and do tasktags.markinessential( effectors.invocation(...) )
Candidate: @exper0 don't think we need to use the <UNK>
Reference: you can use &apos; if you prefer (the numeric entity seems out of place otherwise). you may have previously seen people say that it was nonstandard, but (a) every browser
Candidate: i don't understand why, but it matters, what about changing the
Reference: implementing xorcardinality at the container level is an improvement that sounds promising to me...
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: does it has unit test? it should check diff scenarios
Candidate: should we use optional.ofnullable()
Reference: we should probably also do: fixitresourcemap.remove(delta.getresource())
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: just disable the button instead ?
Candidate: why do we need to check the <UNK> here?
Reference: change to visible not just present :)
Candidate: no, this should be the log.
Reference: could java streams make it more readable/smaller ?
Candidate: can we use the <UNK> here?
Reference: the form below is used elsewhere:  event name length (%s) is longer than the maximum authorized (%s). '%s' was provided.
Candidate: consider adding removal.
Reference: could you correct the formatting?
Candidate: should this be the <UNK>
Reference: why make partycontact depend on phoneutil? it's a very strange dependency. the partycontact class should not have to know anything about phoneutil.
Candidate: please use <UNK>
Reference: why not simply call?  return build(stage.production);
Candidate: use <UNK>
Reference: well, no, we cannot have a system.out here. a log should replace it instead.
Candidate: why do we need the <UNK> here?
Reference: executecall should delegate to adjustparameters and adjustresult methods, to make it easier to understand/maintain what is going on.
Candidate: i'm not sure it is registered out of commit scene, scene, out of commit scene, scene, scene, out of commit scene, scene, scene, out of commit scene, scene, scene, out
Reference: maybe extract this if sentence to a conditional method so that the code would be easier to read e.g. private boolean roleherarchynotsetforvalidcontext(){ ! rolehierarchyset && context != null }
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: suggestion asserttimereventempty(emptytopevent.getexecutionset(), non_cancelling, empty_value);
Candidate: suggestion assertmessageeventexecutionset(emptytopevent.getexecutionset(), empty_value, cancelling, empty_value);
Reference: there is another class named indexingservicefirehosemodule, wondering if we can just delete that class and use fireshosemodule in indexing service also.
Candidate: this should be the fixture.
Reference: better to add exceptions to method signature.
Candidate: why do we need the <UNK> here?
Reference: this is not consistent with how we do the comparison in the datetimevalue code. there, we are comparing the underlying java values, i.e. using the compareto method of java's chronozoneddatetime.java
Candidate: i uri.create should be <UNK>
Reference: @dmmiller612, i've removed this conversion and the tests are still passing, not sure what is it for ... if this version is ok for you, i can merge
Candidate: if the == null || <UNK> && <UNK> { <UNK> }
Reference: might be nice to move emails_json to a constant somewhere that can be referenced by all uses across the app.
Candidate: <UNK> *= use the <UNK>
Reference: is the retry handler doing something with the payload? if not, i'd just remove the finally block to avoid buffering it in memory unnecessarily.
Candidate: i don't understand this matters, if you matters, this matters, but it matters, but i don't understand why, it matters, but it matters, but it does)
Reference: not sure all these metrics are useful. how do you envision their usage?
Candidate: this should be the <UNK>
Reference: @vilchik-elena charset.defaultcharset()
Candidate: :(
Reference: this call should be on the level above (in the dopush methods), otherwise in case of requested==rows.size() the end() won't be invoked.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: talked about at <link_0> . null was still left in. this field shouldn't be null imo unless you can point to a specific reason that we can't remove null.
Candidate: do we want to hide the files here?
Reference: it was discussed in the code review to use instance of because event may get extended in future
Candidate: do you need to use <UNK> <UNK> <UNK>
Reference: let's keep this method unchanged since it is better we modify the interface catalog. instead let's add null checks when this method is being used.
Candidate: why do we need need to the <UNK> here?
Reference: when catching interrptedexception, always reset the state via:  java thread.currentthread().interrupt();
Candidate: should we throw an exception here instead of exception?
Reference: literalencoder.toexpression() already returns the expression if the value is an instanceof expression, and a nullliteral if it equals null. i would get rid of the if statements and always return
Candidate: can we use the <UNK> here?
Reference: same again. please throw original exception.
Candidate: should we throw an exception here instead of eating the exception?
Reference: java if (stringutils.isnotempty(rc.getclient())) { map<string, string> parameters = cc.getparameters(); if(parameters == null) { parameters = new hashmap<>(); cc.setparameters(parameters); } parameters.putifabsent(client_key, rc.getclient()); }  maybe it's better
Candidate: why do we need the <UNK> here?
Reference: perhaps invert this if so it becomes a guard clause when location != menu_location.tools
Candidate: should we throw an exception?
Reference: return the result of sha256 instead of using the local variable.
Candidate: why do we need to <UNK> here?
Reference: why you add option skipclassindexingiflowmemory? if alwaysindex ==true and no free memory left jadx will just hang and gc will eat all cpu. what the purpose of this option?
Candidate: this should be the <UNK>
Reference: this mapping should happen via public enum and not via mapping backend enum to string
Candidate: should we be the get* moreobjects here?
Reference: thanks for the fix @quxiucheng, i think this patch can be promoted a little, we can move this logic to the parent class sqldialect, you can get the sqlconformance from
Candidate: please add @override public @override public mapboxwebviewmapfragment
Reference: unbind jndi? remove datasources?
Candidate: if (state != null && <UNK> { <UNK> }
Reference: i thought it was not that easy to parse a csv . what happens if we have : 35, 1456, "mytext", 89000, "other,text", 45 i mean the text encloser "
Candidate: this should be the <UNK>
Reference: collections.singletonlist already returns a list. why are you wrapping it in another arraylist?
Candidate: this is right...
Reference: these lines shouldn't be here?
Candidate: why do we need to use <UNK> here?
Reference: req: could you please rename streamsmetricsimpl metrics to streamsmetricsimpl streamsmetrics and then format the code like this  final streamsmetricsimpl streamsmetrics = new streamsmetricsimpl(metrics, "test", streamsconfig.metrics_latest);
Candidate: why do we need to use <UNK> here?
Reference: this is very sketchy. hash codes aren't unique
Candidate: why do we need to check the <UNK> here?
Reference: the presto way to do this appears to be requirenonnull(schemaname, "schemaname is null");
Candidate: should this be null?
Reference: add "this" qualifier
Candidate: this should be <UNK>
Reference: i would just log the warn.. no need for special logger.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: dito - looks like you used search/replaceall ;)
Candidate: this should be <UNK> <UNK>
Reference: maybe we could only propose branches for the remote we have started the wizard from?
Candidate: why do we need to check the <UNK> if <UNK> == <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: should be able to just do: applicationinfo info = pm.getapplicationinfo(packagename, 0); return pm.getapplicationlabel(info);
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this should be missing_catalog, which is causing the test to fail.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: this is my major concern. it is true that we are not changing the very high level api, as clientcnxn is an internal class and applications should not use it
Candidate: please use <UNK>
Reference: please add braces here to create a scope since you're defining new variables inside the case
Candidate: why do we need to use <UNK> here?
Reference: startcapture() calls system.setout() and system.seterr() so our tests should at least reset those after each test run. can you try using org.apache.maven.surefire.booter.providerfactory.invoke() instead of calling our invoke() implementation directly?
Candidate: why do we need to the <UNK> here?
Reference: should be a new line after the closing curly brace ;)
Candidate: the syserr should be be the
Reference: business logic should be in a service
Candidate: we don't need to throw an exception if we don't want to re-throw the exception
Reference: instanceof would be more suitable
Candidate: this should be the <UNK> <UNK>
Reference: this is where you should be checking if there is just one specified license, not in the getlicensename() method below. the validation should always occur on set, not on get
Candidate: should this be <UNK>
Reference: invalidpathexception is not handled here. i recommend using util#filetopath() instead. <link_0> suggestion path path = files.move(rootdir.topath(), util.filetopath(), standardcopyoption.atomic_move);
Candidate: what happens if the exception occurs, we will interrupted. do interrupted. we need interrupted. we should interrupted. we interrupted. should interrupted. be interrupted.
Reference: the close calls will not be executed if an exception is thrown. shouldn't they be placed in a finally clause instead?
Candidate: we don't need to use the error, we don't care about the the email and the email email email email email email email email email email email email email email
Reference: most places in druid just use objectmapper.readvalue(persistfile, new typereference<list<lookupbean>>(){})
Candidate: this should be the <UNK>
Reference: the replacement could be done just once outside the while loop as it will be the same for all the values
Candidate: we will make sure we will make column first.
Reference: if the widget is turned into a label and the member to an entitymodel, these lines should be replaced by setentity().
Candidate: why do we need to use the <UNK> here?
Reference: suggestion assertkeypair(file, null);
Candidate: this readasstring(...)
Reference: the main bug was that the element of id constsumoption_option--1 is hidden so there **must** be an assertion check for that. so add the most important assertion check, which is
Candidate: why do we need the <UNK> here?
Reference: why make this protected? you can override it even if it is public.
Candidate: this should be the <UNK>
Reference: the @override should be on this line.
Candidate: should this be <UNK>
Reference: i suggest adding "removeasync" to the api and wait only for the last future here, this will speed up this method.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: yes, i forgot this
Candidate: i think this should be used in the <UNK>
Reference: in this case isshortwill have a default value of false - i assume that is ok? also a common pattern for multiple constructors is to call the the "full" one
Candidate: should we use <UNK> <UNK> <UNK>
Reference: is this method called when partition is removed from assignment? if not, may need changes in partitionrevoked method too?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i know it sounds picky but please store calculated threshold in fields (like regular hashmap does).
Candidate: why do we need this piece of this piece of this piece of this piece of this piece of this piece of this piece of this piece of the the
Reference: throw if there are externs explicitly passed and skipparseexterns is true (or set at all)?
Candidate: nitpicky <UNK>
Reference: such general initialization should go along with the field declaration, otherwise it gets lost when adding another constructor.
Candidate: why do we need to check for the <UNK> ?
Reference: how are the changes within this file related to the pr? i would not have expected any changes needed in the ui layer for this.
Candidate: do we need to check the <UNK> if <UNK> == null) || <UNK> { <UNK> }
Reference: i suggest you use org.apache.commons.lang.stringescapeutils.escapecsv() here.
Candidate: this should be the <UNK> ctor.
Reference: by using failoverpriority, this will be simplified, you won't need the if() conditions anymore you will just have to do: .failoverpriority(failoverpriority.tostring())
Candidate: should we use the <UNK> here?
Reference: rename to contribution
Candidate: storagetype should be better: <UNK> { return <UNK> <UNK> } };
Reference: just pass thiz with type object instead of thiz.tostring() here, the jboss logger should call tostring() automatically, and if for some reason thiz is null, it will not throw an
Candidate: should we be <UNK> here?
Reference: what about removing the birds object and just iterating over docids?  for (string bird : docids) { ... }
Candidate: why do we need the <UNK> here?
Reference: return this;
Candidate: nitpicky import?
Reference: are we forcing spark side execution here? why is that?
Candidate: typo: <UNK>
Reference: while doing snapshot transfer, all message has the same snapshottimestamp. may check the metadata's seqnum + 1 = ack's seqnum.
Candidate: i don't think we need to do we need to check whether the <UNK> is the <UNK> <UNK>
Reference: i would do a reverse().removefirst(predicate) instead of findfirst in order to not process elements 2 times, e.g.  java final stream<t> removed = reverse().removefirst(predicate); return removed.length() == length() ? this
Candidate: i think we should check why, on the already?
Reference: the spacing style isn't following the existing conventions. can you reformat this patch to match what exists?
Candidate: should we be warn
Reference: personally i prefer to inline the instantiation of columns directly in the call to table.addcolumn (as in line 72) since it makes the code more compact and easier to add/remove/move
Candidate: can be replaced with <UNK> <UNK> ?
Reference: should you be closing the socket when the received message code is unexpected? not clear what the proper behavior should be here.
Candidate: we don't need to close the stream.
Reference: check if _metadata file exist inside table dump path.
Candidate: please import?
Reference: maybe string.format( "server[%s]", servername )?
Candidate: unsupportedoperationexception should be <UNK>
Reference: try using java 8 stream api somthing like : selectedlabels = alllabels.stream().filter(label->label.gethosts().contains(gethostid()))
Candidate: you can use <UNK> <UNK>
Reference: propose: "request to terminate work. all unique combination of <endpoint,query> were executed"
Candidate: please remove the <UNK>
Reference: we should use keyservice here, intention is to cache key temporary so under heavy load we don't download keys all the time.
Candidate: this should be the <UNK> probably?
Reference: there is a logger-like syntax for this that is more efficient during valid state: preconditions.checkstate(false, "cannot cast from %s to %s", castfrom, castto); that said, if it's always invalid state
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: how is this check different from the one on line 426?
Candidate: please remove the method("post")
Reference: is this more important than debug?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: the materialconfig interface has a getfolder() method. why is this needed? the condition check, i mean.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: i would either add ifpresent to the method name or move if outside of the method.
Candidate: why do we need the <UNK> here?
Reference: do we really need this init() method? the _loaderhelper_ class itself is in the hibernate-search-orm module, which depends on both jpa and hibernate orm, so it's module should be configured
Candidate: can we use the <UNK> here?
Reference: what happens if the parser fails? does it throw an exception? is jsonnull? both cases do not seem to be handled here.
Candidate: i don't think we need to throw an exception?
Reference: new stringbuilder(empty_str) is equivalent to new stringbuilder()
Candidate: if oldvalue is empty?
Reference: please check error message and http code using [restjmssharedbaseintegrationtest.assertclientexception()](<link_0> method .
Candidate: can you use the layout numbers as well as far as as as far as far as far as far as far as far as as far as far as
Reference: this doesn't make sense to me. if the thread is stuck and we are trying to join() it, we are stuck, too.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: these two if can be merged.
Candidate: the syserr should be be the <UNK>
Reference: throw the exception and somewhere at the top of the call stack, fail with a helpful error message.
Candidate: why do we eating the exception here?
Reference: as("legacy impl can unlock a lock taken by conjure impl")
Candidate: what is the reason behind this is is not the charge of the <UNK> ?
Reference: is there really that much of a performance gain in this case between byte orders?
Candidate: <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK>
Reference: how often is this called and logged?
Candidate: please use <UNK>
Reference: 2500 is a magic number
Candidate: should we use the exception here?
Reference: perhaps have androidfxaccount have an adder that takes a bundle?
Candidate: do we need a <UNK> here
Reference: better name for the main file of a definition please.
Candidate: why is this the feedid is not encrypted, the *both* <UNK> is not encrypted, encrypted, what is it does.
Reference: interrupts should be re-raised.
Candidate: why do we need to here?
Reference: use of remaining() is exactly what got us into the oom scenario. even with more selectivity, this will result in oom if there is a lot of distance between the
Candidate: why do we need the <UNK> here?
Reference: not sure if this method should return anything as in fact in the mvc endpoint the return value is used for logging purpose only
Candidate: should we use the exception here?
Reference: nit, long line? maybe split it into two strings concatenation?
Candidate: i don't understand this matters, if you matters, this matters, but you don't need why, but you don't need to check the <UNK>
Reference: formatting
Candidate: what about the implications of the <UNK>
Reference: touppercase() useless as it is done in "workspaceimagefigure.issvgimage(resourceextension)"
Candidate: we should need to print the exception here?
Reference: maybe you can add the type of alien to the logfile.
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: can you stick with the existing coding style and omit the assert. prefix here.
Candidate: you can use the <UNK> here as well
Reference: should we catch a numberformatexception?
Candidate: this should be the <UNK> <UNK>
Reference: google style is not to use abbreviations like sb. perhaps url?
Candidate: if <UNK> != null && <UNK> && <UNK> { return false; }
Reference: perhaps just chain here? return getalerts(collections.singleton(tenantid), criteria, pager);
Candidate: the syserr should be be the
Reference: this method is long and has 3 nested levels. can you break it up into smaller methods. the file is getting very long. can you refactor that functionality into new
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: can be replaced with configvalue / local constant
Candidate: why do we need to use the <UNK> here?
Reference: maybe redundant? you're providing 'action' to fencenode(); the method can check for itself if [action!=fenceactiontype.status] (no need to provide it as another parameter).
Candidate: should we be the <UNK> here?
Reference: i think you'd like to print the content of 'input' here and pass the 'e' (exception) as a second argument of the runtimeexeption c'tor call.
Candidate: should we use <UNK> here?
Reference: change==null test is pointless, line 39 above npe'd if change was null when getting the current patch set
Candidate: this should be the <UNK> <UNK> the <UNK> is the udp stripe { <UNK> }
Reference: declare namespace doesn't work yet?
Candidate: if <UNK> == null) { getparameters().getstoragedomainid() groupname = <UNK> } { <UNK> }
Reference: consider iterating over systemproperties.entryset() instead. this will eliminate the need for key lookups in each iteration.
Candidate: this should be <UNK>
Reference: this seems to be an instanceof implementation because the old usagesearchevent can contain multiple queries (which is weird). i would recommend to use usagesearchevent instead, remove the instanceof and fix
Candidate: i don't understand this matters, if you matters, this matters, but it is the <UNK> the <UNK> is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: should 25 be configurable by the user?
Candidate: why do we need the <UNK> here?
Reference: i think it would be more appropriate to use daofacade.getavailablemerit() here but perhaps not super important
Candidate: should we throw an exception here?
Reference: nit: i usually find it more helpful to just say: "finish calculateassignment(). took: {} ms.". just to make it consistent with other logs.
Candidate: typo: <UNK> -> <UNK>
Reference: could version specific values cause regression or bug?
Candidate: if <UNK> == null) { return <UNK> } { return false; }
Reference: this is not the correct way to test the proxy that is set. we need to make sure that the worker is getting the proxy that we expect it to
Candidate: why do we need to use the <UNK> here?
Reference: is there any risk this will grow to a size it becomes a problem? if not, using a guava cache is overkill, if there is a risk then yes, we
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: those if could be merged.
Candidate: this is the cheapest check)
Reference: i think setting cancelable to false can result in an infinite dialog since the onplansfetched event may get lost during a configuration change. i think this isn't handled in many
Candidate: this should be the <UNK>
Reference: does it need to be final?
Candidate: why do we need the <UNK> here?
Reference: and what about pseudo scopes? e.g. javax.inject.singleton.
Candidate: please use <UNK>
Reference: would be better to use logger here
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: checkstyle violations. there must be spaces around the braces. please check the tests
Candidate: can we make this private?
Reference: instread of string.getbytes(), use safeencoder.encode(string). alternate idea, keep safeencoder.encode(message) in variable and use it wherever you want.
Candidate: should be be the <UNK>
Reference: it seems like these two deadline-related methods could be static.
Candidate: why do we need the <UNK> here?
Reference: i believe we already instrument the timelockservice below (line 497), so not sure how the metrics will handle two timelockservice interfaces. @schlosna is this ok?
Candidate: should we be the specific?
Reference: is this if statement really necessary ?
Candidate: <UNK> (long <UNK> : <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: we should have a wrapper for the annoying backend.getinstance().runinternalcommand thing of a jig
Candidate: if vds != null && <UNK> { <UNK> }
Reference: before synchronized
Candidate: we should throw an exception if (throwable { throw new <UNK> { throw <UNK> } (throwable { throw new <UNK> { throw new <UNK> }
Reference: before doing this, you need to check that record.getschema().getfield(keyfield) is not null. if it is, the key field does not exist in the input record.
Candidate: the syserr should be be <UNK>
Reference: you can delete both of these try/catch blocks. if an exception is thrown it'll fail the test.
Candidate: why do we want to use @test(expected = <UNK> <UNK> <UNK>
Reference: maybe move the parsing / construction into another class? maybe even an inner class? i think the benefit would be keeping the searchengine class short, so it's easy to see
Candidate: i don't think we need to throw an exception if invoked?
Reference: no need to create variable functionhandle; just return.
Candidate: can be replaced by: <UNK> = new <UNK> <UNK> <UNK> <UNK>
Reference: nit: s/android/android/
Candidate: if oldvalue is is not the
Reference: breaks encapsulation. consider return collections.unmodifiableset(myappliestoprofiles). same goes for other collection accessors.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: scim-schema? i think ist must be osiam now.
Candidate: why do we need to use the <UNK> here?
Reference: isn't the above the same as this (i.e. converting from timestamp directly to decimal)?  pdatatype.decimal.toobject(ptr, columnmodifier, pdatatype.timestamp);
Candidate: <UNK>
Reference: this should probably be a try with resources
Candidate: why do we need to use <UNK> here?
Reference: somehow this was dropped from my review.
Candidate: i don't understand this matters, this matters, but you don't need to use the <UNK> <UNK>
Reference: this is wrong create a template interface <link_0> line 129 and use the sb.append() function.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: shouldn't it be ancestorref instead of parentid? (in which case parentid would become useless)
Candidate: if getstate() != null) { <UNK> }
Reference: any reason why we removed the type?
Candidate: should we use the payload?
Reference: it seems busy to stream/map the list into a list and then join into a string. we can go straight there java .put(tester_names, testnames.stream() .map(projecttesterimpl::maybequote) .collect(collectors.joining(",")));
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: does this need to be writable?
Candidate: i don't understand this matters, if we matters, but i don't think it matters, but we don't need to do we need to synchronize on the <UNK>
Reference: this won't turn text from null to empty, if that's what you wanted you need to do: text = strings.nulltoempty(text)
Candidate: why do we need the <UNK> variable?
Reference: can we modularize this as this code block is repeated.
Candidate: please use syserr
Reference: revert this.
Candidate: why do we need need to the <UNK> here?
Reference: can't this cause a class cast exception? when entity is of type businessentity<t> where t doesn't extend guid. the casting will be alright because type erasure, but then t will
Candidate: i appid
Reference: same as above: use a constant for 'debug'
Candidate: do we need the getconnection here?
Reference: exception is super generic and is usually an anti-pattern. any reason for this change?
Candidate: should we throw an exception?
Reference: make this as a log.error statement. and needs to have space after the ","
Candidate: why do we need to check on the username?
Reference: nit: this is not necessary, false is the default.
Candidate: why do we need to mock <UNK> here?
Reference: again is this time sensitive (so a 20ms delay in thread 2 waking up to add "2" to messages will cause it to be out-of-order?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: please add backticks for the code related parts of the message and the period at the end of the sentence.
Candidate: can you use <UNK> here
Reference: maybe i'm being dumb - but wouldn't it be better to continue at this point rather than abort - abort means you want to be retried again next duty cycle
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: you can avoid this null check through initialization in the field declaration. besides that lgtm.
Candidate: should this be <UNK>
Reference: please consider moving this in a setup() method.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this casting is not necessary, d.longvalue() could be used instead.
Candidate: i don't think we need to throw an exception if invoked?
Reference: this reveals the same problem as standaloneleaderelectionservice does.
Candidate: should we throw an iae exception?
Reference: [java.lang.string#matches(java.lang.string)](<link_0> -> nametocheck.matches(key)
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: needs 3 _arguments_, plural
Candidate: you don't need to check the <UNK>
Reference: need to do a stricter check then that. what if there is a layer or store named "script" for some reason? then doing a get for that layer may use
Candidate: why do we need to use the <UNK> here?
Reference: the log is a lie :)
Candidate: do we need to make this a <UNK> of <UNK> type"?
Reference: probably need to make this code smarter, if user will create vm from api, without specifying sound card, and engine choose to add it and then fail, it will be...
Candidate: nit <UNK>
Reference: do not abbreviate: slice encodeddecimal = decimals.encodescaledvalue(bigdecimal);
Candidate: can be simplified to: if <UNK> == null) { return <UNK> } else { return <UNK> } else { return null; }
Reference: the code in this and above method does the same thing, just on different link element. have you considered extracting it so you can just call: getlinkredirecttitle(externallinks.get(index)) getlinkredirecttitle(internallinks.get(index))
Candidate: can we use <UNK> <UNK> <UNK>
Reference: won't it be useful to print messages before and after here (just like the connect)
Candidate: please use <UNK>
Reference: redundant generic. at least my idea requests to remove it.
Candidate: please use <UNK>
Reference: when can this be null?
Candidate: should this be <UNK>
Reference: please use featuresupported class
Candidate: should this be <UNK>
Reference: how about replacing this with _ like we do with version? it might be surprising to use a different replacement character i think. we also still might want to replace
Candidate: this should be the scale overflows?
Reference: while this was already a problem, should we switch to passing objects rather than building the string here? this serializes the schema every time the function runs.
Candidate: [minor] should be nice to use the
Reference: i would much prefer that we used service.id to build the set than the service itself. we don't really guarantee that the thing that implements service has a well implemented
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: what do you think about using string.format?
Candidate: can you use the <UNK> of the <UNK> generation?
Reference: braces please
Candidate: should we throw an exception?
Reference: i think you should create a new list<throwable> and pass it to the validator. with what you have here, a validator could remove errors. alternatively, the validation methods could return
Candidate: should this be <UNK>
Reference: not much you can do here, but equality isn't well defined for types. for example, string.class == string.class, but string[].class _isn't_ equal to the parameter of set<string[]>. there are similar
Candidate: <UNK> == null && <UNK> != null && (count == 0) && <UNK> == 0) { return false; } return false; } return false; }
Reference: so this will be logged every time imageincoming() is called? since that's the condition to break out of the do/while loop. if that's the case, then we probably shouldn't be
Candidate: should we be the <UNK> here?
Reference: make all uncapitalized. that is list => list, dump => dump, etc..
Candidate: we should need to print the exception here?
Reference: set<map<string, integer>> no?
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: just catch all exceptions here
Candidate: this don't need to testing the testing anywhere.
Reference: use stringpool.empty instead
Candidate: please rename the <UNK> to <UNK> <UNK>
Reference: i dont think we should set the count here. i think we should have an increment cound instead.
Candidate: i don't think we need to check for the <UNK>
Reference: i think it would be too spammy here, but i think it would be a good idea to log that throttling is enabled when building a session
Candidate: why do we need to check for the <UNK> <UNK>
Reference: i'm not sure- why do you need this method?
Candidate: use <UNK>
Reference: not empty?
Candidate: the syserr should be used in <UNK>
Reference: nit: same here regarding hashset instantiation
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK>
Reference: you can join the 2 conditions in a single expression.
Candidate: use objects.hash()
Reference: missing braces.
Candidate: i don't understand this matters, if we matters, but you don't need to close the <UNK>
Reference: inline the rel(sql).
Candidate: you can use the fixture.
Reference: why not a configkey<integer>?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why not log the exception? by doing e.getmessage() we don't get the stack trace.
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: we can use getdefaultsearchstring(): gethostlist().setsearchstring(gethostlist().getdefaultsearchstring()); getvmlist().setsearchstring(getvmlist().getdefaultsearchstring()); getuserlist().setsearchstring(getuserlist().getdefaultsearchstring());
Candidate: <UNK> *= 2;
Reference: seems nicer to me to throw here an ioexception instead, after all this probably happens because of io issues.
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: do we return doubles for both integers and double params?
Candidate: why do we need the <UNK> here?
Reference: code style: always use curly brackets, and space after if.
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: fetch uses upload on the remote side
Candidate: can we use the syserr
Reference: is this the only reason the ioexception could occur?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: initializeyoutubeplayerfragment needs refactor to initializeyoutubeplayer.
Candidate: should we be the <UNK> here?
Reference: if (trace) missing?
Candidate: do we need to check if <UNK> != null) { throw null; }
Reference: i think for a test like this it would be good to use the core-service=platform-mbean stuff to validate the actual system property in the server vm. org.jboss.as.test.deployment.trivial.serviceactivatordeploymentutil has some utility
Candidate: i don't understand why, but it matters, what about the use-case for the <UNK> the <UNK> is the <UNK> <UNK>
Reference: i would prefer to use variable names like releasesfromdatabase or sw360releases to have a differential between the sw360 thrift objects and rest objects.
Candidate: why do we need to use the here?
Reference: please also fix the typo in advanedlistener
Candidate: if we is software software software software software software software software software software software software software software software software software software software software software software software software software <UNK> software
Reference: the same thing as i already mentioned. don't use untyped maps for results. specify proper types for the api. otherwise, every decimal can lose precise value information until it gets
Candidate: i don't think we need to hide the 83 <UNK>
Reference: this needs to be changed to testutills.runrepairability("jkali", "/repairability_test_files/jkali/"); the first argument is the name of the tool.
Candidate: why do we need to assert that the "expected" sizes are not the same?
Reference: please remove todo and .printstacktrace() and add proper logging instead
Candidate: should we throw an exception?
Reference: i would write it like this, it does away with the try-catch:  java errors.checkthat(file.getpath(), content, is(equalto(reference)));
Candidate: we should use the <UNK> in the tests.
Reference: i generally prefer boolean.true.equals, but that's just a matter of taste i guess.
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: nit: could double evaluate if a callback throws while executing -- maybe wrap in a try catch and/or remove the callback before executing?
Candidate: can we use the syserr
Reference: this prefix is the same in all 3 cases. extract it to a constant?
Candidate: why do we need to use <UNK> here?
Reference: hope this won't introduce flaky test.
Candidate: please use <UNK>
Reference: i would've been ok with a 0 here, it's the == that matters -- but no problem
Candidate: why do we need the <UNK> here?
Reference: replaceall is costly, it this needed or can it be done differently?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: rename to requiredbundles and then just use required in foreach look var
Candidate: why do we need to the <UNK> here?
Reference: should we extract this to a method? the two ifs are doing the same if i am seeing it right.
Candidate: why do we need to the the payload?
Reference: why this change?
Candidate: why do we need the <UNK> here?
Reference: personally i like seeing these log messages in the log. as an admin, there is a sense of comfort when i see these ;)
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should this be in init() or start()? all initialization happens in init() and processing threads start in start()
Candidate: should we use the <UNK> here?
Reference: better not to use long dash lines in logs including test cases.
Candidate: should this be <UNK>
Reference: create a new method like pdatatype.fromsqlelementtypename(typename), since you know you're creating an array. in that method, first look up the primitive type using the typename. then from the primitive type
Candidate: i don't think we need to check the getcredentials for the getcredentials
Reference: change to: return mode; ?
Candidate: please use <UNK>
Reference: why 800? what's the unit? a self-decriptive constant would probably be more appropriate
Candidate: this should be <UNK> <UNK>
Reference: what's actually updating this.reportstats? when reportedcounter is incremented, does reportedstats also update, due to the shared metricname ?
Candidate: this this line: output){
Reference: often -> times
Candidate: should we throw an exception if we { return; } }
Reference: looks like these two are the only two test cases testing the imap methods with maxidle support. shouldn't be more here? also, these are unrelated to this pr though: -
Candidate: please import?
Reference: replace with retval = wish1.getindex().compareto(wish2.getindex());
Candidate: can be replaced by: <UNK> <UNK> { <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: use immutableset.builder instead - no need for the intermediate hashset
Candidate: i don't think we need to check for the <UNK>
Reference: redundant semicolons.
Candidate: we should need the pagination for the pagination for you.
Reference: nit, remove extra ;
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: removing this line breaks the plugin interface.
Candidate: this should be the <UNK>
Reference: move feature layer instantiation and operation layers to before the try block. the xmlquery is only relevant to the populate call (and therefore the feature query result future too).
Candidate: why do we need need to the <UNK> here?
Reference: you can use function here. and this function can be static value
Candidate: unused
Reference: non-informative info log
Candidate: why do we need to check for the <UNK> <UNK>
Reference: add stop to catalogreplicashiipper?
Candidate: why do we need need to check for the <UNK> ?
Reference: this may not be 100% accurate for a local deployment where multiple processes share the same host name but different ports.
Candidate: why do we need to use the <UNK> here?
Reference: ![major](<link_1> 'severity: major') remove this unused method parameter "evt". [![rule](<link_2>](<link_0>
Candidate: if this is the <UNK> is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: randomutil return a thread local random?
Candidate: i don't understand why, but it matters, but i don't understand why, but i am not sure why, but it is not sure.
Reference: it seems like this can compute a negative lag for a partition because latestoffsetsfromkafka might have stale latest offsets and highestcurrentoffsets will always have updated information before the lag is
Candidate: should we be the <UNK> here?
Reference: yep, it should be backward compatible. in fact i believe that your existing tests will/should pass without changes. cheers
Candidate: why do we need the <UNK> here?
Reference: you might want to use non-thread safe class stringbuilder instead of stringbuffer.
Candidate: this should be <UNK>
Reference: i would just return the boolean expression here. also, do you want to use stringutills.isnotempty? similar thoughts for the other "exists" functions below
Candidate: i don't think we need to check for the <UNK>
Reference: you can check only exp instanceof namespaceaware because "null instanceof namespaceaware" is returning false
Candidate: this should be the the vdsid != null && <UNK> { return; }
Reference: in that case getdatetime(jsonobject object, string membername) should use this method. also you should check that formatter != null.
Candidate: should we throw an exception here instead of returning an exception?
Reference: i think that it would be more clear if the if/else code was extracted in a separate method called: addonlypositiveaccountingentriesforpdpprocessing
Candidate: why do we need the <UNK> here?
Reference: i think adding a field that can be specified at construction time that gives this a name would be useful. usually the people creating the input streams will have some
Candidate: should we throw an exception instead of returning null?
Reference: this is exactly the same as 'extendedelement' a few lines above. it's not clear why we have two variables 'extendedelement' and 'baseelement'. is it just to distinguish changes to the
Candidate: consider refactoring refactoring refactoring refactoring refactoring refactoring refactoring refactoring to it's, like: consider refactoring to consider refactoring like: consider refactoring refactoring refactoring to refactoring refactoring refactoring refactoring refactoring refactoring refactoring
Reference: for all these assertions: the other way around? testng is assertequals(actual, expected)?
Candidate: please remove this method("post")
Reference: it seems to me you don't need map here
Candidate: please, please, please, please, please, controller controller controller controller controller controller controller controller controller please, controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller
Reference: finally?
Candidate: why do we need to use <UNK> here?
Reference: can we rename this variable so that it is intuitive. eg:- boolean hasmorerows = false.
Candidate: if the == null) { <UNK> <UNK> } } } else { if <UNK> { return <UNK> } else { if <UNK> { return <UNK> }
Reference: this should be moved after the check for whether the subtree root is present
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: is there no insertall or merge in java?
Candidate: why do we need the <UNK> here?
Reference: i wonder if we need here a similar converter mechanism as for serializing into the database: <link_0>
Candidate: can we move this to <UNK> mapping?
Reference: let's fix sqlviewexporterspi instead of excluding it (looks like a bug in its implementation)
Candidate: can be simplified to <UNK> <UNK>
Reference: collections.singletonmap
Candidate: can we use the builder here?
Reference: no need for the offensive language :)
Candidate: please remove this line
Reference: better to add nonnull precondition guard for leaseblobmanager here.
Candidate: why do we need to here?
Reference: it looks like it also has to take care of casts
Candidate: i don't understand why, but it matters, what is the that the is the that the is is the
Reference: likewise..
Candidate: likewise..
Reference: what is this stupid iteration? why don't you use map.values() ?|?|?|?
Candidate: why do we need need to the <UNK> here?
Reference: getidasstring ?
Candidate: i disagree with the <UNK> situation.
Reference: change to state == replicastate.standby
Candidate: please use <UNK>
Reference: this loses any existing bounds and annotations. i think you'll want to combine just like annotated does.
Candidate: this should be <UNK>
Reference: i reckon extracting this 3 lines to a private method would save some space in the test.
Candidate: why do we need the <UNK> here?
Reference: what happens if fastpass/bin/fastpass doesn't exist? for instance, what if i use this plugin in any other repo? should we return an empty optional if the file doesn't exist?
Candidate: why do we need the fully-qualified properties? here?
Reference: use getnonnullrequestparamvalue
Candidate: why do we need the <UNK> here?
Reference: 1) the getsystemmenuitembyname() function itself returns the menuitem on which you can call setvisible(). you don't have to call finditem() on it again. 2) getsystemmenuitembyname() can actually return null. some
Candidate: if we is the software <UNK> <UNK> is the software <UNK> <UNK> should be invoked in the <UNK>
Reference: sounds like an error suppression. could you please explain this change a bit?
Candidate: this should be the <UNK>
Reference: fwiw you could have put the project.namekey into a sectionmatcher. its an internal hidden implementation detail of the server. this would clean up some of the map usage and maybe
Candidate: i b/w <UNK>
Reference: wrong indentation, it should be in line with the assert above. note: we use 2 spaces for indentation. you can verify whether your code conforms to flume's code formatting guidelines
Candidate: rename <UNK> to <UNK>
Reference: it seems to me this whole block could be added to mavenstructuredpomeditorpagefactory
Candidate: why do we need this tear to the <UNK> <UNK>
Reference: what's this for? shouldn't new categorypage().open(categoryname) make sure that the page is ready to be tested? also, we query the dom before waiting, what happens during these 1500 ms?
Candidate: rename <UNK> to <UNK>
Reference: this still seems like an odd place for these methods. shouldn't these be in sqlgraph?
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: again, the static import makes this harder to read.
Candidate: this should be <UNK>
Reference: please use final stringreader sr
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: since we are only looking for 0 or 1 results, it seems like queryforobject might make more sense here.
Candidate: should we throw an iae instead?
Reference: use objects.hashcode() ?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this method can be replaced by featuresupported.hotplug(version) which performs exactly the same.
Candidate: please use <UNK> <UNK> <UNK>
Reference: not npe safe (order has changed) should be value.equals(buttonvalue) with precondition check, or stringutils.equals(value, btnval) if commons-lang3 available in classpath
Candidate: should we be the <UNK> here?
Reference: this is network-incompatible change. either make it network-compatible, or set the right required remote versions. and make sure to test it with non-dev builds, both when trying to join on
Candidate: this should be the <UNK>
Reference: you don't need to change it for this pr, but for the future, baos is typically used as a name for a bytearrayoutputstream, not a byte[]
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: perhaps keep this as before for easier debugging, ie have it match the method name?
Candidate: why do we need need to close the <UNK> ?
Reference: i think we should create a defensive copy of the map
Candidate: why do we need to use the <UNK> here?
Reference: add standard soft assertions to the mix
Candidate: please remove the method("post")
Reference: let's rollback to the first version. we can keep this as a future possible improvement.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand
Reference: not quite, to go the npe route, you should use a liner with objects.requirenonnull().
Candidate: should this be <UNK>
Reference: hard-coded wait can cause tests to be slow. is it possible to use waitforpasscondition(() -> <condition>) instead? (see my snippets below). in general, you would wait for page to load,
Candidate: why do we need need to the <UNK> here?
Reference: @shivtej1505 these values are used in each test so maybe we should make them constants ? if yest then apply change and feel free to merge :)
Candidate: please use <UNK>
Reference: i think you missed this out during refactoring? i.e. if (questionid != null && selectedsection != null)
Candidate: longvalue() parameter parameter on well! parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter
Reference: why do you call getselectedvalue() in other places, but here you have the code instead
Candidate: please use <UNK>
Reference: please move port number to a constant
Candidate: this should be the feedid
Reference: unnecesssary change
Candidate: should we use <UNK> here?
Reference: couldn't we extract all those checks and navigations to a method #getlaunchconfiguration(debugevent event)? this would shorten these rather lenghty checks and extractions (event -> source -> process -> launch ->
Candidate: why do we need need to the <UNK> here?
Reference: java return charmatcher.inrange('a', 'z') .or(charmatcher.inrange('a', 'z')) .or(charmatcher.inrange('0', '9')) .negate() .trimandcollapsefrom(s, '-');  this will convert .something.*.blah_$$$_whatever_ to something-blah-whatever
Candidate: this is be setemptyelement().
Reference: it is better to use the logger here.
Candidate: i don't think we need to hide the <UNK>
Reference: minor: since locatemembertests has been renamed to locatetestsartifact, maybe downloadmembertests should be renamed, too?
Candidate: why do we need the <UNK> here?
Reference: i am trying to get rid of these checks where they don't save a large amount of work. no need to check whether logging is enabled here, there's no work
Candidate: why do we need the <UNK> here?
Reference: this warning message is not clear to me. can you provide a sample?
Candidate: we should use the jdk subclasses in way: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> }
Reference: i think the threadlocal itself should never be set to null (and i would instantiate it eagerly in the constructor), only its thread-specific value should be. otherwise a thread could
Candidate: this should be the <UNK>
Reference: might be good to explicitly call out the since4pass icon type instead of using an else. in case they ever add another icon, we won't show the since4pass instead
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: logger.error("some message", event.getexception()); instead
Candidate: why do we need to check the <UNK> here?
Reference: this can be read easier by others by splitting the check using "guards style": <link_0> if (getmapgenerator.requiresinternetconnection()) { return false; } if (settings.getmapfile() == null) { return false; } return
Candidate: should this be null?
Reference: prices.length == 0 || prices.length == 1 <==> prices.length < 2
Candidate: i don't understand this matters, if we matters, but it matters, but if we matters, that the <UNK> is the <UNK> the <UNK> <UNK> <UNK>
Reference: lost original code. use multistatus to store both full original status and a new code.
Candidate: nit: can be replaced with <UNK> for-loop
Reference: it seems it will break alphanumeric sorting, e.g natural comparator sorts these in wrong order "num10071", "num9999"
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: nice catch, this is indeed possible.
Candidate: why do we need the <UNK> here?
Reference: can we be sure this bean hasn't been created yet?
Candidate: should we move this into the messages.properties method?
Reference: update.getupdatedobject().getvaluesforattribute(attributetype.mnt_by); is a bit cleaner?
Candidate: i don't think we need to call the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: jenkinsrule.waituntilnoactivity would be easier. that is how i normally test triggers. [example](<link_0>
Candidate: why do we need the <UNK> here?
Reference: nit-pick: just use an arraylist because this list should only ever be appended (and saves creation of ephemeral list-node objects)
Candidate: can be simplified to: if <UNK> == null) { <UNK> = <UNK> } else { return null; }
Reference: @kdkeck looks like a copy/paste error here
Candidate: why do we need need to the <UNK> here?
Reference: what about making the method implementation be: return cmd.getrefname().startswith(new_draft_change); ?
Candidate: why do we need the <UNK> here?
Reference: not sure why it says student here :laughing: maybe we could open an issue to change this to instructor instead if there's a need to change it.
Candidate: @unyoungwax, do you need to check isempty()? if <UNK> != null) { continue; } continue; } continue; } continue; } continue; } continue; } continue; } continue; } continue; }
Reference: @adyach shouldn't this be different from the remote url?
Candidate: please use <UNK>
Reference: if the bridgehandler is null you set the thing to online?
Candidate: rename braces to occurrences
Reference: use flux.from and use the abbreviated subscribe
Candidate: lambda?
Reference: i agree.
Candidate: why do we need to here?
Reference: remove policy.endopwork constant and all references to it. change policy.opwork from 99 to 100.
Candidate: why do we need the <UNK> here?
Reference: illegalargumentexception
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please log the error before returning the exception.
Candidate: should we be the specific?
Reference: maybe we can remove this "iserrorenabled"
Candidate: this should be the <UNK>
Reference: i think objects.remove() is going to throw exceptions rather than return null when the pool is empty
Candidate: this should be <UNK>
Reference: use constants for string values occuring more then once.
Candidate: do we need to check once for path.
Reference: i'm a bit lost on this change.. so is this now iterating twice? why the check during iteration was not good?
Candidate: can we replace the with <UNK> <UNK> != null) ? <UNK> : <UNK> <UNK>
Reference: more usual to have "} else if (...) {"
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: possibly this deserves a localized message
Candidate: attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt attempt
Reference: s/failedtoberemoved/failedremoving/
Candidate: i think we should be the if the is is a software stripe { <UNK> }
Reference: update is done in wrong place, look down domain is updated at line 167
Candidate: if the is is the <UNK> the <UNK> is the <UNK> the <UNK> is the
Reference: why is groupartifact being set twice?
Candidate: this should be <UNK>
Reference: this means that you must push all of the patchset as once, else you'll break the build. so either do so, or move this line to its proper commit.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can be replaced with more simple one: return compilation_message.test(text) || linker_message.test(text)
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: looks like there are odd parentheses in the command: organizations.removeif((o -> nonnull(o.getparent()))); \> organizations.removeif(o -> nonnull(o.getparent()));
Candidate: please use <UNK> <UNK>
Reference: is this line too noisy? i think its helpful to see it
Candidate: why do we need the <UNK> here?
Reference: seems we'd wait 1 hour before attempting to resolve again if there was no records found. that'll happen from time to time in prod due to infra breakage. how about
Candidate: why do you need org.apache.kafka.common.utils.utils.closequietly ?
Reference: isn't this wrong? the list before the replaceathead was: [1, 11], and the replace was ([1], [111]), so the result should be [111, 11], right? so when iterator in reverse
Candidate: <UNK> *= 2;
Reference: you can remove first condition and make second condition vise versa so null is handled automatically
Candidate: should we be the if (state != null) { <UNK> } else { if (context { return <UNK> { <UNK> }
Reference: remove this if you make the postdraw for entries
Candidate: can we move this into a separate method?
Reference: same reason here. > actually, i think it is not the method's responsibility to verify the instructor privilege here. as long as the pre-condition for getinstructorofcoursefromrequest is fulfilled, it should
Candidate: should we be the if <UNK> != null) { <UNK> } else { if <UNK> { if <UNK> { <UNK> { <UNK> { <UNK> }
Reference: logging this every time it fails will lead to a lot of log bloat. could you keep track of whether this warning has been emitted before and only warn the
Candidate: please use <UNK> <UNK>
Reference: let's not make this too hard on ourselves, let's put an if statement here and let's generate: setwireframetask : enable wireframe / setwireframetask : disable wireframe in the log. we
Candidate: can you use syserr
Reference: strictly speaking this is unnecessary as start can be accessed from setascancelled directly.
Candidate: should this be <UNK>
Reference: nit, the assertion hassize(1) already says there should be one group, what is not said though is why?
Candidate: why do we need to use <UNK> here? thanks!
Reference: check formatting..
Candidate: can be replaced with <UNK> <UNK>
Reference: please remove this before committing
Candidate: why do we need the <UNK> here?
Reference: this call throws assertionerror so this won't work. you want:  try { expectexception.evaluate(); } catch (assertionerror e) { assertthat(e.getmessage(), containsstring("expected exception: " + assumptionviolatedexception.class.getname())); return; } fail("expectexception should throw
Candidate: i appid
Reference: this is a bit brittle, but i don't really see a way to waitfor() the end of the rebalance (as opposed to waiting for some time, hoping that the rebalance
Candidate: can be simplified to: java <UNK> = <UNK> .filter(s -> <UNK> .filter(s -> arrays.aslist(new == null) { return null; }  ?
Reference: looks like throws exception is not needed.
Candidate: please use <UNK>
Reference: no reason we should do this more eagerly than "feed.sla.statuscheck.frequency.seconds". can use the same, but, start with a delay, so this runs a little after pending instances is populated.
Candidate: why do we need to mock <UNK> here?
Reference: tostring() is not implemented for dropwizardreporters.
Candidate: use objects.tostringhelper() objects.tostringhelper()
Reference: could we unify this between broadcaststatetransformationtranslator and twoinputtransformationtranslator? the entire method is identical in the two classes (minus checking for keyselector in a single input, but the version from twoinputtransformationtranslator
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: maybe if collectchangedfiles returns an empty list, simply continue?
Candidate: shouldn't this be the <UNK>
Reference: this. is not needed. also make the targetdomainname field volatile because it's checked and modified and invalidated from different threads.
Candidate: formatting: } else { if (throwable { return; }
Reference: colorlist  will never be null, widget#getlabelcolor and widget#getvaluecolor always return a list instance.
Candidate: can be simplified to: java results.stream().anymatch(entry -> value.getk1().equals(entry.getkey()) && value.getk2().equals(entry.getvalue()))
Reference: this statement does not need the conversion, it's just checking that there's at least one row selected.
Candidate: should be replaced with the <UNK>
Reference: let's rename these to addshaderprogram(string).
Candidate: please remove the method("post")
Reference: nit: .filter(singlecolumn.class::isinstance)
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: would be better to log here i think.
Candidate: typo.. <UNK>
Reference: suggestion thrown.expect(containscause(new validationexception("unsupported value 'test' for timestamp-format.standard. supported values are [sql, iso-8601].")));
Candidate: why do we need to mock <UNK> here?
Reference: why doesn't computeifabsent() work for us here?
Candidate: should be be <UNK>
Reference: just a doubt, here typelist contains only 1 value ("all"), so why join is being used, we can directly provide the string value
Candidate: this should be the <UNK>
Reference: find available port helper method?
Candidate: can be replaced with <UNK> <UNK>
Reference: nit: we wrap at 100 columns
Candidate: the error message should be encountered the fixture.
Reference: why can't you use writecharsequence(...) ?
Candidate: the syserr should be be the
Reference: please review code format
Candidate: <UNK>
Reference: @mavrk one test should only be for one method and one combination of parameters. and the goal is that every public method in the service layer is tested. so you
Candidate: why do we need the <UNK> here?
Reference: nit: instead of observable.just(long.valueof(0l)) you can take advantage of auto-boxing and write observable.just(0l).
Candidate: why do we need the <UNK> here?
Reference: it's a little confusing to use a local variable of the same name as a class variable. perhaps you can call it keepthisconnectionalive?
Candidate: can be rewritten as the optional?
Reference: can you make all the "unsafe" methods you added have package-private (default) protection instead of public.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what about duplicates? maybe better use to tomap() variant that overrides entries instead of throwing an exception.
Candidate: should we be the <UNK> here?
Reference: please do not perform validation based on method call side effects, if you need to validate number of properties just do that
Candidate: why do we need the <UNK> here?
Reference: it might be worth factoring this out to a haserror function
Candidate: this should be the cheapest check)
Reference: because of jit optimizations, the iterator form of for is [faster](<link_0>
Candidate: why do we need the <UNK> here?
Reference: typo in the log message. should be _have been_. can you place this message in a resources file? did ux sign off on this message?
Candidate: can we use the exception here?
Reference: what's the benefit of storing this as a line w/ slope instead of an angle? it seems like "robot pose" is really just a line with the notion of a
Candidate: i don't understand this matters, this matters, this matters, that this is matters, but i don't understand why, but it matters, but i don't understand why, but it matters, but
Reference: i believe _registerbuiltin.register(factory);_ should also be executed, in order to have a provider factory that behaves the expected way. wdyt? (this applies to all similar code blocks in this pr)
Candidate: should we assert that the <UNK> is empty?
Reference: we should pass partition key to cosmositemrequestoption here. the intention of this benchmark is to measure perf when pk is passed as request options.
Candidate: why do we need the <UNK> here?
Reference: what would you think of the following construct? java try { return downloadtype.valueof(type); } catch (final illegalargumentexception e) { return map; }  it's not the same as the current
Candidate: should we use the <UNK> here?
Reference: returning qlisthere should be enough, unless qlist is null
Candidate: why do we need to clients?
Reference: should inline
Candidate: this should be setemptyelement().
Reference: @t-izbassar i think it's not clear, because default matcher in hamcrest library usually is matchers.equalto(), so as a user of hmrqtextbody i'd expect that body is equal to constructor parameter
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: can we add here more descriptive name instead of element? maybe templatename, templateelement or template?
Candidate: please click element? element? element? element? element? element? element?
Reference: change to static import ?
Candidate: why do we need need to the <UNK> here?
Reference: gethoststatus(host) should not be called anymore, so do you still need the when()? removing this catches the case where it is called unexpectedly
Candidate: should this be <UNK>
Reference: you can run into a problem if you use basename; imagine that multiple map reduce tests are running in parallel. also i would suggest pulling out the results lists into
Candidate: can we use <UNK> <UNK> <UNK>
Reference: so hassubclasses is true only in the single_table case? i don't understand how this commit is related to "table per class hierarchies" and fix anything for them. could you explain
Candidate: feedid should be the feedid
Reference: update this if statement to use identity.isvalid()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: here also, let any exceptions be thrown, and handle it at the bottom of the call stack.
Candidate: if (args.length == null) { return; }
Reference: obviously the second invocation should not have been replaced, since you are still checking for null. given the presence in the init package i suspect that getinstanceornull is correct in
Candidate: should this be the specific?
Reference: you need to get rid of the forward slashes here too
Candidate: do we need a <UNK> here
Reference: if we want to add same object as key and value, why are we using concurrenthashmap instead of sets.newconcurrenthashset()?
Candidate: this should be the <UNK>
Reference: the redis server is started at host:
Candidate: should we throw an exception here instead of eating the exception?
Reference: please use map<?,?>
Candidate: should we be the <UNK> here?
Reference: it looks like it's possible to get this value while checking "frequency" java entryset() .stream() .filter(e -> e.getvalue().equals(envvalue)) .findany() .orelse(null) // should never happens .getkey()
Candidate: can we use the <UNK> of the <UNK>
Reference: - remove if not exists - move this statement outside of try block; otherwise, if create table fails, drop table in finally block will fail as well
Candidate: should we throw an exception here?
Reference: can we log the exception?
Candidate: why do we need this?
Reference: what happens if the optional is empty?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: see #1307
Candidate: why do we need need to the <UNK> here?
Reference: really minor, but i would call this method "retryifneeded" or "retryifconcurrentupdate"
Candidate: stringutils.isnotblank()
Reference: why the \1 byte at the end here? should be abd, no?
Candidate: typo in <UNK>
Reference: not sure it's needed, you just registered the 3 events.
Candidate: why do we need to check for the <UNK>
Reference: remove
Candidate: i don't think we need to check for the <UNK>
Reference: not quite sure why do we pass real log provider here. for example situation: during migration from 3.2 to 3.3 we need to do only count store migration. as result,
Candidate: why do we need need to the <UNK> here?
Reference: nit - just use new hashmap<>();
Candidate: should we use the <UNK> here?
Reference: we should remove the cookies before sending the loginmsgtoregenerateanticsrftoken, otherwise the session might not be correctly updated.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: nit: maybe nice to gate this behind if (logger.isvisible(level.fine)) { ... } so throwable.fillinstacktrace isn't called unnecessarily.
Candidate: should we throw an exception here?
Reference: code style. might be helpful to highlight code you've written and do a ctrl+alt+l (reformat code).
Candidate: the syserr should be be <UNK>
Reference: this method could be supported. you could do it without too much work by doing new ordimfilter(bounddimfilters).getdimensionrangeset(dimension)
Candidate: should this be null?
Reference: why create and fill(0)? zeros is enough.
Candidate: can you use the getconnection in <UNK>
Reference: java // function expressions without names have a name node containing an empty string.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: why can't we put this logic within the other filter?
Candidate: why do we need to synchronize on the <UNK> ?
Reference: why double storage of the events? you seem to have removed most of the workqueue usage already.
Candidate: why do we need to use <UNK> here?
Reference: @jomarko hi. i think @danielezonca is creating a specific class to hold the string constants used throughout the code, so probably that # should be replaced. beside that, i think
Candidate: please use <UNK>
Reference: i understand that you actually don't need the full result, but isn't this operation rather limiting? if you don't want to instantiate the result into some list, you could define
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit: this can be ifaces_all
Candidate: please use <UNK>
Reference: this will also list the contents of the system config. so maybe we must not deprecate the open variants? also note that list() loads the config.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: if writefileinfocache#remove returns true we will miss to check readfileinfocache#remove (the 'or' will not evaluate the second operand)
Candidate: should we be the exception here?
Reference: can you break lines so that it can fit 80 chars?
Candidate: feedid should be the feedid
Reference: move them to an alter util? or maybe a altertable, and have two implementation: objectaltertable and propertiesaltertable.
Candidate: what is the reason if this is is not null?
Reference: please sort this out.
Candidate: why do we need this?
Reference: why does this need a super()?
Candidate: is this needed here?
Reference: maybe remove the useless super()?
Candidate: this seems like this should be called on the clean called on the lock on the username?
Reference: i find it strange that websocket is a member of connectionattemptstate, it should be simply a member of xmppwebsockettransportmodule instead.
Candidate: i don't think we need to close the dispatcher as well.
Reference: isunauthorized 403
Candidate: isunauthorized 401
Reference: ![major](<link_1> reduce the total number of break and continue statements in this loop to use at most one. [![rule](<link_2>](<link_0>
Candidate: why do we need to use the here?
Reference: rename to source
Candidate: why do we need to here?
Reference: same as above for product, content doesn't have a tostring method, so this makes sense. i can write a tostring for content if you like, or you can.
Candidate: <UNK> *= 2;
Reference: why add the extra variable?
Candidate: can you use the <UNK> paths?
Reference: use resourceutils.closeorlog() instead
Candidate: why do we need to check for the <UNK>
Reference: should probably throw an error(e) in this case...
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: this seems a little odd. why would i need to register an accessdecisionmanager in order for the authorizedevent to be fired? it would likely be a breaking change if applications
Candidate: this 49
Reference: we'll need to hash-compare against tags too won't we? rename cat to dog but a note already has dog as a tag i think we'll still get a duplicate java
Candidate: i don't think we need to check for the <UNK>
Reference: i see that you're using the compatibility-version in the template, but what if the template doesn't have custom compatibility-version and its cluster is being changed?
Candidate: please use <UNK> <UNK>
Reference: i think you should have this loop also after the start time array puts. or else you have a smaller header than what is calculated in getspecificheadersize()
Candidate: why do we need the <UNK> here?
Reference: you can just inline key and value imo.
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: don't use kaltura.com:1935 in the pattern, since this will break everybody that uses different hostname (like qa or developers). search just from /klive/....
Candidate: if (trace) { ... } else { ... }?
Reference: try-finally, please?
Candidate: why do we need need to the <UNK> here?
Reference: instead maybe just use try-with-resources?
Candidate: why do we need to use <UNK> here?
Reference: shouldn't this be assigned?
Candidate: unsupportedoperationexception should be
Reference: it is redundant check. value.getallvalidationresults() will never return null. i think developer should check for null only those values, which is not under his control (e.g. incoming parameters of public
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: add card hints to inform user about useful data: ![shot_200608_040615](<link_0>
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: same concern as above.
Candidate: i don't think we need to use the <UNK> here as far as i see that the can we get rid of the
Reference: i think we should set the same for xml configuration. @mustafaiman ?
Candidate: should we throw an exception?
Reference: remove this commit since it is in finally
Candidate: why do we need to use <UNK> here?
Reference: listfiles() can return null if the threaddir doesn't exist (e.g., process terminated before you called this function) so you need to do a null check before iterating below.
Candidate: can you use <UNK>
Reference: if the map is empty then the stream won't do anything.
Candidate: should we throw an exception instead of returning null?
Reference: don't do string formatting yourself.  java log.debug("constructed {} of type {}", this, this.getclass().getname());
Candidate: is this needed as far as far as far as far as far as far as far as far as far as far as far as far as far as
Reference: i thought that we did not need to have this mapping in the compute engine
Candidate: you don't need to use the <UNK>
Reference: prefer renaming the method to handleexpiredrequest since there is no longer distinction within this method on which expired request should be handled.
Candidate: if we || <UNK> || <UNK> || <UNK> && <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: is this update required to fix stackoverflow ? if this is not related better to move to separate commit of the same pr.
Candidate: please use <UNK>
Reference: now that dynamicitem is safe in master (i merged the websession work from martin and jonathan) this should use the same model and have exactly one item contributed from a
Candidate: what is the reason for the <UNK> ?
Reference: it seems to be enough with tajoexception rather than throwable.
Candidate: why do we need to here?
Reference: is it no longer possible for strategy to be null?
Candidate: this should be <UNK>
Reference: what for is this empty if statement?
Candidate: please use syserr
Reference: restore formatting.
Candidate: use <UNK>
Reference: small typo for the param placeholder.
Candidate: should we use <UNK> here?
Reference: you should be able to do assetextension assetextension = (assetextension) asset.getextension() you'll want to check for null, and create a new instance of assetextension as needed. if you need to
Candidate: why do we need the <UNK> here?
Reference: how about to simplify it a bit with: enumset.of(vmstatus.suspended, vmstatus.savingstate, vmstatus.restoringstate).contains(vm.getstatus())
Candidate: this should be null if (state != null) { return null; }
Reference: express this more directly: if (mhaswifi) { minitialwifistate = mwifimanager.iswifienabled(); } note that there should be a space between "if" and the parentheses
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: nit: remove the 'currently' in parentheses to shorten the message a little.
Candidate: should we call <UNK> here?
Reference: do this in a finally block
Candidate: if we is software software stripe { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: use @mock, see e.g. molgenislocaleresolvertest
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: it's better to check for mmixpanelineditmode here. show should show a view and it should not be it's responsibility to check whether there is a socket open or not, etc..
Candidate: can we use <UNK> <UNK> <UNK> <UNK> constructor?
Reference: did you mean "setting"?
Candidate: i don't think we need to check the the <UNK> the <UNK> is the <UNK> <UNK>
Reference: this should be protected so modders can subclass it with their own small changes.
Candidate: please use <UNK>
Reference: not a necessary change but these can probably be simplified to assert.assertfalse(mantaclient.existsandisaccessible(childdir). up to you if you want to make this change.
Candidate: this should be the fixture.
Reference: we could shorten the test slightly if we use assertj library see the code below, would you mind to incorporate? java @test public void testlhsorder() { // drools-3080 final spreadsheetcompiler
Candidate: please use <UNK>
Reference: why this needs to be created for every android module even if config option doesn't exist in buck config? addandroidcompileroutputpath is called later at the end of this method which
Candidate: why do we need to use the <UNK> here?
Reference: remove
Candidate: you don't need to use the <UNK> <UNK>
Reference: why read the "weight" parameters here? seems not need, because we can read in automapper also.
Candidate: we should catch (throwable classnotfoundexception e) { throw e; } (throwable e) { blah <UNK> { blah } blah { throwable leak. } blah } (throwable e) { blah }
Reference: knock this down to protected (no need to define public api here) - this will also provide a chance for subclasses to be smarter (for example wktstratagy could start recogning
Candidate: should this be null?
Reference: minor suggestion to improve the readability of the code below: use mappedslice as a prefix for these variables.
Candidate: you can do we need the chunks to the the chunks of the chunks of the chunks of the chunks that the chunks is the the chunks of the chunks
Reference: please explain whey this thread sleep is required.
Candidate: please use <UNK> <UNK> <UNK>
Reference: there is definitely a need for a centralized toast generator.
Candidate: should we be the <UNK> here?
Reference: why not model.getlocalizedtooltip()?
Candidate: if <UNK> != null && <UNK> { <UNK> } else { if <UNK> { <UNK> } else { return; }
Reference: why aren't we calling createchecker?
Candidate: please catch fail() to catch input and finish the input and finish the input and finish the input and finish the input and finish the input and finish the <UNK>
Reference: same as before: this change seems unrelated to the topic of this pr and just expresses a personal preference. while that preference might well be better than the existing code,
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: if you'll follow my suggestion in line 444, this method can be removed.
Candidate: can you move the builder into the builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
Reference: you could create a constant for the singleton locks, no real need to create new instances, same for the read_write below
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: shall we keep clenup() without remove?
Candidate: why do we need the <UNK> here?
Reference: (nit + local, premature optimization) the first check about isresourcerequest could be moved up to the first if, after the instanceof, to reduce computation.
Candidate: please use <UNK>
Reference: don't think you need this if - it's doing the same thing in the if and the else.
Candidate: move declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration declaration
Reference: we repeat this calculation over and over again. why don't create a utility method? e.g. gettimezonezeconds().
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should be instance of servocontrol not servo.. :)
Candidate: the syserr should be be <UNK>
Reference: those 2 lines should be in the if clause as well.
Candidate: should we be <UNK> to <UNK> <UNK> ?
Reference: we should provide a default, in case of this header is missing. i guess you could do something like:  java string charset = objects.firstnonnull(request.getheader("accept-charset"), "utf-8"); return charset.split(",")[0];
Candidate: should we use the <UNK> here?
Reference: i would suggest using by if possible, by is an instance of [byfactory](<link_0>, so if you need a new selector and simply use it via selenium in your po the
Candidate: unsupportedoperationexception should be
Reference: fileextesionstartindex will never be -1 even when there is not an file extension.
Candidate: why do we need to use <UNK> here?
Reference: why the string declaration for ssl_factory? if you do this, do for all strings in property. if not, remove the variable. it is not wrong but the implementation is varies
Candidate: why do we need to the <UNK> here?
Reference: put setters at end of file
Candidate: why do we need to check the <UNK> <UNK>
Reference: since the events are never removed from the list, this creates a memory leak. the notifier keeps a reference to all events, the events have a reference to the players
Candidate: use uri.create here instead of <UNK>
Reference: feels like the button text should just live in a layout?
Candidate: i pagelogging
Reference: while we're at it, let's remove all the redundant this. as well.
Candidate: should this be <UNK>
Reference: in the happy case where we continue to receive acks for each event delivered, always the ack-notifier thread will be draining the queue. publisher thread will continue to do only
Candidate: the syserr should be be the
Reference: why don't we change the connectormetadata#gettablelayouts to connectormetadata#gettablelayout that returns a single connectortablelayoutresult?
Candidate: please remove the unused line.
Reference: should we just return null here rather than propagate the exception? if we are sure we want to return null then the exception should be logged if we are swallowing
Candidate: should we throw an exception instead of exception?
Reference: also, this is getting a bit too long for a single line i think. it's probably better to restructure this: if (ore) { return true; } else if (1.16) {
Candidate: this should be the <UNK>
Reference: - this.ascent and this.descent are in pixels so autoscaledown to be applied after deciding the value from math.max
Candidate: what happens if the exception is is rejected
Reference: suggestion logger.info("'--interval' specified [{}] is lower than the minimum allowed [10].", this.getinterval());
Candidate: can we use <UNK> <UNK> <UNK>
Reference: better use inner constant here.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: subtask != task therefore these two lines should be: submonitor.convert(monitor, /title/, 1); (other cases of same marked with ditto2)
Candidate: nextvalueindex should be be <UNK>
Reference: use a singleton instance of defaultvariablenamefunction
Candidate: please remove the <UNK>
Reference: doesn't the output fs also need to be registered if not present? or is the assumption that it will be same as input fs?
Candidate: why do we need the <UNK> here?
Reference: this should be a private static final string at class level.
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: failed to resolve remote artifact why remote ? it's hosted repository.
Candidate: can we use the original code here too?
Reference: what is the rationale behind this check? why not if (getrange().getendtime() > ftimerange.getendtime()) { for instance?
Candidate: i don't think we need to check for the the <UNK>
Reference: this could be refactored to use contains method on list.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { return false; }
Reference: here is a lot of staff happening in the constructor, maybe move it to init method, or a lazy loading? there is a situation when, a can add a filed
Candidate: why do we need the <UNK> here?
Reference: i recall, you should do setproperties on config from the endpoint. perhaps either @oscerd or @davsclaus can confirm this.
Candidate: why do we need to mock <UNK> here?
Reference: many of your instructor test cases (such as this) can be simplified by running the helper methods in baseactiontest instead of doing all of these manually. it'll make it easier
Candidate: same as above.
Reference: doing this in a live test is a symptom of something that users will probably have to do themselves. better use the build-in predicates2.retry construct to wait until the server
Candidate: please remove the log.
Reference: lets use stringbuilder for str as we are changing it within the loop multiple times.
Candidate: why do we need to use the <UNK> here?
Reference: not your code originally but the filtering and mapping seems pretty pointless: java assertthat(activemessagehandler.getrecordedmessages().collect(tolist())).hassize(1);
Candidate: why do we need the <UNK> here?
Reference: seterrormessage
Candidate: the syserr should be be the
Reference: you could simplify this to "groupid = props.getproperty(..." and then drop the else case. not a review blocker though.
Candidate: why do we need to use <UNK> here?
Reference: i know it is easier to work with the static cluster map for such things, but since we have moved to helix and static cluster map is deprecated, can we
Candidate: please remove the method("post")
Reference: can u extract a final constant with a readable name out of "<[ ]*%s[ ]*>" ?
Candidate: please use <UNK>
Reference: this is currently not the case and i do not like to have everything rendered. it should use the configured probe level.
Candidate: this should be (context <UNK> <UNK> (context { <UNK> = <UNK> }
Reference: to avoid npes use; mlconstants.deeplearning.equalsignorecase(model.getalgorithmclass())
Candidate: ![major](<link_1> 'severity: this will throw an exception
Reference: and maybe even nested functionality as well.
Candidate: if oldvalue is null?
Reference: what if clientspan is null? (i.e. the client span is not found) copying all binary annotations from the client span may be an issue, as could be misleading for the
Candidate: should we be the <UNK> here?
Reference: should this be something like "creating localcachemanager with {} existing pages" ?
Candidate: why do we need to use <UNK> here?
Reference: leftover?
Candidate: why do we need to the <UNK> here?
Reference: normalized
Candidate: why do we need to here?
Reference: this line is longer than 120 cols
Candidate: @kujtimiihoxha we don't need to use try-catch-fail
Reference: i'm good with b, but i've noticed a lot of reviewers prefer to see binding, which is more idiomatic java.
Candidate: we should use the <UNK> here instead of <UNK>
Reference: this method states it check the button visibility. it doesn't mention checking the module visibility. please make this diversion more precise
Candidate: should we throw an exception here instead of exception?
Reference: tempted to do it before breakfast :)
Candidate: why do we need the <UNK> here?
Reference: i think we should export this as a constant also - it's used in two places already. in the future we may supply the user name by configuration.
Candidate: why do we need to use the <UNK> here?
Reference: we should use the or operator here instead of and. if the first part of the condition is true, meaning that the list of lines of credit is empty, then
Candidate: i don't think we need to print the exception in the <UNK>
Reference: return a set<string> instead of hashset<string>.
Candidate: rename to iu
Reference: i see that in csv case where fieldstoread is null, we get fields to read in the recordreader. versus, in the json/avro case we used to make that decision inside
Candidate: <UNK> is a <UNK> <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: shouldn't this be something like "press \"merge entries\" to resolve the merge conflict." ?
Candidate: can we make this more specific?
Reference: i love the readability improvement here. we might actually be able to improve it even further, by having the constraintdescriptor have an enforcesuniqueness() method (and an enforcespropertyexistence() method) that delegates
Candidate: please use syserr
Reference: nitpick: if the stream is null, isn't worth it to invoke a createstream to avoid double checking? the same logic could be applied to the else branch by passing the
Candidate: i don't think we need to throw an exception?
Reference: add the @inject annotation and remove the public modifier from the constructor to make it package private ([background](<link_0>
Candidate: this should be <UNK>
Reference: no need for a mock.
Candidate: <UNK> *= 2;
Reference: indentation is all over the place here.
Candidate: can be simplified to: java if <UNK> == null) { return <UNK> = <UNK> <UNK> }
Reference: to me it feels like an error-prone situation when we return results for lower number of partitions than requested. it's unclear what such situations indicate: we skipped/forgot some partitions entirely
Candidate: i don't think we need to check for the the <UNK> <UNK>
Reference: its good that isaggregate was removed, but we should still verify that the primaryresource is a work. that just boils down to a primaryresource.hasproperty call i believe
Candidate: you don't need to use the
Reference: it is good to assign conditions like this to a local variable so that it can be given an explanatory name.
Candidate: should we use the getconnection here?
Reference: there are six themes now. dark / light in 3 different font sizes. there is a class util/themehelper to do the settings to theme id conversion.
Candidate: <UNK> *= 2;
Reference: probably don't need debug but should we add trace logging for these conditions?
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { return <UNK> }
Reference: might worth adding a separator before this one and before the scope button, as they have opposite behaviour.
Candidate: please use <UNK>
Reference: put the log after the send
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: i guess you need to change the parameter type to list.class:  java }).when(nodediscovery, notify_device_discovered, mockito.any(list.class), (remotexbeedevice) mockito.any());
Candidate: can we maintain the exception?
Reference: similar to above for shadowing field idempotencykey ->
Candidate: can we use <UNK> <UNK> <UNK>
Reference: nits: please add annotation in separate line above. you may want to change for all such lines below and above.
Candidate: you can use the fixture.
Reference: this mapping should happen via public enum and not via mapping backend enum to string
Candidate: if (actual == direction.incoming) { null) { <UNK> } (name == null) { return <UNK> } (name == null) { return null; }
Reference: this line is redundant now that you call endsuccessfully directly
Candidate: i am not sure that the lock acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired
Reference: i think "i" is not a good name. maybe change to "interface"
Candidate: can be simplified to: if <UNK> == <UNK> || <UNK> { <UNK> } else { <UNK> }
Reference: nit: flatten nested else { if {} } to else if {}?
Candidate: why do we need the <UNK> here?
Reference: remove_container_timeout = integer.getinteger("org.apache.apex.nodemanager.kill.timeout", 30 * 1000);
Candidate: i don't think we need to check for the <UNK> the <UNK> <UNK>
Reference: i would consider re-using org.ovirt.engine.core.dao.networkdaodbfacadeimpl.networkrowmapper since that's the main entity in question, and not changing the field names in the view (otherwise it wouldn't work) -or- using some different approach
Candidate: this is the <UNK> part, should be the <UNK> part, the <UNK> part, but it is be the <UNK> part,
Reference: @namiii possible to allow configuration of the implementation to use so that we can add app engine support in the future?
Candidate: <UNK> *= 2;
Reference: wouldn't it be better to remove duplicate logic and just invoke the version taking a run? it seems like a lot of this could be condensed.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: we should use named not positional arguments. i believe both are supported by ebean.
Candidate: why do we need to the <UNK> here?
Reference: doesn't c.isowner imply user.isadministrator ?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: consider using constants for values like this, as you did in your other test class to increase readability.
Candidate: use <UNK>
Reference: pkgtypes.get(pkgtype)...
Candidate: rename to iu
Reference: in other pull requests, we had mechanisms that ensured that it was not necessary to recompute every weight for every selection. should this use the same trick?
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: don't use default shell. dialog has one.
Candidate: do we need a check?
Reference: shouldn't catch throwable as it can be any sort of jvm error. probably shouldn't catch blanket exception either unless you wan't some special handling. exceptions thrown out to jersey should
Candidate: should we print snapshotid in the request?
Reference: replace with guid.isnullorempty(..) i'm not entirely sure that we want to return false here and not keep the current behavior (which is equivalent to retun ture) , if operations that
Candidate: should we use the properties? in the messages.properties properties?
Reference: can this be put into a method?
Candidate: why do we need to use the here?
Reference: should we consider having a single impl for both readvarint() and readvarinteger()?
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think we should be putting more values here, to ensure that every bucket has at least one key. buckets are not fully created until data is put into them,
Candidate: why do we need the <UNK> here?
Reference: firstnonnull() is useless because of single parameter.
Candidate: can we move this logic into a single check?
Reference: this is against naming convention - variable with constant like name.
Candidate: can we use the <UNK> here?
Reference: @balamurugana i think the issue is config.tostring() which is not returning xml here
Candidate: the syserr should be be <UNK>
Reference: this part could go into azureutils.
Candidate: can we remove the try/catch here?
Reference: suggestion logger.log(level.severe, "email configuration properties were not provided correctly.", e);
Candidate: should we be the <UNK> here?
Reference: is this about terminating, or sending a specific signal (there are both term and kill signals)?
Candidate: can you use streaming <UNK>
Reference: please close this defaultaccessor at the end of the test to prevent a zkclient leak.
Candidate: i don't think we need to call the <UNK>
Reference: hide this and expose factory method
Candidate: use <UNK>
Reference: needs a null check otherwise the phone_number column will always be an empty string instead of null. assuming this is your intention...
Candidate: please remove the <UNK>
Reference: don't know that this is correct. if the item isn't found, you are "pretending" all is ok and returning the map anyway. isn't the correct thing to throw the exception?
Candidate: if <UNK> == null) { <UNK> = <UNK> } <UNK> <UNK> <UNK> } <UNK> <UNK> <UNK> } <UNK> <UNK> <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: what happens if the command is null or empty? a null/empty check would be cool.
Candidate: i don't think we need to throw an exception if the is is an itemstack.
Reference: do we want to add more checks on the size of the array itself?
Candidate: the syserr should be replaced with <UNK> <UNK>
Reference: these can go in a single try
Candidate: you can use system.lineseparator()
Reference: do we need this here since we already set the msearchmenuitem in oncreateoptionsmenu?
Candidate: why do we need to check for the <UNK>
Reference: remove this line
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: code style: please keep line lengths <= 100 chars. github's web ui doesn't even show the full text.
Candidate: if (state != null) && adsize { <UNK> } { else { <UNK> { return false; } else { if <UNK> { return false; }
Reference: one suggestion s/unkown/unknown
Candidate: the syserr should be be <UNK>
Reference: can you please assert on the exception, that it is with timeout error message?
Candidate: why do we need to use <UNK> here?
Reference: most of us use throw exceptions.propagate(e) to skip needing to include a non-reachable return null; the throw never gets run of course but it is misleading in a good way
Candidate: i don't think we need to do we need to check the getcredentials for the getcredentials
Reference: empty list instead of null
Candidate: can we return null?
Reference: please remove this, i fixed the cause in a432e377a8d4e7dd04f2267bc59b1e66ea6d6656
Candidate: why do we need to use the <UNK> here?
Reference: since w/out the '/' it is already set, no need to reset, no? i'd just do:  if (!pushconfiguration.getserverurl().endswith("/")) { pushconfiguration.setserverurl(pushconfiguration.getserverurl() + '/'); }
Candidate: we should catch exception here and throw an exception exception message.
Reference: cosmetic: would you mind using static import statements for these assertion methods? thanks! :)
Candidate: suggestion if <UNK> != null) { getparameters().getstoragedomainid()
Reference: we don't need to set rowkind on keyrow, because we never to use it.
Candidate: you don't need to close the <UNK>
Reference: was this config prop removed on purpose?
Candidate: i don't understand this matters, if we matters, this matters, but you can do we need need to check whether the <UNK> is the <UNK>
Reference: i think it must be possible to skip subtrees also for non treeiterators.
Candidate: can you use the getconnection in the <UNK> ?
Reference: do you think it would be better if we kept the data null and instead check for this outside of if (data != null) statement? i don't think we care
Candidate: why do we need need to check the the <UNK> scenario?
Reference: create map with expect size would reduce memory, just like this:  map<string, string> srcparams = getparameters(); map<string, string> newmap = new hashmap<>((int)((srcparams.size() + parameters.size) / 0.75 + 1)); newmap.putall(srcparams);
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: we should ensure semanticmodeland symbol are not null before using it, or alternatively only run the rule when semantic is available and ensure verifynoissuewithoutsemantic
Candidate: can we use the map?
Reference: please label these reporting.parameter.onorafter and reporting.parameter.onorbefore
Candidate: @exper0 let's use unsupportedoperationexception instead.
Reference: done, added two new constructors, one with public key and one with password and public key
Candidate: should be setemptyelement().
Reference: i was curious what you were going to do with the 'readonly' field here. :) when you open a remote file with the media server...you can open it either in
Candidate: do we need need to mark the console? as the console? as it looks like it looks like leftover to console?
Reference: for consistency, should this be a log_model_run_complete?
Candidate: i appid
Reference: usually update to non-operational status is done by setnonoperationalvdscommand for rhv hosts. we don't have to use it here, since the kubevirt node status isn't expected to change outside of
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: missing final
Candidate: this should be the if the is is the
Reference: this will effectively embed the value as string, why not embed the value as js boolean instead? with this change, gwt host page will contain: var displaysupportedbrowserwarning = { value:
Candidate: should we use the exception here?
Reference: can you please simplify this a bit? something like this should work:  stream<channelshim> videochannels = channelshims.stream().filter(c -> mediatype.video.equals(c.getmediatype())); list<sourcepacketextension> sources = videochannels.map(channelshim::getsources).filter(objects::nonnull) .flatmap(s -> s.stream()).collect(collectors.tolist());
Candidate: can we call <UNK> <UNK> <UNK>
Reference: unless i'm missing something, this method could be safely deleted and you could use the byte[] header and payload variant instead.
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: what does this buys us? there is no _expected_ failure path once we managed to writelockall() so we should simply move the segments.clear() after the finally block.
Candidate: should we be the <UNK> here?
Reference: why this?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: minor: consider view.no_id and @resid annotation.
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the <UNK> <UNK> <UNK>
Reference: why do we always compare as double? in one of my tests the fvaluenumber is long. if we compare as double it might not give us the expected result because
Candidate: do we need to check if <UNK> == <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> ||
Reference: is .json correct here? this is in the xml type descriptor?
Candidate: use <UNK>
Reference: for all other calls of scheduledirect, we use: suggestion schedulers.io().scheduledirect(new runnable() {
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: i believe we want this too protected
Candidate: i don't think we need to hide the if (trace) { ... }
Reference: could use completablefutures.completed_null.thencomposeasync(...) to avoid the double wrapping the result. maybe it's worth adding a static method in completablefutures.
Candidate: should we throw an exception?
Reference: nit: as mentioned elsewhere, i don't think we need to add all of these exceptions to the method. they are all runtime exceptions, so it's still up to the user
Candidate: the syserr should be the
Reference: if we extend entitycollectiontransceiver instead, it will take care of the view-mapping and apply the "last modified date" logic too. we'll just need to adapt it to the timestamped interface
Candidate: why do we need to use the <UNK> here?
Reference: developer tag should be a prefix.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: unfortunately here we can have a situation when some events can be lost. i meant that eventstofire map can have at the moment of call of method more elements than
Candidate: remove this line
Reference: could throw new unsupportedoperationexception if not empty. we should deprecate it in abstractmemento.setcustomfields. it is deprecated in all sub-types.
Candidate: this should be <UNK>
Reference: add assert that leadersessionid and leaderaddress is not null. otherwise this method will allow us to break isempty.
Candidate: why do we need to use the <UNK> here?
Reference: not required, but you can use |= here.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: since you only added a log statement to this file you should just remove it from the pull request.
Candidate: should this be the <UNK>
Reference: this won't replicate fits extracts since it only applies to original_files, you may need to break replication into a separate route from the original binary processing. i'd suggest kicking it
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: @micnice this won't work as the factory is not fetching the bloodtest entity from the repo. we need that entity so that we can get the category, the bloodtestbackingform could
Candidate: please remove the trailing <UNK>
Reference: should compile once? this might be called many times.
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: miso convention for requestmanager has an initial check for if xstore is null (add to this and three methods below)
Candidate: should this be <UNK>
Reference: why not case showtocevent.action_toggle? and throw exception for default
Candidate: if we is the <UNK> velocity && <UNK> { return; }
Reference: just pass the set.
Candidate: why do we need to check the <UNK>
Reference: datasource instanceof streamingonrequestdatasource is redundant since it is already checked above in line 185.
Candidate: can we use the getconnection scenario? here?
Reference: i find it surprising that we always set a diff's state to merged in this method: if we merge right to left, and the diff was from the left, then
Candidate: it has a bad thread has a bad thread has a bad thread has a bad thread has forward in the thread providers has forward in the thread providers has
Reference: this is not your code, but is just a preference of mine, so feel free to ignore... but... i think the code would read better if this checked that the
Candidate: please use the syserr
Reference: could you not use reflection? i know it's a pain to list all methods, but this is faster and doesn't lead to error/weird case for non existing properties.
Candidate: please use <UNK>
Reference: is there a reason why this is runtimeexception not tribbleexception?
Candidate: should this be the fixture.
Reference: duplicatepolicy -> dataloadingpolicy
Candidate: please use <UNK> <UNK>
Reference: the default selection for the radiogroup can be changed via the layout resource [here](<link_0> you can also rearrange the sequence (if you want rename before replace) and if you want
Candidate: i think this is the software <UNK> <UNK> the <UNK> <UNK> the <UNK> is the software indication of the code is the
Reference: why not make this method public?
Candidate: why do we need to use the here?
Reference: this used to be an atomicinteger but is now a regular int. are you sure it's safe? is all the code that uses it required to be run in the
Candidate: if <UNK> { return false; } else { if <UNK> { return false; }
Reference: for consistency with the other infrastructure components, i'd suggest to do the builder.validate() call in the constructor.
Candidate: should this be <UNK>
Reference: i'm wondering how the no-op impl plays in here. shouldn't there be a "real" implementation in case of neo4j embedded, just not based on jdbc but on the neo4j tx
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: suggestion log.warn("error while handling response for rpc module: {}. response string: {}", rpcmodule.getid(), message, e);
Candidate: the syserr should be be the
Reference: do we really need the flush? we're dealing with the single stream anyway, so writes will be serialized somehow (and also we synchronize this anyway), and i don't really care
Candidate: we should throw an exception if (state { <UNK> }
Reference: if you want, you could change this to allowcors(response (like in "version", above) to allow cross-origin resource sharing. i'm sort of wondering what's returned if no api terms of use
Candidate: this should be <UNK>
Reference: i think we shouldn't log pids (email) ? at present we are logging reference, amount, return_url. new fields (delayed_capture, language) seems fine.
Candidate: nit: can be replaced with <UNK> <UNK>
Reference: please add this property to telemetry, it's good to know why we get auth_token_not_returned (access token isn't returned or it prompt was required)
Candidate: why do we need to check for the <UNK> scenario?
Reference: should this be perhaps something generic, and used for other results as well ?
Candidate: can we make the iterator here and make sense to make it make sense to make sense to make sense to make it make sense to make sense to make
Reference: i really hope the format changes for the final spec. :)
Candidate: why do we need the getconnection here?
Reference: this is the same as below, but i am fine if you want to keep as it is. java for (final element element : children) { position.sety(element, ++parenty); }
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: is this related to the rest of the pr?
Candidate: what happens if the is is invalid?
Reference: can you define this property name in 'voldemortbuildandpushjob' together with other cdn related properties? it seem this one is very important to execute distcp job.
Candidate: why do we need the <UNK> here?
Reference: path has strange and subtle differences between different constructors. the original code specified the constructor was the one that took a string explicitly. this code would work if the type
Candidate: why do we need the <UNK> here?
Reference: there are tools that auto-generate files but let you edit them (usually between markers) and your changes are not lost. as swt tools are not such better to be more
Candidate: should this be <UNK>
Reference: this isn't monotonic, shouldn't nanotime() be used for measuring elapsed time?
Candidate: this should be (throwable <UNK> { <UNK> } (throwable e) { <UNK> }
Reference: why initialize with default value? you could: 1. save a boolean of "succeeded" 2. save a null and check for it later. i think option 1 would be better, then
Candidate: you don't need to repeat the <UNK>
Reference: we should add some assert to make sure that varargstype is not null.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: how about also printing vdsid? it might be useful in the future
Candidate: i don't understand why, but it is be the if the is is the
Reference: definitely good to move this to a viewmodel
Candidate: throws exception exception
Reference: this would look logically clearer:  java if (data.shouldshowlog(emaillogentry)) { emaillogs.add(emaillogentry); }
Candidate: why do we need the <UNK> here?
Reference: please use configutils.getdefaultprofile() instead of hardcoded "full" profile name.
Candidate: why do we need to use the here?
Reference: this error message isn't particularly helpful. maybe this instead:  argchecker.istrue( fixedleg.getcurrency().equals(floatingleg.getcurrency()), messages.format( "swap leg conventions must have same currency but found {} and {}, conventions {} and {}", fixedleg.getcurrency(),
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: call notfound instead of returning null
Candidate: can we use the get* <UNK>
Reference: synthetic access.
Candidate: this should be the <UNK> <UNK>
Reference: yes, please revert. create a separate pr if you like.
Candidate: i don't think we need to check the <UNK>
Reference: use tree.kind instead, to remove the import.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i don't know if this is an issue but deserialization will not be backward compatible.
Candidate: should we be the <UNK> here?
Reference: also this toast. it's really annoying.
Candidate: why do we need the <UNK> here?
Reference: seems like this appender could also be scoped to the class that logs the message we want to capture, right?
Candidate: should we be <UNK> here?
Reference: that's probably not what we want, right? maybe some logging at least? why shouldn't we fail in such a case?
Candidate: you don't need to use the <UNK>
Reference: be careful with this comparison here. if we're caring about the uuid (which we don't at all in this case -- it's a one-to-one comparison for differences in content), then
Candidate: can be simplified to <UNK> <UNK> ?
Reference: put an empty line after this.
Candidate: this is be setemptyelement().
Reference: note that in oxygen this bundle has not updated to java 8 yet.
Candidate: use <UNK>
Reference: the duration variable should be qualified with the this keyword.
Candidate: why do we need to mock <UNK> here?
Reference: i am not very comfortable in the way we go about constructing container w/ new fields and once it is serialized and deserialized, it resets some of the fields to
Candidate: why do we need this?
Reference: use objects.requirenonnull
Candidate: why do we need to check the <UNK> here?
Reference: how about "url cannot be null"? that would be a completed sentence
Candidate: why do we need this?
Reference: do we need super(), if the class is not inheriting from a super class?
Candidate: why do we need to check the <UNK> here?
Reference: --allow-duplicates is a better name, but now "f" is not a good short name. maybe "a" or "d", or no short name.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: please change this to use a leading capital unable. also is it worth continuing here? if getauthority() fails and requestdomain is null shouldn't we just return?
Candidate: please use <UNK>
Reference: why varchar? shouldn't it be a geometry_type?
Candidate: use map<> <UNK>
Reference: the fetchablepartitions method used below is probably another nice opportunity to use something like foreachassignedpartition.
Candidate: if <UNK> == <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: collections.singletonlist would be fractionally more efficient.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: the assert condition is the same as the if condition so if seems useless
Candidate: why do we need the <UNK> here?
Reference: this method should be static to avoid a warning if such warnings are enabled.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK> the <UNK> <UNK>
Reference: ... + pattern.quote(upperpropertyname) + ...
Candidate: why do we need the <UNK> here?
Reference: could replace this if and the above get with : java cachedconnections ccl = getcache().computeifabsent(cachekey, ck -> new cachedconnections);  also a concurrent map will handle this correctly for multiple
Candidate: can we use <UNK> <UNK> <UNK>
Reference: kualidecimal has a constructor that accepts a string as input, so you don't need to parse the string value with numberformat explicitly.
Candidate: why do we need to use the <UNK> here?
Reference: seems like public is a better default, though. the point of a getter or setter is to expose the variable through the class interface, isn't it?
Candidate: why do we need to check here?
Reference: add brackets to make this expression more easy to understand
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: allvmdevices.foreach(getcompensationcontext()::snapshotentityupdated)
Candidate: i don't think we need to check the <UNK> <UNK>
Reference: i prefer the code style using the space between the if and the parenthesis, which is the standard code convention: <link_0> but no offense taken if you prefer this style.
Candidate: typo: <UNK>
Reference: ok i think that answers my question before, makes sense! thanks jose
Candidate: can we use the <UNK> here?
Reference: is it our common rule? i mean invertring boolean condition? maybe it's not so smart question :). i mean, maybe is little more readable? if ( propertyentries.isempty() ) { 
Candidate: please use <UNK>
Reference: i think this would be better if it polled for a shutdown server. i've seen times when jboss-as takes longer than 5 seconds to shutdown.
Candidate: can we move this logic into the properties?
Reference: you would need to use submap and remove this and subsequent lines below.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i don't think that this is the right place for incrementing of receiving keys. let's call this outside the updategroupmetrics since this is a method-candidate to remove.
Candidate: why do we need this check?
Reference: did you forget a ! here?
Candidate: log.warn
Reference: ![blocker](<link_1> close this "fileoutputstream". [![rule](<link_0>](<link_2>
Candidate: should be uids of the <UNK> notation? java <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: the idea with the filtered buffer is that it only allows items to go into the "main" inventory if the item matches what is in the blueprint inventory. you can
Candidate: why do we need need to be <UNK> here?
Reference: not an exception
Candidate: should we be the <UNK> here?
Reference: could potentially use: <link_0>
Candidate: we should need to do we need to getparameters().getstoragedomainid()
Reference: this check is redundant. just call taskkeytotaskidmap.remove(taskkey), and check if it returns null or not
Candidate: why do we need this check?
Reference: add a check that the first argument is identifier
Candidate: why do we need the <UNK> here?
Reference: why not just have a default on the switch?
Candidate: why do we need to use <UNK> here?
Reference: do we really need to specify the version here? afaik, it should grab the version from the pom.
Candidate: please import?
Reference: the same as above: returning the previous messagebufferinput
Candidate: if (actual == direction.incoming) { null) { <UNK> }
Reference: would it work to change overlordactionbasedusedsegmentlister to take a tasktoolbox instead of a tasktoolboxfactory, and do: datasourcepathspec.setusedsegmentlister(new overlordactionbasedusedsegmentlister(toolbox)); and avoid the global injector?
Candidate: should be the payload?
Reference: same here: should be buildconfig.debug
Candidate: if you do, can you add the item to the item too?
Reference: @januson modeltranslator never used in this code. any specific reason for this null check?
Candidate: minor thing, but we don't need to use the translations here.
Reference: this method should be changed to private
Candidate: this should be <UNK>
Reference: did you intend to log and then print stack trace?
Candidate: 1. alias != null) || <UNK> && <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: shouldn't this be a finally instead of a catch?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: while you're rebasing, please rename to origintype
Candidate: should we print the exception here?
Reference: should we be resetting this static object repeatedly? why not just have a static initialization?
Candidate: why do we need the <UNK> here?
Reference: set "vertebrates" right here
Candidate: this looks like we need to mark this as as the purpose, as it looks like it looks like it looks like it looks like it looks like it looks
Reference: this line means the trace token that is passed through might not be what the caller provided.
Candidate: this should be the <UNK>
Reference: final xpathevaluator xpathevaluator = new xpathevaluator(configuration.newconfiguration()); final xpathexpression xpathexpression = xpathevaluator.createexpression(query);  can we make this execution to be done ones for whole checkstyle execution ? for example in "setquery".
Candidate: why do we need the getconnection here?
Reference: i think getting a live stream was there for a reason. perhaps we should evaluate if that is a good idea, and if so, still keep it, as opposed to
Candidate: why do we need the <UNK> here?
Reference: when would this be of use except for in init which is always false. i mean in line 442 of glustervolumesnapshotlistmodel you are doing snapshotmodel#getdisableclischedule#setentity but that doesn't come here
Candidate: this should be <UNK>
Reference: why endaction of runvm will not be called automatically ?
Candidate: should we be the username?
Reference: replace with this(in, null)
Candidate: please remove the <UNK>
Reference: how about the operands are empty ?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: listeners are not notified?
Candidate: this should be the fixture.
Reference: probably safer to have a current != null
Candidate: why do we need this check?
Reference: debug statement should be removed
Candidate: should we be <UNK> to <UNK> the <UNK> <UNK> the <UNK> method](<link_0> and then we don't need to do we need need to check the <UNK>
Reference: i guess it should be text/plain.
Candidate: this should be the <UNK>
Reference: rather than having a trailing space at the end of missingmethods, use a stringjoiner.
Candidate: please remove the <UNK>
Reference: the actual delete should happen at the end as windows can be very picky about files being logged. so the remove would need to happen first.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: i'm not sure anymore what the point of supporting preview features is, if we're going to drop support for them between any minor version. so either 1. instability is to
Candidate: please use import <UNK> <UNK>
Reference: that's wrong, should be: return message;
Candidate: can be replaced with <UNK> <UNK>
Reference: this can lead to an npe, if firststoredentryforbookie is null.
Candidate: this should be the <UNK>
Reference: i am not positive but i believe it would make sense to copy the item here (or in getextractedstack before extracting), just so that if a crafting implementer queries what
Candidate: <UNK>
Reference: i know we talked about this, but just to verify, i am guessing  .to( "file://" + getstartingdir() + "?filename=${in.headers." + templated_string_header_rte_prop + "}&delete=true");  didn't work
Candidate: should this be specific?
Reference: if we're concerning ourselves with time elapsed, be explicit about what the start time is.
Candidate: please remove the method("post")
Reference: take out to a function
Candidate: please use <UNK>
Reference: wrong code -- must be else.
Candidate: should be replaced with <UNK>
Reference: needs a permission check here.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: put it inside the if.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: use getexceptioncode to check exception code.
Candidate: i don't need to check the <UNK> the <UNK> <UNK>
Reference: sorry one more thing, please make this guard >= 3.20.0 as the warnings will happen on 3.20 as well.
Candidate: you don't need to use <UNK> <UNK>
Reference: same again: reuse method
Candidate: i don't think we need to call the <UNK>
Reference: a field in the class?
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: why?
Candidate: why do we need need to the <UNK> here?
Reference: @cvrebert please leave tv.three here
Candidate: @xupyprmv let's move this line 91, in the thing)
Reference: @ekondrashev same here, let's declare exception being thrown.
Candidate: @exper0 let's use system.currenttimemillis()
Reference: maybe, if the member is not found, 'res' is better to remain model.getdeployproject()?
Candidate: rename to <UNK>
Reference: if protobufmetadatamanagerimpl needs the cache to be running, then it should start it in its own @start method. cachemanagerstarted is too late: if a cache manager is created with start=false
Candidate: i don't think we need to synchronize on the <UNK>
Reference: could use list.of(...)
Candidate: can be replaced by: <UNK> <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK>
Reference: debug/trace statements here would be very useful.
Candidate: please import?
Reference: i've added arrayutils.removeduplicate method to hide the ugliness.
Candidate: i wonder if iswindows() == <UNK> || iswindows() == <UNK> || <UNK> == <UNK> || <UNK> == <UNK> == <UNK> == <UNK> == <UNK> == <UNK> == <UNK> == <UNK>
Reference: nit: maps.immutableentry() would be a bit cleaner here.
Candidate: we should need to throw an exception if the exception is not found. if there is an exception, no need need to do we need need to do.
Reference: not sure if you're still working on this pr, but i think this todo is part of it. range should probably be a property of entity.
Candidate: why do we need to clone the properties?
Reference: why is this here? the join is not processed inside the semaphorecompletionservice
Candidate: talk offline. indicating that means that means that means that means that means that means that means that means that means that means that means that means that means that
Reference: character should be "char" <link_0> this is returning a char (primitive type) and that is why the "=="test works i think, if it was returning character (object wrapper for char)
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: are you planning to add an isinitialized() method on transactionmanager?
Candidate: the syserr should be be the <UNK> <UNK>
Reference: i'd rather avoid using continue and just do: if (vm != null) { vms.add(vm); }
Candidate: this should be the <UNK>
Reference: the if statement checks for event.getnewvalue() == null but then we do a event.getnewvalue().tostring(). seems like a risk for an npe...
Candidate: why do we need need to the <UNK> here?
Reference: how about renaming this to particleemitterdrawables? i know it's verbose, but i kinda like that over pedrawables.. i'm not sure about this one though.
Candidate: can we throw an exception instead of returning null?
Reference: why not compare size first?
Candidate: why do we need to check for the <UNK>
Reference: can't you properly support stream here?
Candidate: please use <UNK>
Reference: use getidentifier() insteand (applies to all changed enums)
Candidate: this should be <UNK>
Reference: is there a unit test for this as well?
Candidate: why do we need this?
Reference: if this is intended for human consumption, {>=, >, <=, <} would be preferred to {gte, gt, lte, lt}.
Candidate: can we use the <UNK> here?
Reference: null?
Candidate: why do we need the <UNK> insensitive here?
Reference: you have this lastrun which is ended in dispose. are there cases where lastrun could be non-null here before it is set to run? in that case, should the non-null
Candidate: i don't understand this matters, if you matters, this matters, this matters, but you don't need to evict if the is is the
Reference: i propose to explicitly add the mention of flow-build-info.json: "... prepare-frontend maven goal which generates 'flow-build-info.json' file prior to deploying ..."
Candidate: nit: you don't understand what the point of the contents of the contents of the contents of the contents of the rest of the
Reference: use curlies on split-line ifs
Candidate: this should be the fixture.
Reference: just in case, i would first check with instanceof
Candidate: the syserr should be be the <UNK> <UNK>
Reference: i think we should not cast here, but parametrize cache directly: verifiernode.<string, integer>cache(cache_name).get(entry.getkey())
Candidate: please remove the method("post")
Reference: please change the old names of variables "usersetmatcher" and "userremovematcher". thank you.
Candidate: please use <UNK> <UNK> <UNK>
Reference: why not do this at the start of the method - we know this before doing a directory listing
Candidate: do we need need to check here?
Reference: you might should take into account the loginstartuppage#priority field to order the results here.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: comparator should be customized.
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: you could just inline it here.
Candidate: why do we need the <UNK> here?
Reference: remove this line. doesn't make sense for a primitive value. what's happening here is that the primitive boolean is being auto-boxed into a boolean.
Candidate: i don't think we need to check for the <UNK>
Reference: seems we might use log.infof("found %d objects within testsuite-suite polygon.", cnt ) as well.
Candidate: magic number number number number number number number number number number number number number number number number number number number number number number number number number number number number number
Reference: just to make sure i understand .. this is getting the list of dam asset "folder" paths, and then traversing their sub-trees, collecting all the folders under them, which (the
Candidate: wouldn't it make sense to move this method to accept the parameter?
Reference: this won't ever trigger since getredis returns null already. the memory cache will also never contain a deleted key by construction.
Candidate: why do we need to check the <UNK> here?
Reference: this entire class will conflict with #3428.
Candidate: wouldn't it be nice to check the <UNK> <UNK> <UNK>
Reference: what is the error when you do: fields[1] = (userid == null)?"":userid; and don't do anything more.
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: since this method is not used, logging 'configuration reloaded' is misleading.
Candidate: this should be <UNK>
Reference: if (message != null && !message.trim().isempty()) { ... no need for those extra parentheses that only make the code difficult to read, and no need for "" either.
Candidate: why do we need need to the <UNK> here?
Reference: what about calling this class tcpsurefireforkchannel ? it is really bound to "tcp://127.0.0.1"....
Candidate: the syserr should be be the
Reference: maybe util.getshortobjectid() instead of putting 7 here?
Candidate: i don't think we need to throw an exception
Reference: i strongly recommend to use 16-bit dense array! the problem is, that on world generation, every block will be set to some value, so all memory gets allocated anyway. after
Candidate: why do we need to use the <UNK> here?
Reference: these have to be public? they are in same package as comparator and cell types.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: please add the constant
Candidate: i don't need to evict the <UNK> <UNK> the <UNK> <UNK>
Reference: since it would get converted into a maxsizesplithintspec in createsplit, could this create a maxsizesplithintspec directly? (does this also mean segmentssplithintspec is deprecated?)
Candidate: @unyoungwax, wondering if e1 { <UNK> }
Reference: public?
Candidate: why do we need the <UNK> here?
Reference: @cuenyad use enum in termid
Candidate: can we use the enum value of <UNK> ?
Reference: maybe use optional here instead of returning null
Candidate: can we return <UNK> <UNK> <UNK> ?
Reference: why systables is needed in this query?
Candidate: <UNK>
Reference: fix =
Candidate: i don't think we need to check if <UNK> { <UNK> } <UNK> { return false; } else { if (throwable { <UNK> { <UNK> { <UNK> }
Reference: why is this removed? the user could still specify a malformed url in the config screen, and now the error will be harder to find.
Candidate: should we purposely catch <UNK> <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: change to:  return new rulemembervalidator(this);  (see effective java, 2nd edition)
Candidate: why do we need need to the <UNK> here?
Reference: it might not be clear which value was the offending value, does it make sense to print out the 'pre-split' value?
Candidate: why do we need the <UNK> here?
Reference: i think this should be a reject rather than a conversion.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: does this one have to be public? as an extender of such annotation, i don't think this is something i would need to invoke directly and i'd expect the underlying
Candidate: this should be setemptyelement().
Reference: i guess it depends on what you are doing with the image. if you are doing center crop, yes. if you are doing center inside, no.
Candidate: you can use the fixture.
Reference: result = units.bytes.multiply(new biginteger(numberstring))  or?
Candidate: can we use the getconnection here?
Reference: the groupid rule used to replace - by .. this change has a new rule that replaces dashes by empty space. isn't that breaking what we used to do for
Candidate: this should be the <UNK>
Reference: assuming you create a temp user object with just an id, you should be able to use makeurlwithobject or something like that and then pass in the user object.
Candidate: the syserr should be the <UNK>
Reference: same, double de-ref
Candidate: i don't think we need to check if the is is the
Reference: do we need this?
Candidate: why do we need the <UNK> here?
Reference: why is this neccessary? the processes are already returned in a sorted list, as indicated by the sort_id constant passed as the third parameter to loaddata in the previous line,
Candidate: this fail()?
Reference: the thread was interrupted, i don't think we should be continuing on like nothing happened.
Candidate: should we log the exception here?
Reference: rename 'listeners'
Candidate: this should be the <UNK> (throwable <UNK> { return; }  if (throwable { return; }
Reference: thread-safety this is a poor construct to use for a thread-safe class. it doesn't save (that much) memory, and can be solved by using a volatile boolean set to false
Candidate: this should be setemptyelement().
Reference: it would be stronger to add assertion on comparison of studydetails.getcontacts().get(0) to the user details retrieved from workbench users table.
Candidate: rename to iu
Reference: this doesn't include all fields. use the parent class's hashcode as a basis and then incorporate this class's fields into the mix.
Candidate: please use map<> on the <UNK>
Reference: ...and use the (old signature) getvoxelscreensize here to avoid the arrays.stream(...).max().getasdouble()
Candidate: please use <UNK>
Reference: i don't see where this is throwing serveroperationexception. it throws its superclass, serverconnectivityexception.
Candidate: should we throw an exception?
Reference: @amisevsk might be more relevant to throw openshiftexception now ?
Candidate: why do we need the getconnection here?
Reference: you'll want to replace this with a call to getprimarystoragesize() to ensure that your updated logic is applied in both places.
Candidate: can we use the <UNK> <UNK>
Reference: you forgot to update metrics. metrics.updatenoderesponsemetric......
Candidate: typo: <UNK> -> <UNK> + <UNK> + " + entry.getkey(), + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: be careful of nullable fields!
Candidate: rename <UNK>
Reference: we also need to clear the cache when user switching occurs.
Candidate: should this be <UNK>
Reference: i do not like this defaulting logic. it does make sense if this is a lsh parsed by the ls backend from the query hints provided by the engine. but
Candidate: this should be repelaced e1 && <UNK> { return false; }
Reference: i don't think there is a use case for this, but let me know if you disagree.
Candidate: should we be the <UNK> here?
Reference: i think keeping this method is not a right design because setscrolltargetcallback is preferred to call in oncreate and should not be change in other states of activity / fragment
Candidate: this should be <UNK>
Reference: having an if/else block here would make this better readable
Candidate: why do we need the <UNK> here?
Reference: this may be confusing to people. why are params with the same name considered "equal"? what about the value? if some part of the code wants to treat these params
Candidate: please use object.equals as well
Reference: change method name to clickpreview
Candidate: why do we need to check the <UNK>
Reference: should we log channel information as well?
Candidate: what happens if <UNK> is null, then we should do we need to interact with the getcredentials
Reference: what is the purpose of collecting to a list while streaming? if this is required then please add a note to the source code.
Candidate: why do we need to tear down the <UNK>
Reference: exception will be logged twice.
Candidate: should we throw an exception if we throw an exception if <UNK> is null) { throw <UNK> }
Reference: this method need to sum the disks per domain, otherwise, if i have 1 domain and 5 disks, but space for only 1 snapshot, the check will pass.
Candidate: storagetype should be setemptyelement().
Reference: a dir picker seems good to me
Candidate: what is this null?
Reference: i get a warning at this cast from object
Candidate: why do we need the <UNK> here?
Reference: what is acc ? please use full name.
Candidate: why do we need to check for the <UNK>
Reference: use getlundao() instead of dbfacade.getinstance().getlundao(). also, why use an empty string and not just null?
Candidate: consider touching this thing)
Reference: are you sure the object comparison is the same as primitive value comparison?
Candidate: i don't think we need to check if the is is the
Reference: this should be false. is this a typo?
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: these two updates is useless, the flow runs in transaction, the changes are not seen until transaction is committed, what is a reason to perform unneeded operation? these makes code
Candidate: if the is is the <UNK> the <UNK> is the <UNK> the <UNK> is the
Reference: while (!replaycomplete) is better if it does not break the logic (as i can see it does not)
Candidate: <UNK> costs the <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs the <UNK> costs the
Reference: i would keep the condition on != null as the list can be set to null...
Candidate: we should throw an exception if (state != null) { throw new <UNK> }
Reference: i would keep this pattern as it was, it's easier to see what's part of the assertion and what's not. if there are other cases please revert them too.
Candidate: why do we need to check the <UNK> here?
Reference: i though only the number of nodes in the cluster would originate ispn-8134
Candidate: do we need to <UNK> the <UNK> <UNK>
Reference: is there a way to check whether a variable is *effectively* final? because i'd like this to work with locals and locals are rarely explicitly defined as final.
Candidate: if the == null) { return <UNK> } <UNK> } <UNK> { return false; }
Reference: why is this check ?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: what's the different between this and testconstraintsolverforcebacktrack
Candidate: why do we need this check?
Reference: locale class doesn't have "zh_hans", so i guess this check is correct.
Candidate: should we use the <UNK> here?
Reference: timeout is ignored here
Candidate: why do we need to check the the <UNK> <UNK>
Reference: do we need to make a copy of groupbycolumns?
Candidate: why do we need to check for the <UNK> ?
Reference: could you move the "2f" into a constant?
Candidate: should we be <UNK> to <UNK> the <UNK> <UNK>
Reference: child
Candidate: spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter spatialdimensiondelimiter
Reference: can we have a similar asc ii graph for this test case as well? thanks a lot in advance!
Candidate: <UNK> *= 2;
Reference: given consumerproperties is always non-null in this class, may be we can do !consumerproperties.isempty() here.
Candidate: this should be the <UNK>
Reference: whenever you switch an assert from testng to jupiter, you need to make sure the "expected" and "actual" variables are swapped. otherwise the error messages will be wrong when the
Candidate: i don't think we need to synchronize on the <UNK>
Reference: i can't understand why this exists. please check if it can be removed.
Candidate: lambda?
Reference: i would argue that we don't want to start with an invalid configuration. maybe catching these exceptions is not needed?
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: i believe you don't actually need to instantiate a new sessionmodel here - it can just be sessionmodel sessionmodel;, or just declare it as part of line 410 sessionmodel sessionmodel
Candidate: please remove the <UNK>
Reference: how can this work? don't they all have the same name (i.e. the category name)?
Candidate: should we log the error message in messages.properties ?
Reference: this conditional in the else clause is probably not needed since we're already in the else case, right?
Candidate: why do we need to use the here?
Reference: why we are choosing int? wouldn't it confuse users?
Candidate: why do we need to use <UNK> here?
Reference: rename to propname maybe switch with 'fullkey', i.e. rename fullkey->propname and this here to key then
Candidate: i don't think we need to check the if the is is skipped, <UNK> is skipped, <UNK> is skipped, then we don't need to check the
Reference: please rename to script
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: there is no reason to have this isoptional variable - it only complicates reading.
Candidate: please use syserr
Reference: don't worry about it, but i think this whole method is indented one _tab_ too far
Candidate: why do we need to use the here?
Reference: any reason this doesn't use addall as well?
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: all the subqueries will become never-lazy now. does not look like a correct fix.
Candidate: please use <UNK>
Reference: the extension could be even something else even it is minor thing, i have seen it for some rare cases ;)
Candidate: why do we need to check for the <UNK> <UNK>
Reference: just thinking and maybe a good improvement is to make studyinstance in middleware retrieve a boolean indicating if the instance has a fieldmap created or not, so you avoid querying
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: the dialog is a big short in height after you switch to remote. since we don't create the remote composite by default, we don't use its height hint at the
Candidate: should be overridden with the negation
Reference: add a message here?
Candidate: should we use the exception here?
Reference: expected 2 nodes but was:  + nodes?
Candidate: why do we need the <UNK> here?
Reference: extract this to a dedicated method.
Candidate: this don't need to check the <UNK> the <UNK> is the <UNK> explicitly)
Reference: the logic you want is rather "crashlytics on devices, not-crashlytics on the emulator, debug-vs-release is not a factor". also, this needs to be done at all entry points to the
Candidate: please remove the method("post")
Reference: add null-check for inputstream.
Candidate: why is this isempty()?
Reference: it's late and i'm tired so i could be totally off on this but i feel like this could be done in a single pass and save all the conversions
Candidate: this should be the <UNK>
Reference: i think line 121 should change <= to < for comparison. suppose max-solr-results = 10, and numfound = 61, so results will show in 7 pages. when pagenumber=5 (it is
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: please double check. i am not sure(!), but stored.equals(share) may be what you are looking for. this compares references.
Candidate: i said said said said said said said said said said said said said said said said said said said said said said said said said said said said said
Reference: also, this should be consolidated into the same validation: new storagepoolvalidator(getstoragepoolforvds()).isup() // also checks existance :-)
Candidate: beware that the cda is convenient in regards to diskvalidator sp
Reference: these 2 calculation won't change during the lifecycle of the class, i think these could be moved to constructor and the value stored as fields
Candidate: i don't understand this matters, if we matters, but i don't understand why, but it matters, but i don't understand why, it matters, but i don't understand why, but i
Reference: you don't need to override this since you're already enforcing the 'altered' default in the getlimit(string) method.
Candidate: why is this <UNK> <UNK> <UNK>
Reference: image and title can be done in the parent class
Candidate: this should be the <UNK>
Reference: @jonathangiles do we have a guideline about when to return an empty collection and when to return null? i noticed this also in: <link_0> and a few other places. i
Candidate: please use <UNK> <UNK> <UNK>
Reference: req: after this deletion, rebalance_protocol defined on line 66 is not used anymore and can be deleted, too.
Candidate: unused line.
Reference: does it make more sense to use gb instead of us here since payment initiation is more of a gb product?
Candidate: why do we need to mock here?
Reference: the idea here is that we expect the source of overloading is a few bad actors hammering, so this will effectively throttle them?
Candidate: why do we need to here?
Reference: ![major](<link_1> 'severity: major') reduce this lambda expression number of lines from 27 to at most 20. [![rule](<link_2>](<link_0>
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: for example the thread came to this if block and the same moment another thread will acquire connection for that same slot. the node exists in the zk but not
Candidate: why do we need to here?
Reference: interruption to authentication
Candidate: should we move this to debug level?
Reference: can the instantiation of the objects in the equals method be broken out of the if condition? there's a lot going on for a simple equality check that would be
Candidate: should this be the <UNK> name)?
Reference: perhaps sledgehammer to fly, but we could have content-type contract on the server, which is disabled for prod. ex. retrofit-bodytype: com.foo.myclass
Candidate: can we use the getconnection here?
Reference: more generally, maybe a test with an expected error would be good, to show that the expected type is inferred.
Candidate: do we need need to check here?
Reference: formatter
Candidate: rename to <UNK>
Reference: column indexes are 1-based - otherwise this is a definite improvement!
Candidate: iterable<integer> = <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK>
Reference: keep its own check
Candidate: this should be the islocal <UNK>
Reference: here, publishedfullregistry.readlock needs to be taken.
Candidate: this syserr should be be the <UNK> <UNK> setspeed
Reference: call equals on constant
Candidate: operands
Reference: to loop var also other occurances below
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: also, a test-case which proves the problem would be very helpful.
Candidate: why do we need to use <UNK> here?
Reference: could be "return this.getruntimeinfo(engine, connectortopology, googledriveconnectiondefinition.source_class)" to avoid code redundance. (ok it's only two lines...)
Candidate: the syserr should be be <UNK>
Reference: since this is just for jackson, you can make it private and then get rid of the @deprecated if you want
Candidate: this should be <UNK>
Reference: forgotten or left intentionally?
Candidate: should we throw an illegalargumentexception instead of returning null?
Reference: i would consider wrapping completing the future in a finally block to ensure it's always set, imagine close of role is refactored and then throws an exception..
Candidate: if (args.length == null) { throw new <UNK> }
Reference: put and post should have different behaviours: post will return conflict if the entity with the same name already exists, while put will replace the entity. take a look at
Candidate: why do we need this?
Reference: i think i'd rather see the properties written out here than defined as constants at the top of the class. the uuids make sense as constants at the top of
Candidate: please use <UNK>
Reference: add checking for null here. you can pass null as debugconfiguration.
Candidate: i think this the <UNK> costs the <UNK> costs the <UNK> is the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: if the request failed, is this.reponse also null? is the warning then still appropriate?
Candidate: why do we need to mock <UNK> here?
Reference: can we pre-compute this value instead? the tokens are immutable and set in the constructor.
Candidate: why do we need to check the <UNK> <UNK> <UNK> ?
Reference: i'd prefer to see more specific assertions for these block types. consider having two separate tests, one for unsupported block types that result in an unsupportedblockstrategy, and one for block
Candidate: rename to <UNK> <UNK> <UNK>
Reference: this function should only be called if metrics are enabled.
Candidate: should we throw an exception here instead of returning null?
Reference: move this
Candidate: should we move this to <UNK> mapping?
Reference: asserttrue(pce.getmessage().contains("bla bla bla"))
Candidate: do we need to catch <UNK> here
Reference: move this closer to other filters.
Candidate: please remove the method("post")
Reference: this should probably use connectorid.getcatalogname() for the message. @dain should take a look since he recently changed all the connector id handling.
Candidate: why do we need the <UNK> here?
Reference: what does this 1 represent? is there an enum holding this value you could reference instead?
Candidate: should we be the <UNK> here?
Reference: could you, please, explain, why verification the command palette had been removed?
Candidate: you don't need to use the
Reference: no need for getinstance(), the container can be passed
Candidate: this should be the <UNK>
Reference: should just be checknotnull(globalnames, ...
Candidate: why do we need to check for <UNK> here?, if it is the <UNK> <UNK>
Reference: just use return iterables.filter(getmembers(), mongodbrouter.class);
Candidate: why do we need the <UNK> here?
Reference: @vilchik-elena that works only if the default charset is standardcharsets.utf_8. why not make highlightxml accept a java.io.reader and use a java.io.stringreader here?
Candidate: should we use the <UNK> here?
Reference: default should be false.
Candidate: this should be <UNK>
Reference: i don't think this will help. the 'timestorun' number requires all of the running to pass. if any one of the running failed then the test will fail. increasing timestorun
Candidate: why do we need to <UNK> here?
Reference: if you add the new json they won't be published until we deal with the front-end of this project, which seems more reasonable to me.
Candidate: please use the syserr
Reference: ugh, this is gross. can the unit test just set the property accordingly so you don't have to couple the product code to the tests?
Candidate: (after "http" "+ catch case case case case case case case case case case case case case case case case case case case case case case case case case case
Reference: is this method called at another location too? i'm just asking because you didn't remove another call to updatelibrary
Candidate: why do 49
Reference: formatting here is weird too
Candidate: why do we need need to the <UNK> here?
Reference: we would never do multiple actions at once. so make this an enum that selects the operation mode, e.g.: enum operation { begin, continue, skip, abort; } and have the
Candidate: i don't think we need to check the <UNK>
Reference: this is a nice fix and makes sense to me. but i'm missing why you had to pass the zookeeperclient to this class to accomplish that?
Candidate: i don't think we need to check the <UNK> the <UNK> is the
Reference: please make the error message more explicit.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: we're updating the selected route while the method claims to update the collection of available routes. i'd rather move this down to #updateroute or get both methods unified for added
Candidate: this should be the <UNK>
Reference: suggestion string[] splitthread = channels.split(":", 2);
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: same here, how passed candoaaction().validateinputs() ?
Candidate: why do we need to use the <UNK> here?
Reference: please add a todo here. we may need to do something smarter here by using a different kind of loader. destroying the cached data is not something we want. what
Candidate: this should be <UNK>
Reference: again should be able to use resources loading instead of a full path?
Candidate: please import?
Reference: class name escaping
Candidate: why do we need the <UNK> here?
Reference: if you touch this class+method anyway would you mind modifying the underlying design in a way not to return null value? it would be quite error prone e.g. in case
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: is uri.getpath() not sufficient?
Candidate: we should need to use the <UNK>
Reference: oh wait, based off the convo, shouldn't this message change?
Candidate: why do we need to here?
Reference: clusteringdependentlogic == null is always false since clusteringdependentlogic is never null
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: id doesn't make sense to validate the existence of host.id or host.name right after you checked it in the 'if' statement. you don't need this validation.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this either needs to be protected or exception needs to be public.
Candidate: should we throw an exception?
Reference: shortcut for this is, context.getcurrentaddressvalue();
Candidate: the syserr should be be <UNK>
Reference: you can remove the unused variable accesresultcode. that also fixes the typo in its name ;-)
Candidate: please use <UNK> <UNK>
Reference: you should pass a more meaningful name for the orchestrator. something like "elasticsearch query orchestrator for backend " + name.
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: i guess i think a . before left and right would be a bit more readable.
Candidate: can be simplified to <UNK>
Reference: make this string a constant
Candidate: should we be the exception here?
Reference: @happy-neko same here, let's use indexoutofboundsexception with custom message.
Candidate: @happy-neko let's use indexoutofboundsexception message.
Reference: should these test be really removed ? are they moved somewhere else ? should there be some replacement ? e.g. now there is no need to check the functionality (integration:
Candidate: i don't think we need to throw an exception if the exception occurs, so we will throw an exception if invoked?
Reference: i think expectedvalue is second argument. if "3" is placed in proper place, there is not much requirement on putting custom message for this assertion, since the default one will
Candidate: why do we need the <UNK> here?
Reference: move all strings uses more then once to a constant.
Candidate: do we need to check once for path.
Reference: i'm not sure these labels are necessarily better than ones that reflect "onorafter", "onorbefore", and "ondate".
Candidate: @exper0 use <UNK> objects.tostringhelper() here.
Reference: another instance of the predicate discussed previously
Candidate: can be replaced with <UNK> <UNK>
Reference: i find the old way makes this easier to read.
Candidate: why do we need the <UNK> here?
Reference: why did the whitespace change.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: overall the code is more compat but less straightforward and more obscure. the recurrent use of the form: x = y == z ? a:b ... makes the method hard
Candidate: can we use the <UNK> here?
Reference: suggestion set<constraintviolation<remotedatasetdef>> violations = validator.validate(datasetdef,
Candidate: please use <UNK>
Reference: why doing this ?
Candidate: why do we need this check?
Reference: if (getvm().getvmpoolid() != null) ?
Candidate: this should be the <UNK>
Reference: style nit: we don't use braces around single line blocks
Candidate: why do we need the getconnection here?
Reference: @vilchik-elena linkedlist is not my default choice for a list.
Candidate: can we move this logic into the method?
Reference: log deviceidentification and devicelifecyclestatus as well
Candidate: ![major](<link_1> use the exception statement for the <UNK> [![rule](<link_2>](<link_0>
Reference: ugh. if the underlying stream isn't a bufferedreader, this won't be efficient. with a bufferedreader you should be able to mark(), read a char[], scan that for \n, copy into
Candidate: why do we need to <UNK> the <UNK> here?
Reference: these should be the same triggered ability, which i know is an annoying thing to do. i'm actually wondering if there should be a combined triggered ability class for this
Candidate: newing costs a few lines around) clazz,
Reference: please use notimplementedexception()
Candidate: use notimplementedexception()
Reference: how does this line work? it looks like it's a loop that doesn't do anything
Candidate: why do we need need to the <UNK> here?
Reference: for example in this case i think you would say suggestion contains(extensionlist.lookupsingleton(nonavigatorsomefactoryinstalleddescriptor.class)));
Candidate: why do we need need to the <UNK> here?
Reference: please put the creation of timestressorcompletion to else branch (you can omit the variable and return new instance right away).
Candidate: why do we need the <UNK> here?
Reference: entires.putall(map)?
Candidate: this we remind me nervous if the <UNK> is the <UNK> the <UNK> is the the <UNK> <UNK>
Reference: ditto. the string can be defined as a constant variable.
Candidate: can be replaced with <UNK>
Reference: i suggest to put (i / half) (i.e. for all i < half it will be 0, for all i >= half it will be 1) into "feat1" instead of
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: please, write it in one line: @override public any reason to copy-paste implementation from mapkeytoprimaryandbackupslist?
Candidate: min/max should be setemptyelement().
Reference: should go into @after method to make sure it clears authorizations even if an assert statement fails.
Candidate: nitpicking: is this needed as far as far as far as far as far as as far as far as far as far as far as far as far as
Reference: it actually is equivalent to kill. there is no waiting for undeploy etc.
Candidate: the syserr should be be the
Reference: what is this method meant for? what is the "intramurals" username?
Candidate: should we throw an exception?
Reference: this is the same as in jiraupdatewriter. i suggest to put reject exception creation to validaterequestbody() method. here, you may leave only a call to validaterequestbody(json);
Candidate: this should be the subdir permission?
Reference: ha. can you actually change all these to assertequals(1, expected.geterrormessages().size()) ? ... not sure why i didn't do that in the first place.
Candidate: do we need need to be used?
Reference: why not to inject this one as a dependency of the class ? (same as dbschedulerutilquartzimpl)
Candidate: if we is the <UNK> <UNK> is the <UNK> the <UNK> is the <UNK> the <UNK> <UNK>
Reference: why this separate block for schemaprojectorexception? isn't that just a copycatexception that could be handled by the existing block? or are you throwing the exception because this is effectively unrecoverable?
Candidate: suggestion <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: this should be capped at max, so: byte[] nb = new byte[math.min(buf.length * 2, max)];
Candidate: i don't understand what if the is is is the the <UNK> the <UNK> is the the <UNK> <UNK> the <UNK> <UNK> { <UNK> } } } }
Reference: variable name unclear, using the singular "order" to refer to a list of orders.
Candidate: can you use <UNK> name)?
Reference: whatever you did here don't commit this change
Candidate: this should be <UNK>
Reference: could also "copy" the attributevaluefilterpattern, it's immutable.
Candidate: please use <UNK>
Reference: a more proper abstraction would not expose the map interface.  public string getnamebyemail() { // .... }
Candidate: team can be able to be able to be able to be able to be able to be able to be able to be able to be able to generate
Reference: better use .isempty()
Candidate: i don't think we need to check if <UNK> { null) { <UNK> } <UNK> { <UNK> }
Reference: does this part actually do anything? it looks like you're assigning a new pagetitle to a local variable, but this doesn't replace the actual list item with the new title,
Candidate: this should be the feedid
Reference: looks like you will need to add ability search person on server
Candidate: the syserr should be be <UNK>
Reference: this should fixed in master
Candidate: if oldvalue is is missing" { ... } else { if <UNK> { <UNK> }?
Reference: what if host already in non-operational status? shouldn't we check it and move to unknown in this scenario?
Candidate: if the == null) { return; } <UNK> } <UNK> { return; }
Reference: to be consistent with the previous behavior, i think you should use files.createdirectories (since you are replacing mkdirs). this will create any parent directories that don't exist.
Candidate: interruptedexception is interruptedexception not interruptedexception
Reference: it doesn't seem like you do anything with the remaining typeids.
Candidate: can be replaced by: <UNK> <UNK> { return <UNK> } else { return <UNK> }
Reference: do we have to always create v2 clients even if i am using only v3 ?
Candidate: this should be the <UNK>
Reference: newchild
Candidate: why do we need need to check the the <UNK> <UNK>
Reference: are you so sure that no jenkins component is logging secrets at fine or below?
Candidate: should be be <UNK>
Reference: perhaps make id optional for mockscmsourcebuilder too.
Candidate: why do we need to use <UNK> here?
Reference: i think the docs are wrong here  they say fragment queries match if "any part of a dimension value contains any of the values specified" but the code matches
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: i missed bounded type parameters already :-) i don't know if it would be better to create separate versions of createpoint methods? like this?  protected points.point createpoint(long timestamp, rollup
Candidate: why do we need to check for the <UNK>
Reference: perhaps it would be better to just connect the jschsession within the lock above (and add a catch); then the connect within sftpsession would be a no-op for shared sessions
Candidate: can we make this the specific?
Reference: is debug the appropriate log level for these? all apps i've seen deployed have everything is set to info or higher.
Candidate: if the != 0) != 0) 297 is never happen, so that is never happen, so that happen, to happen,
Reference: can we move startup of the native protocol for until after we've finished setting up traces and finished startup? this should always be the last step.
Candidate: should we throw an exception?
Reference: there are some concurrency issues: you may observe overshadowedsegments from a previous run. i think it would be easier to add isovershadowed field to datasegment directly in this pr because
Candidate: <UNK> *= 2;
Reference: iterators.transform ?
Candidate: can we use the <UNK> <UNK>
Reference: what's the reasons for that initializations here? shouldn't all that ones not be done implicit already?
Candidate: this should be the get* the get* the get* the get*
Reference: don't need to have this in a separate function if it's just a oneliner, imo.
Candidate: this should be the <UNK> <UNK>
Reference: i _think_ that should be ok too. should it skip the sequence limit entirely if limit is the default long.max_value?
Candidate: why do we need to synchronize on the constructor?
Reference: variable can be removed
Candidate: this should be the <UNK>
Reference: debugging println that should be removed?
Candidate: please use <UNK> <UNK> <UNK>
Reference: here it should be "perform", no?
Candidate: can we move this logic into a separate method?
Reference: checknotnull constructor params ditto for other constructors
Candidate: this should be <UNK>
Reference: unless i'm missing something, this doesn't look like it properly handles hbase's bizarre "last append wins" behavior
Candidate: please use syserr
Reference: ![major](<link_0> unknown method [![rule](<link_1>](<link_2>
Candidate: can be simplified to <UNK> <UNK> ?
Reference: a safe rule of thumb while starting any activity is to first check using packagemanager and intent.resolveactivity() whether some activity exists to handle that intent. i think instead of try-catch,
Candidate: do we need to hide the *= 2;
Reference: add newline before return.
Candidate: add newline before return.
Reference: used only once, do we need it at all? why such simple actions can't be inlined?
Candidate: this should be <UNK>
Reference: we only need to load the capture queue once. could this line go before the for loop?
Candidate: i we remind me nervous if we expecting the the exception in the worker and then we don't need to do we need need to do we need need to
Reference: just writebytes(content.array()) back to my original, somewhat broken version ;)
Candidate: why do we need the <UNK> here?
Reference: this adds the attribute transformers to the subsystem resource, which isn't where they should be - they are on the xa-datasource=* child resources. so: i'd do:  parentbuilder.createbuilder(.....) .addchildresource(pathelement.pathelement("xa-datasource")) .getattributebuilder()
Candidate: please remove the method("post")
Reference: why is this?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but i would be the
Reference: what if it's not the right instance? shouldn't we throw an unsupportedoperationexception? or, is there a way to just create it from the factory, so we know it's always the
Candidate: should this be <UNK>
Reference: what is the purpose of this method?
Candidate: can you use <UNK>
Reference: tooltips -> usetooltips
Candidate: why <UNK> <UNK> <UNK> <UNK> <UNK> size?
Reference: new linkedhashmap<>();
Candidate: why do we need the <UNK> here?
Reference: should this be pulled out into a separate pr?
Candidate: i don't think we need to throw an exception
Reference: so a fun thing i learned last week is that the tostring() on typeelement is not standard between compiler implementations. in eclipse it will give you a string like "class
Candidate: why do we need to use the <UNK> here?
Reference: does this work, it looks like you're asking the servicedao for workflows when it seems like workflowdao is what i would have expected. tests are passing though ... which might
Candidate: we should need to do we need to do we need to do we need need to do we need to do we need to do we need to the
Reference: there is a fluxutil method to handle pulling a response value out, i believe it is called tomono. should use that in all the places update.
Candidate: this should be <UNK>
Reference: you can just do  evalsuccess = instance.comparison.equals(is_not);
Candidate: i don't think we need to check if the is is the
Reference: would it be easier to read like this: java if (!config.islocal() && config.shouldauthenticate() && config.isstartpageabsoluteurl()) { return new bootconfigvalidationresult(false, "cannot authenticate using an absolute url for start page."); } if
Candidate: we should need to evict the <UNK> to the the
Reference: makes sense to use fassociatedvalue instead of getassociatednumericalvalue() since it makes the code more explicit.
Candidate: i don't understand why, but it matters, but if you do, can you move this to the <UNK> <UNK> <UNK> contents?
Reference: you need to make sure the ehcacheactiveentity.destroy method triggers this as well.
Candidate: should we be the <UNK> here?
Reference: please remove useless whitespaces.
Candidate: why do we need to the the <UNK> permission?
Reference: why filtering out case variables?
Candidate: this should be the <UNK>
Reference: why is this code copy-pasted? since the 2 classes inherit from the same base class, it can be put there in a method.
Candidate: should this be the <UNK>
Reference: does a list of futures always be completed in the order they are added?
Candidate: the syserr should be be the
Reference: inline with ifpresent to emphasize there isn't any complex if logic in this method:  searchfrom(plan).where(applynode.class::isinstance) .findfirst() .ifpresent(applynode -> { throw error(....); });
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: explicitly set the encoding ?
Candidate: why do we need the <UNK> here?
Reference: should we close the reader here? or it will be used for inputchannels later?
Candidate: do we need need to do the tear down the <UNK>
Reference: \r.getbytes(charsets.utf_8)[0] is a really expensive call. it goes through the charset codecs. just do a bytes[offset + numbytes -1] == '\r'.
Candidate: why do we need the <UNK> here?
Reference: shouldn't stripformat be used since stripessentialsformat does untranslated color codes afaik? suggestion final string strippednick = formatutil.stripformat(user.getnickname());
Candidate: should this be the <UNK>
Reference: let's use underscore so it's consistent with session properties
Candidate: this should be the <UNK> <UNK>
Reference: i've been putting some thought into this method, and i've got a question for you. while the saml spec allows multiple attributevalues for a single attribute, it also encourages that
Candidate: please use <UNK>
Reference: please log debugging data here.
Candidate: should we use the <UNK> here?
Reference: why new line? you can leave it on the previous line, like:  new runnable() { } .run();
Candidate: this should be <UNK>
Reference: this seems a bit large, 512 would be better
Candidate: should we schedule() here?
Reference: why did you not use a objects.isnull(amnotnull) here like on other places and changes?
Candidate: rename <UNK>
Reference: why this change?
Candidate: you can use assertj's via: <link_0>
Reference: collections.sort(ops, comparator.comparing(operationinfo::getid))
Candidate: this syserr should be a syserr
Reference: string.valueof(string).tostring();? why not just return the string, it's final.
Candidate: should this be <UNK>
Reference: this returns a boolean - you need to check if the file was actually created.
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: why a null check here, but not in previous test classes? can this one be null more than others?
Candidate: <UNK> <UNK> <UNK> <UNK>
Reference: namespace is wrong here.
Candidate: please use <UNK>
Reference: that said, i have no objections to this pr.
Candidate: please use <UNK>
Reference: please use static imports. the compiler should be able to tell assertthat(optional) from assertthat(comparable).
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this should first read the value, remember it and re-set - either on teardown or in the finally block. otherwise the test may change the environment.
Candidate: why do we expecting the exception?
Reference: i don't understand why this parser is needed. isn't taskname simple string?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: move the if (id == null) before defining isfactory to avoid getting it if not needed
Candidate: why do we need this check?
Reference: make it final
Candidate: i don't think we need to check the <UNK>
Reference: iostatisticsstore.tostring() does that too; what you get through the logging api is resilience to failures
Candidate: why don't need to override the annotation here?
Reference: can use @test(expected = ...), see above.
Candidate: why do we need need to @test(expected = <UNK> <UNK> ?
Reference: maybe don't have to copy if affinityconfig.affinity is a map<string, set<string>>?
Candidate: can we move this into the method?
Reference: null parameter checks should always use "assert.checknotnullparam" if possible.
Candidate: remind the streaming one...
Reference: please conform to one naming standard i.e. using singular or plurar form for classes and methods.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: (nit) move the declaration into the for look for better readability
Candidate: if <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: should those hashcodes be hardcoded ? they depend on hashcodebuilder.tohashcode() implementation.
Candidate: please remove the method("post")
Reference: two map creations + putall. i believe the code should pay more attention to that ... even if it means using the map in a side effect way as an
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: do we use p after this? maybe we can remove eventbinlogposition as well?
Candidate: we should need to do we need need to do the tear down the <UNK>
Reference: might be better to go with msg=get-all-last-seen-insights-fail-insight-missing rather than repeat debug. it just so happens that for error it makes sense to have the error=xxxxx key.
Candidate: can be replaced by: <UNK> -> <UNK> .collect(collectors.tolist());
Reference: how about a linkedhashset to keep the order stable?
Candidate: i don't understand this matters, this matters, if you matters, this matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but
Reference: shouldn't this be a getandset(false)?
Candidate: this should be the <UNK>
Reference: there is no ifpresent and orelse code here. - can't we use int and -1? - this would be closer to the data model of linkedfiles.
Candidate: i don't think we need to use the exception here as well.
Reference: i think it makes more sense if the extra parameter was read from an fvclassifier rather than required at any ofswitchacceptor. it would also make the feature more like other
Candidate: why do we need to assert that the <UNK> is the <UNK>
Reference: can you double check whether partcount==1 case is handled fine here?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: use closer here to make sure both resources had a chance to be closed.
Candidate: why do we need this?
Reference: personally i would prefer to create a real ratelimiterkey rather than use a mock here given it's simple to do, but not a big deal
Candidate: why do we need to use the <UNK> here?
Reference: in the case where properties == null shouldn't you retrieve the existing application properties and use those?
Candidate: i don't think we need to the the <UNK> <UNK> <UNK>
Reference: can we update method isauthzclient, add getondemand logic in method isauthzclient?
Candidate: <UNK>
Reference: obviously just a nit: i think this can be l.e(caught) or l.e("foo", caught); since this is a test should we just fail?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: just in case you intended to have immutable class java.util.data is mutable class. you can check it here: <link_0>
Candidate: do we need need to use <UNK> directly?
Reference: please prepare for the internationalization with messages.properties. example: - <link_0> - <link_1>
Candidate: use <UNK>
Reference: shouldn't 50 be a constant?
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: in general the updated() method is meant to be used for static system configuration like ip addresses of gateways and stuff. the creation of concrete readers should only be done
Candidate: can we be null?
Reference: so, here's the big problem i see with this approach. you've chopped the request for clearing status into many requests and for each of these requests, you load the complete
Candidate: this should be the <UNK>
Reference: externalize
Candidate: i would keep the syserr
Reference: same, as above... use dataset.xml instead
Candidate: why do we need to use the <UNK> here?
Reference: @wangqiaoshi if else logic looks redundant. is it possible that we just move projectloader.uploadprojectproperty(project, prop) outside of if else logics ?
Candidate: please use map<> on the same as above.
Reference: unless i'm mistaken, this isn't strictly correct. the equivalent behavior would be achieved on legacy slaves if we discarded when initial-load is 100, and rejected otherwise.
Candidate: should this be null? if we { null) { throw new <UNK> }?
Reference: change to istructuredselection
Candidate: please remove the <UNK>
Reference: null parameters is a runtime problem and i believe it should be kuraruntimeexception. you can use preconditions static factory methods container class for such conditions.
Candidate: why do we need need to the <UNK> here?
Reference: this omits the critical functionality in #9: allowing scripts to interpret results themselves.
Candidate: we should need to check for the <UNK> the <UNK> is the
Reference: can we split this as follows:  final storequeryparameters parameters = (storequeryparameters.fromnameandtype(keyvaluestore, queryablestoretypes.keyvaluestore()).withpartition(numstatestorepartitions + 1); final invalidstatestoreexception exception = asserthrows( invalidstatestoreexception.class, () -> storeprovider.getstore(parameters) ); assertthat(exception.message(), equalto("..."));  and remove
Candidate: why do we need to use the here?
Reference: filedtype::tomap
Candidate: should this be <UNK>
Reference: legacy_account_id and legacy_container_id are also defined in blobproperties. lets have the declaration in one place only and let others use the same.
Candidate: should we use the <UNK> properties?
Reference: suggest having a second network - one with transport_wifi - on top of the vpn you already have.
Candidate: this should be the subdir on the end of the buffer.
Reference: will it be possible to extract this into method and cover with unit test + doc (the logic is not transparent imo)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: better to explicitly check default_state_model_def here. for the other cases, shall throw an exception the earlier to better.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: the transform should never ever return null. if something changed we need to unchange it. #getrule(...) should throw a notfoundexception if the ruleid isn't present in the database. the transform.apptorest
Candidate: please use <UNK> <UNK> <UNK>
Reference: nit: i'd prefer to push the spans into a collection and verify after. as written this will pass if the acquirelimiter span is created twice (also true of the previous
Candidate: why do we need the the payload?
Reference: retain the original class name. i see no need to change it.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: i don't think we should use getcontext() we should use getactivity(). what do you say @droidchef
Candidate: this should be setemptyelement().
Reference: i think these calculations can be simplified like this: java double pitchradians = math.toradians(location.getpitch()); double yawradians = math.toradians(location.getyaw()); double verticalmultiplier = cos(pitchradians); double x = verticalmultiplier * sin(-yawradians); double z
Candidate: why do we need to use the <UNK> here?
Reference: values("a")
Candidate: <UNK> evidence, <UNK> overflows?
Reference: in fact, i would return all profiles. something like: commonhelper.tostring(this.getclass(), "profiles", getprofiles());
Candidate: @exper0 let's use try-catch-fail
Reference: do you need to lock on both calls? i would try to extract locking in a helper method so it would interfere with mysql startup.
Candidate: the syserr should be be the
Reference: return status.backup_failed.equals(status) || status.restore_failed.equals(status);
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: suggestion checkargument(key.length == 32, "key length should be 32 bytes, but is " + key.length + " bytes");
Candidate: should we check if <UNK> != null) { return; }
Reference: i don't think that addresses my concern about having a good error message if an unexpected exception is thrown. i think being explicit provides a cleaner, more obvious and easier
Candidate: please use <UNK>
Reference: in other classes we throw unsupportedoperation
Candidate: should we throw an unsupportedoperationexception instead?
Reference: nit: could combine into (taskconfig.getcommand() == null != jobconfig.getcommand() == null) and say "command must exist in either job or task, not both".
Candidate: if <UNK> == null) { throw <UNK> }
Reference: you don't need to remove() since it would be replaced in the following put().
Candidate: i don't think we need to do we need to check whether the <UNK> is the <UNK> the <UNK> is the software <UNK> but i don't think we need to
Reference: don't need to access iterator, just: for (long long1: queryfactory.tuplequery().gettuple2e1listraw(coretupletypes.viewapplicability, branch, applid.getid()) { ... }
Candidate: why do we need need to the <UNK> here?
Reference: relying on the enum ordering seems scary. could we instead java double toperfrom = unitto.convert(1, unitfrom) if (toperfrom == 0) { toperfrom = 1 / unitfrom.convert(1, unitto) } return valuefrom
Candidate: this should be the <UNK>
Reference: use shellisavailable
Candidate: please shellisavailable(this)
Reference: here, it could be simply return queue.peek(); (avoiding the redundant isempty check).
Candidate: please import?
Reference: this is a check of the argument. annotate with @nonnull and let static code-analysis handle this
Candidate: should we throw an exception?
Reference: just make getlatestlayout return a layout, if its null then return a dummy layout with -1 epoch. then in fetchlayout you can wrap this with a future and return.
Candidate: can we use the getconnection here?
Reference: too much duplication with the previous method.
Candidate: you don't need the local variable, node node node creates node node node node node node node node node node node node node node node node node node group creates
Reference: we should be able to use the writeunsignedint method from unsignednumeric class.
Candidate: why do we need the <UNK> properties?
Reference: i would prefer a warning and going with the default value then - which means that the runtime can easily recover from the invalid config value.
Candidate: why do we need to check the <UNK> here?
Reference: ![major](<link_0> define and throw a dedicated exception instead of using a generic one. [![rule](<link_2>](<link_1>
Candidate: why do we need need to check the <UNK> here?
Reference: reusing fcontext in the other examples still.
Candidate: this fail()?
Reference: rename to launch
Candidate: i don't think we need to do the tear to <UNK> <UNK>
Reference: typo. should be modify to adjusted.
Candidate: the syserr should be be <UNK>
Reference: can we use notfound error code?
Candidate: can we use getconnection here?
Reference: opaque
Candidate: please rename the <UNK> to <UNK>
Reference: i'm confused by this, we removed the streamsconfig.metrics_latest config, but we've replaced it with a literal string value of the same thing. edit: nm re-reading the pr i think i
Candidate: why do we need the <UNK> here?
Reference: not needed anymore, they seems to have fixed the bug with "localhost" within ga.js
Candidate: why do we need to permission?
Reference: i'm not sure this is needed. why do we need to commit to the indexing service here? we don't seem to need to do this when deleting any other type
Candidate: why do we need the <UNK> here?
Reference: this check is not only adding but also removing problem from / to nodes. returning true leads to a prune of the child-tree branch beneath that node. i'm not sure
Candidate: should we throw an exception here?
Reference: related?
Candidate: i don't think we need to throw an exception if invoked?
Reference: intermediate arraylist is unnecessary.
Candidate: you don't need to repeat the <UNK>
Reference: why is this needed?
Candidate: please use <UNK>
Reference: to enforce naming convention, should we put composing and parsing containers' names to a separated class?
Candidate: why do we need to use the here?
Reference: probably can remove the print()
Candidate: we should need the pagination for the pagination
Reference: why are we not checking the received msg count being > 0 here like other places ?
Candidate: remove this line after the "on" on the point.
Reference: can't we just set without compare?
Candidate: why do we need to check for the <UNK> ? <UNK> : 2; thanks!
Reference: suggestion "namespace is longer than "+max_namespace_len+" characters");
Candidate: please use the syserr
Reference: why do you need to print during a test?
Candidate: why do we need to clients?
Reference: in both the old and new situation this line seems duplicated
Candidate: ah, 49
Reference: again, no default please.
Candidate: should we be schedule() here?
Reference: why not directly call a candeleteinstance(input) ?
Candidate: <UNK> evidence, you can use <UNK> <UNK> <UNK>
Reference: great, thanks again.
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: same thing: missing table name in error message. 1) it is not clear what is missing 2) it is not clear why it is missing. assert message should better be
Candidate: why do we eating the exception here?
Reference: on phone so can't expand this file to see below but if it's duping the next line, commet instead is fine
Candidate: should we throw an exception here instead of printstacktrace?
Reference: else if (newleast.compareto(oldleast) == 0) {...} else { issueerror(... (symmetric to the other direction)
Candidate: what happens if <UNK> is null?
Reference: is there any reason why exactref() is not directly called on repository here? it is called on repository in all other places that have been changed. i suggest to call
Candidate: why do we need the <UNK> here?
Reference: this can just be a plain map.
Candidate: i pagelogging
Reference: i wonder if the mediaurl could be abused here (with infos coming from the server) and if we should escape it (same for other calls to execjavascriptfromstring with a mediaurl)
Candidate: if (trace) { } else { }?
Reference: shouldn't we protect ourselves against wrong context type?
Candidate: the syserr should be the
Reference: this can also be simplified (assuming java 1.8 is used)  public int getextradata(int index, vector3i pos, int value) { extendextradatato(index); return extradata.get(index).getordefault(new vector3i(x, y, z), 0); }
Candidate: should be replaced by: return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> && <UNK> { return <UNK> }
Reference: java protected string entitytojson(object entity) { string newentityjson = ""; // todo: throw an auditing exception here // drop data on consumer we do not want serialized, jackson doesn't //
Candidate: <UNK> *= 2;
Reference: i would split that up, it's a bit hard to read. if (includedinfeature) return false; if (showproducts && includedinproduct) return false;
Candidate: nit: computeifabsent (from arrays.copyof like java 8 <UNK> = <UNK> <UNK> -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: as we're anyway touching these lines, let's reformat and add space around = and !=.
Candidate: this should be the <UNK>
Reference: should we really have a different formatting for newly added files? why not simply sb.append("+") .append(info.lines_inserted()) ? this formatting would be more consistent.
Candidate: should we be <UNK> here?
Reference: add final to exceptions
Candidate: why do we need to use <UNK> here?
Reference: we should be comparing using object.equals(actionparam.getnames(), this.getname()) - to account for nulls - == checks for reference equality not logical equality
Candidate: please use <UNK> <UNK>
Reference: suggestion timer = getmetrics().timer("key-validate");
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: is this really needed? maybe this should be removed for efficiency reasons (but i don't know how often this method is actually used...)
Candidate: can you use objects.equals to the equals?
Reference: using valueof to get the constant instead of using noneof definitely seems better to me.
Candidate: can be simplified to <UNK> <UNK> array.
Reference: maybe we need to create constant field with value data just to know were exactly it's used. i've found only eventtypevalidation#wrapschemaindata, and it will be hard for me to understand
Candidate: the syserr should be injected, so we don't need to use the <UNK> <UNK>
Reference: rather than having this check and two different code paths, let's make it so that version is final and always non-null with a default of $2y
Candidate: we don't need to catch exception here and throw an exception
Reference: would be nice if you pass in here the vdsmanager and the cached numa nodes. then the vmanalyzerfactory is stateless and can be normally injected in vmsmonitoring.
Candidate: why do we need to use the <UNK> here?
Reference: fint? just f looks better.
Candidate: what is this a <UNK>
Reference: would it make sense to also make sure that the string is not blank?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: $rundir doesn't look right.
Candidate: the syserr should be be the
Reference: !isempty() instead of size() > 0 ?
Candidate: this should be repelaced e1 && <UNK> { return false; }
Reference: you should move "creating snapshot..." to localization
Candidate: why do we need the <UNK> here?
Reference: if you only iterate over watched cubes here, non-watched cubes will never get unloaded, which defeats the purpose of chunk gc.
Candidate: i don't think we need to check for the <UNK>
Reference: doesn't this make equals assymetrical, if this is a subclass of o then this.equals(o) may be true while o.equals(this) would be false.
Candidate: why do we need need to check for the <UNK> ?
Reference: when do we validate the config file?
Candidate: should we use <UNK> here?
Reference: suggestion if (vunglebanner != null) { if (vunglebanner.getparent() != null) { ((viewgroup) vunglebanner.getparent()).removeview(vunglebanner); } log.d(tag, "vungle banner adapter cleanup: destroyad # " + vunglebanner.hashcode()); vunglebanner.destroyad(); vunglebanner = null; }
Candidate: can you use the <UNK> <UNK> <UNK> <UNK> ...?
Reference: same for all the changes in this file, just use offsetdatetime.now() directly.
Candidate: should this be the <UNK>
Reference: oops
Candidate: why do we need to here?, if it is the <UNK>
Reference: could unsupportedoperationexception be more convenient? also, same for **row**: 111
Candidate: why do we need to check the <UNK> <UNK>
Reference: previously we checked if we had more than 1 alleles that pass the tlod and nlod thresholds, not just the number of alleles. just checking the number of alleles may
Candidate: can be replaced with <UNK> <UNK>
Reference: shouldn't the datastreams be identical if it's the same request? why only check owner (and effectively datastream name)?
Candidate: can you use <UNK> <UNK> <UNK> value)
Reference: this breaks the humidity implementation of the habitat former because the humidity should only be controlled through the fluids and this allows to lower the humidity by consuming water which
Candidate: please use <UNK>
Reference: this lack of braces doesn't follow our style guide.
Candidate: i don't think we need to throw an exception if invoked?
Reference: should use validateutils.notempty(files)
Candidate: this should be <UNK>
Reference: looking at this test as a whole, the public interface is tested more thoroughly if raw string values are used here instead of the internal constants representing the manifest keys.
Candidate: i appid
Reference: as i recently learn, function names are apparently case insensitive in php (<link_0>, so i would convert it in lowercase before testing if contained in set.
Candidate: should this be null?
Reference: nit: addr seems useless? no need to assign to addr anymore?
Candidate: why do we need to use the payload?
Reference: please do not use magic number here - actually, you can use http error codes for this or at least a constant.
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { <UNK> } } } } } } }
Reference: where could python console log re-directed? it is better to redirect console log to java console and shifu.log.
Candidate: should we use the <UNK> here?
Reference: i would prefer updating avatica to add another metaresultset.create that has updatecount parameter, instead of adding a subclass.
Candidate: do we need need to print stack trace to debug failed?
Reference: is this the right logic? we care only about bulk put. we want to add the filter for every request besides bulk put. so we should invert this logic.
Candidate: should we use <UNK> here?
Reference: this is maybe what configmemorysize.tobytes should throw for out of range
Candidate: can we use the <UNK> here?
Reference: should the constructor be public?
Candidate: this should be <UNK>
Reference: currentprogress is always >0. so first condition can be removed
Candidate: i don't understand what happens if the step is going to do?
Reference: please add an assertion message to the asserequals() call.
Candidate: please remove the method("post")
Reference: barcodeprintassister should be private final member instead of new anonymous class per request. same in all other controllerhelperservices
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: this winds up allocating two (2) stringbuilder instances -- use append instead of the concatenation.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: not clear what to do
Candidate: should we throw an exception here instead of throw?
Reference: this(this.delegate = newsimpleaggregatedmemorycontext());
Candidate: should be be <UNK>
Reference: here we should just use the categorydeletecommand and i don't know why the code that you copied used a category ;-)
Candidate: why do we need to clients?
Reference: could just use a method reference, here: .map(umltprotocolmessage::toreceiveevent) it's not only a bit easier to read but, unless the compiler is very clever, saves on creating a .class file for
Candidate: use <UNK> <UNK> <UNK> <UNK>
Reference: looking at this in variables view i think better we just name it "lambda", because the details of the object are showing lambda name etc.
Candidate: should we move this to debug level?
Reference: should be new udpmatcher(config) ...
Candidate: this should be the <UNK>
Reference: added a controller view so that you can send commands straight to the arduino?
Candidate: the syserr should be be the <UNK> <UNK>
Reference: remove these lines as they are superfluous now, but the original method was truly bizarre. don? ryan?
Candidate: should we throw unsupportedoperationexception
Reference: use constant entitymodels
Candidate: rename to <UNK>
Reference: required?
Candidate: why do we need to the <UNK> here?
Reference: i find this more difficult to read and would prefer the original version here.
Candidate: should we move this into the messages.properties method? if <UNK> { <UNK> } <UNK> <UNK> { <UNK> }
Reference: use browserutil. the handler in tasks.ui should handle the url.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: is there any way around it or is an optimization to no copy not really worth it?
Candidate: should we be the <UNK> here?
Reference: nit: use else to be clearer
Candidate: this should be the <UNK>
Reference: can we add an upperbound here (liek 20 ro somethign) and throw an exception if it tries too many times
Candidate: the syserr should be be the
Reference: more compact but less clear.
Candidate: why do we need to use the <UNK> here?
Reference: would it be much of change in tests to change versionedeventstore#putall to take lockwatchevents?
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> } else { if <UNK> == null) { <UNK> }
Reference: @jwass @findepi @arhimondr geometrytype enum lists types used for serialization. envelope type is used to efficiently serialize trivial polygons and enable further optimizations by preserving the fact that the polygon
Candidate: this should be the <UNK>
Reference: shouldn't we make sure there is no alive debug sessions for every session? not just the first one?
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: tags can also be null (default value)
Candidate: i don't think we need to check the if the is is the
Reference: might as well compress it... let's not introduce kryo / chill deps, too much churn for such a low-level lib
Candidate: you don't need to use the
Reference: this is still missing tests for foo from both the folder and the project.
Candidate: please use fail(); here
Reference: and the variable name systemweighting?
Candidate: this should be the <UNK> <UNK> <UNK> <UNK> the <UNK> bottleneck. if <UNK> == null) { return; }
Reference: won't this break horribly and cause dupe bugs as k is never subtracted from the resource?
Candidate: can we move this logic into a separate method? if (state { null) { <UNK> }
Reference: it looks like this is the same for most (all?) subclasses. if you make usage_summary and output_extensions either constructor arguments or abstract methods then the duplicate code can be removed.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: you need to handle the case where mli is null.
Candidate: why do we need to use <UNK> here?
Reference: why do we mark integer.max_value? if we call reset after this the read position of the stream will be integer.max_value.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: modify it as it was implemented in eng-10264
Candidate: why do we need the <UNK> here?
Reference: considering the implementation details, i wouldn't make this method available even to its package. let's discuss.
Candidate: why do we need to permission?
Reference: just call this value
Candidate: why do we need to check the <UNK> here?
Reference: this is a static non-instantiable class, i'd rather change the constructor visibility to private.
Candidate: should this be <UNK>
Reference: not sure if you notice, a method reference can be used here:  this.original = optional.ofnullable( (servletrequestattributes) requestcontextholder.getrequestattributes()) .map(servletrequestattributes::getrequest);
Candidate: should we throw an exception?
Reference: why not just bubble the exception? it's used in test setup so i guess it's okay to just throw them
Candidate: we don't need to throw an exception if we don't want to re-throw the exception
Reference: going to remove as the refreshing of the prefs shouldn't be on this code path. should be taken care of the process that instantiates the object (see abstractkeyvalueservice#constructor)
Candidate: i merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge merge
Reference: also <link_0> . @dwnusbaum has added a utility method for that recently, so you could replace dir.topath() byt filetopath(dir)
Candidate: throws exception exception
Reference: you should probably make a variable at the beginning of the loop for getmainhandlocation so it isn't run 3 times
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: the hashmap seems unnecessary. you could just iterate over projecttype.values() and get the plugin from the projecttype. also, our coding style says there should be a space after keywords like
Candidate: this should be the <UNK>
Reference: btw java.util.objects would make this a bit simpler.
Candidate: please use <UNK> |= <UNK>
Reference: can you rework this to just:  assertequals( expectedhighlevelobject, actualhighlevelobject );  which will compare the two via .equals() on the objects. this assumed that analyticsevent has a sensible equals()
Candidate: why do we need to use <UNK> here?
Reference: just a small note. there is no need to declare filenotfoundexception as it is a subclass of ioexception
Candidate: you don't need to use the
Reference: does adb output contain different line separators based on os?
Candidate: can we use <UNK> to <UNK> <UNK> generation?
Reference: basepath.endwith(files.separator)
Candidate: why do we need to use the <UNK> here?
Reference: i think += should just be =. this will at least double the value every time, not just multiply it by the modifer.
Candidate: <UNK> evidence, we can use the scale overflows?
Reference: can you check if other counts are 0 also?
Candidate: why do we need to synchronize on the lock ?
Reference: code is a little bit cleaner if stream is mapped before the filtering  locks.stream().map(lockinfo::getacquired) .filter(objects::nonnull) .filter(date -> date.isbefore(limitforacquired)) .count()
Candidate: can we make this private?
Reference: perhaps rename shard to conservativeshard and shard2 to thoroughshard.
Candidate: should this be <UNK>
Reference: this implementation could be restructured as below: int getclientwidth () { if (handle == 0 || (state & zero_width) != 0) return 0; gtkallocation allocation = new gtkallocation (); gtk_widget_get_allocation
Candidate: this should be the <UNK>
Reference: extract to local variable?
Candidate: this should be the <UNK>
Reference: hm, i think it's better to use nextoffsets.get() now that it has been set rather than repeatedly calling consumer.position() here and the line below, since we don't really know the
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: might be like this: java arraysupport = primitivearraysupport.getarraysupport(array) if (arraysupport != null) { fieldstring = arraysupport.toarraystring(array) }  the static primitivearraysupport.arraytostring() method can be removed then.
Candidate: can we use the builder here?
Reference: requirenonnull
Candidate: use <UNK> objects.tostringhelper() for <UNK>
Reference: add spacing for readability
Candidate: should this be <UNK>
Reference: string.length() != []byte.length. we would need to convert string into utf8 encoded byte array.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: when are these clients closed? when the perf test is completed, eventhubproducer*client.close() should be called.
Candidate: can we use the <UNK> here?
Reference: what do you expect this to do on windows :-)
Candidate: i don't think we need to throw an exception if the exception is thrown the exception is the
Reference: i still don't really undestand why this change became necessary within this pr? that interval cannot be stored isn't new. did randomtype change in some unrelated way?
Candidate: 49
Reference: nit: extra parenthesis
Candidate: you don't need to use the <UNK>
Reference: this line is untested. can this ever happen? looks like this could result in a stack overflow since it calls itself with the same parameters.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: can you add location too to enumerate api.
Candidate: should we use the exception here?
Reference: you can remove this and the return in the catch block, and just return optional.fromnullable(mqtturi) on line 83.
Candidate: can we use the <UNK> here?
Reference: remove final
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: in order to able events we need to have both flags set to true.
Candidate: why do we need to check for the <UNK>
Reference: is there a reason not to clean this up in a finally block sooner?
Candidate: why do we need to here?
Reference: shall we combine two if conditions and also save errorhandlerattr.getattributevalue() to a value and re use
Candidate: can we throw an exception here?
Reference: safer to check if get() returns null and then just call set method.
Candidate: if the == null && <UNK> { <UNK> } else { <UNK> }
Reference: wouldn't it be nicer to have a constructor that directly takes an int?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: do we need to invalidate the previous scan at all (e.g. isloaded = false).
Candidate: please remove the method("post")
Reference: don't think this need to be public so far
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this should be double.isinfinite(turnweight) instead (?)
Candidate: why do we need to check the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: done. this is ok to share one instance of the progress monitor, because it is basically empty.
Candidate: can we use the <UNK> here?
Reference: could use execs.multithreaded()
Candidate: <UNK> -> <UNK>
Reference: these three lines should be moved further down, the playerprofile caches the armor too, so you can directly access the item that way and save a ton of performance too.
Candidate: we should need to include the try/catch here
Reference: i think we will still get npe, no ? we might move get out of for and run for if output of get is not null at both places.
Candidate: can we be the division here?
Reference: putting only a message from the original exception may lead to losing stacktrace - and the root cause. could you rather incorporate the cause into the mojofailureexception, please?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: line-lenght ok?
Candidate: should we be the <UNK> here?
Reference: what does this lastcall suggest?
Candidate: please remove the method("post")
Reference: issue says we are just checking extends and implements. don't these 2 lines do more than that? i see the content of your issue went with class name too, but
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: swap the equals condition.
Candidate: this should be msg. msg. msg. msg.
Reference: i think this check should be done in internalgetoffset() instead? the scaling could make a valid offset_s overflow and vice-versa. and the offset could make the total offset overflow.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: we should guard against this in the builder so it can never be null here.
Candidate: this should be the <UNK>
Reference: duplicated check with the ones inside executeoperation
Candidate: can we make this private?
Reference: despite its name elasticsleep is not elastic and this will pause all tests for 3 seconds. better to use waitfor(... 3) which will wait 3 seconds for the log to
Candidate: this should be the <UNK>
Reference: nit: again, error text
Candidate: typo: <UNK> -> getcredentials
Reference: i mentioned this in the commcare-core pr, but i think we should be setting the arguments by setting them as xpath variables on the evaluation context, since that will naturally
Candidate: why do we need the <UNK> here?
Reference: instead of asking the user to enter additional constants, why can't we do downsample(<time_series>]*,#downsampler#) downsample_querytime(<time_series>]*,#downsampler#)
Candidate: you could use system.currenttimemillis() here instead of manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually
Reference: haven't dug into this, but just want to check that a named location really will give the name in the locationflags map. as opposed to it being embedded in the
Candidate: should we use the <UNK> here?
Reference: please also add checks to validate that dimension has positive height/width
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: there's too many parens here making this tricky to read. i think this would be much simpler to read as:  if (nameidfromsubject != null || baseidfromsubject != null) {
Candidate: depending who who who who who who who who who who who who who who who who who who who who who who who who who who who who who
Reference: something like this should work but i have to think about the implementation of equals on the node and wether we are doing the right thing. publisherpush pp = current.get()
Candidate: should we be the the properties?
Reference: runtimeexception? not assertionerror?
Candidate: should we be the <UNK> here?
Reference: this is perfectly correct, but looks suspicious. can you change it so that it shows like this? suggestion assertequals("for the given page size, there are 1 page(s), so the correct
Candidate: typo: <UNK> -> getcredentials
Reference: could we invert this? so if it exists, we return true, then outside the block we can do all the rest.
Candidate: i don't think we need to throw an exception
Reference: android studio suggests to use ! isempty() instead. it's up to you :wink: if you do so, please update everywhere
Candidate: i appid
Reference: btw i don't see this in treecolumn. usually tree/table code is identical, maybe something was missing in the fix for bug 97863.
Candidate: the snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet snippet
Reference: can max_file_per_window be a configuration? and why is it needed?
Candidate: recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery
Reference: why not request(2) once in this request()? i.e.,  java public void request(long n) { if (n > 0 && once.compareandset(false, true)) { parent.requestmore(2); } }
Candidate: i don't think we need to do we need to use the <UNK> <UNK>
Reference: i wonder if we should not make this a method for time selection: select(swtbottimegraphentry entry, long t1, long t2, int mousebutton). when we do time selection we don't normally go
Candidate: why do we need to assert that the <UNK> is *both* <UNK> expected)
Reference: once you set primary type, you can just init properties based on mapping table. take a look at this code <link_0>
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: close streams
Candidate: why do we need to tear down the <UNK>
Reference: add curly braces even for oneliners
Candidate: should we use the <UNK> here?
Reference: i think the exception should be could not delete
Candidate: do we need to check the <UNK>
Reference: break this one up
Candidate: we should need to check whether the user id is null, so we don't need need to software error.
Reference: what's the purpose of this change?
Candidate: i b/w <UNK> of the arraylist?
Reference: must be inside the try-catch, otherwise the lock will never be released.
Candidate: rename <UNK> <UNK>
Reference: out of curiosity how long does this new check take?
Candidate: can be simplified to <UNK> <UNK>
Reference: should we not simply create a temp variable of type path at the beginning with that exact logic and use that variable everywhere as opposed to duplicating it in x
Candidate: do we need to the <UNK> <UNK>
Reference: is null the right thing to do here as the default or should we do something like throw new unsuportedoperationexception()?
Candidate: findfirst() should be the same as above.
Reference: i think it's a good idea to just throw the exception if the s3client cannot be initialised successfully, and just have the caller handle it. this approach will create an
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: can you leave exception for catch possible npe :)
Candidate: why do we need the <UNK> here?
Reference: do we need a try...catch here?
Candidate: should this be <UNK>
Reference: throw a badrequest exception if only the container name is set.
Candidate: why do we need the <UNK> here?
Reference: why not use addmessagehandler ?
Candidate: why do we need need to the <UNK> here?
Reference: suggestion asserterroreventexecutionset(emptysubprocess.getexecutionset(), empty_value, non_interrupting, empty_value);
Candidate: suggestion <UNK> empty_value, non_interrupting, empty_value);
Reference: i think we can split them into 2 parallel threads to speed up job execution.
Candidate: should we throw an exception here instead of eating the exception?
Reference: what is this addition for? -- i also see reconstructions of hashmaps throughout this pr
Candidate: why do we need to use <UNK> here?
Reference: is there a reason why you are using a set instead of an immutableset?
Candidate: you don't need to use <UNK> <UNK>
Reference: got 0?
Candidate: you don't need to use the <UNK> <UNK>
Reference: @pynicolas analyzer for "php.ini" files? (imho it's better to have name starting from capital letter)
Candidate: this should be <UNK>
Reference: no need to keep a blank lines in the beginning and end of method bodies
Candidate: please use <UNK>
Reference: eli, we almost missed it - look at runthread - the value parameter is set by the result of executor.fence - how is it returned to the rest of the
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: this can be boolean now. being boolean can imply it might be null.
Candidate: this should be setemptyelement().
Reference: this should check whether the id is already registered and the id must be lowercased.
Candidate: this should be setemptyelement().
Reference: this does not need to be public either.
Candidate: should this be <UNK>
Reference: why are you expecting this? why expect some sections? why expect 2 sections? what are you testing?
Candidate: <UNK> *= use the enum?
Reference: >  > [](start = 5, length = 4) >  trailing space
Candidate: should we throw an exception?
Reference: should this change be integrated in 2.0.x ? (i mean even if we don't integrate this pr?)
Candidate: we should need to log the exception in the the exception we don't need to interact with the <UNK> detection.
Reference: need to check for null.
Candidate: i don't need to check for the <UNK> <UNK>
Reference: rename to signature
Candidate: please use <UNK>
Reference: shouldn't we use optional<long> here instead of long, as with repliedmessageid below?
Candidate: why do we need to check here?
Reference: that call to getreferencesequencedictionary() is going to be done a lot of times. can you call once and reuse? wont save much (collect dominates, that's for sure) but it's a
Candidate: @unyoungwax, speaking this to <UNK> <UNK> <UNK>
Reference: just curious: why not write the loop as links.stream().filter(objects::nonnull).foreach(action);?
Candidate: please import?
Reference: final
Candidate: you can use the <UNK> here?
Reference: please declare the message in strings.xml and use the xml resource here. this will help in translation process whenever it is done!
Candidate: this should be the <UNK>
Reference: like with the attribute access item check, this compares the dtos to themselves, instead of to the value objects from methodaccessitemlist.
Candidate: why do we need to use the <UNK> here?
Reference: maybe an assertion that transaction events is empty before updating status?
Candidate: why do we need the <UNK> here?
Reference: can this loop be simplified with something like arraylist.indexof?
Candidate: rename <UNK> to <UNK>
Reference: i don't think anybody wants system.out being used in the productive code?
Candidate: should we throw an exception instead of the exception?
Reference: just because it's done that way in the other tests...move function to just before the comparison?
Candidate: please import?
Reference: if you're going to fix the indentation here, remember that we use four spaces per indent.
Candidate: ![major](<link_0> 'severity: major') remove this method parameter(s)
Reference: add constructor with parameters.
Candidate: please use <UNK>
Reference: inlining smartpay would make it simpler
Candidate: should we throw an exception?
Reference: is it possible to make the '1000' a configurable param, or at least a varibale in the class?
Candidate: why do we need need to check for the <UNK>
Reference: if this can't keep using generictypes.resolvetype() then this is a breaking change.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: minor: can just return this, don't need local var.
Candidate: why do we need the <UNK> here?
Reference: <= and >= maybe?
Candidate: do you need to use <UNK> <UNK> <UNK>
Reference: avoid increasing visibility?!
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: if the test is measuring the scalability of read operations, we can persist data once and not touch them again unless the data needs to change. that means writing data
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: the close should be in finally as the previous operations might throw exception
Candidate: why do we need the <UNK> here?
Reference: this log is likely a duplicate of the one that we have in the initialize. should we log this for every login?
Candidate: omit the modifier :-)
Reference: not clear from reading sources without an ide handy what item is going to be here. is there a reason this cannot stay as name?
Candidate: should we throw an exception if we { null) { throw throwable <UNK> } throwable { <UNK> } throwable { throwable = <UNK> } throwable ?
Reference: kv type is only used in high level api after the transformer. it essentially contains (ime.key(), ime.message()). you can remove this check completely. ime should also not be null.
Candidate: i don't think we need to check for the <UNK>
Reference: i think you should get the visible status from model and set the visibility of the warning, otherwise if you open and close the add bricks dialog box in create
Candidate: if getstate() != null && <UNK> != 0) { dialog, <UNK> != 0) { 0) { <UNK> }
Reference: this paragraph could be replaced by super.syncsearch(), which basically performs the same thing. there's only need to override it when something special is performed, not when the backend result is
Candidate: if oldvalue is is locked correctly, oldvalue in the presenter.
Reference: could you define this color in **colors.xml** file and use getcolor() instead?
Candidate: why do we need to use the <UNK> here?
Reference: deploymentname should have quotes around it, otherwise spaces are lost and it becomes "warmodulename.war" in standalone.xml.
Candidate: can be simplified to <UNK> <UNK>
Reference: this should probably be 4.2, no?
Candidate: why do we need to here?
Reference: do we need this?
Candidate: should this be <UNK>
Reference: make these variables static final, so you don't have to initialize them every time
Candidate: this should be setemptyelement().
Reference: i should say something about lambdas again, after all lostsegments() already uses an enhanced for loop :)
Candidate: why do we need the <UNK> here?
Reference: should be asserttrue
Candidate: 49
Reference: i'm not sure why you need to have both classes and methods here why not only registering to class, and iterate over its members (trees)? you will then have only
Candidate: use collections.emptylist() instead.
Reference: treeset might be better (can remove duplicate and automatically sort). but since timestep won't be many so this is fine.
Candidate: can you move the <UNK> of the <UNK> <UNK>
Reference: minor: it looks like the method modifier can be changed with "private"?
Candidate: this we need to check if the != null) { throw new <UNK> }?
Reference: just noticed getcaseauditevent*listner* typo when going over n&n :)
Candidate: why do we need to use <UNK> here?
Reference: you refer to spmmap with and without "this". please be consistent.
Candidate: this should be the fixture.
Reference: suggestion for future work: this should really work if we just deleted the body of this if statement and replaced it with a single call to layoutbar.requestlayout()... but it probably
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: probably i haven't understood the problem....but, was not the goal of the ticket to provide a sort on the tags in the csv file generated ? where are we checking
Candidate: why do we need to mock <UNK> here?
Reference: no need for 'this'.
Candidate: i don't think the boolean.class)
Reference: whoops, why are we removing this again? :-)
Candidate: this should be <UNK>
Reference: i'm wondering why there is a double copy of the list. first when iterating over this.rawnode.instructions those instructions will be "copied" into list. afterwards list will be copied into new
Candidate: why do we need the <UNK> here?
Reference: why not just:  regexp pattern = regexp.compile( "[\\x00-\\x1f\\x7f]" ); return pattern.test( path );
Candidate: ![major](<link_0> 'severity: major') either remove this or rethrow this exception. [![rule](<link_1>](<link_2>
Reference: why 1 elem?
Candidate: i don't understand this matters, if you matters, but you don't need to check if the is is the <UNK>
Reference: you should check whether the type is assignable in all cases. just, when the projection converter is disabled, you will call isconvertedtypeassignableto on the *raw* converter. note that your tests
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: what happens if you just add without checking for empty list? still the same result?
Candidate: why do we need to use <UNK> here?
Reference: switch this and other getquery.anduuid calls below to atsserver.getartifactbyuuid(uuid)
Candidate: this should be <UNK>
Reference: nit: should not have trailing space here, as this will result in an extra space
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: the keyset method is not blocking already. maybe the worry is the iterator hasnext method instead?
Candidate: should we use the <UNK> here?
Reference: please add a check objects.requirenonnull(supplier, "supplier is null");
Candidate: rename to iu
Reference: please change to usageeventdao. no reason in modern days to use these prefixes.
Candidate: rename to <UNK>
Reference: should use parameterized logging instead of string concatenation.
Candidate: we should need to check for the exception if <UNK> { throw new <UNK> }
Reference: i am thinking it would be better to have this an intstream instead. stream<integer> case segments is null we have to box n values and unbox n values in the
Candidate: why do we need the <UNK> here?
Reference: for all of these that use version, if version is null, this will roll up to to just "operation.entity" which means technically we lose the ability to distinguish between default
Candidate: should we throw an exception instead of returning null?
Reference: nit: can you reverse the null check? rhsqualifedname != null
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: you don't use parameters prefix and suffix - may be makes sense to remove them.
Candidate: this should be <UNK>
Reference: if you didn't use a thread you wouldn't need this. just use the scheduled executor to send pings to the client please. cancel the executor from a future.
Candidate: this should be <UNK>
Reference: since ""en-gb" is a constant, we already know what the result of locale.forlanguagetag("en-gb").tolanguagetag() will be (it will be "en-gb") so we can just use "en-gb" here.
Candidate: this should be the <UNK>
Reference: i think this (and subsequent occurrences) would be better as something like: asserttrue("the countdown should reach zero", latch.await(1, timeunit.minutes)); that way at least if we end up on a failure
Candidate: why do we need need to check here?
Reference: why not use the constant fingerid_version instead of calling a private method fingeridversion()?
Candidate: why do we need to clone the <UNK> ?
Reference: the exception thrown by the antlr parser is unintuitive for most jdbi users. let's continue wrapping any parse exception in a jdbi exception so parsing exceptions are easier to recognize.
Candidate: should this be <UNK>
Reference: why do you need the vardeclaration.getcontainingclass() == haxeclass here? doesn't the fact that vardeclaration was found as a direct child of the body imply that?
Candidate: if the != null && <UNK> != null)'.
Reference: s/any(list.class)/anylist/
Candidate: you don't need to use the
Reference: why not return failcandoaction?
Candidate: why super.candoaction() is not required names?
Reference: don't swallow interrupts! <link_0>
Candidate: should we use the <UNK> here?
Reference: remove
Candidate: why do we need the layout here?
Reference: can we propagate e please?
Candidate: use <UNK> <UNK> <UNK>
Reference: the try-with-resource pattern automatically handles the resultset and preparedstatement objects, but the connection, "dbconnection" in this scope, still needs to be closed with "databaseutil.closeallconnections(dbconnection);"
Candidate: use <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: shouldn't we use !environmentcontext.getcurrent().getsubject().equals(subject.anonymous) instead of != ? (i agree that it's testing for now the memory pointer but it may have side effect in future as i don't see
Candidate: why do we need the <UNK> here?
Reference: could verify here that workpid was not committed, aka doesn't exist outside of the transaction. then after the parent closes you could check that the work does exist. and maybe
Candidate: this should be the fixture.
Reference: why two separate try-catch blocks?
Candidate: should we use <UNK> here?
Reference: div.getstyle().setheight(4, unit.em);
Candidate: why do we need to use <UNK> here?
Reference: here also making stream is unnecessary
Candidate: why do we need to use the <UNK> here?
Reference: npe if data does not contain repoobject.getbucketname(). (looks like a few other methods have that problem too.)
Candidate: we don't need to use the <UNK>
Reference: suggestion return () -> "1";
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: should the core swap be inside the optimizeenabled block? seems like the core should be swapped regardless if optimize is enabled.
Candidate: should this be <UNK>
Reference: meh, was easy to fix. added now.
Candidate: please use <UNK> <UNK>
Reference: no need to return anything different than defaultfileoperations.instance here
Candidate: can we use <UNK> <UNK> <UNK>
Reference: hmmm .... maybe check for something more specific?
Candidate: why do we eating the exception here?
Reference: you should use <plural> here to take care of this. this is better for localisation. you should use: - one - two - few - many - other while english
Candidate: rename to <UNK> *= <UNK>
Reference: imho we should extract this ugly code in a dedicated private method getlocale() local variable should be named locale
Candidate: you should be the kitkat <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: could you specify list<partitionid>?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: this is basically like a load of a string in csv format. take a look at csvloader for how we use au.com.bytecode.opencsv.csvreader (an open source csv reader). this isn't crucial,
Candidate: should we be the <UNK> here?
Reference: java final list<attributevalue> values = lists.newarraylist( new attributevalue().withs(rangekey1), new attributevalue().withs(rangekey2) );
Candidate: i don't understand this matters, this matters, this matters, this matters, this matters, that the <UNK> costs matters, but i don't understand this matters, but it matters, but it matters,
Reference: i suppose it's not a field mapper anymore? it kinda still is though .. i dunno random thought.
Candidate: use <UNK> <UNK> <UNK>
Reference: static import of assertions.assertthat() would be more readable (if there is no conflict with another assertion framework).
Candidate: why do we need the <UNK> here?
Reference: i am not sure what does line 92 to line 96 do. why they are different?
Candidate: i don't understand this matters, this matters, this matters, but you don't need why, but you don't want to the expectations
Reference: move this open check into a helper method, like void checkopen()
Candidate: can we use moreobjects here?
Reference: this could be a method, assertvalidlicense (final string schemeid) { if (!system_workflow_id.equals(workflowaction.getschemeid()) && !hasvalidlicense() && !this.getfriendclass().isfriend()) { throw ...
Candidate: the plural of tablets should be be <UNK>
Reference: why 0?
Candidate: please use <UNK>
Reference: do we want this setting to apply it to all operators or only the writer? i think that it seems more relevant for the writer only as that is what
Candidate: <UNK> *= 2;
Reference: suggestion if (s==null) throw new ioexception("reader side has already been abandoned", allocatedat);
Candidate: why do we need to here?
Reference: sorry i'm a little bit confused, what are we doing here?
Candidate: why do we need to check for the <UNK> anymore, right?
Reference: integer.tostring() instead of + " "?
Candidate: why do we need the <UNK> here?
Reference: would it work to use outputstreamwriter? that is, could the body of this method consist of: write(in, new outputstreamwriter(out));
Candidate: why do we need the <UNK> here?
Reference: close() has no parameters ...
Candidate: please use <UNK>
Reference: is the plan to merge this to develop or keep it in a separate branch until it's ready? if it gets merged to develop, then these command line options will
Candidate: i don't understand this matters, but if you is the <UNK> the <UNK> is the
Reference: keep them in the order of the definition in benchmarksuiteconfig
Candidate: please remove this method("post")
Reference: inline slice variable: return serialize(serializationbuffer.slice(), page.getpositioncount());
Candidate: unused
Reference: lets add public/private accessor. it should be private right. as we have wrappers for each metadata type.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i might consider making a helper method simply to make all these statements occupy a single line.
Candidate: why do we need to check on the sides of the <UNK>
Reference: not necessary here. its handled within parseany.
Candidate: should be <UNK> <UNK> <UNK>
Reference: we can use foreach here
Candidate: please use <UNK>
Reference: throw the proper exception if something is not supported: - nullpointerexception if command == null. - illegalargumentexception if frameid < 0 or if frameid > 255.
Candidate: use gender here
Reference: it's better to use different names for user and repo ... it would be less confusing
Candidate: @exper0 let's use <UNK> <UNK>
Reference: same as above for othernoncodedconceptuuid
Candidate: same question as above.
Reference: don't just catch and ignore - will mask problems. better to at least do a log.error. or perhaps even in the try-catch collect all the exceptions and at the very
Candidate: why do we need to here?
Reference: please make this more deterministic rather than just sleeping
Candidate: why do we need to use the <UNK> here?
Reference: this can be changed to a single line: return identityprovidersyncmode.inherit.equals(mappersyncmode) ? syncmode : mappersyncmode
Candidate: the syserr should be be <UNK>
Reference: => optaplanner or optaplanner
Candidate: please use <UNK>
Reference: memstore is used for tests, so we need to implement this function.
Candidate: i don't think we need to implement the objects.isnull
Reference: extract
Candidate: feedid should be the feedid
Reference: use doc.getacp(), and acp not acpimpl.
Candidate: rename to iu
Reference: is it valid formatting?
Candidate: should this be <UNK>
Reference: if (element instanceof fieldmetadata || element instanceof complextypemetadata) { impactsort.get(impact.medium).add(removeaction); }
Candidate: i don't think we need to use the anywhere, but it should be the
Reference: same here as well, no need to call .getvalue() here.
Candidate: please remove this method("post")
Reference: duplication of !directory.canexecute()?
Candidate: do we need to catch exception here and <UNK>
Reference: nit: use i++ to start the loop so it looks less like we declared a new i here. also wrap the body in {}
Candidate: why do we need the getconnection here?
Reference: can we replace this method override with additional parameter in codepanel constructor?
Candidate: please remove the method("post")
Reference: same if statement twice?
Candidate: why do we need the <UNK> here?
Reference: if we declare fileroot as optional, we can initialize it with one-liner: java optional.ofnullable(options.get("fileroot")).map(file::new)
Candidate: should this be <UNK>
Reference: perhaps put try catch around interpretergroup.close();? it looks to me like other calls inside should not fail in most cases. if close() is expensive or could fail, then a try
Candidate: can we be the error?
Reference: please review if logger.error will handle string arrays appropriately. this looks like it should be  logger.error("fail to execute rule '{}': {}", ruleuid, t.getmessage(), t);  on a second look,
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand
Reference: typo: "during update registration"
Candidate: we should need to check for the exception if we is the software exception we don't want to throw an exception if <UNK> { throw new <UNK> }
Reference: i think it is better to return an empty collection instead of null.
Candidate: do we need to catch the exception here
Reference: same suggestion.
Candidate: overwrite the original endpoint instead of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of
Reference: this change is not needed
Candidate: why <UNK> = <UNK> = new <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> = new <UNK> <UNK> = new <UNK> <UNK> = new <UNK> <UNK> = new <UNK> <UNK> =
Reference: i am not sure if this is really a problem. because you can always take all members from synchronized group and add them to the different group by union. what
Candidate: i guess you can use the value of the same lines.
Reference: just curious if we can avoid converting the marshalledentry to an internalcacheentry before checking expiration. could marshalledentry.getmetadata() help here?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: @benzonico spaces around +?:)
Candidate: please use try-with-resources
Reference: what you log is the unqualified version plus the qualifier, actually, not just qualifier.
Candidate: should we be the if <UNK> != null) { return; } <UNK> } } } } } }
Reference: unknown column type
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: deltainvaliddatasize is good enough. same in line 138
Candidate: why do we need the <UNK> here?
Reference: the default was by database before?
Candidate: this should be the <UNK>
Reference: i would rather not generate a copy of the path right here just to test the length of it. we should expose a method on the treewalk that exports the
Candidate: why do we need this?
Reference: this should not be registered on an hc.
Candidate: why do we need need to the <UNK> here?
Reference: minor nit, but classmethodcache is a slight misnomer, since we are only caching no-arg methods
Candidate: can we use the <UNK> here?
Reference: juan, i prefer a single exit point on multiple points. do you mind defining integer exitcode = 0 in the method beginning, and a single system.exit(exitcode) at the method's end?
Candidate: why do we need this?
Reference: catch any exceptions on vn.shutdown() to ensure reversednscache.m_es.shutdown() is invoked.
Candidate: i don't think we need to synchronize on the connection, so we don't need to do we need need to synchronize on the <UNK>
Reference: can we remove this check since we already do this check inside the initializerunid()
Candidate: what happens if we stripe { <UNK> } <UNK> }?
Reference: can let fall-through.
Candidate: please remove the method("post")
Reference: maybe we should assign the error message to a proper string variable and pass it for logging as well as into the instance of "message".
Candidate: we should need to the the <UNK> the <UNK> <UNK>
Reference: suggestion } else if (isinvincible == true) {
Candidate: why do we need the exception here?
Reference: 1. this should call the next method with the default_timeout_milliseconds as the extra param 2. line 85/86 should call this method with the null as the extra parameter. i know
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: why ignore case?
Candidate: this should be the <UNK>
Reference: instead of creating objects for each method, for logger and property object, can move it up to a method with @before annotation to call it before the actual test methods
Candidate: please remove the <UNK>
Reference: missing stringutils.isnotnullorempty() check
Candidate: can we use the <UNK> here?
Reference: nit: why final?
Candidate: i don't think we need to do we need need to do we need need to do we need need to check the the <UNK>
Reference: info or warn..?
Candidate: this should be the <UNK>
Reference: unnecessary if check. why not just: qi.maxreposize = qs.getmaxreposize(); ?
Candidate: why do we need the <UNK> here?
Reference: relevant non-logging code change here ^^^
Candidate: why do we need the <UNK> here?
Reference: this should be: java // prepare first users rights on all subgroups of groups where user is groupadmin and add them to authzroles of the user authzroles authzroles = addallsubgroupstoauthzroles(sess,
Candidate: i don't think we need to do we need need to do we need need to do we need need to the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: fields = collections.ncopies(columnhandles.size(), null);
Candidate: you don't need to check for the compatibility.
Reference: remove handling of percenttype because it is a subtype of decimaltype and both are converted in the same way.
Candidate: can we be simplified to <UNK> <UNK> ? <UNK> : <UNK> : <UNK> { <UNK> }
Reference: hostname resolution is case-insensitive so localhost is a valid hostname for 127.0.0.1 (had the same issue in netty hosts file resolver) hostname.tolowercase(locale.english).equals("localhost");
Candidate: should we be the <UNK> here?
Reference: lock is missing
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: we should have an isnullorempty type check on the provided list.
Candidate: please use <UNK> <UNK> <UNK>
Reference: there's probably a maxint const somehwere
Candidate: if <UNK> == null) { <UNK> groupname = false; } <UNK> { return false; } newvalue == null) { <UNK> } <UNK> == null) { return false; }
Reference: why are we having space prefix here?
Candidate: typo: <UNK>
Reference: :) i know, i saw the test. if you want to improve the original test too, that would be great. if you find out that these tests differ just by
Candidate: i don't understand this matters, this matters, this matters, this matters, but we don't want to wait for the <UNK>
Reference: is the syso here needed? maybe try to either use log function or just remove it.
Candidate: why do we need need to the <UNK> here?
Reference: to keep our arrival/departure labeling consistent with the normal arrival times lists, let's construct an instance of arrivalinfo here from the obaarrivalinfo, and then call arrivalinfo.isarrival() to determine if it's
Candidate: why do we need the <UNK> here?
Reference: this does not accept limiter functions like findmetrics?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: this isn't reactive to have to create a new mono operation everytime a message come in. how about a combination of flux.swithonnext(publisher).takeuntil(notcancelled) where a new item is emitted from the
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this needs to be implemented?
Candidate: should this be <UNK>
Reference: . i had always though is was equivelant to == rather than just an alias of is(equalto()). will use in future!
Candidate: please use <UNK>
Reference: better return "", then it seems also we do not need to pass to safename() ?
Candidate: please use <UNK>
Reference: mark the method with @nullable or factory doesn't follow _everything is not-null by default_ pattern ?
Candidate: we should need to use the <UNK> <UNK>
Reference: minor thing, i suggest to have: private final lexonumericcomparator lexonumeric = new lexonumericcomparator(); and in compare() method: return lexonumeric.compare(map1.get(key), map2.get(key)); (i tend to prefer avoiding instance creation, although in this
Candidate: please use <UNK>
Reference: this should be sorted for efficiency
Candidate: why do we eating the exception here?
Reference: please use collections.emptymap().
Candidate: why do we need to mock <UNK> here?
Reference: partition -> destination partition ?
Candidate: should we be the <UNK> here?
Reference: please add logging to make it easier to debug when xml_file_param key doesn't exist.
Candidate: i assume this will override the error while <UNK> will assume that will assume the will override while while while while while while <UNK> will override the while while while
Reference: this process is not referenced or used in this test class
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: perhaps boundary should be partboundary as basicboundry isn't that expressive?
Candidate: please consider adding an if?
Reference: this should be a singleton.
Candidate: why do we need the <UNK> here?
Reference: optional.empty() ? :)
Candidate: please use <UNK>
Reference: can we sort the label names (by name) to have the columns always in the same order? i think it is confusing if the order may change.
Candidate: why do we need need to <UNK> here?
Reference: do we really need to log anything here in the method, if we don't log any details about error? i think that logging should be done inside upper level method
Candidate: the syserr should be be the
Reference: hmm, our caller should be invoking us with a full accountsshkey object in hand. they should pass down the last used time from the database column to initialize this field,
Candidate: can we be null?
Reference: there should be an @override annotation here. most ides will be busy freaking out at you, and some java versions won't compile the code.
Candidate: should be be <UNK>
Reference: i would suggest to keep references of these client in context, and verify they are started. then we won't need this type conversion and exposing the getters with the @visiblefortesting
Candidate: should this be <UNK>
Reference: looks like we have missed here transactional() option for convenience.
Candidate: i don't think we need to check the <UNK>
Reference: @ should be replaced by the constant unique_id_project_name_delimiter
Candidate: this should be the <UNK>
Reference: instead of using string comparison you should use cdiproxies.iscdiproxy method to check if the class is a proxy.
Candidate: should this be the specific?
Reference: double full stop.
Candidate: can we use the <UNK> here?
Reference: should this be startswith?
Candidate: if we is software software software software software software exception software software software software software software software software software software software software software software software software software software software software
Reference: no null check for defaultkeysource
Candidate: why do we need to use <UNK> here?
Reference: unfortunately we can't use this text since it's a copyright infringement
Candidate: please consider extracting this into a separate method.
Reference: this is a very good test, big coverage!
Candidate: why do we need to <UNK> eq here?
Reference: @eg04lt3r the logic here doesn't seem correct - my understanding of the issue is that there has to be some active monitoring of each call to accept. to me this
Candidate: can you use <UNK> <UNK>
Reference: why this change ?
Candidate: please use <UNK>
Reference: the controllerlistener is the deprecated way to get these events, and controllerstatuslistener is the new version to get it. did you switch to this method for performance reasons?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please use "something <operator> null" convention
Candidate: the syserr should be be <UNK>
Reference: could use incr util
Candidate: can be replaced with <UNK> ?
Reference: the brackets around the left hand of the -> operator are redundant (and frankly, a bit confusing). please remove them.
Candidate: can be replaced with <UNK> <UNK>
Reference: why not for (action action : failedactions.values())?
Candidate: why do we need this check?
Reference: is there a way to use the classname instead of the beanname here?
Candidate: should we use the <UNK> here?
Reference: you to defer setting this value too, otherwise it breaks when: focus in text box delete everything then click check box
Candidate: why do we need to check the <UNK> here?
Reference: this should be disabled by default in elide 4. however, turn it on for testing so the tests below work.
Candidate: should we be the <UNK> here?
Reference: maybe an extra log could help us later here
Candidate: can we be simplified to <UNK> <UNK> ?
Reference: nit, but either the spacing should be fixed or use string.format
Candidate: should we re-throw the exception here?
Reference: this could possibly be a batch (and ops.batch). not required, but some commands to that and the error behavior is a bit nicer.
Candidate: the getconnection should be the <UNK>
Reference: avoid access direct to view, use presenter instead.
Candidate: why do we need the <UNK> here?
Reference: if it is possible that the editor control is disposed here, it might also be possible that it is null. so i would add geteditorcontrol() != null && ... and
Candidate: this should be null if (state != null) { <UNK> } (throwable { <UNK> { return; }?
Reference: i think this doesn't allow executing tasks because you ignore r.
Candidate: why do we need to use the <UNK> here?
Reference: refactor idea: replace lines 191-194 with: java ipv6 = "false".equals(system.getproperty("java.net.preferipv4stack", null)) || "true".equals(system.getproperty("java.net.preferipv6addresses", null))
Candidate: use <UNK> <UNK> <UNK>
Reference: this method (checkforpendingapphealthactions) triggers any time we get back to the home screen, not just any time the app starts up for the first time, right? i think that means
Candidate: i don't think we need to check if the is is the
Reference: minor: this. for these as well.
Candidate: why do we need need to be <UNK> here?
Reference: this line also seems to be redundant.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: isn't that would be better to wrap the line on the .isequalto() instead of splitting string?
Candidate: why do we need to use <UNK> here?
Reference: o
Candidate: please remove the method("post")
Reference: not only non-null, but also not empty
Candidate: can we use the builder here?
Reference: please add cmd.getdhcpoptions to the log message to assist with operational debugging.
Candidate: i don't think we need to do we need to do we need need to do we need need to do we need need to do we need to the
Reference: don't forget to update this
Candidate: why do we need to use the <UNK> here?
Reference: no need for unmapped check since already check and returned above.
Candidate: i don't think we need to check for the <UNK>
Reference: maybe we need a contentlet.getbasetype() method that looks up against the contenttype if set or the map if not?
Candidate: should we be the <UNK> here?
Reference: stream instance "one" -> "two"
Candidate: this eating the exception in the eating the exception if the suppresses exception exception exception is skipped, throw an exception exception is skipped, throw validationexception. validationexception.
Reference: no else needed , exception stops the method code
Candidate: we should need to use the <UNK> <UNK> <UNK> <UNK>
Reference: space before {
Candidate: why do we need to check the <UNK> here?
Reference: re? you mean mi?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: move this before the // change the feedback path... line. also, make this edit: ... ~~for~~ **while editing** question...
Candidate: why is this deleted?
Reference: ping
Candidate: why do we need the <UNK> here?
Reference: nit: avoid private fields dependencies in the constructor is preferred. new hashmap<>(instancecapacity); or just assign instancecapacity to _remainingcapacity.
Candidate: remove the method("post")
Reference: is the text still escaped when stored? it needs to be unescaped before storing, otherwise if someone submits an xml file, it won't be an actual xml file that is
Candidate: should we throw an exception?
Reference: how bad is this state? is it alert worthy?
Candidate: why do we need to the the payload?
Reference: we do not use glick-style annotations. if the method returns @nonnull then the @nonnull shall be on the line preceding the access modifiers not between the access modifiers and the
Candidate: why do we need an exception here?
Reference: xl should be called xi for an int. ditto throughout.
Candidate: iterable<integer> <UNK> = <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this is unrelated to the main change and also increases scope of the variable. there is no performance improvement if you meant that.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: initialize should likely go to setpolicy
Candidate: can we use the division here?
Reference: last thing, promise. just check that kernel32.instance.getlasterror() is invalid_handle or something like that. this would fail on a non-us-english system.
Candidate: is there a reason for the fqns ?
Reference: please remove newlines at begin of functions
Candidate: why do we need to check the <UNK>
Reference: should the charset parameter be set for the content-type header?  java this.addheader(content_type, "application/x-www-form-urlencoded; charset=" + getcharset());
Candidate: should we extend the avro message here? %s", <UNK> { %s", <UNK> { %s", 24), %s", intentional <UNK> <UNK> };
Reference: why is this so slow?
Candidate: why do we need this?
Reference: rs -> resultset please
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: ![critical](<link_0> 'severity: critical') define a constant instead of duplicating this literal "someservice" 8 times. [![rule](<link_2>](<link_1>
Candidate: the syserr should be an exception message in the error message.
Reference: the nocurrentcaseexception should be in a separate catch so the error can be logged as severe.
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: strictly speaking, not needed as shard() must be from 0 to 255 right?
Candidate: why do we need to <UNK> the <UNK> <UNK> the <UNK> <UNK>
Reference: shouldn't we check for owner != null here too?
Candidate: do we need to use <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> la <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: throw new illegalstateexception("trying to acquire partition lock twice. please report.")
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: why is this doing log.warn and returning null instead of a code 403? code 403 would make more sense to me. if it's because you just don't have anything you
Candidate: ![major](<link_0> 'severity: major') remove method(s) notfound conditionally. [![rule](<link_1>](<link_2>
Reference: is this correct? according to the [api docs](<link_0>, this should be 406, but the docs have been known to be wrong.
Candidate: can we use the <UNK> here?
Reference: both messages say "later than" - one of them must be wrong.
Candidate: should we be schedule() here?
Reference: same here, stringclass does not deal with wiki content, only teatarea does. the only thing to do here is to escape any html this **plain text** value contains.
Candidate: the syserr should be be the
Reference: replace with userutils.validateusername(string)
Candidate: why do we need the <UNK> here?
Reference: several points not respecting our coding conventions here (space in if condition, else not in the same line as the if closing brace)
Candidate: what is renaming the <UNK> variable or <UNK>
Reference: you initialized map already at line 24, why again?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i would personally prefer if the methods that are the "external api" be public. yes, the outer class can call private methods directly, but most ides show public methods differently,
Candidate: why do we need to use the <UNK> here?
Reference: for a very short time, the interval is out of the queue and returning from the method but not written to the volatile variable yet. i have reproduced the exception
Candidate: if we getparameters().getstoragedomainid()
Reference: magic numbers
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: it looks wrong.. this one is always true: !ishotsetfield(srcfld.getname()) || (ishotsetfield(srcfld.getname()) so i think it should be: !ishotsetfield(srcfld.getname()) || !hotsetenabled right?
Candidate: please use the <UNK>
Reference: these lines could be moved into the if/else block above
Candidate: rename to <UNK>
Reference: what if content-length is 500_000_000? will you really create a buffer with that size?
Candidate: why do we need the <UNK> here?
Reference: this would afaik lead to the creation of a postgresqlcontainer when postgis is used in the jdbc url
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: the original setevent is necessary to keep, so we will end up with two setevent methods: java void setevent(bool); void setevent(string);
Candidate: if the == null) { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: my understanding here is that the proposal is to only cache the result of postmatch(null, null), which is quite a common scenario. if that's the case, shouldn't this be if
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: i don't like this because you are turning every exception into a walk up the tree. even if the dashboard is defined in a project, but its object files are
Candidate: why do we need to the the sizes of the <UNK>
Reference: unnecessary braces?
Candidate: i don't understand why, but it matters, but it is be <UNK> to the the <UNK> the <UNK>
Reference: please use assertj
Candidate: why do we need to test eq here?
Reference: i'd add a checknotnull here and make the builder field a boolean. this will make sure someone sets the field instead of it defaulting to false.
Candidate: why do we need need to the <UNK> here?
Reference: inline?
Candidate: can we use system.out instead?
Reference: would addall() work here ?
Candidate: this should be the <UNK>
Reference: question: why are you first setting homeasupenabled to false and then to true?
Candidate: if we stripe { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: why do you think that this behaviour is right?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: just to double check: we do not want this to be the default behavior in bufferwritingresultpartition, because this would finish the partial buffers for streaming/pipelined cases as well, which we
Candidate: this should be <UNK>
Reference: if the hostname is already trusted you no longer need to check for the url. i suggest you to remove this line from here, then to add an if statement
Candidate: should we throw an exception?
Reference: please assert the charset is the iso-8859-1 charset.
Candidate: this should be <UNK>
Reference: s/ram/local-heap/
Candidate: mainly work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work, work,
Reference: why does this need to start with file.pathseparator?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: could be maybe a bit more elegant to use the stream api to do that? :)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: this test fails when running ce537ac0417ebb159a4589f028a024814e03d03f.
Candidate: should we use the <UNK> here?
Reference: this does not surface the exception and is a silent failure. it should throw.
Candidate: the syserr should be be the
Reference: scene.getpopup() should be accessed in a static way.  at least, that's what eclipse says. and i think the same. (this is not the only line this warning is generated)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i think it was better with the old static imports.
Candidate: why do we need to the the payload?
Reference: nit: capital 'g' for start of sentence. also, redis should be capitalized.
Candidate: i don't think we need to check the if the is the software <UNK>
Reference: i prefer to have the variable on the line before for debugging.
Candidate: this should be <UNK>
Reference: this is still showing up with no indication of what the actual error is. i think we need to display all available diagnostic info in the console to make it
Candidate: please use gender here?
Reference: responsetypes.stream().anymatch(s -> responsetype.fromstring(s, "").contains(token))
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this is not needed.
Candidate: this catch (throwable e) { throw exception } catch (throwable e) { thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw ioexception } catch (ioexception e) { throw } catch (ioexception e) {
Reference: i am not to fond of this type of code as it could result in a npe, i would want some checks here to protect us.
Candidate: should we be the <UNK> here? if we { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: space around +
Candidate: please use <UNK>
Reference: it reads a bit strange to fall through to lookupcoordinator if we know the request doesn't need the coordinator. maybe clearer with a slight restructure: java transactionmanager.retry(nextrequesthandler); if (nextrequesthandler.needscoordinator()) {
Candidate: why do we need this check?
Reference: name will always be null before save
Candidate: the syserr should be be <UNK>
Reference: @rnveach we shouldn't ignore any exceptions unless absolutely necessary. what are cases when absolute path works but canonical path fails?
Candidate: this should be repelaced e1 && <UNK> { return false; }
Reference: just to double check, is it safe to assume number of executors is same as number of tasks? if there's safe way to get the value it would be better
Candidate: why do we need the <UNK> here?
Reference: check args ?
Candidate: can we use the exception here?
Reference: i think we can and should move to using guava's files etc as much as possible for this kind of thing. but for now, you could use something like: 
Candidate: <UNK> -> <UNK> <UNK> -> entry.getkey(), <UNK> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK>
Reference: +static
Candidate: should be precise, we should be the <UNK> here?
Reference: extraneous final
Candidate: why do we need the <UNK> here?
Reference: why are you returning 0 instead of value from indefault like in other methods?
Candidate: should we throw an exception here?
Reference: why new arraylist<>(aslist( ?
Candidate: why do we need need to the <UNK> here?
Reference: we should probably implement this equality checking in the equals() method of discussionthread. that should also take care of performing null checks (as a sanity check).
Candidate: why do we need the <UNK> here?
Reference: just a clarification: the wd_file location is now somewhat hard coded in the implementation. but it is still modifiable in the service preferences. there is still a reference to the
Candidate: why do we need to here?
Reference: it looks like you left this in by mistake. either remove the line or change the text description.
Candidate: why do we need to here?
Reference: i think it's not an error, it can be logged with "debug" level
Candidate: throws exception
Reference: remove extra parentheses
Candidate: this should be setemptyelement().
Reference: do we need this since we already have a log by the thing status update with the same message?
Candidate: why do we need to use <UNK> here?
Reference: availableemptyexpressions some interpreter do not only provide a prefix but also a suffix.
Candidate: <UNK> -> <UNK> -> entry.getkey(), <UNK>
Reference: shouldn't we do the same thing than above in the code (ie: using objects.equals)?
Candidate: if there is a reason to use <UNK>
Reference: extra space
Candidate: do we need need to tweak the setup in setup the setup
Reference: thread is needed only inside if block
Candidate: this should be the <UNK>
Reference: static import utf8slice
Candidate: this should be the <UNK>
Reference: mb it would be better to create instance of usermanager in method annotated with @beforemethod
Candidate: this should be injected, in the presenter.
Reference: are the left over agencies: agencies with reports to agency that has not been sorted? would it make sense to update the method name to be more descriptive?
Candidate: please use <UNK>
Reference: entitymanager shoudl be closed after each query. we should put this in a try block so we don't leak it: java try ( entitymanager entitymanager = emf.createentitymanager()) { //do stuff
Candidate: should be schedule() { <UNK> } } else { if (throwable { <UNK> { <UNK> { <UNK> } } } } }
Reference: it's hard to get what 6 actually means. recommend to use orientpermission - there is method to get combined flag as int.
Candidate: why do we need need to the <UNK> here?
Reference: please remove the added exceptions
Candidate: what happens if the is is the the <UNK> is invalid? we don't want to do we want to do we want to trim the
Reference: this should be an unsupportedoperationexception, not an illegalstateexception
Candidate: should we use the unsupportedoperationexception instead of <UNK>
Reference: ditto about "indeterminate" in error messages.
Candidate: what happens if the is is the
Reference: refactor this to a reusable (injectable) function that transforms a docker state to a jclouds node status?
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: the only thing i can think that _might_ be a problem is that any argument implementations that depend on e.g. statement.iswrapperfor() or statement.unwrap() to unwrap a vendor-specific prepared statement might
Candidate: please use <UNK> <UNK> <UNK>
Reference: too many indents in this method, i would extract this part to another method.
Candidate: why do we need to use <UNK> here?
Reference: error or warn.
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: i smell a c++ coder here. please use a for-each loop so my eyes don't bleed. :)  for (element button : relesecontainer.select("li a")){ }  magic.
Candidate: if <UNK> == direction.incoming) { <UNK> }
Reference: again with i think this was intended to be an update.
Candidate: can be replaced with <UNK> <UNK> <UNK>
Reference: please rename superonclose() (line 313) to superdoclose() as its what it does and it's confusing here to see java public void onclose() { superonclose(); ... super.onclose(); }
Candidate: should this be <UNK>
Reference: why "auth_type_email" string? enum or integers and no magic numbers.
Candidate: should we call <UNK> here?
Reference: yeah, i agree it's likely not winning us any time, just complicates the code path. i'm in favour of dropping them
Candidate: rename to iu
Reference: it is not clear to me why we need to suppress this exception.
Candidate: why do we need the getconnection here?
Reference: minor: validate that hive-site.xml exists and print a warning if it doesn't? looks like this can be a common mistake.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to the exception in the
Reference: this will find all of the columns with that name in any table in any schema in any database, right? and won't it be possible to return more than one
Candidate: why do we need to here?
Reference: what if several clusters? we should at least todo or jira
Candidate: i don't understand this matters, but i think this matters, but i think this matters, if you do, can we move this logic into a separate method?
Reference: extract?
Candidate: can you || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: what if it's an integer, or short, or ... whatever? can it check number.class.isassignablefrom(...) instead?
Candidate: please use the syserr
Reference: i guess i'd use string::matches here instead of the whole pattern ceremony. this is not important though - change it or keep it, i don't mind either way.
Candidate: please remove the
Reference: for-each here  for (jsonelement jsonele : jsonarray) { // stuff }
Candidate: i don't understand this matters, this matters, if you matters, this matters, this matters, this matters, but i don't understand this matters, if the matters, matters, but it matters, but
Reference: this is probably unnecessary now -- all of the resolution is done by the population of the entity from the dto.
Candidate: should we throw an exception here instead of the exception?
Reference: no check of the missing resource
Candidate: should we use the exception here?
Reference: i guess it should be account not amount.
Candidate: i don't think we need to do we need need to the getcredentials to the getcredentials
Reference: i think maybe here print the size of the buffers queue? validate that it is > 0
Candidate: we should need to log the exception here
Reference: asserttrue?
Candidate: if oldvalue is null?
Reference: fix condition.
Candidate: the syserr should be be the
Reference: same on local variable.
Candidate: please use <UNK>
Reference: is it a good idea to output errors in a tostring. it may have sensitive data.
Candidate: can we use <UNK> here?
Reference: we should check that getallpendingjobs is not returning null. in api21 there is no notnull annotation for that method.
Candidate: ![minor](<link_2> 'severity: minor') remove this variable name of the [![rule](<link_1>](<link_0>
Reference: i think expression.getvalue() with return type variant to boolean.class does the trick for us. as far as the conversion service is in charge the in spel.
Candidate: can we use the <UNK> here?
Reference: what is the semantic of these different config strategies? you are using environment variables and a config file. would it be possible to use just one mechanism? i think this
Candidate: should we throw an exception here?
Reference: actually can you revert this, and also put the call to buildfontlist back into getfontlist? you removed it but that's a behaviour change i didn't notice, it means if someone
Candidate: why do we need to use <UNK> here?
Reference: loads of findbugs for potential npe with this style as getinstance() may return null
Candidate: this should be <UNK>
Reference: reloading all filters seems a bit unnecessary, should just update the icon maybe?
Candidate: why do we need the <UNK> here?
Reference: this method name has a typo (final 'y').
Candidate: should this be <UNK>
Reference: similar to the csvschema, could we let users override the default? as in:  csvmapper csvmapper = getcsvmapper()!=null ? csvmapper() : configurecsvmapper(); objectreader objectreader = csvmapper.readerfor(jsonnode.class);
Candidate: this should be the <UNK>
Reference: fetch the raw value
Candidate: should this be <UNK> <UNK>
Reference: s/ignored/expected
Candidate: you don't need to use the translations here.
Reference: please define the new key names in the constant class. this will make them easier to discover.
Candidate: can we move this into the constructor?
Reference: maybe we can do if(!mservice.iscontrolenabled()) { setsystemaudiomode(false); }
Candidate: why do we need this check?
Reference: the main difference i see between the two prs is that this pr leverages the use of getchannel() which only returns a channel object. just a few lines later the
Candidate: why do we need need to the <UNK> here?
Reference: nothing happens here, i think the entire addjobchangelistener should be removed like others.
Candidate: i don't understand why, but it matters, what is happening.
Reference: unboxing will happen in the comparison in the if branch anyways, so probably better to do it early declaring the type long here.
Candidate: why do we need to here?
Reference: having a potentially null field seems unnecessary. how about initializing it with binaryauthenticationvalidator.instance?
Candidate: please use <UNK>
Reference: coreexception is much wider than resourceexception, which is the one you want to ignore. wouldn't explicitlyt checking whether the resource exists be more precise?
Candidate: should we be the <UNK> here? if we { null) { <UNK> } <UNK> { return false; }
Reference: i like this cleanup.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: onfilecreate can fail, when there is an exception, in that case, the file will be in the processedfiles list and we would not retry setting up pipe ?
Candidate: i don't think we need to check if the is is the
Reference: shall we remove these, test println()?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: this may be a very heavy operation, if it's called for many items, it can be a serious performance hog. i think we should avoid relying on regexp as much
Candidate: this should be the <UNK> <UNK>
Reference: this line will have to move into the analyze function in order for the skipframes builder function to take effect
Candidate: why do we need need to use the here?
Reference: can the setter calls on the builder be chained? probably look nicer that way.
Candidate: why do we need need to the <UNK> here?
Reference: as this if-else if-else if-else getting longer, let's use switch case?
Candidate: can we use the same as as the previous argument
Reference: mppushspy.getbitmapfromurl(valid_url) will never be called because you're sending an empty string to mp_imgurl. i don't think you need to mock this method because it shouldn't actually be called at all.
Candidate: why do we need the <UNK> here?
Reference: does it make sense to constantly create threads in packs of 10? why not to use single cachedthreadpool for this service?
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: what about we do not have any options for over , there would then has no reference for underlying inputs.
Candidate: this is the fixture.
Reference: you can make this more readable by introducing local variables. having a multi-line expression is not ideal.
Candidate: rename to <UNK>
Reference: we can remove this line, so that we always use the latest codec, right?
Candidate: this should be <UNK>
Reference: hi, since existing object ids start with 1 and you define void/groupid=0 by default, then you can safely use something like: session.isvoadmin(void) || session.isgroupadmin(groupid) in the first if.
Candidate: i don't think we need to check if the is is the
Reference: determining if we require a prediction model should happen in the scheduler
Candidate: why do we need to check for the <UNK> <UNK>
Reference: hmmm... the if branches do the same thing... or am i missing something?
Candidate: this should be setemptyelement().
Reference: this should be an || instead of a &&
Candidate: we should need to synchronize on the so we don't need need to do we need to synchronize on the <UNK> bottleneck.
Reference: it would be nice to know that our connection is against the prod endpoint.
Candidate: should this be <UNK>
Reference: besides container.shutdown, should we do jobcoordinator stop as well?
Candidate: the syserr should be be the <UNK>
Reference: this could just be made synchronized... then we can just call "clear" etc.
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: this causes a "score trap" (see docs). edit: not really, because 2 aassignments, will yield -1, 3 will yield -2 and 4 will yield -3. so it's not a 100%
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: consider using the positive checking, which should mean you have 5 positive branchstate checks since 6 negative checks are done now.
Candidate: should we be the specific?
Reference: you should test hasnext each time (before calling the 1st next until after calling the last next.
Candidate: nextvalueindex should be setemptyelement().
Reference: please make this more readable... sure its compact but its really hard to read.
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: use %s placeholder instead of {}
Candidate: why do we need to use <UNK> here?
Reference: just pointing this out in case you dont want it commit this app id
Candidate: why do we need to evict the the iae too?
Reference: maybe "configure 'verified' label"?
Candidate: do we need to check the <UNK> if branches, set?
Reference: use getconstantsconfig().getgroupscope().equalsignorecase(scope) to avoid npe's
Candidate: please use <UNK> <UNK> <UNK>
Reference: sorry just one more minor thing. do you think it makes sense to have the exception plus stack trace here as well? otherwise it might be hard to debug if
Candidate: why do we need this?
Reference: please favor immutable collections. val response = immutablelist.<multipartupload>builder() here.
Candidate: why do we need to permission?
Reference: v4.0.0.equals( nodeversion ) would suffice without diff verbosity. it seems there are some spacing changes here.
Candidate: i don't think we need to check for the <UNK>
Reference: @mdinino could you use more descriptive variable names?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: when the default value for the timeout is being used, instead of hard-coding the value like here, it would be better to use a reference to the default_server_connection_timeout defined in
Candidate: use <UNK>
Reference: same here, just for clarifying: build.version_codes.jelly_bean_mr2
Candidate: i don't think this should be the <UNK> <UNK>
Reference: needs to be replaced by interface
Candidate: this should be <UNK>
Reference: minor: is it possible to have this try-catch wrap just whatever line is potentially throwing it?
Candidate: :disappointed:
Reference: there is also a constructor that explicitly disables stracktraces, and given we are dealing with licensing code, i would suggest using that one.
Candidate: please remove the <UNK>
Reference: something seems wrong with the name mapping. when i select a file (executable or text file), the whole trace entry gets duplicated.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: modelprovider.getmodel() could be inlined here.
Candidate: the syserr should be be called via:  public void run() { input) { <UNK> fail(); } }  private void run() { <UNK> input) { <UNK> fail(); } (throwable
Reference: please bring the braces back.
Candidate: why do we need the get* the get* the get* <UNK>
Reference: end variable is used only once, hence, it is better to inline it: qualifyingset.setend(qualifyingset.getend()); however, inlining shows that the variable and the statement that's using it are not necessary. let's
Candidate: why do we need to use the <UNK> here?
Reference: no need for the wait, defaultshell already has the wait inside
Candidate: please 49
Reference: can we check this is in an assert?
Candidate: <UNK> *= 2;
Reference: consider using string.format() here
Candidate: why do we need to here?
Reference: you can you atstartofday() or something like that.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: another place where we could note that the boolean is unused.
Candidate: can you check isempty()?
Reference: remove the extra newline.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: this is the unexpected result, will have a look.
Candidate: why do we need the <UNK> here?
Reference: we should combine the list with the deferred adapters. maybe give a deferred adapter a name?
Candidate: just use just just just just just just just just just just just just just just just just just just just just just just just just just just just just
Reference: second parameter of status is the pluginid. why to pass path here?
Candidate: why do we need to here?
Reference: do we need return or print logs here
Candidate: the syserr should be be <UNK>
Reference: this condition could be put in a new method to factorize code and improve readability.
Candidate: if we is software software stripe { <UNK> <UNK> } } } } } }
Reference: i guess you don't want to show the internal fields (e.g all) in the dialog
Candidate: please use <UNK>
Reference: this change seems to be incorrect. the original code was supposed to calculate the size needed for all the volumes (when performing collapse), while this one seems to take into
Candidate: you can use <UNK> <UNK> <UNK>
Reference: the apply method should only return false if a not expected situation happens. so if the player guesses the card name wrong, it should return true and not false, because
Candidate: do we need to check if <UNK> != null) || <UNK> { <UNK> }
Reference: nit: it's a bummer that checkstyle doesn't run for tests, but (regardless) you will need a space before { as in:  exception {
Candidate: <UNK> *= 2;
Reference: challenge service returns a challengetemplate
Candidate: please use <UNK> <UNK>
Reference: and this should go away i.e the if clause
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: why this method is called scheduleall ?
Candidate: should we move this into the messages.properties method?
Reference: why checking only the expression of the memberselectexpression ?
Candidate: @vilchik-elena this safe, covers the lhs covers the lhs covers the lhs covers the form of the form form form form form form form form form form form form form
Reference: i'm wondering if we want to add any more logging here. it'd be great to try and get as much detail as possible when this happens.
Candidate: why do we need this check?
Reference: unnecessary parentheses.
Candidate: can we update the condition inside the condition inside setzoomratiointernal update it seems not sure to update the second condition seems not sure to update the second condition seems not
Reference: == and != in scala is .equals (with proper null handling), have we made sure that we haven't switched from .equals to reference equality?
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: @cfieber i'm thinking maybe pass a property from build.gradle in and use maven local resolver here?
Candidate: this should be <UNK>
Reference: checkedcast()
Candidate: why do we need to tear to the <UNK> <UNK> <UNK>
Reference: ultimately, the whole section here is to find the set&lt;string&gt; processornames. i would suggest to fold all this into a single method getprocessornames() and pass that to the grouper's constructor.
Candidate: please use <UNK> objects.tostringhelper() for <UNK>
Reference: no sure, but isn't it possible to use a "try with resources" here?
Candidate: why did you decide to the number of the number of the number of the number of the number of the number of the thing)
Reference: :ant: also deserves a test.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: we're on java 8, so now you can do string solved = data?.getstatus();
Candidate: i disagree with the <UNK> of the <UNK> and <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: i.e., java if (boolean.true.equals(request.getattribute(basicheaderapitokenauthenticator.class.getname())) {
Candidate: should we throw an exception if we { null) { throw new <UNK> } { throw new <UNK> { throw new <UNK> { throw new <UNK> { return <UNK> }
Reference: i know it was like that in dimensionpredicatefilter but should 'no predicate' mean 'matches all'?
Candidate: you can use the iterator here instead of vector
Reference: if ( jsonld.contains("\"_:foo\"") )
Candidate: i don't think you touch the fixture.
Reference: why not just use domaindatadir.topath()?
Candidate: why do we need to here?
Reference: please check the messages for validation errors (post validations). since we add errors on the agent config object and throw the goconfiginvalidexception, we must show 422 (unprocessable entity) instead of
Candidate: why do we need to use <UNK> here?
Reference: i know it's been around forever, but does this make you nervous? our intent is for it to return "zh" but i don't think that's guaranteed. it's implemented as a
Candidate: why do we need the <UNK> here?
Reference: if the dedicated java.time methods from timestamputils are used this should no longer be necessary.
Candidate: why do we need need to the <UNK> here?
Reference: let's give that variable a better name, what about config?
Candidate: the syserr should be be <UNK>
Reference: feature check would be enough
Candidate: is this possible to evict null?
Reference: this should use the testsuiteenvironment.getserverport() instead of the hard-coded port.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: should use create.getdisplayname() here i guess.
Candidate: you don't need to check the <UNK>
Reference: use stringutils.isblank
Candidate: what happens if the exception is thrown is the
Reference: i think there's a newline missing here. it fails this test:  @test public void shouldcheckoutifsvnrepositorychangestoaparentrepo() throws ioexception { string initialrepo = testrepo.projectrepositoryurl(); runbuild(buildcommand("3", initialrepo), jobresult.passed); assertthat(console.output(), containsstring("checked out revision
Candidate: this should be the <UNK>
Reference: i still think starting with a lowercase looks better in the status report that git prints.
Candidate: why do we need to use <UNK> here?
Reference: in [this check](<link_0>, we did something similar and we used expressionshelper.getconstantvalueasstring. we may want to use it to be consistent. it would also avoid to trim the quotes at line
Candidate: i don't understand why, but it is be the if the is is the
Reference: do we need the check block on line 219 if this validation code runs over things first?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: formatting
Candidate: the syserr should be be the <UNK> <UNK>
Reference: duplicate
Candidate: do we need need to do we need this?
Reference: obviously this text needs to be externalized.
Candidate: why do we need need to here?
Reference: do we really need to synchronize here? i tend to think no, but yet again, here is where the race condition was.
Candidate: i don't understand system.exit, we don't need to do we need to synchronize on the anyway?
Reference: this should go inside of synchronized block. since metrics may be added to _metrics after you've instantiated sizejvmmetrics.
Candidate: please remove this line
Reference: you may also return early here to avoid one level of nesting.  if (!doi.ispresent()) { entrieswithincompletemetadata.add(entry); logger.info("skipping reference with citation key \"" + citationkey + "\", since it does
Candidate: what happens if it is foreach loop : foreach loop : foreach : foreach : foreach : foreach : foreach : foreach : foreach : foreach : foreach : foreach
Reference: why don't you have different playsound effect functions in your adio controller wich in turn fetch from the options menu? this structure is the beginning of god behaviour.
Candidate: should this be <UNK>
Reference: i wonder if a helper method would be better here? something like isclientcredentialsgranttype(authorizedclient)
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: the common refrain, why not use a try-with-resources to autoclose this thing?
Candidate: this should be setemptyelement().
Reference: @bertram25 we're only using this variable once, better to inline it.
Candidate: @exper0 let's use system.currenttimemillis()
Reference: is this. required?
Candidate: if there is an transactional designed like an illegalargumentexception if the is is false.
Reference: why is object returned instead of a specific type?
Candidate: can be simplified to <UNK> <UNK> ?
Reference: remove 'assert.' ?
Candidate: can be rewritten
Reference: chain?
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: typo: require_s_ a_n_. same below.
Candidate: should we be the <UNK> here?
Reference: nit: prefer static import. also normally it's useful to include a hasmessagecontaining to make sure it's the exception you expect
Candidate: why do we need to use <UNK> here?
Reference: it should be future.channel().close()
Candidate: this should be the <UNK>
Reference: it looks like this will update its presence with every new transcription result. or am i missing something? i would expect it to update its presence when the status changes
Candidate: you don't need to use the <UNK>
Reference: nit: you can merge both lines above as checknotnull will return the given argument
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: afaik you should not use string concatenation in debug traces.
Candidate: we should use the <UNK> in the messages.properties
Reference: should this be completionfuture.completeexceptionally(t) ?
Candidate: nit: 49
Reference: using optional.of() here will fail since it throws an exception when meta is null. can you make sure there is a test that checks this?
Candidate: this should be the <UNK>
Reference: i think this would be more readable when you merge the if branches of both ifs and maybe extract them into a private method.
Candidate: the syserr should be the
Reference: i would only use the try-catch block for beanmanager.resolve() to make it clearer.
Candidate: we should need to do we need to do we need need to do we need to check whether the user is submits the <UNK>
Reference: the formatting is a bit broken here
Candidate: <UNK> *= 2;
Reference: i think this should return whatever the channel this service represents (so pass in the channel name as a constructor argument). that way subscribechannel will work normally.
Candidate: should we throw unsupportedoperationexception
Reference: 'pd' no longer makes sense as a variable name, here and many other places
Candidate: why do we need the <UNK> here?
Reference: i think that this logic would be a bit easier to follow if we combined these two checks and used !==. that way it's clear that pack types can only
Candidate: if (state != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return false; }
Reference: the standard one here is "attr"
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: no need to use preconditions.checknotnull() here, .withparam("token", token, true) will throw a exception if token is null or empty.
Candidate: should this be <UNK>
Reference: perhaps this should be false, so you can selectively enable it - at least initially?
Candidate: why do we need to use <UNK> here?
Reference: wrap with a meaningful message or just let it bubble up.
Candidate: should we throw an exception?
Reference: !objects.equals(
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: for null values, we just do not supply those properties in the autogenerationoption
Candidate: why do we need to check for the <UNK>
Reference: this variable could use better english :wink:
Candidate: should this be <UNK>
Reference: i think we should update getfirstannotation() as well, for this scenario java @exclude class foo { } @include class bar extends foo {} class baz extends bar {}  i
Candidate: the syserr should be the
Reference: @suseika please remove assert, we don't use them
Candidate: why do we need to use <UNK> here?
Reference: we still need to check isdebug enabled as this does not use marker
Candidate: this should be injected, via: <UNK> <UNK> { throw fail(); }
Reference: i don't think it improves performance that much, but you could stream the result from allitems() and collect it into a list, avoiding the for loop.
Candidate: the syserr should be be the
Reference: could we move this to a util class that's clearly marked as non-public api?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: add missing braces here
Candidate: can you rename the <UNK> to <UNK> <UNK>
Reference: think i'd invert this:  if (a && b) { return positive; } else { return negative; }
Candidate: i don't need to check for the <UNK>
Reference: suggestion: there seems to be a potentially surprising different in behavior between setsteps and withsteps if you call them when there are already some steps in the builder. the former
Candidate: use immutableset.copyof(e[] elements).
Reference: maybe we could change them to ved here and throw the error early if it's not a valid ve?
Candidate: why do we need to check the <UNK>
Reference: could we use objects.equals in whole class please?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: static import
Candidate: should we throw an exception here?
Reference: likewise this. using the immutabledatacachingutil please.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: we may want to consider crashing the app in debug to follow the fail fast principle and showing a snackbar so the users know something went wrong, wdyt?
Candidate: this should be the <UNK> <UNK> <UNK> the presenter.
Reference: how about setting a kubernetesproperty namespace instead of using powermockito here? and the same for the other test.
Candidate: why do we need to mock <UNK> here?
Reference: when touching the line above i would have done an s/hudson/jenkins/
Candidate: should we be debug level?
Reference: could you help to rename logger to logger ? it is our convention for naming static variables.
Candidate: the fix.
Reference: why is this variable mutable? another way is to extract it to a separate method (e.g., getnumrunningworkers()). wdyt?
Candidate: <UNK> *= 2;
Reference: i had trouble understanding createkey and createlimiter because they return respectively a value and a function that returns a value: suggestion string limiterkey = getipaddress(jp); ratelimiter limiter = limiters.computeifabsent(limiterkey, getlimiterfactory(limit));
Candidate: the syserr should be be the
Reference: if it's a time-consuming operation, there may be a benefit to run them in parallel ?
Candidate: do we need to <UNK> <UNK> instead?
Reference: looks to me like the only way creationorder.sublist(0,1) would fail is if their creation times are identical (ie to nearest millisecond). i don't think there are issues with "older" one
Candidate: please use <UNK> <UNK> <UNK>
Reference: use list in place of newarraylist, it does the same thing but is a bit lighter to read.
Candidate: why do we need the <UNK> here?
Reference: hm. i think we should actually be concerned if we ever get to here -- i'm not sure the taskmigratedexception made sense either. trying to add records to a closed
Candidate: groupname --> groupname is groupname should be groupname of groupname should be groupname
Reference: i think you can use the interface here -- "cell" instead of "abstractcell". it's a little more proper to do that in java. other than that, looks good.
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: can you use busy waiting, event or latch here? in the current implementation, this test lasts for six seconds, even if it is not necessary. unfortunately, the tests are already
Candidate: why is this line overflows?
Reference: is the synchronization around trying to prevent people from simultaneously using the database connection? if so, i think there's a case where you call get() on two persistences simultaneously and
Candidate: i don't think we need to synchronize on the so we don't need need to do we need to synchronize on the <UNK>
Reference: i think we should use a larger number for the maximum batch size, e.g. 2 * deletebatchsize as we discussed before. the partitioning code will return batches that have at
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: don't use hard-coded 92
Candidate: i don't understand this matters, this matters, this matters, this matters, that this is is the
Reference: static import?
Candidate: why do we need the <UNK> here?
Reference: why call copy 2nd time?
Candidate: i don't think we need to check for the <UNK>
Reference: suggestion
Candidate: please use setemptyelement().
Reference: we can omit check on perunadmin role here, since any of the check will be true for such user. check on perunobserver stays of course.
Candidate: please add ", "
Reference: should we consider giving it empty list instead of null?
Candidate: this should be <UNK>
Reference: put in two lines.
Candidate: if <UNK> != null) || <UNK> == null) || <UNK> == null) || <UNK> == null) || <UNK> || <UNK> == null) || <UNK> == null) || <UNK> || <UNK>
Reference: currently this will fail because the operators throw an exception. so for now we may have to simply return an empty list and open another jira as a reminder, to
Candidate: should we use the exception here?
Reference: as a safeguard regarding null, i suggest to replace the condition by if (objects.equals(l.getcomponentid(), component.getuuid())).
Candidate: why do we need the <UNK> here?
Reference: code is inconsistent in spacing/braces. to make it consistent i would add { } here and remove the extra spaces, on this line and the other lines that duplicate this,
Candidate: if you == direction.incoming) { null) { <UNK> }
Reference: as we discussed elsewhere, maybe the strategy should be: * if the regex does not match => optional.empty() * if the regex matches, but some extracted field on wrong format
Candidate: can be simplified to <UNK> <UNK> ?
Reference: why isn't this oncompletion(null, gse)?
Candidate: should this be null?
Reference: why did we make this change?
Candidate: !isempty() free free free free free free free free free free free free free free free free free free free free free free free free free free free free free
Reference: it would be simpler if malformedurlexception would be converted to a runtimeexception in getjob method so that no throws is required.
Candidate: why do we need to use the <UNK> here?
Reference: view isn't being used here.
Candidate: why do we need to check the <UNK> <UNK>
Reference: whynot just this.ssl = sslcontext != null
Candidate: i don't understand this matters, this matters, this matters, but you don't need to repeat the <UNK> <UNK>
Reference: i think it should be the original one or "is not _a_ primitive type".
Candidate: why do we need to use the payload?
Reference: you can do it in a single line new arraylist<>(types.getmixins().keyset()) which also improves memory usage.
Candidate: why do we need the <UNK> here?
Reference: please don't abbreviate variable names. it might make the code shorter, but also harder to understand. especially this method would benefit from much more descriptive variable names.
Candidate: should we use <UNK> here?
Reference: no need for this, you've already checked that it's null. direct == should be fine.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: looks like the opposite?
Candidate: should this be <UNK>
Reference: what should happen if d == -1? (e.g. if the suffix should be the entire basename in that case then this should set 'd = s'.)
Candidate: the syserr should be be <UNK>
Reference: i believe the algorithm here is "findmarker" or "findmarkerbytitle". consider methodizing this so it's perfectly clear.
Candidate: why do we need the <UNK> here?
Reference: do you mean - (1 + meanbiasincr)?
Candidate: why do we need the <UNK> here?
Reference: this is ok, for example group is superuser, so user can login even if not in database, the id should be random uuid or something similar, you already took care
Candidate: can we use the <UNK> here?
Reference: category
Candidate: please use <UNK> <UNK>
Reference: it looks like glueclientfactory is only used here, and is effectively a static method. let's move it to be a static helper method in this class.
Candidate: please use <UNK> <UNK> <UNK>
Reference: i don't think that it is safe to use ordinal() for encoding and decoding. as it means that two implicit decision (the order of the enum definition, and the way
Candidate: can we use an exception here instead of a boolean?
Reference: i meant a . after " but the field is of type %s " since the next statement is a new sentence and starts with a capital letter. lgtm otherwise.
Candidate: use readasstring(...) use use use use use use use use use use use use use use use use use numbervalue use use use numbervalue use use use numbervalue use use
Reference: why container.isencrypted() is not passed in as last arg for constructing the blobproperties.
Candidate: this fail()?
Reference: cosmetic: could you please rename this to futurenumericdate?
Candidate: why do we need the <UNK> here?
Reference: doing it in the constructor is fine
Candidate: can you move this to distance mapping?
Reference: logging using standard output
Candidate: please use the enum?
Reference: why not just 'return !isaninprogresssubmission(context, item);'?
Candidate: this should be the <UNK> <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: why not include the malformedurlexception as cause?
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to check the <UNK> <UNK>
Reference: why do we have a keystoreresource and a keystorepath?
Candidate: why do we need the layout here?
Reference: not yet committed
Candidate: should this be possible?
Reference: this check seems to be important to be backward compatible, i guess. any chance for calling connectionwrapper.wrapconnection() (as you do in production code) and checking the instanceof on returned object?
Candidate: why do we need need to the <UNK> here?
Reference: won't this go into an infinite loop? presumably we want to only retry some sane amount of times.
Candidate: this args?
Reference: why can't we use id.equalignorecase check instead of the other way around? this option is more flexible than hard code english locale
Candidate: the syserr should be be the <UNK>
Reference: [nit] this looks like a restatement (or slightly stronger version of) the previous line?
Candidate: what happens if the exception is the eating the exception?
Reference: return itemclass.isassignablefrom(mavenmodule.class) || itemclass.isassignablefrom(mavenmoduleset.class).
Candidate: this should be repelaced e1 and <UNK> the <UNK> <UNK> <UNK>
Reference: please add a space after the ,
Candidate: <UNK> *= 2;
Reference: maybe we should works this method for using of multiple arguments:  codenvyeditor#waittextintoautocompletecontainer(string ... expectedtext);  it helps to reach more compact syntax:  editor.waittextintoautocompletecontainer("print", "println", "printf");  what do
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: i would only execute this try if overflow is not already set. given the way this code is currently written, i'm concerned about repeated throws in a tight loop.
Candidate: please use <UNK>
Reference: use assertnotnull
Candidate: please remove the <UNK>
Reference: i believe the content of the httpmockrule should be tested here as well, not only the existence.
Candidate: why do we need to check the <UNK> <UNK>
Reference: we should be careful about the meaning of this method. before it meant that a user had a confirmed booking. are we defining reserved as definitely confirmed now?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: bashcommands.ifexecutableelse0("apt-get", bashcommands.chaingroup(...))
Candidate: why did not needed again?
Reference: this can throw ioexception if i recall correctly, and should be handled properly so that deletedirectory is cleaned up regardless.
Candidate: what happens if the is is is the <UNK> the <UNK> is submitted to do we want to acquire the lock on the lock
Reference: this seems too fragile. it wouldn't be an odd thing if this took > 1 second. i think it's valid to loop for quite a long time (say 20 secs)
Candidate: why do we need the <UNK> here?
Reference: is it ok to return null if the property does not exists or should it throw an exception? pls check spec
Candidate: should this be <UNK>
Reference: nit: could name this variable binder
Candidate: why do we need the <UNK> here?
Reference: add the thread group name
Candidate: should we throw an exception here?
Reference: if the config format is busted, i wonder if we should throw an illegalstateexception here.
Candidate: should we use the exception here?
Reference: you likely need to rebase to add truntime exception
Candidate: please use <UNK>
Reference: why's stripe count is saved as string?
Candidate: why do we need need to the <UNK> here?
Reference: maybe write a mock rule (similar to mockjoin) to simulate the project + aggregate split that you want to test? i had a hard time to understand why aggregatereducefunctionsrule will
Candidate: i don't think this touch the fixture.
Reference: notebookservice is usually for external call (such as websocket or rest api). because only websocket & rest api needs callback. here we can directly call notebook() to get note and
Candidate: nit: you can use <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: as the data will be accessed through memorystore, we don't need to have data be a class variable; instead, let's change it to local variable, and also the data loaded
Candidate: nit: i don't understand why, but it matters, but the columns should be 127 explicitly)
Reference: the follow menu item should be disabled in this case since you won't know whether running it will follow or unfollow.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: -1 can be used to represent no_offset, will that cause a problem here?
Candidate: why do we need to use the here?
Reference: it isn't type safe. are you sure that all objects are _metadatatype_?
Candidate: the syserr should be be the <UNK>
Reference: static import
Candidate: should we throw an unsupportedoperationexception instead?
Reference: can simply use isempty.
Candidate: why do we need to use <UNK> here?
Reference: log.debug ?
Candidate: ![major](<link_1> 'severity: major') throw an exception [![rule](<link_2>](<link_0>
Reference: call setsecretwithresponse(name, value, context.none).value()
Candidate: can be replaced with <UNK> ?
Reference: hostmessenger has a helper function gethostgroupsfromzk(), maybe you can get it from there.
Candidate: please use the <UNK> <UNK> <UNK>
Reference: can we send null instead?
Candidate: this should be <UNK>
Reference: static import
Candidate: should this be the <UNK>
Reference: just change "" to null
Candidate: the syserr should be be <UNK>
Reference: how would this affect the memory footprint of each event? also, is a soft copy okay here? i guess if soft copy is okay, then it won't be too much
Candidate: this termination should be null? if <UNK> == null) { return; }?
Reference: you might replace this for user.isadmin
Candidate: why do we need to use <UNK> here?
Reference: getdate is deprecated. is there a non-deprecated method you can call with the same result?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: typo is here as well, iteration
Candidate: why do we need the <UNK> here?
Reference: try to avoid one level of indentation using (!mood_node .
Candidate: why do we need the <UNK> here?
Reference: to make this more bulletproof, can we wait for the file to exist and be not empty in a loop? if the file never gets created, the test would eventually
Candidate: why do we need this?
Reference: can multiplying by -1 ever cause an issue?
Candidate: please use <UNK>
Reference: list#isempty()
Candidate: this should be the <UNK>
Reference: curious about why you needed to add this here and above?
Candidate: "this do we need to check "this event?
Reference: could this be a log warning? the metadata is still malformed.
Candidate: should we use the <UNK> here?
Reference: would probably be simpler to just to string.format(upstream_format, entry.getkey(), upstream)
Candidate: i don't think we need to use the <UNK>
Reference: do we need this variable, given the member variable you added?
Candidate: <UNK> *= 2;
Reference: should we just wrap all the code below(until updating fileoffsets) inside this if block? it gets rid of the scenario where changelogssp can be null but still we try fetching
Candidate: why do we need the getconnection here?
Reference: this is out of the scope of this pull request, but i don't see why we're using this custom widget instead of the standard spinner implementation provided by the framework?
Candidate: why do we need need to the <UNK> here?
Reference: the new one is not more readable than the original. see if there is a better alternative.
Candidate: please use <UNK>
Reference: hi @handreyrc can you appply kie style formatting?
Candidate: can you use checkargument
Reference: why use qualified name?
Candidate: decrease this to: if <UNK> { return; }
Reference: here you have a mismatch with names given in the annotations - here is upper case
Candidate: why do we need to use <UNK> here?
Reference: you could have used arrays.equals()
Candidate: i don't think we need to check for the <UNK>
Reference: why are you printing the frame layout? btw, it looks like this: android.widget.framelayout{b3fe67c v.e...... ......i. 0,0-0,0}
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: empty collection should be returned instead of null
Candidate: can you use the <UNK>
Reference: given that there is always a resistancecalculator, this shouldn't be optional.
Candidate: this should be <UNK>
Reference: will this always override the database value? even if it is another date? remove this and make sure the defaults from the database are used.
Candidate: please use <UNK>
Reference: a couple of questions regarding this method: - i guess it can be called concurrently (otherwise there would not be any need for this cas loop. is this right? -
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: can be this(new arraylist<integer>(other.pattern));
Candidate: please use <UNK>
Reference: does it make sense? wouldn't it be enough to use atomicreference ?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: i thought we were going to place it in the sdk folder? $sdks/gradle/m2repository ? if it's there we can find it without the installer's help, right?
Candidate: why do we need this?
Reference: using the thread(string name) constructor should be the safest, least confusing option here.
Candidate: the syserr should be be the
Reference: 1- i said before that getstatetable() didn't need to be cached before it was called once or twice, now it's called for every event... 2- the status is not the
Candidate: please move the <UNK> of the offsets and then inverting the <UNK> of the <UNK>
Reference: shouldn't we be coalescing the left.getdoc() with right.getdoc()?
Candidate: can you rename this to <UNK> <UNK>
Reference: shouldn't be called left anymore
Candidate: should we be the <UNK> here?
Reference: i would avoid the negation here. i understand that cond?null:something is a pattern but that's usually used to avoid the negation in "x != null ? ..."
Candidate: why do we need need to the <UNK> here?
Reference: don't concat strings in log statements, use the param support  logger.info ("i have a {} to eat.", object);
Candidate: i don't think we need to do we need need to check the the <UNK> the <UNK> <UNK>
Reference: i think we must give user ability to use intention if goinspectionutil.getexpressionresultcount(e) != 1 it does't broke code and we just move error to another place @zolotov what do you
Candidate: nit: can be replaced with <UNK>
Reference: you're adding a risky semantic check here for no reason.. just do what the previous version was doing please?
Candidate: why do we need the <UNK> here?
Reference: again, findbugs doesn't like it. see above.
Candidate: i don't think we need to throw an exception
Reference: is there any strong reason we must deprecate this interface ? if we add an interface sqlfunction#getstrongpolicy, the only exception is the sqlkind.other_function, when we encounter that, a sqlfunction instance
Candidate: if we != null && <UNK> != null) { <UNK> }
Reference: please also verify succeeded message
Candidate: no, this should be the <UNK> <UNK> the tablets we don't need to call super.dispose() at all.
Reference: it's one-time. then you handle only one response. you can detect only one server.
Candidate: why do we need the fully-qualified properties? here?
Reference: i think this could be a race condition between tableexists and gettableinfo. maybe we could remove tableexists and wrap gettableinfo into a try/catch block?
Candidate: please rename the <UNK> to <UNK>
Reference: can we please mock the future?
Candidate: @exper0 appid
Reference: just for consistency, please use final boolean actual
Candidate: should this be <UNK>
Reference: we put try into try so you can try and catch everything
Candidate: why do we need need to override the here?
Reference: i don't think the intention was to change the isjavafxinclasspath in classpath. in my world it would e kept as is. then, if it returns true, use the loadclass privileged
Candidate: should we throw an exception here?
Reference: not sure i follow the logic of this test... we want to show that it doesn't block, but then we just assert that the call doesn't take longer than 30
Candidate: why do we need need to close the <UNK>
Reference: this is problematic. imagine that i create a canvas using this builder, then build it. you return the backing canvas here. now i change something using this builder - that's
Candidate: can we use <UNK> <UNK> <UNK>
Reference: maybe this can be moved to the declaration?
Candidate: why do we need to evict the to the the <UNK> the <UNK>
Reference: topicfilter initialization can be done in the constructor of the class.
Candidate: should we be the <UNK> here?
Reference: set the table size to 5. we expect ~4 entries. 5 is a good default size.
Candidate: should be be <UNK>
Reference: erm. padding ; are we?
Candidate: why do we need the layout here?
Reference: should null be handled here ?
Candidate: the syserr should be the
Reference: this can be private i guess
Candidate: can be replaced by: <UNK> <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: this is a buggy as flags can include final modifier for instance. please fix it.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: should the context also be cleaned up or doesn't it matter because it's failing anyways?
Candidate: why do we need to synchronize on the request?
Reference: should check if value>0 before incrementing to avoid negative values for counters.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can we not verify that the text boundaries are correct? verifying that we simply set the boundaries on the text decorator is better than nothing but can we not ascertain
Candidate: should this be <UNK>
Reference: what about covering this use-case?
Candidate: should we be the <UNK> here?
Reference: can you get rid of this if? otherwise the field ops are not in the same basic block and you cannot use check.
Candidate: why do we need to @test(expected = <UNK> ?
Reference: this can be avoided as it is a number input already.
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: suggestion writtenandunread.computeifabsent(variablename, k -> new hashmap<>()).put(key, statementtree); namestosymbols.put(variablename, variablesymbol);
Candidate: why do we need the <UNK> here?
Reference: can you set 2 and 3 to constants so that they're not magic numbers?
Candidate: please use <UNK>
Reference: why the valueof? id is already a string
Candidate: please use <UNK>
Reference: the constant should be moved to tmffiltertreenode. the others should be removed/deprecated.
Candidate: why do we need to use <UNK> here?
Reference: please implement tostring() to provide debugging state information for debugging purposes.
Candidate: use objects.hash()
Reference: could we get a correct pythonjarfile for yarn perjob/application mode here? it seems that we do not ship the $flink_home/opt directory and set the flink_opt_dir environment. maybe it is out
Candidate: the syserr should be be the
Reference: why is this not symmetric with getsslconfiguration?
Candidate: should this be the <UNK>
Reference: can we have global constant for '*' ?
Candidate: i don't think we need to check if the is is the
Reference: i'd just use a lambda here: (rowexpression, level, session) -> rowexpression
Candidate: please use <UNK>
Reference: this doesn't feel right to me -- don't people tend to handle the way test results map to build results in vastly different ways, generally?
Candidate: why do we need to check the <UNK> here?
Reference: use of this.getclass().getname
Candidate: why do we need to use <UNK> here?
Reference: adcolonyappoptions options = adcolonymediationadapter.getappoptions(); if (options == null) { optiions = new adcolonyappoptions(); }
Candidate: i don't understand why, but it is be <UNK> to the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: please do not use java **assert** keyword. java assertions are disabled by default in maven-surefire. i am pretty sure that your test will pass even with assert(false). use junit method
Candidate: the syserr should be be <UNK>
Reference: i'd either make this more symmetrical to the entry == null branch, or check for cache_mode_local first.
Candidate: do we need need to check the <UNK> to check the <UNK> (after "if <UNK> { <UNK> }
Reference: don't need to escape '\' in the string, though it might add readability?
Candidate: can we use the <UNK> here?
Reference: suggestion assertsignaleventexecutionset(emptytopevent.getexecutionset(), empty_value, cancelling, empty_value);
Candidate: suggestion assertmessageeventexecutionset(emptytopevent.getexecutionset(), empty_value, cancelling, empty_value);
Reference: for reference, string(text.of(longflag)).parse(source, args, context); became args.next();
Candidate: why do we need the <UNK> here?
Reference: nit: can replace (builder, input) -> builder.append(input) with expressionbuilder::append.
Candidate: why do we need to synchronize on the request?
Reference: traditionally we use unfillfilledrequrements as a signal for a configuration resource which is currently invalid but the user could make valid through some action (ie: "you need to update commcare
Candidate: why do we need this?
Reference: consider adding a separate timeout value here.
Candidate: is this <UNK>
Reference: hi @boaks , low: it would be nice to separate serializeheader to a new method :) rather than duplicating it in both cases
Candidate: the syserr should be be the
Reference: nit: consider testing empty shape
Candidate: you should use the exception
Reference: @lorobode in this scenario there are two options: 1) use primative boolean type. -> have only getter and setter 2) if using boolean type: -> getter (#getnewuser) returns boolean... and
Candidate: this should be setemptyelement().
Reference: formatting.
Candidate: this should be the <UNK>
Reference: can you replace this check with event-loop thread instead of not being the junit thread ?
Candidate: why do we need the <UNK> here?
Reference: confusing variable names of target and targetname. i'd prefer webserver and webservers or some such to avoid confusion.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: does this lose the parent config?
Candidate: should this be null?
Reference: '() ->' won't work when backporting to 3.6
Candidate: this should be the <UNK>
Reference: we shouldn't do both log and throw.. let's remove logging here.
Candidate: nextvalueindex should be a syserr
Reference: can baseurl be the empty string?
Candidate: can we use the builder <UNK> <UNK> = <UNK> <UNK> (string <UNK> = <UNK> <UNK> (string <UNK> = <UNK> <UNK> (string <UNK> <UNK> (string <UNK> = <UNK> <UNK> <UNK> <UNK>
Reference: for this test, you don't need to set the activation key anyways, because if the user has no activation key set then whatever value is provided is definitely incorrect
Candidate: why do we need need to the <UNK> here?
Reference: maybe switch the condition to <pre>intervals == null || (r.getreadunmappedflag() && r.getalignmentstart() == samrecord.no_alignment_start)</pre>? then the check below could be slightly simplified but the benefit would be to completely skip
Candidate: i don't think we need to check if <UNK> { return false; } else { if <UNK> { <UNK> { <UNK> { <UNK> } <UNK> { <UNK> } <UNK> {
Reference: changing the value of the setting seems like an unexpected side effect of repeatuntil. please ensure the toggle is set back to its previous setting after the 'repeat' i actually
Candidate: why do we need to check, but this talked on the check, right?
Reference: put this declaration 8 lines lower
Candidate: should we throw an exception here instead of exception?
Reference: this potentially breaking change will have no impact on the plugins from the ecosystem. you can find the analysis report in <link_0>, done with two different tools (github search and
Candidate: why do we need to clients?
Reference: ![minor](<link_2> 'severity: minor') remove the redundant '!unknownsymbol!' thrown exception declaration(s). [![rule](<link_1>](<link_0>
Candidate: should be setemptyelement().
Reference: log
Candidate: should this be <UNK>
Reference: hm.. this is strange. why not new rtcontent(this.request, "readme.md")?
Candidate: why do we need need to the <UNK> <UNK>
Reference: can we use guava style map creation?
Candidate: why do we need streaming sizes as payload? param.
Reference: put this in else clause
Candidate: can be replaced with <UNK> <UNK>
Reference: new arraylist<string>(parents.size())
Candidate: this should be factorized to the
Reference: it looks like a collection of two ogcmultipoints will incorrectly return true.
Candidate: i don't need to check for the <UNK>
Reference: i18n
Candidate: should be value)
Reference: all comparisons involving nan (except !=) return false, so even float.nan == float.nan returns false. this should be float.isnan(num) instead. there's also a float.isinfinite(num) method which might be better to
Candidate: this should be the getconnection in the log.
Reference: if association is using default version, ver=null. so, this comparison is wrong. if(ver==null), then add this to deferred loads, so you can load it later.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: i don't think that this will make a difference, but maybe we should use an instance of shogun2jsonobjectmapper here? <link_0>
Candidate: please remove the log.
Reference: maybe extract questionmetadata.getvalue() into a variable as it is used thrice in this method
Candidate: should we be the <UNK> here? if we { return; } <UNK> } } } } } } }
Reference: the class is generic, would be there a way to have the contract more abstract. somehow to remove any "github" specific stuff
Candidate: this should be repelaced by the userreportingsettingshelper
Reference: continuing the argumentsandresult discussion, i think here we should be robust and even don't expose arguments until the invocation.proceed() returns. anyway there should be some hook to expect an exception\-
Candidate: should we use the exception here?
Reference: would it be possible to avoid this state management by just deferring whatever code needs to be run until the next event loop (e.g. scheduler.get().scheduledeferred())? (only suggesting this if it
Candidate: should this be <UNK>
Reference: the original behaviour would skip writing to the memory cache as well, this one should probably be kept the same.  java return memorypolicy(no_cache, no_store);
Candidate: what is the buffer?
Reference: please verify afterwards that the attribute foo = bar has not been set and please delete the business service afterwards.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: better moved to the if block that returns a value.
Candidate: we should need to use <UNK> <UNK> <UNK>
Reference: i'd add .notconvertingparticipant() here so that no update strategy text -> model is being attached.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: let's just go ahead and pass unknown to the four args method, i think it will be a tad simpler.
Candidate: why do we need to use the here?
Reference: <link_0> just got merged, rebase using this syntax for domainlist
Candidate: why do we need to mock <UNK> here?
Reference: what is this doing? i do not understand it.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> ? thanks!
Reference: what about using type file instead of object you then dont need to cast multiple times later on. or maybe use a list: list<file> fileslist = (list<file>) fileutils.listfiles(destinationfolder, null, true);
Candidate: please remove the <UNK>
Reference: this is not needed, you already set everything in the constructor above
Candidate: should we be the specific?
Reference: why?
Candidate: can you use <UNK> <UNK> scale overflows?
Reference: is delim needed here?
Candidate: i don't understand why, but it is be the if it matters, but it will be easier to read if *both* <UNK> store, <UNK> { <UNK> = <UNK> }
Reference: the initial size of list is _2_..?
Candidate: please use <UNK>
Reference: you do not need bindannotated, since there's only one implementation of rpcdispatchhooks. bindannotated was used to bind an interface for the rpc and rest dispatchers to different implementations
Candidate: should this be <UNK>
Reference: seems like if check has been made twice by mistake
Candidate: why do we need to here?
Reference: why not using here stringbuilder as well ???
Candidate: you don't need to use the
Reference: another one! any reason you're using these over the lighter-weight arraylist?
Candidate: @pecko asserterroreventexecutionset(emptysubprocessevent.getexecutionset(), empty_value, cancelling, onradiobuttonchange(selected)); onradiobuttonchange(selected)); onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename onradiobuttonchange(selected)); onradiobuttonchange(selected)); determinename
Reference: throw exception from here as well.
Candidate: this should be the <UNK>
Reference: spelling, one l: trailing
Candidate: the syserr should be be called via: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: here too for message - remove if we can get away with it.
Candidate: this should be the <UNK>
Reference: you forgot a parameter in the logging here: "setting name by namestring {}"
Candidate: can we use static"
Reference: you may want to fix the typo while you are around... :)
Candidate: please remove the method("post")
Reference: this will result in a classcastexception when e.g. a querymessage is delivered. if a certain message type not supported, we should throw an explicit exception stating that.
Candidate: why do we need the <UNK> here?
Reference: but why not check explicitly for zero? this is opaque, it seems like you're trying to optimize away a division.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: same cleanup issue here i think
Candidate: why do we need to use <UNK> here?
Reference: what's a deep stub and why do i need one?
Candidate: please remove method("post")
Reference: why does element and type have references to the chelper?
Candidate: why do we need to use <UNK> here?
Reference: can you add apublic void error (string msg, throwable e) and change the public void warn(string s, exception e) to public void warn(string s, throwable e)
Candidate: should be be <UNK>
Reference: including the !eos() in this check seems like a very odd way to write this code. why not simply:  java if eos() { return; } if (isprofilingmode()) { ...
Candidate: nextvalueindex should be <UNK>
Reference: rename to p or prop
Candidate: can we rename the <UNK> to <UNK> <UNK>
Reference: hm... two thoughts here: (a) reshape isn't always a no-copy op. not sure, but we might end up returning a copy in some cases with this approach? (b) if we
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: correlation id cannot be parsed or "wrong format of the correlation id". you should also log the actual value that the server returned, so that we can see it in
Candidate: do we need a <UNK> here
Reference: isn't it better to "capture" lh.getledgermetadata() once ? maybe it is guaranteed somewhere else that calling getledgermetadata twice will return exactly the same object because we are using safeorderedexecutor, but
Candidate: why do we need to tear to <UNK> <UNK> <UNK>
Reference: i don't think i like a branch here. this is too into the weeds for a configuration item. if you're going to log something, pick the one that works and
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i would add an emptyspace after file: ".. migrate file "
Candidate: can we move this logic inside the loop?
Reference: inline targe: partitiondata[i].flush(outputbuffer);
Candidate: the syserr should be be <UNK>
Reference: why do we need this? can't we support specifying an implementation as the type and then detect whether it is a concrete class and construct the instance and proxy appropriately
Candidate: should this be the <UNK>
Reference: why final variable? :-)
Candidate: why is the same symbol symbol symbol symbol symbol symbol symbol symbol here as well.
Reference: hardcoding "/" may not work in windows environment. shall we use file.seperator ?
Candidate: why do we need to check for the <UNK>
Reference: why on <strike>earth</strike> any planet! we will gonna have a method on neo4jmatchers! that does index creation!
Candidate: why do we need to permission?
Reference: integer.highestonebit(value) << 1 ? but it could be overflowed.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: declare throws please
Candidate: throws exception
Reference: nit: unsupportedoperationexception, since notimplementedexception is reflection-specific
Candidate: should be be sync?
Reference: minor, but we can break the loop as soon as we found first renting partition, no need to keep iteration.
Candidate: why do we need need to check for <UNK> here?
Reference: it looks like instead of using pair it's better to create specific scoreentity pojo with two primitive fields: entity/value and score; so uses can understand directly understand what first and
Candidate: can you use the <UNK> <UNK> <UNK> <UNK>
Reference: nit: gettypename is a new one, should be fine though e.getclass().getname() or e.getclass().getcanonicalname() might be simpler
Candidate: what is the reason behind the <UNK> is the charge behind the <UNK>
Reference: break if we found it?
Candidate: why do we need need to check the the <UNK> <UNK> <UNK>
Reference: i'm worried this will get noisy in production, as if you have 100k items to index, you are going to see this message 100k times.
Candidate: we should use <UNK> <UNK> <UNK>
Reference: what exactly indexnotapplicablekernelexception mean here? shouldn't we report that something went wrong instead of assuming that we do not have matches?
Candidate: why do we need the <UNK> here?
Reference: no need to change at here, because it is only for date type
Candidate: why do we need to use <UNK> here?
Reference: try/catch this so logging doesn't affect normal operations
Candidate: try/catch
Reference: why not just make this the next statement after the for loop?
Candidate: <UNK>
Reference: @nullable annotation implies that the argument could be null. correct fix is to keep the @nullable annotation and do the following: return arg0 != null ? arg0.getsqlname() : null;
Candidate: why do we need to use the <UNK> here?
Reference: we should log this properly too, i think. errors in this class don't always bubble up where they can be inspected easily.
Candidate: why do we need to use the here?
Reference: i wonder if instead of updating runleaf() we should update methodblock() to return a statement that calls thread.interrupted() at the end of the statement chain.
Candidate: why do we need the <UNK> here?
Reference: this doesn't need to be public right?
Candidate: remove the unused line.
Reference: don't you need to specify the enum class instead of null?
Candidate: please use the <UNK> costs the same as above.
Reference: why * 100? wouldn't simply projects.size() and then newchild(1) below be clearer?
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: i see this here and on line 631. should this be pulled into a common routine? perhaps a name like loadneededtestlibraries() how many places do we have the library name.
Candidate: why do we need this?
Reference: likewise doesn't need the else clause.
Candidate: why do you need to <UNK> the <UNK> <UNK>
Reference: nit: we don't use '!' anywhere else, lets replace with a '.'
Candidate: why do we need to permission?
Reference: remove magic number - should not have impact for performance as big as it was worth to provide specified number
Candidate: i don't understand this matters, if you matters, this matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but it is
Reference: save the log level by calling realmlog.getlevel() and restore to that.
Candidate: why do we need the exception here?
Reference: you can remove the null check java if (application_json.equals(response.getheader(content_type))) ...
Candidate: why do we need to the <UNK> here?
Reference: is there a special reason why you use string.format and not simply use parameterized logging?
Candidate: the syserr should be be the
Reference: @cvrebert rename this to branch
Candidate: @cristianonicolai good, thanks!
Reference: ternary operator if you're feeling fancy.
Candidate: @gunnarmorling check if the counterparty will be be sufficient?
Reference: why get it again? you already have a reference to it.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: @manuelplazaspalacio unit test should execute in miliseconds, we have find a way for not wait 20 or 30 seconds for test. for example, can we pass interval as parameter?
Candidate: why do we need the <UNK> here?
Reference: i think it might be better to use trace for such messages?
Candidate: formatting: e1 { ... }
Reference: when partition is negative, it also encodes the number of total partitions. can we just pass the number of total partitions in constructor so it doesn't have to be encoded
Candidate: this realize this <UNK> is repeated several times except the chunk of the chunk of the <UNK> chunk of the <UNK> chunk of the <UNK> chunk of the <UNK> chunk
Reference: it would be even better to just return here, wouldn't it? then you don't need the if statement on line 99 and can define the consoleappender variable on the same
Candidate: please use <UNK> <UNK> <UNK>
Reference: <string, string> is redundant
Candidate: what happens if the is is the
Reference: return getcodeca() != null && ("dts".contains(getcodeca()) || "dca".contains(getcodeca()));
Candidate: this should be repelaced on the <UNK> userreportingsettingshelper
Reference: i thought this method was only java 9?
Candidate: the syserr should be be the
Reference: can be inlined
Candidate: why do we need to check for the <UNK> ?
Reference: can be return csv.headers().stream().anymatch(header -> knownreference(header));
Candidate: the syserr should be the
Reference: this should be a label, not part of a metric name.
Candidate: you should use the <UNK>
Reference: combine this with the variable declaration above. suggestion cacheentry cb = cache.getblocknostats(_lookup);
Candidate: why do we need to <UNK> the <UNK> here?
Reference: also, the message was probably intended to say "this websocket uses ws instead of wss. no sslsession available."
Candidate: <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs
Reference: shouldn't this be moved into the if() clause for maximal memory savings?
Candidate: why do we need to use the <UNK> here?
Reference: servlet path tests are fragile: - the service could be a workspace specific one, not 100% sure to do the various wrappers, but at this point you might see "workspace/ogc"
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: as above; consider using getclass().getsimplename() instead of this
Candidate: please getclass().getsimplename()
Reference: add log statement to else block debug level
Candidate: can be replaced with <UNK> <UNK> ?
Reference: the materializedviewsubstitutionvisitor seems should not be used directly.
Candidate: @override @override public aggressive :(
Reference: shouldn't this be doseunits? :)
Candidate: should be be <UNK>
Reference: do the same check that you did for account_id below since user_id will eventually be phased out.
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: invert it
Candidate: can we move this into a separate method?
Reference: i think we should disable cache for the poller. if you look at privous corfustore stream or our dcn, they both disabled cache to avoid polluting addressspaceview cache, which could
Candidate: let's add snapshotid in the enum?
Reference: thinking about this some more, rather than propagate the nocurrentcaseexception from the constructors, lets catch and log it and cal setenabled(false) on the action so it would be grayed out,
Candidate: minor typo: runnable() { @override public c, <UNK> = <UNK> }
Reference: returning null causes entry removal from datasources map, it didn't happen before
Candidate: can be simplified to <UNK> <UNK> reference: <UNK> ?
Reference: shouldn't you pass the called url as a parameter, so that the form can actually redirect back once the user authenticated successfully?
Candidate: why do we need to check for the <UNK>
Reference: tritto
Candidate: please use <UNK>
Reference: we have full control of the expected data, right? does that not mean that we can self-sanitize (i wonder if such term exists?) the data in expected?
Candidate: why do we need the <UNK> here?
Reference: few questions about this change: 1. what happens if the value is null? you probably need a null check here. 2. what happens if you get a list of features
Candidate: <UNK> *= 2;
Reference: do we want this to equals or just match?
Candidate: do we need need to be the <UNK> <UNK>
Reference: where is this used?
Candidate: the syserr should be the <UNK>
Reference: @randgalt can we move this to a constant now that we're no longer supporting 3.4?
Candidate: please use <UNK> <UNK>
Reference: looks like you forgot a !. should be (path -> !path.isempty()
Candidate: why do we need the <UNK> here?
Reference: please, unify the naming format of the classes: configurationsyspropresolver classpathconfigurationplaceholderresolver
Candidate: should this be <UNK>
Reference: immutablelist -> list
Candidate: use {this} instead of <UNK>
Reference: ibm-specific without that dash?
Candidate: with <UNK> would would would would would just with <UNK> would would would would would would would would would would just <UNK> <UNK> <UNK> would would just <UNK> <UNK> <UNK>
Reference: i find it better to: * keep check in the while condition * remove if above * remove the null check on line 300 (which is already covered by the
Candidate: checkstyle checkstyle checkstyle prime checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle checkstyle
Reference: so why do we register in updatescores? a bit weird no? also maybe messagingservice should store a list of weakreferences so we don't need to unregister? or we should unregister.
Candidate: this should be the <UNK>
Reference: checknotnull
Candidate: please rename this to <UNK>
Reference: i wouldn't print anything like this in a unit test.
Candidate: why do we need to use <UNK> here?
Reference: we could have a method to return bloop directory and then this and bloopjarspath could just resolve single child. or even better, to resolve the bsp path, so it can
Candidate: why do we need need to the <UNK> here?
Reference: style-nit: you can chain this call: repository git = new filerepositorybuilder() .setmustexist(true) .setfs(getfs()) .setgitdir(submodulegitdir) .build(); try { head = git.resolve(constants.head); } finally { git.close(); }
Candidate: why do we need to check the <UNK> here?
Reference: reduce noise with !hastrackedstartup.
Candidate: i don't think we need to check for the <UNK>
Reference: it might be worth considering ellipisizing this? i'm not sure what behavior is consistent among the other sdks ?
Candidate: this should be the <UNK>
Reference: use the commandwitharg<boolean> variant here so that the output repopulation happens even if the package versions aren't sufficient.
Candidate: why do we need need to the <UNK> here?
Reference: minor typo in variable name here
Candidate: i don't think we need to check for the <UNK>
Reference: what is the reasoning for disallowing a zero tenor? given period doesn't disallow, we may have code (possibly tests) that make use of it
Candidate: should be be the vdsid here?
Reference: what about something like this ? logstocompact.sort(comparator.comparing(entrylogmetadata::getusage)
Candidate: we should need snapshotid in the
Reference: better to return null here and let callers deal with null however they want. this will default to string in _all_ cases of deserializing valuetype, even unforeseen ones where that
Candidate: should we throw an exception instead of returning null?
Reference: formatting, please adhere to our code style guidelines, there should be a space after the if and before the curly bracket {
Candidate: do we need need to be the <UNK> <UNK> the console?
Reference: we'll need to redesign the toggle actions not to use the status text, since the new grid items only support a single line of text due to their reduced size.
Candidate: i don't understand if this matters, but if you do, can we move this logic into a separate method?
Reference: this need to be error message. but don't log and throw. either log or throw.
Candidate: should we be the <UNK> here?
Reference: i don't think we should try to dispose this image. just caching them would would probably be sufficient and would provide better performances for people often dealing with colors.
Candidate: should we throw an exception?
Reference: because then we need to fetch the user twice here and in candoaction. this is not user visible command anyway, it is only used by batch, engine.log is the interface.
Candidate: why do we need the <UNK> here?
Reference: how about having methods for creating these lambdas? the nodeimporter one is not so bad, but the relationshipimporter involves a lot of fields.
Candidate: stringutils.isnotblank()
Reference: this method means that whole oxauth can process only one single ciba request per given period of time. imagine we code authorization code flow in this way. we will get
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: remove from here an update of db, the following method should only convert info retrieved from host
Candidate: why do we need need to the <UNK> here?
Reference: typo "exisist"
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: it's a good consideration to check presence of the field, but actually it's not needed. getpropertynode() in the node builder api doesn't mandate that the given property actually exists, it's
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: resourceutils.closeorlog(istream) ?
Candidate: we should need to do we need to do the getcredentials in the getcredentials
Reference: inconsistent log level. use only one. stick to trace level for now in this method.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: i know you love streams and lambdas very much :) but... we are trying to avoid them when there is no clear benefit as there is a cost to it.
Candidate: i don't understand why, but it is be the why, but i am not sure why, but it will be easier to understand what about doing.
Reference: suggestion - could rename this to mergedservicestatusmap and the pairresult in the loop below to servicestatusmap to follow this code better.
Candidate: why do we need to use <UNK> here?
Reference: for consistency across the project, please remove the final keyword here.
Candidate: if the == null) { return false; } else { if (...) { <UNK> } } } } } } } }
Reference: suggestion .until(() -> j.jenkins.getqueue().isblockedbyshutdown(task));
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: we need to check the level here don't we? kotlin if (level == componentcallbacks2.trim_memory_ui_hidden) { lifecyclelistener.onappgoestobackground() }
Candidate: this syserr should be <UNK> <UNK> <UNK>
Reference: this can be private, right?
Candidate: can be simplified to:  <UNK> (string localpath = <UNK> ? <UNK> : <UNK> : <UNK> : 2; : <UNK> : <UNK> : <UNK> : 2; : <UNK> : 2;
Reference: this is a leftover i assume?
Candidate: should we throw an exception?
Reference: ditto (compare size)
Candidate: why do we need need to the <UNK> here?
Reference: i would actually suggest making another method named "createexclusiverelationship", since other methods may need to support repeating relationships, and the other createrelationship method does not replace existing relations.
Candidate: why do we need to check the <UNK> stuff?
Reference: brrr... maybe a current time would be better?
Candidate: please use <UNK>
Reference: validatedate also check if date is not null and if it is not in the past and it should be done before checknumberofpatients
Candidate: i don't think we need to check the <UNK> the <UNK> is the
Reference: this function is no longer useful, use send_resourcepack(). this is send_resourcepack().
Candidate: should we log the exception if <UNK> != null) { throw new <UNK> }
Reference: you need to get the folder from jenkins again. otherwise this always pass.
Candidate: why do we need the <UNK> here?
Reference: is this equivalent and a bit clearer: java if (anno1 != null && anno2 != null) { annotationmirror glb = qualifierhierarchy.greatestlowerbound(anno1, anno2); lublowerbound.replaceannotation(glb); }  as anno1 and anno2 are
Candidate: i don't think we need to check if the != null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: do init tokenizer in japanese2romaji
Candidate: style-nit: constructs the fixme with objects.isnull
Reference: what's the reasoning behind overriding the storable variable retrieved from the db with the value in cache?
Candidate: i don't understand this matters, this matters, this matters, this matters, but you don't need why, but you don't need to repeat the <UNK>
Reference: nit: can we call this variable detectedprimarylanguage
Candidate: let's rename this to to <UNK> <UNK>
Reference: thats no storedobject, right?
Candidate: should this be the <UNK>
Reference: this seems like the correct case. do we not have any code that actually sets an offset so we never noticed the bug? it seems like there needs to be
Candidate: please use syserr
Reference: i'd leave this as calling the deprecated method on getportforwarderasync(), rather than doing the optional.absent() here. otherwise we're duplicating the handling of the deprecated case both here and in the
Candidate: can you use the <UNK>
Reference: hierarchy is misspelled.
Candidate: rename <UNK>
Reference: if printing the stacktraces is not very useful and annoying, adding e.getmessage() just to tell us what type of exception has happened is better?
Candidate: you don't need the variable name variable here..
Reference: add "0x"?
Candidate: ths should be the
Reference: why not in the try block?
Candidate: can be replaced with <UNK> ?
Reference: i believed codacy flagged this. i think this could be replaced with this.successfullyparsed &&= toadd.issuccessfullyparsed().
Candidate: can we return <UNK> <UNK> ?
Reference: for reasons discussed in #661 this number of iterations might be wrong if we specify half-headway.
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK>
Reference: i think the sharedpreferences will be shared across tokens, so if someone is using multiple tokens, this will overwrite the first token. and then you'll be writing device ids to
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: no space betweeen } and finally
Candidate: please use <UNK> e1
Reference: there should also be a method called arrays.stream(array...)
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: you can make and use a putint function in firebaseevent class instead of using the putlong.
Candidate: why do we need to use <UNK> here?
Reference: valueprovider interface has an isaccessible method. you should implement that interface & in isaccessible return logical and of all the components' isaccessible
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: removed
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: this is not correct (and also not the one above) as you will cause a classcastexception later on if the channelhandlercontext does not wrap an channeloutboundhandler.
Candidate: <UNK> -> <UNK> -> executor <UNK> <UNK> -> executor <UNK> <UNK> -> executor <UNK> <UNK> -> executor <UNK> <UNK> -> executor <UNK> -> executor <UNK> -> executor <UNK> -> executor
Reference: here also, a traditonal for loop is better
Candidate: why do we need the <UNK> here?
Reference: please try to avoid using horizontal/vertical panels if it is at least a bit possible. they are rendered as tables and unless it is really hard to style the content
Candidate: can we move this to the 83
Reference: despite the looks k9.debug is not constant and tied to the "debug logging" setting. please use buildconfig.debug.
Candidate: we should use the exception here instead of the <UNK> 49
Reference: shouldn't the store be invoked when add() is successful?
Candidate: the syserr should be be the
Reference: i think this should be !usehyphens
Candidate: this should be the <UNK>
Reference: can the resulting message end up having a -1,-1 location if currenttoken result in a null value?
Candidate: why do we need the <UNK> here?
Reference: should we make "pig.dump.hadoopcounter" a const ?
Candidate: wait?
Reference: in general, when adding to a map, please ensure that the key is not an empty string by using stringutils.isnotblank(...) to avoid stuff like this: json "servers" : [ {
Candidate: why do we need need to the <UNK> here?
Reference: as far as i can tell, iso-14882 allows both cv-qualifiers to be on the right side. this check would also mark int const volatile foo{}; for rewriting. should we catch
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: to prevent reallocation of the underlaying array, we should give a size hint if possible (principals.size()).
Candidate: please use <UNK> <UNK> <UNK>
Reference: looks, like we need the same test for ccsmatrix.
Candidate: why do we need to tweak the here?
Reference: or can you change the test to be more patient to see an expected value? do you know how often these values are currently being updated?
Candidate: should we throw an exception?
Reference: please use "something <operator> null" convention
Candidate: should this be the <UNK> permission?
Reference: this is not a nice way of having it fail. if the data dir is not set it throws a nullpointerexception. i propose we catch that case and throw an
Candidate: why do we need need to the <UNK> here?
Reference: no need for the brackets here, if you want to keep them then put the close bracket after the 0.
Candidate: i map<> <UNK>
Reference: please remove or decrease log level to trace
Candidate: this (check exception appid 422 exception 422 422 exception 422 exception 422 exception 422 exception 422 will happen restrourcenotfoundexception.
Reference: this is a lot of chaining...
Candidate: <UNK> evidence, you can use <UNK> <UNK> <UNK>
Reference: how is this related to the subject of this pr and/or overuseestimator? @champtar, could i please ask you to keep prs to a single, standalone subject? if you need to
Candidate: i don't understand this matters, this matters, this matters, but you can use the <UNK> <UNK> <UNK>
Reference: i know you've just used the same pattern as used before but could you please remove system.out and use log.warn instead? it would be great if you could also enhance
Candidate: i don't think we need to do we need need to bail on the at the point?
Reference: queryset is null
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: does that mean all javafile.writeto methods would now throw assertionerrors instead of ioexceptions? sounds bad.
Candidate: why do we need the exception here?
Reference: that condition seems redundant.
Candidate: can we use the <UNK> property?
Reference: why don't you use the java 8 java.time.* apis here?
Candidate: this should be <UNK>
Reference: agreed on this statement. the catch could still result in an exception being thrown and unsubscribe having happened because it is a race. so we likely need a check inside
Candidate: this should be the <UNK> <UNK>
Reference: this entire method is redundant. what you should do is implement updarteallinbatch(collection<t>) in massoperationgenericdao in a similar fashion to updateall(collection<t>) and then call it from there. there's no point in
Candidate: i disagree with <UNK> if (state != null) { <UNK> } <UNK> { <UNK> }?
Reference: if we are on time i18n is usually required from qe
Candidate: please use <UNK>
Reference: stopped
Candidate: should we be debug level?
Reference: please follow existing code style regarding spaces.
Candidate: i don't think we need to wait for the <UNK>
Reference: what is this semicolon doing?
Candidate: this should be <UNK> <UNK>
Reference: i feel like a string.format would be better used in situations like this.
Candidate: nextvalueindex should be null.
Reference: just curious, why does this method change to initial range first then full range?
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: @ljacomet : i forgot to update this part in my previous pr. now, since calls to register() can be delayed we need to use completable futures to delegate the refreshing
Candidate: this syserr should be replaced with <UNK>
Reference: no check needed since we throw an illegalargumentexception()
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: probably should be on the data center level, same as we do for importstoragedomain
Candidate: should we be the specific?
Reference: don't want to define a constant for this? ^
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the lockclient can be in any state when calling deregisterinterest() and lease_expired event can only be received in has_lease state. i see we set the state correctly in discoveryservice but
Candidate: should we be the <UNK> here?
Reference: should this ever happen or is this an invalid state?
Candidate: should we be the <UNK> here?
Reference: i think "resolve" fits better with the other strategy names we have.
Candidate: @exper0 let's use <UNK> instead of <UNK>
Reference: since you have threadname same for both config classes, consider to change this name to exchangethreadpooltaskscheduler so that we can debug in server log if needed.
Candidate: can we use the builder instead of <UNK>
Reference: pull this out into common method.
Candidate: shouldn't this be an error?
Reference: i _think_ this is equivalent to writing one line at the beginning when(clientsupplier.get()).thenreturn(client).thenthrow(new ise("bad"));. this could help us avoid having to do numberofexecutions - 1 calls in line 98, which
Candidate: why do we need the <UNK> here?
Reference: classname vs. classname is tricky. i would prefer a more distinct naming, e.g. rename member classname to injectedclassname.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: hello @mcimbora , not sure if this code here is trying to "limit" the "delete field operation" only to fields that are generated by the data modeler? but this is
Candidate: i explained
Reference: is escape still needed here?
Candidate: why do we need to tear down the <UNK>
Reference: nit: consider simplify this: java for (boolean firsttry = true, int rawcnt = nonvolatilerawcnt();; firsttry = false, rawcnt = refcntupdater.get(this)) { if ((rawcnt & 1) != 0) { throw new
Candidate: i don't understand why, but this is is the subdir on the <UNK>
Reference: these all use credit, perhaps you could use a mix of values for a little greater coverage?
Candidate: this fail()?
Reference: can you add context here?
Candidate: use objects.tostringhelper() objects.tostringhelper()
Reference: i don't see why you can't have an overall precision/scale, calculated using the same logic you've already written, but just as a loop instead of just with the lhs and
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this does not throw
Candidate: this fail()?
Reference: instead of a list should this be a pair (keypair) of string, and rename the method as getuserkeypair() ?
Candidate: <UNK>
Reference: i think that you should pass result._source as the new role content. or better yet, the content argument of this method, since updaterole really performs a replace.
Candidate: why do we need need to use <UNK> here?
Reference: should we save the configuration without the repository before disposing of that repository?
Candidate: if we is software software <UNK> software <UNK> is the software itemstack.
Reference: i would have this function just return an array of column indexes - rather than the specifiers. later on when we add more support we can do it there, rather
Candidate: why do we need to evict the <UNK> here?
Reference: cant you change this to null as well?
Candidate: why do we need the <UNK> here?
Reference: if the description is sanitized on the constructor, i don't think this is needed anymore. just a simple return questiondescription will do.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: as far as i remember there path separator used to be defined in reg constants .
Candidate: please use <UNK> <UNK> <UNK>
Reference: i don't know if you are aware, but assertions are only "turned on" for testing. in production this will be a no-op. if you consider this check to be mucho
Candidate: why do we need to assert that the username?
Reference: is there more clean way to do it?
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } }
Reference: isn't there a test case missing? the original issue is about the case where the embedded list is empty? why is it "2" btw.? seems some parts of the original
Candidate: this fail()?
Reference: you don't need to allocate a new set here: bookmarksinsertionmanager copies the contents.
Candidate: please remove this line
Reference: indentation (consider using the eclipse ide to auto-format code). also, please import java.sql.timestamp and use here without package qualifier.
Candidate: use <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + ", <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: suggestion: ((basecommand) mcommandlist.remove(indexofcommand)).freeresources();
Candidate: this should be the <UNK>
Reference: division by zero if mass is zero. might want to put a constraint + log in the component
Candidate: why do we need to use <UNK> here?
Reference: would expect 200000 - possibly source data needs converting to microseconds?
Candidate: why do we need to use <UNK> here?
Reference: or math.max
Candidate: this should be the <UNK>
Reference: any reason not to do getblobinfo(blobid, null) directly? completeoperation() handles null callbacks anyway. similar question for similar functions.
Candidate: <UNK> evidence, we can use the scale overflows?
Reference: removing all blocks associated with this pack isn't a bad idea. when the system calls remove(dsfpackfile) we have a pretty good notion the pack file is no longer part of
Candidate: why do we need need to use <UNK> here?
Reference: could you make this log message specific to glue? error messages are ideally unique in each class
Candidate: should we use the <UNK> here?
Reference: double code, you should make index + height, segment.getunifiedend() a variable outside the condition scope.
Candidate: can you move this into a separate method?
Reference: if siteoid is null, you should not set any values at all. leave them as nulls
Candidate: can we use the getconnection here?
Reference: don't allocate a new byfebuffer like that. let's just use clonebufferarray() here as well for consistency.
Candidate: i disagree with the <UNK>
Reference: might want to be smarter about this list of fields to return. we could look at the fetch hints and choose only the fields we need. bringing back in, out,
Candidate: ![major](<link_0> 'severity: major') refactor this 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
Reference: i'm surprised that getrequestheader does not return an optional :)
Candidate: can we remind me that we expecting to be null? if we is null? if we { null) { <UNK> } <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK>
Reference: you can probably make this shorter - it's effectively string concat, right? it could probably be pulled out into a variable and reused, too.
Candidate: why do we need the <UNK> here?
Reference: don't you think messages would help here? "total connections don't match", "total available connections don't match"?
Candidate: please remove the method("post")
Reference: please use assertthat from hamcrest instead
Candidate: this should be the <UNK>
Reference: you can probably check what is executed in the callback as well.
Candidate: why do we need need to mock <UNK> here?
Reference: don't you need to check whether priority-1 is between 0 and nice_values.length - 1?
Candidate: should we check the the sides of the <UNK>
Reference: is this method just public for internal testing, or what?
Candidate: should we use the <UNK> here?
Reference: consider responding to the event with this error message as well so the user knows why they're not receiving headlines
Candidate: why do we need to use <UNK> here?
Reference: please precise permission required : "delete a non-main branch of a project.<br/>" + "requires the project administration permission"
Candidate: please remove this line
Reference: this test should also check that the commit revision mentioned in the message is as expected.
Candidate: you don't need to test newvalue is the session, the newvalue = <UNK> <UNK> session, authzname) { <UNK> authzname) <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: why not support string "true" and "false" conversion?
Candidate: why do we need the <UNK> here?
Reference: can you please explain this null? it looks very strange to put value under null key in map and i'm afraid it would bite us later.
Candidate: this should be <UNK>
Reference: here you are taking default visualizer. technically it's not good: you should first use visualizer defined on the property and if it's returning null for filter - get filter from
Candidate: this should be the <UNK>
Reference: it's a good point. we realize that context is very overloaded right now and we're planning on refactoring in the future.
Candidate: why do we need the <UNK> here?
Reference: variants of this uri building are repeated in this class. could you centralize this logic into a shared method or member? during initialization of this class it seems we could
Candidate: if we is software software software software software software software software software software software software software software software software software software software software software software software software software software software
Reference: if you invert this if and throw, you can save one indentation level for the rest of the method
Candidate: i map<> <UNK>
Reference: please use username as the object for the method invocation.
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: i'm not getting this bit, unless getstate somehow causes the instance to change its launch time. this should not affect anything. the change is still harmless though.
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: so in case of error: * we're returning to the workspace list anyways * the error message appears there? however in case of workspace save error or service panel save
Candidate: why do we need to the the columns here?
Reference: assign values to constant variable
Candidate: why do we need to check the <UNK> <UNK>
Reference: remove this?
Candidate: why do we need to check the <UNK> here?
Reference: here is an alternative: commonmetrics constructor takes an instance of metricregistry. in the production code, it is constructed using guice. in test code, simply new the instances you need without
Candidate: why do we need to use <UNK> here?
Reference: using a for does not make any sense to me. with that code it's impossible to have several parameters, like map<string, integer> for example.
Candidate: if <UNK> == null) || <UNK> && <UNK> { <UNK> }
Reference: please use stringutils.isblank here to avoid npe
Candidate: why do we need to the <UNK> here?
Reference: either use assert ctx.isoriginlocal() : "there's ..." or throw new illegalstateexception(...)
Candidate: should we be the if <UNK> != null) { return; }
Reference: why not? i did it.
Candidate: can we move this to the 83 <UNK>
Reference: what would happen if some of the ids are found and others are not, would it still work and returns the ones that were actually found or throw an exception?
Candidate: please use <UNK>
Reference: why not suggestion for (allele : alleles) {
Candidate: <UNK> *= 2;
Reference: check formatting couldn't you use attributeutil for this?
Candidate: why do we need to check for the <UNK>
Reference: can be written as drepresentationdescriptor.class::cast.
Candidate: why do we need to the 'final' again?
Reference: do we need to worry about the in clause limit here?
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() for the <UNK>
Reference: unchecked cast
Candidate: why do we need to use <UNK> here?
Reference: i've noticed a lot of small formatting errors like this. instead of nitpicking over each one, i think letting your ide auto-format the classes you've created should cover most of
Candidate: <UNK> *= 2;
Reference: this method is used from the udpinboundchanneladapterparser as well. therefore outbound word here isn't correct. the change should be reverted.
Candidate: should we use <UNK> here?
Reference: the test should check for existence of a metadata-related user-friendly message.
Candidate: can we use the <UNK> here?
Reference: this test doesn't pass. maybe with just don't have any partition to migrate? sorry, i'm not familiar with the subject...
Candidate: please use <UNK>
Reference: hello, this will restrict only enums to be appended from a collection, a list of other types (e.g. collection of integers or strings) will be ignored. this filter should be
Candidate: should this be <UNK>
Reference: same here, why do we need this?
Candidate: why do we need need to the <UNK> here?
Reference: why don't you push this down to logdata::getpayload ? (since that's when deserialize is actually invoked)
Candidate: should this be the <UNK>
Reference: please reverse contract change.
Candidate: can you move this into a separate method? if <UNK> { <UNK> <UNK> = <UNK> <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> }
Reference: minor: not sure if this needs to be a function of its own
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: s/repo/repo.getdirectory()/
Candidate: should we be the controller here?
Reference: not sure, should we try to emit onfetchresponsereceived before those return statements?
Candidate: why do we need the <UNK> here?
Reference: obtain through object graph, which would eliminate the need for a null check.
Candidate: this should be the <UNK>
Reference: i think more checks are needed indeed, because rb.iscompatiblewith0() uses this check as a short cut to determine compatibility. alternatively, interface checks would need to be added to rb.iscompatiblewith0() just
Candidate: this should be the <UNK>
Reference: this should equal the subcommand used to normally invoke this program, e.g. label create.
Candidate: why do we need to use the here?
Reference: root could be handled the same way as any other graphqlcontainer - then you wouldn't need instanceof here - and you could commonize the logic to determine if pagetotals was
Candidate: can we use the <UNK> here?
Reference: how about making the interval configurable via a system property?
Candidate: can we add the canonicalpath here?
Reference: don't we need to destroy connectionfactory and template in the end of the test as well?
Candidate: why do we need to mock <UNK> here?
Reference: use a static precompiled pattern here.
Candidate: the syserr should be be the
Reference: ah... we should not add suffix to static library. but i looked at the code and found no good way to only apply linkedartifactnamesuffix to dynamic library in cclinkinghelper. looks
Candidate: why do we need to use <UNK> here?
Reference: if the attributes types are null for both, i would compare other fields of the attribute then
Candidate: why do we need to use the here?
Reference: unsubscribe should be realized only from ondestroy on fragment
Candidate: i don't understand this matters, if you matters, this matters, if the is is the <UNK> the <UNK> bottleneck. i don't think it matters, but it would be nice to
Reference: is there a risk of there being more than one source with the requestedsourceid? should this case be handled (e.g. log something)?
Candidate: do we need to check the <UNK> if <UNK> is null) { throw new <UNK> }
Reference: this shouldn't throw an exception - that will completely interrupt the kickall. instead, onlineplayer.kickplayer(kickreason) should only be called if the player does *not* have the essentials.kickall.exempt permission.
Candidate: can we move this to <UNK> mapping?
Reference: formatting. and what is wrong with using getloadedcube? it's shorter, and more readable.
Candidate: should we move this into the messages.properties <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: you might also want to look at wenhung's recent changes that were merged for chaining futures. it could make this code a little easier to read.
Candidate: why do we need to do the <UNK> here?
Reference: must write "length" bytes, like this.buffer.writeto(this.outputstream, 0, length); packet max size is set in variable maxpacketsize (server option max_allowed_packet). if sending more than this size, database will close socket.
Candidate: storagetype should be null. if the != null && <UNK> { <UNK> }
Reference: calls to restartcommcare shouldn't be delegated through an instance (like _()) because it is a static method.
Candidate: why do we need to here?
Reference: runtimeexception?
Candidate: why do we need the exception here?
Reference: this should have a check that there does not exist a pin reset request yet (see remark about test). otherwise it is stil possible to bruteforce the code the other
Candidate: why do we need to check for the <UNK>
Reference: i agree.
Candidate: should we be the <UNK> here?
Reference: customfiledownloader
Candidate: <UNK> *= 2;
Reference: i think teamcity is complaining about the exception which is never thrown.
Candidate: why do we need need to the <UNK> here?
Reference: instead of setting mprivatednsrouteset even if the operation failed, you should probably do: try { inetaddress inetaddress = inetaddress.getbyname(addrstring); if (dbg) log.d(tag, " adding " + addrstring); if (networkutils.addhostroute(minterfacename, inetaddress)
Candidate: i don't think we need to check if <UNK> == null) { return; } <UNK> } <UNK> { if <UNK> { return; }
Reference: you're using .json all over the place can you pull it out into a constant
Candidate: why do we need to use the here?
Reference: this is already done by super. afaik you then also don't need the change in streamsink.
Candidate: why do we need need to the <UNK> here?
Reference: if by 'res' you mean 'result', why don't you just put this name directly?
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() here?
Reference: while i realize this code isn't new in this pr, can we take this opportunity to improve the log statement here? i think this should say something like: log.error("error looking
Candidate: ![major](<link_0> 'severity: major') remove method(s) conditionally. [![rule](<link_1>](<link_2>
Reference: this doesn't check any invariants.
Candidate: why do we need need to the <UNK> here?
Reference: nit: this is always true.
Candidate: what is this a reason to do we need to catch the <UNK> <UNK> <UNK>
Reference: can we delegate the check to the recenthistory class instead? i mean the history can answer on the question: "did we have events that were originated with this command?" if
Candidate: this should be the if (state != null) { throw <UNK> } else { if (throwable { <UNK> { <UNK> { <UNK> }
Reference: is it normal to ask for an auditlogger and cast it to an auditbackend?
Candidate: <UNK> *= 2;
Reference: isn't there a static final variable somewhere that corresponds to that tolerance?
Candidate: i don't understand this matters, if this is right...
Reference: why do we need to make this method final but not the rest?
Candidate: please use <UNK> <UNK>
Reference: could you not write over method params and create separate variables instead?
Candidate: feedid should be the feedid
Reference: how/when is refresh handled?
Candidate: <UNK> *= objects.tostringhelper() "config missing" ?
Reference: max 2 returns in a method
Candidate: i don't think we need to check if <UNK> != null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: can we use logger ?
Candidate: please use <UNK>
Reference: i know sonar will flag this for not having the {} around the block. this can be tricky to read the logic coming back at a later date.
Candidate: i don't think we need to do we need need to check the getcredentials for the getcredentials getcredentials
Reference: s.o.
Candidate: please use assertthat
Reference: i've always been a fan of if (o == null || getclass() != o.getclass()) for this. every equals implementation is ugly, but at least mine bails early if the subtypes
Candidate: i don't think this should be the <UNK>
Reference: do not use printstacktrace() - use logger mechanism.
Candidate: why do we need to print the exception here?
Reference: <link_3> will work as well
Candidate: this should be <UNK>
Reference: this can be done once, before calling dowith() rather than for each method.
Candidate: i don't understand why, but it matters, but this is be the if you do, why, but it is not needed to the
Reference: @neykov tests pass for me too. is your stack trace from the client or server side?
Candidate: why do we need to here?
Reference: the || !storeexists part is covered by the needsrebuild = !storeexists; further up, is it not?
Candidate: i don't think this <UNK> <UNK>
Reference: why not just return false here?
Candidate: i don't understand why, but i am not sure why, but i am not sure why, but i am not sure why, but it will be easier to read.
Reference: what does languagebatchinput.tostring() look like?
Candidate: log the log
Reference: final (or maybe consider dumping the variable completely)
Candidate: should be replaced with <UNK>
Reference: these values are always tough to predict, why not make it configurable? also, is 10 secs meant to ensure we don't time out? if so, how close do we usually
Candidate: <UNK> <UNK> expected)
Reference: what is the difference if othersecret is null ?
Candidate: if you is the <UNK> <UNK> is the <UNK> the <UNK> is the <UNK> <UNK> the vdsid is invalid?
Reference: final
Candidate: this is the <UNK> inspections
Reference: return new formulashifter(... is fine. no need to store the returned value in instance.
Candidate: why do we need to use <UNK> here?
Reference: rpc/core api is not consistent with opposite method sponsormember().  sponsormember(userid,userid) removesponsor(memberid,userid)  @licehammer do we really want it that way ? when params are named the same (sponsored/sponsor) ?
Candidate: this should be the <UNK>
Reference: is there a reason you changed the units? the values are the same so not sure if there is a reason.
Candidate: please remove trailing newline
Reference: suggestion return "<link_1>";
Candidate: please remove the method("post")
Reference: @thejanw what if users want to point to api hosted elsewhere than http://localhost:8764 ?
Candidate: should we throw an exception?
Reference: can be static
Candidate: this should be null && <UNK> { return null; }
Reference: < -> <=
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: no need to check evidence type any more
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: is this even possible? if it is not set we will use the default, right? or maybe don't touch defaults here, just set the value in the optionsbuilder if it
Candidate: please use <UNK> <UNK>
Reference: lets avoid the context switch and locking. either we 1. totally remove the synchronized - and go to vdsm if don't have the answer, taking into account that a mass
Candidate: you can use <UNK> <UNK>
Reference: again rename variables & error logs here. "owningcommunity" should be "parentcommunity"
Candidate: do we need a anywhere types, we should need anywhere else?
Reference: like above, line too long
Candidate: move this logic outside of the packet:  try { try { <UNK> }
Reference: this synchronization seems unnecessary?
Candidate: should this be <UNK>
Reference: why call getendpointsuffix again?
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: update logging format.
Candidate: why do we need the <UNK> here?
Reference: are you sure that the ordering will be correct? i think it will order wrongly for the following schemas: "1.0.2" "2.10.3" "10.0.0"
Candidate: should be be the division here?
Reference: equalsignorecase
Candidate: please use <UNK> <UNK>
Reference: ok, i got it. yes, it look like it's obsolete in the meantime.
Candidate: rename <UNK> to <UNK>
Reference: i know we have been inconsistent, but usually use illegalargumentexception on parsing as state is something that could resolve, and this won't.
Candidate: should we throw an exception here instead of returning null?
Reference: can you keep this method and also create a method "active" as alias which uses this method?
Candidate: should we throw an exception?
Reference: suggestion bean.setsourceset(new hashset<>());
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: looks like mutabletuplebuffer needs replaceint() etc., analogous to putint() etc.
Candidate: this should be the <UNK> <UNK>
Reference: there seems to be a bunch of unneccessary manual work (decoding the wkt, creating the projection file, etc.) going on here. can't you just copy all the test data to
Candidate: split the logger in the logger code: logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger
Reference: i don't see this brickid getting used below. can "hashset<georepsessionstatus> statusvalues" be formed here itself?
Candidate: can we use the <UNK> <UNK> <UNK> ?
Reference: if i'm not wrong there is a race condition here, where multiple concurrently committing threads can hit this at the same time. if so, we can underestimate the last written
Candidate: should this be <UNK>
Reference: class doesn't exist
Candidate: should we throw an exception here?
Reference: double ;;
Candidate: <UNK>
Reference: can we put this in a place where we have defines?
Candidate: use <UNK>
Reference: this.
Candidate: please remove the method("post")
Reference: static import
Candidate: why do we need need to the <UNK> here?
Reference: error->not_found.
Candidate: <UNK> --> <UNK>
Reference: so , here it is expected that limits are pushed only when pushdownsort is explicitly set by the user in the request.. while in rowbasedgrouperhelper it will happen automatically if
Candidate: can be replaced with <UNK>
Reference: you have issetx() on all jaxb generated properties (which is equal to action.isforce() != null )
Candidate: can we return null ?
Reference: nit: this.cachevalidationenabled = requirenonnull(cacheconfig, "cacheconfig is null").isvalidationenabled();
Candidate: why do we need to check the <UNK> here?
Reference: isn't it text/plain?
Candidate: you don't need to use the <UNK>
Reference: can't we just do a "break" here instead of using the label?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: check if null if not raising exception?
Candidate: please use <UNK>
Reference: nit: enumset.of
Candidate: i don't need to check for the <UNK>
Reference: it might be good to have a small delay in here, i've had similar assertions fail in ci because of timing issues (see 82d0d280078cb10ec043c544c9cd7e3d8dea6b02).
Candidate: you don't need to use the future.get()
Reference: instead of using a separate e.printstacktrace(), i would add the exception to the logging statement, so it all comes together as one: suggestion log.warn("exception in finally block - this may
Candidate: this eating the exception inspections we don't want to print stack trace to debug quiet threw the exception message.
Reference: i really don't like this. there has got to be a better way to resolve this issue.
Candidate: i don't need to pass the <UNK> as well as well as appropriate.
Reference: what about the case when there is a single call that is active and this hangup method is called? in this case, we will call hangupforegroundresumebackground instead of hangupforegroundresumebackground. in
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: you should create engineerror (and use high value > 5000) for each exception you want to throw in a command, and throw engineexception with this key this way it would
Candidate: this should be <UNK> to <UNK> the <UNK> <UNK>
Reference: at the beginning of the class: string tabselector = "a[rel=%tabname%tab']"; in the selecttab method: webelement tab = waitforelementbycss(tabselector.replace("%tabname%", tabname.tostring()));
Candidate: please remove the method("post")
Reference: it seems like this method never returns false.
Candidate: why do we need the <UNK> here?
Reference: extract variables for targets.target(targetrange.from) and targets.target(targetrange.to - 1). you could name them firsttarget and lasttarget, for example.
Candidate: if you is a <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: same here. you get the idea! there are a couple more occurrences after that.
Candidate: why do we need to use <UNK> here?
Reference: - why postsetup isn't called from applyinlinedeployments - should we use pushinlinedeployments here ? - use of deploycontrib with a test bundle
Candidate: should we use pushinlinedeployments here ?
Reference: nit: this could be also event()
Candidate: please use <UNK>
Reference: this is just crazy :-d i thought that ++i is used only on tech interviews to confuse candidates
Candidate: why do we need the <UNK> here?
Reference: as you've mentioned, this changes the default behavior for all images >= 26 to force srgb instead of leaving inpreferredcolorspace at the default null value. however, this change also means
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: ozone_scm_datanode_id_path_default is now a constant as it is not configurable. we should move it to ozoneconsts.
Candidate: typo: <UNK> -> getcredentials
Reference: what's happening here? weren't all the dependencies already copied to hdfs?
Candidate: <UNK> *= 2;
Reference: you should be able to move ipart and jpart up in to their respective loops and avoid a bunch of extra calls.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i don't think you need to declare the variable here. either move it to be a class variable or move it inside the if statement.
Candidate: you don't need to use the <UNK>
Reference: it is preferable to use doi.parse(value) since it adds a bit of cleanup and you don't need to catch the ilegalargumentexception. <link_0>
Candidate: the syserr should be be the
Reference: i think we should sort outside the loop since then we only have to do it once
Candidate: why do we need need to terminate if the is is the
Reference: shall we just remove this line-218 ? since mongorules.isitem indicates that it only works for item
Candidate: can be simplified to <UNK>
Reference: it's recommended to use builder pattern for the sake of readability. i.e.  new alertdialog.builder(...) .settitle(...) .setmessage(...) ... ;
Candidate: i don't think we need to check if <UNK> { return; } if <UNK> { return; }
Reference: do you mean !misroaming && !mforcelowbandwidthifroaming here instead? since mforcelowbandwidthifroaming will always start out as false, right?
Candidate: if we is the software stripe { return; }
Reference: it might make sense to modify the usage of this cache. transactors that have timed out should only "not exist" for all transactions before the starttime of the timeout. for
Candidate: should this be null?
Reference: i guess that instead of null == deletedonsecondary && deletedonsecondary the it should be null == deletedonprimary && deletedonsecondary, right? or deletedonsecondary != null && deletedonsecondary.
Candidate: if we is the software <UNK> is the software <UNK> but i don't think it should be the if it is the software <UNK>
Reference: there's a lot of logic in this method which will make it hard to debug in the future... why wouldn't the following below work? and have any management of currentwork,
Candidate: should we be the <UNK> here? if we { return; } if <UNK> { return; }
Reference: would the error be easier to understand if it said something like "can only call set and get methods for call state when using a single callcontext" at present, it
Candidate: you should need to check for the <UNK>
Reference: i don't think we should send a message here, if the foodlevelchangeevent was cancelled, then we should simply not consume any hunger points. the wind staff itself did not fail,
Candidate: the syserr should be be <UNK>
Reference: oops, i meant only the accessors in the abstract chat message class to indicate that they should not be overridden. could you undo all of these except for the ones
Candidate: @since issue: aforementioned "never use null"
Reference: can't we do something a bit better here?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: not necessary.
Candidate: the syserr should be be the <UNK>
Reference: if it shouldn't be possible to store an application without a slug then this abstract implementation should have control over it and not rely on an implementation calling this method.
Candidate: why do we need need to use <UNK> here?
Reference: do we need logging in tests if we don't actually check the values?
Candidate: why do we need to use the <UNK> here?
Reference: i'd collapse this logic into the span namer.. ex.  java if (this.name != null) return this.name; return spannamer.name(this.delegate, "async"); // last param is the fallback on default;
Candidate: can we use <UNK> <UNK> <UNK>
Reference: externalize string
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: i think it's slightly clearer to use utils.containsnonull here
Candidate: this should be the <UNK>
Reference: i'd reconsider the withresponse calls. i thought we added this to encompass all use-cases, but i don't expect usual devs to care about the http response.
Candidate: please use string.format instead of <UNK>
Reference: please use usertrade.builder here
Candidate: can be replaced with <UNK> <UNK> ?
Reference: this should be computed outside of for loop just once.
Candidate: please use <UNK> <UNK> <UNK>
Reference: we may need to remove ozonebucket#addacls api as it is the legacy impl based on bucketmanager#setproperty. when we switch it to use setacls(), the existing acls are not preserved correctly.
Candidate: why do we need to check the <UNK> <UNK>
Reference: pass the access token, and the use the id in the callee.
Candidate: should we be schedule() here?
Reference: isn't this test supposed to test the behavior of the shardconsumer on failures when executorservice is not able to handle the submissions of runnables? testing multithreaded behavior in unit tests
Candidate: why do we need the <UNK> here?
Reference: optional: remove "debug" in print statement.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit: can we add the mount id, and maybe the mount path in this message?
Candidate: do we need to check if <UNK> == null) || <UNK> { <UNK> }
Reference: probably should have renamed the variable to "idoruuid" to make the code more readable
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i think we want to make sure that the line numbers are copied over correctly.
Candidate: please use <UNK>
Reference: java8-isation [foreach][optional][flatmap]
Candidate: java8-isation <UNK>
Reference: change to false? (or not set it?)
Candidate: gender should be the fixture.
Reference: @dankraw i remember that you wondered about concurrency of this task. imo we should try to parallel this stream because when we have 500 topics and each metadata download takes
Candidate: what happens if the exception is is the
Reference: please turn these into constants and reuse these constants in the rest of the test.
Candidate: <UNK> *= 2;
Reference: you can just put getabridgedconfigpath here, and then call the field "title" in createconfiggui. same thing with modid really. example: <link_0>
Candidate: this should be <UNK>
Reference: i would prefer this to become scriptconsole.getactive().addactiveconsoleobserver(). this would allow observers to be per console and not some shared data.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: should this be done partition-wise?
Candidate: can be replaced by objects.isnull
Reference: ![blocker](<link_0> 'severity: blocker') close this "bufferedreader" in a "finally" clause. [![rule](<link_1>](<link_2>
Candidate: should we be the <UNK> here? we don't want to print the stack trace to debug level?
Reference: can this be false? if so, should we retry this check for it to be started
Candidate: why do we need to mock <UNK> here?
Reference: this class is public, you need to make the change backwards-compatible.
Candidate: <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: we should probably make the "3" into a constant, since we are using it in multiple places.
Candidate: do we need need to check the <UNK> <UNK> <UNK> <UNK>
Reference: nit: missing space between if and (
Candidate: can we use <UNK> <UNK> <UNK>
Reference: does this delete necessary?
Candidate: typo: <UNK> -> <UNK>
Reference: this can be reverted back to being private
Candidate: should we catch (throwable e) { throw exception } catch (throwable e) { throw new ioexception( runtimeexception(e); e) { .... }
Reference: good candidates to use builders?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: what is the problem that your addressing here? should this instead check for null _theaction, since the below _theaction.equals(txcontrol) check already handles the null txcontrol case: else if (_theaction ==
Candidate: should this be the <UNK>
Reference: then consider to leave old constructor and add new one below
Candidate: can you use <UNK> <UNK> <UNK>
Reference: duplicate load of the file?
Candidate: what happens if the user is appid specified, then we will throw an exception, the will throw an error.
Reference: shouldn't we also be doing executorservice.shutdown() here as well?
Candidate: should we throw an exception?
Reference: why it was not needed and now you copy it over and over again?
Candidate: you can use <UNK> <UNK>
Reference: maybe a linkedhashset to preserve order.
Candidate: <UNK> *= 2;
Reference: this formula assumes no correlation between partitioned-by columns, right?
Candidate: can be replaced with <UNK>
Reference: bad variable name getvdscertificatesubjectresult
Candidate: this should be <UNK> <UNK>
Reference: maybe there are other tests in that vein? the basic idea is to try to trick the planner into producing an invalid plan. i'm also curious about several levels of
Candidate: unused line.
Reference: this stub will be called multiple times per table as it is invoked by several methods in injectablebehaviourobjectstore. need to increment the count only if encounter a new table.
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: is there a better method to get the header without leaving an open file handle?
Candidate: i don't understand this matters, this matters, this matters, but i think we matters, that it matters, but we don't want to have the <UNK> in the
Reference: can use objectdoublepair here and similar methods for better performance (one less object boxing).
Candidate: why do we need to use <UNK> here?
Reference: use log.error or warn
Candidate: shouldn't we cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause cause
Reference: getrefs skips dangling symrefs, so r.getobjectid() should never be null. this could error out: objectid id = r.getobjectid(); if (id == null) { throw new assertionerror( string.format("getrefs returned unresolved ref
Candidate: nit: i don't understand why, but i don't understand why, but i understand why, but i understand why, but i understand why, but i understand why, correctly, but i think
Reference: maybe you like this code better to create config instance:  import static io.digdag.client.digdagclient.objectmapper; config static newconfig() { return new configfactory(objectmapper()).create() } ... import static xyzutils.newconfig; return newconfig() .set("host", "foobar1.org").
Candidate: why do we need need to the <UNK> here?
Reference: isn't it exactly the same as #836?
Candidate: if the != null && <UNK> { return; }
Reference: @qqmyers i don't think we talked about this updateidentifierstatus method. was it simply unused?
Candidate: why do we need the exception here?
Reference: add a partition with a later time, that doesn't get deleted.
Candidate: you don't need to use the <UNK>
Reference: suggestion for (final infoitem item : relateditems) {
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: essagequeue.registerbankaccount_pushmessage
Candidate: this should be <UNK>
Reference: @vmaletta replace 8264 by termid.seed_amount_g in all tests
Candidate: use <UNK>
Reference: how about logging a warning to use the new name instead of the old one?
Candidate: use stringutils.isblank here instead of <UNK>
Reference: looking at the original implementation, it appears like operatorcontext may be null (if (operatorcontext != null) below). i assume this code will crash with npe in such a case. if
Candidate: this don't need the fixture.
Reference: couldn't we just get the prototype directly from this? javascript () => object.getprototypeof(this).m;
Candidate: we don't need to mark the <UNK> as main main main main main case.
Reference: should this go into the "mutliaspect" ? aspects that resolve to null will string to "null", is that the expected behavior?
Candidate: costs costs <UNK> costs <UNK> costs something: clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, compatibility. clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz, clazz,
Reference: i looked up many web pages/blogs which discuss "removing an element from hashmap while iterating over it". all of them suggest one common method i.e. using an iterator. i saw
Candidate: should we be the <UNK> here?
Reference: do we need to throw and log? can we have this message include the message above?
Candidate: why do we need to here?
Reference: @jdotcms please instead of a debug let's change it to error, if we are trying to register something with osgi and we can not do it we want to be
Candidate: <UNK>
Reference: successfully wrote header
Candidate: rename <UNK> to <UNK>
Reference: just put all this part in if (action.issetregistrationconfiguration()) block and save repeating this condition in each method again
Candidate: nextvalueindex should be the error message.
Reference: @lautarobock let's assign new opt.empty statement into an else block instead of initializing the variable here. that way we can a) declare valid as final, and b) avoid instantiating opt.empty
Candidate: use readasstring(...) instead of <UNK>
Reference: final
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i would prefer doing all the onpollready() on operation arrival in operationcontroller and passing in the readyforpollcallback only when required (i.e. getbloboperation and chunkfiller).
Candidate: this should be the <UNK>
Reference: this uses the platform default character encoding. it's good to be explicit, so please use publiccertificate.getbytes(standardcharsets.utf_8) instead.
Candidate: why do we need to check the <UNK> here?
Reference: why do we need to apply transactions for select statements?
Candidate: we should need to check for the exception if <UNK> { throw new <UNK> } { <UNK> }
Reference: use joinurl instead of confirmationurl ?
Candidate: what happens if the is is the the <UNK> is skipped, then is it is the software indication of the
Reference: we should probably only catch the thrown exceptions and not all throwables here.
Candidate: the syserr should be be the
Reference: should the default value of timestamp be -1, to be consistent with the keyvalue class?
Candidate: i don't understand if we need to hide the if <UNK> is null) { ... } else { if <UNK> { ... } else { if <UNK> { ... }
Reference: @carlspring would say indentation :p
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i normally static import the assert classes for improved readability, is there a reason you didn't do this here?
Candidate: should we be the exception here?
Reference: same here with the tz check
Candidate: why do we need to use the <UNK> here?
Reference: this can return null
Candidate: please use <UNK> enummap instead of stringbuilder?
Reference: block1.getsize() < status.getcurrentsize()  if the blocksize is changed only at the begin, i guess, these checks will have the same result as the above test. if the blocksize should
Candidate: should this be be <UNK>
Reference: assertequals(excpected, actual)
Candidate: assertequals(excpected, actual)
Reference: ditto about exception or letting checkpoint coordinator know, that this checkpoint was declined. otherwise, aren't we risking a situation where this checkpoint will complete, despite this operator not participating in
Candidate: you can use <UNK> <UNK> <UNK>
Reference: nit: move the left brace to the next line, otherwise the check style will complain :)
Candidate: the sake of fqns as well.
Reference: can we flatten this into an &&
Candidate: rename local signature signature signature signature signature signature signature signature signature signature signature signature needs signature signature signature signature signature signature signature signature signature signature signature signature signature signature signature
Reference: any reason you want to traverse thru the actions here rather than thru the map's entryset. that way you can also just traverse thru the actions just once, lookup the
Candidate: should we be <UNK> here?
Reference: when converting cursors one should be able to convert any timeline, not just active ones
Candidate: if we is software software stripe { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }?
Reference: suggestion private void persistandrunjob(jobgraph jobgraph) throws exception {
Candidate: why do we need this?
Reference: what if throwable or exception are catch. java try { connection conn = drivermanager.getconnection("jdbc:mysql://prod.company.com/production"); } catch(exception e) { e.printstacktrace(out); }  i would added parent exception classes. this will introduce
Candidate: this should be <UNK> <UNK>
Reference: when we have a .get with no ispresent check, i think that's a good idea to explain why the value will always be present and do something like this: java
Candidate: iterable<integer> <UNK> = <UNK> h = <UNK> h = <UNK> h = <UNK> h = <UNK> h
Reference: could you use failed() here?
Candidate: why do we need to use the here?
Reference: shall we print something such as "default close method is invoked! no operation is executed." that can give user some hints.
Candidate: should throw an an an an an an an an an an an an an an an an an an an an an an an an an an an an
Reference: switches?
Candidate: i'm not sure you're checking whether the user flips whether whether the user flips whether the user flips to.
Reference: wrap this with try-catch and return mono.error() if there are any exceptions. for reference, see other async clients.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i think you meant shouldshowwidgetpromo()?
Candidate: this should be the <UNK>
Reference: i agree, looks like it is meant to be the child.
Candidate: please use <UNK>
Reference: nitpick: you don't need the profilestr.length() here. to take substring from given index till the end, just use [string#substring(int)](<link_0>
Candidate: should we throw an exception here instead of eating the exception?
Reference: check for non-null?
Candidate: i don't think we need to call the <UNK> <UNK> <UNK>
Reference: generally the logic looks ok, but it's a bit complicated. if i were you, i would: 1. use collectors.partitioningby to create two lists out of alldiskandsnapshots - one with diskimage
Candidate: can we add the <UNK> specifier here as well?
Reference: why do we need this part?
Candidate: i don't think we need to check if <UNK> { <UNK> } else { if <UNK> { <UNK> } <UNK> { <UNK> } } } } }
Reference: are we sure about this? what if termination is triggered during backup?
Candidate: this is designed to be <UNK> to the the origin of the <UNK> structure, to be the
Reference: what about reading in parallel? i don't know if that would optimise things since kafka consumer already pre-fetches data, so that when calling poll the data is already available. what
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: probalby objects.equals can be more safe to apply in case reassingmentsinfo is null at some point
Candidate: why do we need to check for the <UNK>
Reference: this should only be set up once, in the activity. (both lines)
Candidate: use <UNK> <UNK> <UNK>
Reference: suggestion: maybe add a stored procedure or change the getallforvm to also filter disks by storagetype
Candidate: wait.forelementclickable() should be <UNK>
Reference: ...**if** one or more...
Candidate: this should be the <UNK>
Reference: checknotnull should be the first line of the method
Candidate: can we be rectangle <UNK>
Reference: why don't you check this in the setteststate method, so that is done only in one place? anyway this should not be possible, because once you get a timeout, you
Candidate: why do we need the <UNK> here?
Reference: i think this method would be more readable if it checked for instanceof lockrequestfornewsegment first and then !datasource.equals(request.getdatasource() as separate checks that return false (i.e., the cases that will never
Candidate: should this be the <UNK>
Reference: is object needed here? seems like its using a long everywhere (and could presumably be converted if not)
Candidate: please use <UNK>
Reference: enclose if-else blocks within { } even for single statements
Candidate: i don't understand why, but it matters, what is the that the is is the that the is is the
Reference: date now = new date() might be better name for it.
Candidate: we should need to use the <UNK> <UNK>
Reference: i am not so happy for opening this class so much.
Candidate: this should be <UNK>
Reference: merge if statement: if (path != null && !xmlutils.exportxmlfile(selectionxml, path).isok())
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: mention the reason here, why catching inflation exception is necessary here.
Candidate: should be be <UNK>
Reference: should we be logging here?
Candidate: i don't think we need to use the for the <UNK> <UNK>
Reference: this should escape the column names if they contain illegal sql identifier characters.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: not the most informative debug message.
Candidate: can you use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: please keep as field, easier to find there (maybe just for me :wink: )
Candidate: please use syserr
Reference: (nit) trailing whitespace [and likewise below]
Candidate: please use <UNK>
Reference: i noticed that there are some-times non-ascii characters embedded into the docs, could you look for these at this point and fail if this happens so that we do not
Candidate: should this be brackets?
Reference: why do we throw ioexception here?
Candidate: the absence of absence of the <UNK> of the absence of them?
Reference: nit: same here suggestion log.error("user [%s] had role [%s], but role object was not found.", user.getname(), rolename);
Candidate: can we use the <UNK> here?
Reference: the check is correct- but i think that the error message is too specific (covers just the case of templates)
Candidate: i don't think we need to check if <UNK> { return false; } else { if <UNK> { <UNK> { <UNK> { return <UNK> }
Reference: you don't have to throw internalerrorexception in any of these methods :)
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: this is strange imho because it forces the caller to keep track of who might have called this method before it. kubernetesdeployments is used in quite a couple of places.
Candidate: the exception message should be thrown in the log.
Reference: same as above about the unnecessary storing of the local variable convertedstreamrecord
Candidate: why do 49
Reference: the checkout already nulls the inode
Candidate: i don't think we need to use the <UNK>
Reference: not before i exhaust my command of soql. :)
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: suggestion logger.error("updating remote repository failed",e);
Candidate: this should be <UNK>
Reference: 0?
Candidate: why do (args.length > 0?
Reference: wrap whole method to mono.defer?
Candidate: we should need to check on the finally block.
Reference: i would inline count
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: case 409: exception = new illegalstateexception(exception.getmessage(), exception); break;
Candidate: should we catch (throwable e) { throw } catch (throwable e) { .... e) { throw }
Reference: should we really use such a high number? if i understand correctly, hbase's own system tables use 200, so i don't think we should go above that.
Candidate: do we need a <UNK> of <UNK>
Reference: why are we throwing an unsupportedoperationexception if the hashtag is not set and not another type of exception?
Candidate: should this be be specific? if we { null) { return <UNK> } <UNK> } } } } } } } }
Reference: we should used: stringutils.containsignorecase(url, "_format=json")
Candidate: should this be <UNK>
Reference: i don't think we need this here, only in urlparambuilder.
Candidate: why do we need the <UNK> here?
Reference: is the first part of the test required? "if (!olf.rafclosed" it sits below an assert that in order to pass must be true.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: does assume work here, so it is not duplicated across all the tests?
Candidate: why do we need to use <UNK> here?
Reference: could be discover a better word but not sure.. apart from that, why are we trying to query 10 times if we are able to get an answer from k8s
Candidate: what happens if the exception is is rejected
Reference: why is this second condition necessary?
Candidate: ![major](<link_0> 'severity: major') refactor this 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
Reference: throw new illegalargumentexception("when filtering with regular expressions, " + "the path must be a directory and leverage glob syntax. usually " + "the folder path needs to end with '/*'.");
Candidate: do we need to check the <UNK> <UNK> <UNK> <UNK> nodes directly?
Reference: this worries me. i think item 5 is a **bit** ambigious, since arraylist **is** a list, though i think your interpretation is more plausible. but, since stringparameterinjector.extractvalues() returns a hashset,
Candidate: this should be the <UNK>
Reference: i believe this was a class-loader hack that we needed for kafka, it may not be necessary here.
Candidate: we don't need to use the keys.
Reference: should be f
Candidate: why do we need the <UNK> here?
Reference: is it necessary to null out dbexecutor? won't it be garbage collected when the enclosing imagegallerycontroller is garbage collected?
Candidate: i don't think we need to throw an exception if (state { <UNK> }
Reference: repated, too many bases
Candidate: implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement implement
Reference: file a good first issue?
Candidate: why do we need to mock <UNK> here?
Reference: why not just use fixture?
Candidate: this should be cleanest to super, the super, the super, it should be cleanest to the super, the super, we don't need to
Reference: setcommit takes a capital-b boolean, so no need for this check, if it's null it'll just set to null.
Candidate: why do we need the <UNK> here?
Reference: not only that, but i think there is something wrong further down: java subject = restrequest.getsubject(); authorization = restrequest.getauthorizationheader(); restrequest.setsubject(subject);  i think the setsubject can be removed
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: create this file in the maven build dir "target"
Candidate: why do we need to use the here?
Reference: this seems to be a non-trivial wasteful computation in case node.kind is neither and nor or
Candidate: can we be **log** here?
Reference: lines 124-127 seem difficult to understand, is there any way to write it to be easily understandable? and are not to standards (always use brackets in if or else, except
Candidate: should we use the <UNK> here?
Reference: should be isvalidrepoid
Candidate: i don't think we need to check if the is is the
Reference: i think you can do an "exists" call here instead. that will avoid throwing/logging an error, which will look suspicious to a new developer. i think logging at the info
Candidate: why do we need the <UNK> here?
Reference: you could move the if before ctx.onreturn() and avoid invoking ctx.continueinvocation()
Candidate: i expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting
Reference: scalein a task is awkawrd. i think finding the min task should be implemented within scaleinmanager.scalein
Candidate: the syserr should be be the
Reference: add codec to tostring()?
Candidate: should we use moreobjects here?
Reference: why have you only added it to the container part of the or?
Candidate: please use map<> on the <UNK>
Reference: you should use entitytype instead of topicname for your comparison
Candidate: should we use <UNK> <UNK> <UNK>
Reference: it looks like we need to remember the result in entityconstructor.
Candidate: this should be <UNK>
Reference: you mentioned "kafkamirrormakerconnectortask.createkafkaconsumer(), the properties are copied over to yet another object, causing the defaults to no longer be accessible." guess it would be helpful to extend the test to
Candidate: please use <UNK>
Reference: this layer only understands ilogdata can you move this conversion to streamviewsmradapter which actually maps ilogdata to smrentry
Candidate: should this be be the <UNK>
Reference: as index is guaranteed non-null, index.equals(indexinterpolated) is sufficient
Candidate: you can use <UNK> <UNK>
Reference: indent this, so that the code checks for museautoscale???restriction only if mcustomaxismin is true, that way it uses the same maxisminum variable, but it two different possible ways.
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: style-nit; we don't use braces for simple single stament constructs
Candidate: please use <UNK> <UNK> <UNK>
Reference: is there someone we can yank these 30 or so lines to a separate method or, even better, a separate class? ideally, we probably want it to look something like
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: again, i don't understand why this is needed? isn't it the same thing that happens in abstractnetworkpopuppresenterwidget?
Candidate: should this be <UNK>
Reference: if you're already using the early return pattern, might as well use it throughout the code: if (!canaddvm(...)) { return false; }
Candidate: can we rename the <UNK> to element?
Reference: in the getservertemplateid() above you work with the possibility of servertemplate being null. here you're calling servertemplate.getid() directly without null check - possible npe here? the same for hashcode below..
Candidate: please use object.equals for the object.equals as well
Reference: no, it should use tempidtableexporter
Candidate: why do we need to check the <UNK> here?
Reference: did you check this prints messages with decent grammar? not sure, but did you mean "cluster name ... service name ..."
Candidate: why do we need the <UNK> here?
Reference: should this be poller = new adminpollerservicebean(null, null);?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: no need to check in here since maxnumbackup value will always > 0 based on the caller logic
Candidate: do we need need to the <UNK> here?
Reference: minor:  if (sendzerosizedlastchunk && random.nextint(2) % 2 == 0) { sendzeroandwait(); }
Candidate: should we be the <UNK> here?
Reference: i don't have the code now but if the contract od sselection is to return null on getfirstelement() if sselection is empty, the code can be changed to simply return
Candidate: can be simplified to: java return <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { return <UNK> }
Reference: you could inline this
Candidate: why do we need need to the <UNK> here?
Reference: when does this make sense ? if the repository is bare the returned path is non-existing and there are no eclipse resources mapping to the path since there's also no
Candidate: this should be the <UNK>
Reference: nit: an explicit call to super() is not needed.
Candidate: <UNK>
Reference: this if can be removed. you already have it above.
Candidate: can we use the <UNK> name)?
Reference: nit, _listener = listener that is our code convention.
Candidate: this should be the <UNK> <UNK>
Reference: voidpromise() is not allowed for ch.close(...). just call ch.close().
Candidate: why do we need to check for the <UNK> <UNK>
Reference: i'd rather see more specific error messages here, as there's a few different scenarios here we should be aware of: * a permanent group's name can *never* be patched. but,
Candidate: nit: illegalstateexception log.
Reference: follow singleton pattern. add private to prevent others to call new adapterpatientdiscoveryproxywebservicehelper()
Candidate: why do we need need to be <UNK> here?
Reference: final
Candidate: why do we need to use the <UNK> here?
Reference: add log level check, so tostring only gets invoked if log level is trace. (couple more times in this file)
Candidate: can we use the <UNK> here?
Reference: calling the hook here only creates a draft-published event when the first patch-set of a change was uploaded as draft and then gets published, so that the change status switches
Candidate: should we use the <UNK> properties? for the <UNK> generation?
Reference: unless the docs explicitly say a method will never return null you should check it, or be in a try/catch that's going to handle an npe.
Candidate: you unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary. unnecessary.
Reference: currently we have two widget providers (mostly for backwards compatibility). please ensure to update both.
Candidate: please unify the as well as well as well as well as well as well false)
Reference: i think there's a jetty util for cleaning the exceptions floating around somewhere
Candidate: should we be the <UNK> here? if we { return; } <UNK> } } } } }
Reference: @ikhvostenkov this variable can be inlined
Candidate: @exper0 let's remove the assertion.
Reference: would it be better to sort by status (order: true > null > false), noterequired (false > true) and description (a > z)?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this change doesn't seem to reflect the description, and shouldn't be necessary, correct? only moving the inputstream initialization is necessary?
Candidate: can we use gender here?
Reference: nit: expected is first
Candidate: why do we need to use the here?
Reference: nit: extra spaces
Candidate: why do we need the <UNK> here?
Reference: same here, or call this(,,)
Candidate: this readasstring(...)
Reference: isanyvalueequal
Candidate: i don't understand this if you want to trim the <UNK>
Reference: immutablemap.of(
Candidate: use <UNK>
Reference: would you please fix here too?
Candidate: can we use the <UNK> here?
Reference: consider declaring these variables as class-scoped constants. i see them being repeatedly declared/used on other methods.
Candidate: this should be <UNK>
Reference: float this up above permissions methods
Candidate: why do we need the <UNK> here?
Reference: the listbuckets() operation will kill the cluster in production as it needs to go trough all the keys. maybe there is a better way to check for health?
Candidate: should we throw an exception?
Reference: these logic about clear outdated state are missing in the latest pr.
Candidate: can we move this to <UNK> mapping?
Reference: ![critical](<link_1> either log or rethrow this exception. [![rule](<link_2>](<link_0>
Candidate: should we throw an exception here?
Reference: maybe make this bigger, just to be safe, say 25...
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: flip
Candidate: please remove the <UNK>
Reference: one question, since we do verification in topology builder, is there any validation code in later stage that could be removed?
Candidate: the syserr should be be <UNK>
Reference: using names such as compressedbuf, compressed and uncompressed, instead of temp, temp2 and copybuf would make the more readable.
Candidate: i don't understand this matters, if we matters, but you don't need to check overwrites the <UNK>
Reference: else if? or switch?
Candidate: we should need to log the to the log the
Reference: a check for null is required here as expression is an optional value and can be null
Candidate: should we be the <UNK> here?
Reference: this local is only scoped to the finally block. declare it within the finally block.
Candidate: why do we need to clients?
Reference: haven't we lost fail-fast abilities by moving this here?
Candidate: why do we need need to the <UNK> here?
Reference: requires a check for abslistview now. or remove the check altogether.
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: this could be changed to use a constant from the const class instead of keeping the old magic string.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: this piece of code java profiler.instance.getapplicationstatemanager().getlaststate() == applicationstate.offline  is copy-pasted everywhere (sometimes in a method, sometimes not). can you factorize in a single method somewhere in profiler.instance or in
Candidate: why do we need to use <UNK> here?
Reference: can you please add classname to error message?
Candidate: this should be the <UNK> <UNK> the <UNK> is the
Reference: can we split this stream to multiple lambdas?
Candidate: should we use the <UNK> here?
Reference: let's make it _protected_ to allow users to override if they want
Candidate: this should be (throwable <UNK> { throw <UNK> } (throwable e) { <UNK> { <UNK> { <UNK> }
Reference: this call is not efficient cause you will map all n clusters in list() while only one can (potentially) answer your cluster.getid().equals(guid.tostring()) condition (or even none), instead please implement public
Candidate: we should need to synchronize on the so we don't need need to do we need to synchronize on the <UNK> hand,
Reference: setjournalno?
Candidate: why do we need to use <UNK> here?
Reference: isn't this rather warning/error than info? my thoughts were all channels in kogito should have an envelope. have just some of them the envelope? or is it that small subparts/panels/components
Candidate: this this repelaced e1 && <UNK> { <UNK> }
Reference: always use curly braces, even for one-line statements.
Candidate: why do we need permission?
Reference: you can optimize this so that if the first time you send size, you get back the same value for both, you never need to call the remote command again.
Candidate: you don't need to use the <UNK>
Reference: lets return an unmodifiablemap
Candidate: why do we need to check the <UNK> <UNK>
Reference: this code should continue to read as one-liners. it's intended as an extensibility point and should be terse. prefer:  java modules.add(new dom(new androiddomproviderfactory()));
Candidate: should we be the <UNK> here?
Reference: try to use the better alternative assertj.
Candidate: can you use <UNK> here
Reference: * should relative path be resolved as well?  path absf = fixrelativepart(path); * should increment read statistics as well.  statistics.incrementreadops(1);
Candidate: please use <UNK>
Reference: minor typo in variable name.
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: you could perhaps use the elytron resource to be homogenous with the other testcase.
Candidate: please use <UNK>
Reference: this already happens in the animationtimer and should be removed. <organisation
Candidate: why do we need to <UNK> the <UNK> here?
Reference: ![major](<link_0> 'severity: major') method has 7 parameters, which is greater than 6 authorized. [![rule](<link_1>](<link_2>
Candidate: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Reference: note: writes to the sweep queue are only done when comitting a transaction, so non-transactional table writes (including internal tables like sweep-progress) shouldn't ever be enqueued. agree that we should
Candidate: why do we need the <UNK> here?
Reference: there should be a dedicated test rather than replacing this one.
Candidate: should this be the <UNK>
Reference: since we are using histogram everywhere, replace abstracthistogram::reset with just histogram::reset.
Candidate: this should be called on the <UNK>
Reference: not strictly part of this pull request, but let's see if this can be changed to boolean.
Candidate: i don't think we need to check the if the is is skipped, <UNK> is skipped, <UNK> is skipped, leaf udp directories.
Reference: i would suggest to use an enum for this. you can insert the enum if the text can be parsed by the static valueof method. therefore the strings should be
Candidate: this should be the <UNK>
Reference: more weird union() usage for setting the min-max values. you should use the min-max constructor. suggestion blockregion region = new blockregion(mins.get(i), max.get(i));
Candidate: list<linkinfo> don't need to use the uribuilder
Reference: maybe just give the real type be here in the exception ? and for before method too
Candidate: this don't need to check if the costs is the
Reference: this will break as soon as we allow parts of subapps to be mapped. then it can be that we get wrong opposites here. that was the reason that i
Candidate: this should be the <UNK>
Reference: ![minor](<link_2> 'severity: minor') remove the redundant '!unknownsymbol!' thrown exception declaration(s). [![rule](<link_1>](<link_0>
Candidate: why do we need need to the the anyway?
Reference: the only one i know is cron parse from trigger.class
Candidate: can we use <UNK> <UNK> <UNK>
Reference: is there a more elegant way to do this? a callback and background thread seems super hacky.
Candidate: we should need to do we need to check the getcredentials for the getcredentials
Reference: why are we using clone and a cast here?
Candidate: why do we need to synchronize on the request?
Reference: better message: "hashing a column of type " + column.gettype() + " is unsupported"
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: why don't we have an equivalent value generator for past?
Candidate: please remove the <UNK>
Reference: rename to type
Candidate: rename <UNK>
Reference: this can be deleted.
Candidate: please use assertthat
Reference: have to create it each time? can we not just create once and then put it in place before evaluate?
Candidate: please use <UNK> <UNK> <UNK>
Reference: when logging an exception, pass also the exception as param to the method, so that the stack trace is available in the log file.
Candidate: better! json: missing stream v2 v2 logging logging logging edges, logging edges, logging edges, logging logging edges, logging edges, logging edges, logging edges, logging edges, logging edges, logging edges, logging
Reference: this message is a bit off since the full request is being used to pick a handler now.
Candidate: can you move this to <UNK> mapping?
Reference: this(new withtextmatcher(title) and then removing title attribute
Candidate: why do we need to check the <UNK> here?
Reference: @filfreire better use solidlist instead
Candidate: why do we need the <UNK> eq size?
Reference: i would extract candidatebundle.getid() and candidatebundle.getversion() outside the cycle
Candidate: why do we need the <UNK> here?
Reference: please also pass the original exception as parameter. just in case
Candidate: why do we need to use the <UNK> here?
Reference: suggestion logger.log(level.warning, "please report to the respective component", e);
Candidate: this should be <UNK> <UNK>
Reference: is there any way to check this without two loops? if each one has x memberships, then the loop want to go for x*x times to find it.
Candidate: why do we need the <UNK> here?
Reference: why add empty string?
Candidate: why do we need to use <UNK> here?
Reference: a space is missing
Candidate: hmm. this should be the <UNK>
Reference: this method could take in a boolean. this would allow the tests to be executed in any order, instead of encryption staying on once it was enabled.
Candidate: this should be the <UNK>
Reference: minor: i would not call organizationflags.isenabled before checkorganizationkeyconsistency, if the check fails, we uselessly made a call to db
Candidate: why do we need to wait for the <UNK>
Reference: it failed due to this, syscs_perform_major_compaction_on_schema calls this function with tablename set to null. we could perform the validate here and move all the logic into a separate function that
Candidate: why do we need to mock <UNK> here?
Reference: should this be a warn instead of a debug?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: how about using accessor methods instead of field access? that way, we can entirely omit any kind of proxy handling.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: -->finally
Candidate: please remove the print.
Reference: suggestion ") returns null.");  the memberaccessor isn't null, it returns null.
Candidate: please import?
Reference: @zeemanhe this if/else if/else is hard to read. can we do something like: if (startaction == startaction.join) { } else if (startaction.doesrejoin()) { } else { ... }
Candidate: should we be the getconnection here?
Reference: also not required if we use a new implementation of bulkcommand
Candidate: please use <UNK> <UNK> <UNK>
Reference: i don't think we should filter the parameters, as capabilities are parameters, too. an we should keep the link to the rfc for further reference to there parameter types, if
Candidate: we should need to do we need need to check whether the <UNK> is the <UNK> <UNK>
Reference: @odockal this could be moved also in labels class
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: these will get overwritten on each iteration of the loop, so you'll need to use keys like "key_"+i and "value_"+i. also, you can use it when you create the object
Candidate: why do we need need to the <UNK> here?
Reference: - we don't use final for local variables - constants need to be defined as private static final member variables and names should be all caps with underscore separators, e.g.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: not needed
Candidate: let's print the stack trace, depending on the stripe id
Reference: one last nit for you. can we change the class to assetreport?
Candidate: why do we need this?
Reference: eventtype that we put to publishevent method, should be constructed similar to its api counterpart: resourcetype.actiontype. example: service.update. so instead of eventtype.tostring(), we should use objectmanager.gettype(resource) + "." + eventtype.tostring()
Candidate: please move this to "else", the <UNK> costs to the <UNK> costs the
Reference: we've just created this, no need to clear it (probably a leftover from a previous version).
Candidate: why do we need to use the payload?
Reference: should use boolean.tostring(true)
Candidate: i don't understand this matters, if we matters, but you don't need to check if the is is the <UNK>
Reference: should be "declarative pipeline with podtemplate" ?
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: why false again?
Candidate: should this be <UNK> <UNK>
Reference: make one logger instance?
Candidate: this should be an empty() if (state != null) { <UNK> } <UNK> { <UNK> <UNK> { <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { return <UNK>
Reference: verifying that messageet is not null before attempting to clear will prevent the npe.
Candidate: should this be <UNK>
Reference: shouldn't all apply*filter() methods be private?
Candidate: can be replaced with <UNK> <UNK> ?
Reference: why putting this in the else? also, this filter can never match because a field cannot be both time and date_time
Candidate: do we need need to use <UNK> directly?
Reference: why doesn't this also subtract the and of the inlist predicates like with or? (relevant e.g. if you specify duplicate values)
Candidate: should we throw an exception here instead of returning an exception?
Reference: should remove, and use similar functionality in mockserviceticket
Candidate: please use <UNK>
Reference: thoughts on keeping the non-negative enforcement?
Candidate: please remove the <UNK>
Reference: same here for out: use the [try-with-resources-statement](<link_0>
Candidate: why do we need to check for the <UNK>
Reference: could i recommend extracting a view_type_message_other_users maybe? :) also a view_type_message_this_user and use it here (else if it), so you have an else that can throw
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what is 2? make final
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: can't these configuration classes be extracted and reused? they look quite similar to the existing ones.
Candidate: should this be null?
Reference: i get it that the jre is optimized for small short-lived allocations. but i still don't feel absolutely at piece with allocating a new rawpacket just to pass it to
Candidate: should we be the <UNK> here?
Reference: this is throwing an exception on lowercase input such as in contentdigesthistorytest.testbasics().
Candidate: i don't think we need to override the <UNK> <UNK>
Reference: in the current flows, a check is made to insure the model is not null. but it might be prudent to check again here, in case it's eventually called from
Candidate: this should be the <UNK>
Reference: rename to occurrence
Candidate: please use <UNK> <UNK> <UNK>
Reference: why this empty line? :)
Candidate: should this be <UNK>
Reference: suggestion for (final node node : graph.nodes()) {
Candidate: formatting: } else { if (...) { }
Reference: this is really dangerous and will most likely introduce a context leak. try to avoid binding context strongly, or at least do this.context = context.getapplicationcontext()
Candidate: should this be <UNK>
Reference: (nit) outgoinggranularityspec will never be null because it will return incoming spec if outgoing is not set
Candidate: please rename this to <UNK>
Reference: can it be cast to list?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: well, that the exception occurred is easily visible from the delivered exception. i'm not even sure if i like the stack trace here, but i definitely would prefer a better
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: logging
Candidate: can we rename the <UNK> to <UNK> <UNK>
Reference: this is redundant.
Candidate: why do we need to use the <UNK> here?
Reference: add a log message to help debug issues.
Candidate: please replace it != null && <UNK> != null;
Reference: it won't be closed on exceptional paths. please also use util.closeandlogfailures() instead, because we want to report the issue in logs at least
Candidate: you can use <UNK> <UNK>
Reference: this file reader gets never closed. also no enclude gets specified which is bad as it is then platform specific. should be utf-8
Candidate: i don't think we need to throw an exception
Reference: the path is linux specific?
Candidate: why do we need to permission?
Reference: can you please replace ==> with something unobstrusive like a colon :. thanks.
Candidate: do we need this check?
Reference: this logic resides in the diskmapper, you should be mapping new diskimage from the disk and using unregistereddisk as a template. by using mapper you make sure that all properties
Candidate: why do we need to synchronize on the username?
Reference: i think we should remove this shuffling at all. cc: @sopel39
Candidate: collection.emptylist() <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i think we are hitting the limits of genericity. please consider extracting a class that will replace pair<list<statement>, list<statement>>. this should 1) help with reading the code, maybe move a
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: for the above, use context.getservice(identifiersourceservice.class).getproviderbyuuid(getuuidproperty());
Candidate: shall we use the properties?
Reference: unfortunately this won't quite work - fasttesr is fast because forge has a global vertexbuffer (in tileentityrenderbuffer). this method is only called by non-fast tesr stuffs.
Candidate: why do we need to use <UNK> here?
Reference: delete blank line
Candidate: if we is the software exception we should do we want to do we need to check the <UNK> <UNK>
Reference: rename aadjwtbearertokenauthenticationconverter to converter.
Candidate: why do we need to use the <UNK> here?
Reference: are you gonna allow null for messages or not? in [l56](<link_1>, it assumes that messages can be null. but [l69 in computationcallable.java](<link_0>, you handle it not to pass null value.
Candidate: should be be <UNK>
Reference: fix this and all other places
Candidate: can be replaced with <UNK> ?
Reference: minor-xxs: maybe rename "someblobs" to "batchofblobs"
Candidate: stringutils.isnotblank()
Reference: please use one line per declaration as we do normally in netty
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: is this necessary?
Candidate: rename to <UNK> <UNK>
Reference: isn't that if reset is called we know we reached end of the probe?
Candidate: if <UNK> == direction.incoming) { return false; }
Reference: maybe rewrite to java project.getgroups().stream().map(group::getname).foreach(tags::add);  ? hopefully i wrote it correctly (no ide suggestions :d ).
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: would it be better to set it to const.actionuris.instructor_course_join_authenticated + "?key=" + regkey first and then append the rest if institute != null?
Candidate: this should be the <UNK>
Reference: this should still be a binary, just a reused one backed by a byte array.
Candidate: why do we need the <UNK> here?
Reference: any reason not to compare the cigars directly? or the cigar-strings if that doesn't work?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: could be if (mergeddictionary.add(key))
Candidate: please use the <UNK> <UNK> <UNK>
Reference: this::performloadbalancing?
Candidate: should we be the <UNK> here?
Reference: i don't think this check was there before, was it intentional? if so then the this.link = link; below could be moved inside the if block?
Candidate: please remove the method("post")
Reference: please change the method name to 'initialisecache'
Candidate: why do we need to use the <UNK> here?
Reference: typo excpeted
Candidate: you should need to use the for the <UNK>
Reference: ![major](<link_1> refactor this method to throw at most one checked exception instead of: java.io.ioexception, java.util.concurrent.timeoutexception [![rule](<link_2>](<link_0>
Candidate: why do we need the sizes of the sizes properties?
Reference: don't we at least need to call replay on the mocks? and, since we're not actually expecting any behaviour, create nice mocks instead?
Candidate: hmm. this should be the <UNK>
Reference: these two for loops look like they can be condensed into one.
Candidate: can be replaced with <UNK> <UNK>
Reference: use import static method for remove assert.
Candidate: why do we need the <UNK> here?
Reference: just remove the log altogether, as this was clearly added for debugging purposes. i think it is just bad practice to use log for debugging instead of android studio's debugger.
Candidate: the syserr should be be the <UNK>
Reference: //todo? can we do this now by seeing if it's of type item and if not throwing? or is it more complex than that?
Candidate: if the == null) { return false; } else { if <UNK> { return <UNK> } { return <UNK> }
Reference: the column should be homepage_parameter
Candidate: please rename to iu
Reference: operatorid.getandincrement() is called twice producing different values for operatorid and sourceid; is this intentional?
Candidate: why do we need to use <UNK> here?
Reference: would you mind naming the variable aggregatedfieldsquerybuilder instead of builder?
Candidate: can be replaced by: <UNK> <UNK> <UNK> <UNK>
Reference: typo...
Candidate: can we use the <UNK> here?
Reference: can you make 383 a constant ?
Candidate: why do we need to check the <UNK> here?
Reference: need a comma before partitionid
Candidate: use <UNK> objects.tostringhelper()
Reference: why is this the initialdispute? shouldn't we be checking the updateddispute?
Candidate: please use the <UNK>
Reference: not a fan of this
Candidate: why do we need need to the <UNK> <UNK> the <UNK> <UNK>
Reference: add message
Candidate: this should be the <UNK>
Reference: add explicit condition, and throw exception if not matching the current options
Candidate: nextvalueindex should be be <UNK>
Reference: i would rather have separate method in partitionedlookupsourcefactory which would return future denoting that set lookupsource is no longer needed. maybe getsuppliedlookupsourcenolongerneededfuture?
Candidate: why do we need to check here?
Reference: suggestion creategrantauthorization(process_definition, one_incident_process_key, userid, processdefinitionpermissions.read_history);
Candidate: why did you update the <UNK> here? i don't see any way far as far as far as far as far as far as far as far as far as
Reference: could just use indexof() and check if it returns != -1
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: alternatively, assertj has that method right now. junit 5 is not out yet.
Candidate: why do we need to use the <UNK> here?
Reference: remove sout
Candidate: why do we need the <UNK> here?
Reference: you could also use influxdb.ping() to make sure a connection is established
Candidate: ![major](<link_0> 'severity: major') remove this null-check of <UNK> [![rule](<link_1>](<link_2>
Reference: shouldn't this be: hasmutable |= once we hit a row that has mutable conditions the decision cannot be cached even if that row decided to abstain for this particular permission
Candidate: what is this a reason if you is the <UNK> <UNK> <UNK>
Reference: we need to add to this message that we reached the max number of retries
Candidate: why is this brackets?
Reference: nit: use type inference suggestion map<string, string> challengemap = new hashmap<>();
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: isn't this assertion redundant with the 2 previous ones?
Candidate: can we use the getconnection here?
Reference: it looks like you're overriding this just below with newdiskcacheexecutor() always? same for newsourceexecutor above.
Candidate: if <UNK> == null) { <UNK> }
Reference: don't log anything at info level during query execution, there will be too many logs. debug or trace is preferred.
Candidate: can be replaced with <UNK>
Reference: @puneethps can you try to move this before if (!files.exists(path)) check?
Candidate: i think (actual != null && <UNK> { <UNK> }
Reference: you can use: new hashset<string>(arrays.aslist("eth4",  ));
Candidate: why do you need to evict the <UNK> <UNK>
Reference: use p.lazy(f<unit, a>) to construct the p1.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: atomicboolean.get() returns a boolean, you don't have to compare against false. or was this done to improve readability? suggestion while (!islifecyclestopped.get() && !istimeout.get()) {
Candidate: why do we need to do the <UNK> here?
Reference: isn't it more common to put the != null condition first?
Candidate: why do we need the <UNK> here?
Reference: this is a mapping operation, so you can .stream().map() over collaborators to get the new list.
Candidate: should we log the clients?
Reference: see the aqute.libg.cryptography package for classes to compute md5, sha1, sha256. they provide a nice ashex method to return the digest value as a hex string.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: could you use extract constant here? why it is 64 seconds?
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: it's unlikely you want the tostring method here, since tostring is volatile and not suitable for outputting on the api. what value are you after?
Candidate: should this be the <UNK>
Reference: get rid of this variable and use getcallback.subresource?
Candidate: use <UNK> + <UNK> + <UNK> + <UNK> + ", <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: why not just calling this method from subscribe in presenter ?
Candidate: can we move this to call the <UNK> <UNK>
Reference: we probably want to check if there is a timed event for the given name and return 0 in that case
Candidate: i don't think we need to throw an exception
Reference: for existing users already implementing this method, this exception doesn't matter. for new users, this will only happen if they don't override either create. if the idea is to prevent
Candidate: i think we should be <UNK> to the _last_ events.
Reference: the same thing would happen with this empty catch block as well. since the outer try/catch block already catches exception, this inner try/catch block could just be removed.
Candidate: why do we need to use <UNK> here?
Reference: remove all the \n please and maybe also add the source: <link_0>
Candidate: i think a good thing to use the <UNK> of <UNK> <UNK>
Reference: this here is wrong. what it's really doing is checking whether the given string exists as a gestalt asset. when it's anything but a ship it causes issues down the
Candidate: do we need need to mark the as as well?
Reference: we should only log this if runnables is not empty.
Candidate: i don't think we need to catch the exception and throw an exception?
Reference: can we reconcile the 2 contexts used in these lines? i mean, there is one passed as a parameter and one got via getcontext() so, can we instead use only
Candidate: why do we need to check the <UNK> <UNK>
Reference: we should either use setreinit or remove it
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: we can use strigutils.isempty()
Candidate: why do we need the fully-qualified properties?
Reference: why do you throw out exception handling here (datetimeparseexception will be thrown)? the gcviewer.imp.parseexception contains the whole text line, where the problem occurs and usually helps much in understanding, why
Candidate: why do we need to the <UNK> here?
Reference: you can use maptolong here and then sum()
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: when possible this should narrow to the most specific exception type. this goes for all caught exceptions listed in this pr.
Candidate: why do we need to use the <UNK> here?
Reference: magic
Candidate: why is the same observation here as the other places as above.
Reference: i assume that this should be printed with a logger not just to stdout
Candidate: please use <UNK>
Reference: i don't think this getter is needed.
Candidate: should this be <UNK>
Reference: remove this
Candidate: should this be <UNK>
Reference: another instance of the same hard-coded strings... they are repeated throughout this class :)
Candidate: rename <UNK> to <UNK>
Reference: > map [](start = 4, length = 3) can you give the type here? #closed
Candidate: is there is be useful to use those paths?
Reference: please add a defensive != null check (ideally inside a else if). indeed, if binding == null, tostring() will result in a npe
Candidate: why do we need to <UNK> here?
Reference: debug leftover?
Candidate: should we throw an exception here?
Reference: move after line 51.
Candidate: why do we need to use <UNK> here?
Reference: suggestion assertfalse(c.namespaceoperations().exists(namespace));
Candidate: please use <UNK>
Reference: please, take care about smartlifecycle here too:  integrationnamespaceutils.setvalueifattributedefined(builder, element, integrationnamespaceutils.auto_startup); integrationnamespaceutils.setvalueifattributedefined(builder, element, integrationnamespaceutils.phase);
Candidate: this should be the <UNK>
Reference: hmmm...in hind sight we probably should move this to debug to be sure that sensitive data isn't automatically logged.
Candidate: the try/catch should be called from the log.
Reference: functionality question: is this allowed to be none? after ear is implemented, there will still be a situation where something is not encrypted?
Candidate: can we use the <UNK> the <UNK> generation?
Reference: to be on the safe side use guid.isnullorempty()
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: did you intend to leave this in?
Candidate: can we use snapshotid in the constructor?
Reference: comparerpmparts .. the s is missing
Candidate: can we use the <UNK> here?
Reference: public
Candidate: why do we need to tweak the <UNK> properties?
Reference: minor: may want to rename emphasizing these records for an outputstream, like recordsforeachstream or some other better name.
Candidate: can we use the <UNK> properties?
Reference: no need for the intermediate string object. use sb.append(buffer, offset, curindex - offset)
Candidate: why do we need to check for the <UNK>
Reference: we might want to ask github support about this. can you provide some details about the exact issue?
Candidate: why do we need need to evict the <UNK> here?
Reference: why did you remove this?
Candidate: why do we need to check the <UNK> here?
Reference: might want to use a linkedlist here, i think the arraylist constructor allocates an array with initial size 10.
Candidate: nit: can be replaced with <UNK>
Reference: log.debug?
Candidate: why do we need the <UNK> here?
Reference: extra space
Candidate: why do we need the <UNK> here?
Reference: sssspppaaaacccciiiing :/
Candidate: should we use the <UNK> here?
Reference: rename this to endpointstates
Candidate: this should be <UNK>
Reference: can you describe this usecase?
Candidate: why do we need to use the here?
Reference: calling tostring and throwing away the result looks odd. presumably this is to consume the errorstream. out of interest does findbugs warn about discarding return values?
Candidate: if we is the software <UNK> software <UNK> is the software <UNK> but i don't think we need to check the the <UNK>
Reference: the base class has a "guid" field that contains the "id" converted to "guid", so here you can use just "guid".
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: do we have any tests for this method?
Candidate: do we need to catch interruptedexception here
Reference: empty debug message
Candidate: we don't need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: change this to a warning instead of error since we just log the exception.
Candidate: should we throw a try-with-resource statement here (and the preference).
Reference: shouldn't this filter go in the constructor?
Candidate: why do we need the "?" here?
Reference: i'd be all for it if it were as simple as seq(urlvalidator, usernamevalidator, passwordvalidator, usernameandpasswordvalidator).forall(_.isvalid)
Candidate: please remove the <UNK>
Reference: person.getdeathdateestimated()
Candidate: <UNK> *= 2;
Reference: this should only add a membership if no active one exists for the same patient and if the patient is not voided
Candidate: should this be <UNK>
Reference: i'm not sure i can allow a break for sugaring in this case.
Candidate: can be replaced by: <UNK> <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK>
Reference: let's fix typo: caschedparams -> cachedparams
Candidate: this should be the <UNK>
Reference: don't use explicit this if unnecessary.
Candidate: this should be repelaced e1 && <UNK> { <UNK> }
Reference: we should still return the extension point marker sets if the editable marker config file does not exist.
Candidate: can we make this private?
Reference: better to remove this override since onclicklistener is an interface.
Candidate: can be replaced with <UNK> <UNK>
Reference: i think we should get rid of this generic catch block. the only method that might throw an unchecked exception here is extractpayload(), but it already has a generic catch
Candidate: why do we need need to the <UNK> here?
Reference: just for readability replace with else if(intent.action_media_scanner_started)
Candidate: we should need to do we need to check the getcredentials for the getcredentials <UNK> <UNK> software <UNK> should be called often, so we don't need to interact with the
Reference: i18n; string to messages
Candidate: can be simplified to <UNK> <UNK> ?
Reference: this is an odd way to pass data for initialization, cc @major-, we need to look at setting up player "pre-init" code.
Candidate: please use <UNK> <UNK> <UNK>
Reference: you have to check that getparameters().getinterface() and getvm() are not null, because this method is called before candoaction
Candidate: should be replaced with: private = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK>
Reference: why lists.<object> ?
Candidate: can be replaced with <UNK> <UNK> ?
Reference: why not unconditionally use checksumpolicy.ignore? not a big deal, but extra remote request for sha1/md5 files that almost certainly will not be there and do not add much even if
Candidate: should we be the <UNK> here?
Reference: the priorities should be reversed: get the creds from the properties first and fall back to the env.
Candidate: why do we need the <UNK> here?
Reference: misc.free() does null check already
Candidate: i don't think we need to do we need need to check the <UNK>
Reference: my ide is warning me about a bunch of exceptions that are declared but never thrown in these methods.
Candidate: i don't think we need to throw an exception if invoked?
Reference: move this line one up and we do not need to change to the main thread in case the filter does apply.
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: could you reverse the ordering of this expression? most of the time, fenablewhendebugging should be true.
Candidate: hmm. this don't need to use system.exit, the jboss
Reference: please catch more specific/explicit exceptions. in this case the original exception is not passed through or embedded so it is totally lost.
Candidate: should we throw an exception here?
Reference: it could use a lambda, less code and indentation.
Candidate: can we use the boolean?
Reference: why trim()? if we use <p> hello\nthere </p>, wouldn't i want everything inside <p> that is not an html node?
Candidate: this should be setemptyelement().
Reference: i think here you can use a method based filter, for example: .filter(jbpmkieserverextension::isvalidpersistencekey) so it can be reused other places if needed
Candidate: why do we need to use the <UNK> here?
Reference: add command?
Candidate: should be be <UNK>
Reference: what about treating this use-case?
Candidate: should we be the <UNK> here?
Reference: should we trim these values?
Candidate: should be be <UNK>
Reference: this skips the last line of the method that seems unrelated to the drawer. my suggestion is to extract the drawer-related code to a separate method and do the null
Candidate: why do we need to check here?
Reference: any reason why you've changed this to long? now it won't match the starter implementation
Candidate: the syserr should be be <UNK>
Reference: this could be null
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: this could probably be an assert since it is invalid and shouldn't get passed. the encapsulate field dialog doesn't allow an empty string and shows an error (though the message
Candidate: this should be <UNK>
Reference: not to be too picky, but this is unsafe cast. consider adding assertion to ensure that ac is an instance of configurableapplicationcontext. it may be safe within our whole bootstrap
Candidate: why do we need need to the <UNK> here?
Reference: maybe write it into some log?
Candidate: @unyoungwax, do you need to check for the <UNK> <UNK> the <UNK> is the
Reference: there is no need for the super
Candidate: should this be <UNK>
Reference: log an error possibly? thoughts?
Candidate: should we move this to debug level?
Reference: how about moving this into the constructor?
Candidate: should we throw an exception here instead of returning null?
Reference: should this use the java-7 typed collection syntax: > new arraylist<>() instead of the earlier syntax: > new arraylist()?
Candidate: can you use <UNK> <UNK>
Reference: similarly.
Candidate: why do we need '@override' here?
Reference: unnecessary empty line
Candidate: if (state != null && adsize == <UNK> && <UNK> { ... }
Reference: i suppose you meant, different in the message ?
Candidate: <UNK> should be a <UNK>
Reference: anymatch might be more suitable than filter+findfirst
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: perhaps we should seize the opportunity to rename this method. it is confusing as it is the same name as the current method but its purpose is really to provide
Candidate: the syserr should be be the <UNK>
Reference: variable names should start in lower case.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: how can null ever be a useful value here? if the ad allows undefined, since no one ever populates runtimecap's dynamic optional requirements, this will just result in registering a
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: this can be replaced by method reference, i.e. pipelinefactory = channels::pipeline
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: this will prolong the time the test takes in normal execution, because we rely on heartbeat timeout to detect missing member (see the assertclustersizeeventually in line 873 below). the test
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: do we really need session variable anymore?
Candidate: i don't understand why the change?
Reference: after you regenerate the codec with correct since version. you will see an extra field parameters.istriggermaploaderexists this should if the client is aware of the new field or not. if
Candidate: this should be the <UNK>
Reference: you don't need call to super method
Candidate: why do we need to <UNK> the <UNK> here?
Reference: i think it might be preferable to randomly drop some requests instead of all them. e.g. find a formula that would translate the load into a % of requests to
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: 'bootable' would be nicer, imo
Candidate: i don't understand why we need the <UNK> here?
Reference: the msg string above here should say string.format("%s. only one array field per index allowed", msg)
Candidate: why do we need a <UNK> of <UNK>
Reference: collections.emptymap() could be used here
Candidate: use iu
Reference: log full exception
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: create an issue to fix this hack
Candidate: why do we need to use <UNK> here?
Reference: is it really isplugged? does parameter action mean, that something is plugged or rather that something should be plugged? seems the latter to me ...
Candidate: i don't understand why, but it matters, but why do we need to check the <UNK>
Reference: let's throw an exception
Candidate: please use <UNK>
Reference: you're not making a defensive copy of the set.
Candidate: this should be <UNK>
Reference: nit: for (int i = offset; i < offset + length; ++i)
Candidate: if <UNK> == <UNK> && <UNK> != 0) { <UNK> }
Reference: perhaps viewbot.show() before selecting the tree item would be enough? at this point it is possible that the view is not created yet (it could be a view reference for
Candidate: why do we need the <UNK> here?
Reference: just a _style_ change. this could be rewritten as:  java for (string displayname: displaynamequestionids) { // do something }  so you don't need to keep track of indices
Candidate: why do we need to use <UNK> here?
Reference: can we refactor this to avoid so much code duplication in these two, very similar, conditions?
Candidate: why do we need the <UNK> here?
Reference: looks like this should be col_summary.
Candidate: please use <UNK>
Reference: do we need this anymore ? and the method gethttpstatuscodefamily ?
Candidate: should we be the getconnection here?
Reference: is this going to affect all the other tests that are run from the same jvm?
Candidate: please use <UNK>
Reference: use "%s" substitution
Candidate: can we use the builder instead of a boolean?
Reference: @riyafa can you also call channel.finish() and assert the return value ?
Candidate: release referencecountutil.release(msg) release the promise.
Reference: no, this method should not throw interrupted exceptions.
Candidate: no, this method should throw interrupted exceptions. exceptions.
Reference: it looks like we will have to add this kind of logic for every resource type. maybe this is something that we can ask from jason.
Candidate: if <UNK> && <UNK> { return false; } else { if <UNK> { <UNK> } else { ... }
Reference: i must be missing something. is that whole try/catch block even useful?
Candidate: i don't think we need to use the <UNK> of the <UNK>
Reference: should this be any_entity_token?
Candidate: please move this to "else", to "else",
Reference: i think using string concatenation is faster and cheaper here than using the string format.
Candidate: use <UNK> objects.tostringhelper() to <UNK>
Reference: since this method is good only under certain assumptions (that is: that tostring() produces good sql literal), it should be private
Candidate: why do we need to use the <UNK> here?
Reference: this is a remote method call, i don't think the exception is actually fired. i expect it will be wrapped and just invoked geterrorcallback in case of error
Candidate: should we throw an exception?
Reference: method name should be something like getresourceresult.
Candidate: use <UNK> <UNK> <UNK> <UNK>
Reference: this is possible because danalysissessionimpl extends danalysissessioneobjectimpl, but that is actually an internal implementation detail, and it should not really be considered as a proper part of the session.
Candidate: <UNK> *= 2;
Reference: misses the separator use elsewhere
Candidate: can we use the <UNK> here?
Reference: maybe use the prefix announcement from config.yml
Candidate: should be be the <UNK> <UNK>
Reference: maybe you can rename period to periodinminutes
Candidate: please remove the newline
Reference: maybe your test can't trigger the issue because of this (which was causing the leak). why was it dropped?
Candidate: consider using a syserr instead of <UNK>
Reference: ![major](<link_0> 'severity: major') define and throw a dedicated exception instead of using a generic one. [![rule](<link_1>](<link_2>
Candidate: can you remind me that the getconnection in the <UNK> of the <UNK> generation?
Reference: final
Candidate: why do we need to the <UNK> here?
Reference: i would convert this to a warning, i.e. logger.warn("creating a track without sample entry");
Candidate: why do we need to use <UNK> here?
Reference: typo: "will not able" -> "will not be able"
Candidate: should we be the <UNK> here? if we { null) { <UNK> } <UNK> { <UNK> } <UNK> { return false; }
Reference: i suppose this will not be needed when <link_0> is resolved.
Candidate: you can use <UNK> here
Reference: remove finally {
Candidate: ugh... ugh... <UNK> be be be be be be be be be be be be be be be be be be be be be be be be be be be
Reference: how come there needs to be a substring for this?
Candidate: can we make sense to the the counter counter counter counter counter counter counter counter counter counter counter counter counter and counter counter counter counter counter counter counter counter counter
Reference: rename starttime to starttimens
Candidate: why do we need the <UNK> here?
Reference: better to add a function to return properties of a cluster, as what you did for location and interface.
Candidate: the syserr should be be <UNK>
Reference: missing braces {}.
Candidate: can we throw an exception?
Reference: is this in meters/feet? hmm... i'm not sure what to do suggest regarding the change in precision.
Candidate: do we need to wait too?
Reference: we can initialize filecontents with default_file_contents, and use if (configfilehelper.exists()) instead for the else case.
Candidate: why do we need this check?
Reference: throwing an illegalargumentexception here is not really an improvement over a nullpointerexception i think.
Candidate: why do we want to use the here?
Reference: technically the method doesn't return a 'range', which should have an upper and lower boundary. does this method return the startting sequence number of the block covering the gap? and
Candidate: why do we need need to the <UNK> here?
Reference: this is confusing. the users will think it has to do with rabbitmq channels. please use "connection has reached eof" or simply "i/o thread: reached eof".
Candidate: why do we need to permission?
Reference: nit: can probably be condensed to one line.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: rename to isostats - will not have to change again
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: arg may not always have a shape. we might have some place holder logic we want to put in here. at least checking for null shapes before you do this
Candidate: this should be the <UNK> if <UNK> == null) { return <UNK> } <UNK> } <UNK> { <UNK> }
Reference: step verifier should be used... i'm not sure why you don't use mockito to mock an httpresponse and instead.
Candidate: do we need need to hide the exception?
Reference: may be we can change text "add" to "add".
Candidate: should we move this to debug level?
Reference: what about making getmapper generic and move the cast into it ?
Candidate: please use <UNK> <UNK>
Reference: i think we could modify the code a little to call one time imageutil.getinstance().getdimension(getfileasset()) and store the dimension in a private variable, so that way you don't load the file
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: you could skip all the lines up till setlabelstyle() if fill is null here? that way it would be more clear that setfillpattern() is not called. though didn't check if
Candidate: stringutils.isnotblank()
Reference: is this required? when will this be true?
Candidate: why do we need need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: why aren't you adding all planks directly instead of this weird placeholder?
Candidate: use <UNK> objects.tostringhelper() for <UNK>
Reference: consider using assertj assertthat(list.get(0)).isequalto(2)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: please avoid breaking changes on public apis
Candidate: can we use <UNK> <UNK> <UNK>
Reference: you can use immutablelist.builder().
Candidate: minor: propose to use an anonymous private <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + "-"; + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: this should still be done at the top of visualizenetworks (where it was before). if there is not network, the rest of the code does not have to be executed.
Candidate: this should be <UNK>
Reference: let's use  cacheconfiguration<?, ?> oldcfg = cachecfg; if (oldcfg != null) { cacheconfiguration<?, ?> newcfg = new cacheconfiguration<>(oldcfg);  to remove compiler warnings.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: the var name could be changed.
Candidate: why do we need the <UNK> here?
Reference: you don't need that line, verifytitleurl is already checking that. see point1
Candidate: please use <UNK>
Reference: can you please have a look how the other geturl*** methods handle the exception handling. i think they are allowed to simply throw them and the performsearch method then converts
Candidate: why do we need to use the <UNK> here?
Reference: nit-pick: an empty line would be nice here or break out the "else" into a method too
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: i am not quite clear what is this test motivation for. when the dispatcher throws exception, it would terminate the internal thread inside channelstatewriterequestexecutorimpl. and when the worker#close, it should
Candidate: we should be the <UNK> <UNK>
Reference: this usually shouldn't happen, but should we be silently swallowing the exception here if it does?
Candidate: this should be the <UNK>
Reference: per offline discussion, just delete it would still be dangerous since some worker (after failure) might still try to write to the old directory. we should just fail for now
Candidate: should this be <UNK>
Reference: i think that this is a change of behavior. to keep backward-compatibility what about referencing system tags in both tags and systemtags ?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why was this removed ?
Candidate: why call <UNK> ?
Reference: why is it nullable? you only call it to obtain a not-null value. move your assertion here, make the method not null. also, make use of objectutils.trycast - it will
Candidate: why do we need the <UNK> here?
Reference: since quarks in the state system are used as "int" directly, shouldn't this class take care of the boxing/unboxing? ie, return a int here, and taking a int parameter in
Candidate: storagetype should be synchronized probably?
Reference: i would recommend exposing 10000 as a configuration, i.e max result queue size
Candidate: please use the exception here instead of the try-catch-fail
Reference: remove static so that we can access non-static variables
Candidate: should this be <UNK>
Reference: probably best to move this to an instance or even static member than method-local.
Candidate: rename to iu
Reference: in this case let's be specific and let's check that it is due in 1 day instead of just using > 0.
Candidate: why do we need the <UNK> here?
Reference: possible npe if default cluster is not set
Candidate: should be simplified to: if <UNK> != null; ? <UNK> : null; ? <UNK> : null;
Reference: add an assertion to check the hardwre id.
Candidate: why do we need the <UNK> here?
Reference: i would add braces around the first else block to improve readability
Candidate: why do we need the <UNK> here?
Reference: drop logging line
Candidate: i don't think we need to do we need need to print the exception here?
Reference: i thought we will compare the vm.runonvds with getvdsid() this way you take into consideration all cases and not only the specific migration flow
Candidate: i don't think we need to check if the is is null.
Reference: recommend using a new error message instead of borrowing from sync menu.
Candidate: if <UNK> != null && <UNK> { return false; }
Reference: can we create a static constant (even in this class to start with) for this - "rsa-oaep-256" - so that it is easier to change or track it in future
Candidate: this should be <UNK>
Reference: nit: standard practice is static import
Candidate: use <UNK>
Reference: add codec != newcodec assertion and checks for defaultstatefulstreamcodec?
Candidate: ths should be <UNK>
Reference: i tried verifying this patch. but vdsupevent was not at all called. looks like it will be called only when the host status is up. but host status will not
Candidate: should we throw an exception here?
Reference: literal initializers, not types. we emit types but when we collect them they are just initializers.
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ? <UNK> : <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> ?
Reference: you most probably will have to create a method to get the inputstream so this method can be testable as such by creating an object instance and calling this method
Candidate: can we use getconnection here?
Reference: pass the exception as the second parameter to logger.warn rather than printing
Candidate: if you != null) || <UNK> != null) && <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK>
Reference: is the new method needed to get default-to-false? couldn't you just use isenabled and change the default on the property?
Candidate: should we be the <UNK> here?
Reference: .first(audience.class) -> .getaudience()
Candidate: should we throw an exception instead of an error?
Reference: or classcastexception i suppose, theoretically. maybe just catch exception already.
Candidate: why do we need the <UNK> here?
Reference: use asserttrue instead?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: why convulotions between list and array ?
Candidate: unrelated map?
Reference: we disable healthindicator by default. please set false the default value.
Candidate: should this be <UNK>
Reference: do you really intend to warn on each and every sampler execution? this looks awfully broken.
Candidate: should we use the <UNK> properties?
Reference: @nielscharlier is this a resource leak? could it be fixed by a try-with-resources block?
Candidate: i don't think we need to throw an exception if invoked?
Reference: replace by map<integer, string> sectiondescriptions = new hashmap<>(jsonsectiondescriptions.size());
Candidate: do you need to check the <UNK> <UNK>
Reference: pls do this in an npe safe way
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: maybe we should have a static set of invalid error codes and make this line if (invalid_codes.conatins(errorcodename)) {
Candidate: please remove the method("post")
Reference: should be initializationtype.cloudinit no?
Candidate: please consider extracting this method as a local variable.
Reference: should be math.min
Candidate: <UNK> *= 2;
Reference: nit: use vararg constructor. a couple below as well
Candidate: ![minor](<link_0> 'severity: major') remove this unused method.
Reference: this adds a discouraged access warning. maybe use public api?
Candidate: i don't think we need to print stack trace to the log.
Reference: extract this timeout into a constant to be shared among the verify calls and initialization.
Candidate: why do we need the <UNK> here?
Reference: you set the edge quark with the given edge, then the line after, you sort of close that edge with a null value 1ns after? most definitely not how this
Candidate: this should be the feedid
Reference: you can use arrays.fill() if each element is the same and doesn't depend on the index. also, why is the colour set first, then retrieved using getsymbolcolor() ? i think
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: when you call register() from both these place, whats happen differently between the calls. inside the method, both these calls seem to be doing the same thing. if there is
Candidate: typo here
Reference: we can't change options that we've published, it could break something downstream.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: if you're not familiar with travis-ci.org, i'd be happy to help work out the build issues for you.
Candidate: should we use the <UNK> here?
Reference: as we are removing map support, shall we also remove complextypes?
Candidate: why do we need to use the <UNK> here?
Reference: use long.valueof() instead of new long() - always for performance reasons
Candidate: use long.valueof() instead of <UNK> long()
Reference: could you please create truly random uuids e.g. using <link_0> they differ only a few chars from listofdiagnosis and listofproviders...
Candidate: should this be <UNK>
Reference: not sure about this being so tied to authorisation (baseauthoriseresponse, authoriseclient etc.). in theory this could be used for querying a payment in any status.
Candidate: stripe { <UNK> }
Reference: maybe we can have the getstring() contains the logic of checking invokesource to reduce the repeated app.language().getapplanguagelocalizedname(app.language().getapplanguagecodes().get(1)
Candidate: 4.2
Reference: maybe clear the other system property as well that is set in setup method
Candidate: this should be the <UNK>
Reference: i think this code can be simplified by getting sslhandler.handshakefuture() and adding a listener to it, instead of registering an action with the connectionlifecyclehandler
Candidate: can we use the <UNK> here?
Reference: posargs.addall(items)
Candidate: can we use <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: should this be final cbcldata ...?
Candidate: why do we need to use <UNK> here?
Reference: why a long timeout on this one but not on pingwithargumentwhilesubscribed?
Candidate: why do we need to brackets?
Reference: please give a better name.
Candidate: i don't think we need to throw an exception
Reference: just return false here.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: can we have the header check?
Candidate: why do we need to <UNK> here?
Reference: clear properties in teardown method @after public void teardown() throws exception { }
Candidate: why do we need to mock <UNK> here?
Reference: can this npe if groupid does not exist?
Candidate: i don't understand why, but it matters, what is it does. edit: what happens if the is is invalid?
Reference: can stringtoencode.getbytes(standardcharsets.utf_8) be used here? what is the point of .name()?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: should read 'stream' here
Candidate: we should use <UNK> <UNK> <UNK>
Reference: nit: 2 spaces needed here.
Candidate: if oldvalue is is missing" ? <UNK> : <UNK> : <UNK> { <UNK> }
Reference: why don't we wait on jobmasterleaderelectionservice.getstartfuture instead of doing busy polling?
Candidate: should this be the fixture.
Reference: could we change to list<propertyparameter> or is this api fixed?
Candidate: can we use the builder instead of the builder variable?
Reference: immutablemap.of()
Candidate: static import
Reference: exists
Candidate: this should be the <UNK>
Reference: why catch all exception?
Candidate: i don't think we need to throw an exception if the is is null.
Reference: it's not a problem if it configured not to manage, so message is not need here
Candidate: why do we need need to the <UNK> here?
Reference: for the case we set system preference to disable the autobuild on .settings change, we should have second test that verifies the opposite (no changes at all if property is
Candidate: i don't understand this matters, this matters, if we matters, but i don't understand why, but it matters, afaik.
Reference: can you explain this? it always has been strange for me to synchronize on the local variable. but here it is more suspicious because the whole method is synchronized. as
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { <UNK> } } } } } } }
Reference: add .disableautocomplete() by default autocomplete is enabled, this means this sdk will internally complete the message for you and user do not need to call messagecontext.complete() . but since we
Candidate: the syserr
Reference: use java.util.objects
Candidate: consider using an object object named <UNK> <UNK>
Reference: this is hard to read over and over. can we add static methods on memorypolicy with nice semantic names? i want memorypolicy.shouldreadfromcache and memorypolicy.shouldwritetocache (or whatever names you think fit).
Candidate: do we need to check if <UNK> != null) || <UNK> { <UNK> }
Reference: do you still need these (here and below) throws changes?
Candidate: why do we need to use the <UNK> here?
Reference: i'm actually not sure why it wasn't doing getnotebook().getnote(note id) before @jongyoul @zjffdu ?
Candidate: should we be the <UNK> properties?
Reference: trying to understand this test case: so it tests if value is coerced and the way to check it is doing not in. for example. 4 not in ('1', '2',
Candidate: you can use the fixture.
Reference: can't we just change the catch clause to catch ttransportexception? then we don't need to rethrow other exceptions ourselves.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: we have to trigger some logs, in a case when app receiving invalid/not implemented screen_name (e.g app receive pro screen name instated of profile)
Candidate: we can use the <UNK> <UNK> <UNK>
Reference: add this into connectionpoolconfig constructor (line 82). connectionpoolsocketresetonerror = verifiableproperties.getboolean("connectionpool.socket.reset.on.error", true);
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think you meant getfilename(), this doesn't compile.
Candidate: why do we need need to the <UNK> here?
Reference: this can also be nested. no need to check debug if info isn't enabled.
Candidate: if <UNK> == <UNK> || <UNK> && <UNK> { <UNK> }
Reference: why did you change the order of super.close() vs cache.close() ?
Candidate: if (args.length == null) { throw <UNK> }
Reference: why does this test remove the first container? is it because container 1 has the 4 spouts being removed and if so, how did we make that the case? we
Candidate: i don't understand this matters, the matters, but you don't want to use the <UNK> <UNK>
Reference: sourceurl -> invalidsourceurl
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper { return <UNK> } } (throwable { return <UNK> { return <UNK> } else { <UNK> } } } } } }
Reference: look at this variable name: 1) "erlangbuilder" is the name of your class - no value 2) "dirtyfiles" - yes, these indeed are dirty files, but these are not just
Candidate: if <UNK> != null && <UNK> { return <UNK> }
Reference: in case of a deleted file, getnewpath returns /dev/null, which causes a garbage path. could you add a check with getchange(), and disable it in case of delete?
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: try not to use failed in error messages as it makes failed tests harder to find in the ci build logs.
Candidate: i don't think we need to throw an exception
Reference: suggestion logger.write(instant.now().tostring().getbytes(standardcharsets.us_ascii));
Candidate: hmm. this should be the <UNK>
Reference: please make sure we don't run into an npe here
Candidate: why do we need to use <UNK> here?
Reference: couldn't you change this to something like: this.queryablegriddialect = as(queryablegriddialect.class, griddialect); this way we don't need to create a new method every time we add a new interface. this reminds
Candidate: can be replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced replaced
Reference: i don't think this is the right place to call child interceptors. this would mean child interceptors are invoked, even when the command handler is declared on the parent entity
Candidate: should we be the <UNK> here? if the == null) { return; }
Reference: have made the close method and called it in the finally block of write method. as once that is executed or even there if there is an exception, finally block
Candidate: the fixme sure that this piece of the code is empty?
Reference: is this generating a warning? there are a number of renderers in terasology and unless strictly necessary i'd like to keep this variable as worldrenderer, for the time being.
Candidate: let's move this line below...
Reference: querytypedescriptorimpl -> gridquerytypedescriptor?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this is already set below and should probably be final
Candidate: should we be <UNK> here?
Reference: in utils.preallocatefileifneeded(), the following code is used  if (system.getproperty("os.name").tolowercase().startswith("linux")) { ... }  do you know if one is better than the other?
Candidate: do we need to log the exception here?
Reference: usage of ? : is confusing in logging statements. this problem also occurs many times.
Candidate: why do we need the <UNK> here?
Reference: this cause potential npe when handlerenamedfiles is null, doesn't it?
Candidate: this should be setemptyelement().
Reference: do we need an unmodifiableset here? the return result doesn't belong to the state of this object.
Candidate: why do we need to use the <UNK> here?
Reference: is there a unit test we could write to reproduce the npe?
Candidate: i'm not sure that this is a bit on the <UNK>
Reference: autoboxing? long == long in java
Candidate: the syserr should be be the <UNK> <UNK>
Reference: why collections.unmodifiablelist would not work like in pystatementlisttreeimpl ?
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: change inboundrequest to qpi and make it constant.
Candidate: we should need to hide the getconnection in the exception in the <UNK> we don't need to do we need to do we need need to do we need to
Reference: nit: we can inline the threadid in the suppressionemitsensor call.
Candidate: i don't think we need to check if the is is empty?
Reference: ret name doesn't make sense to me, can you set something meaningful?
Candidate: why do we need need to the <UNK> here?
Reference: i think you mean "liquid glass"
Candidate: why do we need the <UNK> here?
Reference: we should also consider the fact that there could me more than 1 colon in the tags. to do so, let's simply do split(":", 2)
Candidate: robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust robust
Reference: typo?
Candidate: why do we need to use the here?
Reference: try to move these as close to where they're used. so first check if the job id exists. if so handle one way. otherwise send the error response. it's confusing
Candidate: should we throw an exception here?
Reference: why logger debug here ?
Candidate: please use <UNK>
Reference: i expect that in 99% of the cases, a vm will be defined with spice once and restarted many times. so please move #899 into the 'if' block to reduce
Candidate: is this needed here?
Reference: does it mean we need this property (credentials_type) from selfservice ?
Candidate: you can do you need to test *= eq <UNK> expected)
Reference: > use this.removecallbacksandmessages(null) instead. done in patch set 2
Candidate: this compensation?
Reference: should be replaced with '==' since this field is of type 'int'
Candidate: this should be the islocal part, as well.
Reference: definitely sdk-internal. package access please.
Candidate: collection.emptylist() instead of clazz,
Reference: this method allocates a new empty array on each invocation if types are not enumerations. it's cheap enough, but actually it's not designed to be used if higher order is
Candidate: why do we need to check for the <UNK> ?
Reference: i have not studied the issue in any detail but just looking at the code changes i don't think you need to synchronize on the whole method, maybe just on
Candidate: why do we need the <UNK> here?
Reference: hmm, not sure, but it might be good to call finish() here, otherwise i suspect it just hang with a blank screen.
Candidate: should we hide the sleep on the too?
Reference: similarly, this makes me nervous (and its impact does not seem to be limited to z/os): we expect the status file to be in ebcdic if on z/os, and in
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: hi @rezita, islightmodecahnged should be renamed to islightmodechanged
Candidate: can we be replaced with: <UNK> = <UNK> ? <UNK> : <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: looks like a candidate to be factored out. should have some tests
Candidate: i don't think we need to throw an exception?
Reference: please add exception message.
Candidate: the syserr should be be the <UNK>
Reference: variable name should be similar to its type.
Candidate: you should expecting the content of the keys.
Reference: should be internalerrorexception
Candidate: should we throw an exception here instead of exception?
Reference: why are you removing this? does the test fail if you don't?
Candidate: why do we need the <UNK> here?
Reference: there are two code smells regarding errorelements and parseas not being static
Candidate: why do we need need to the <UNK> here?
Reference: can do.
Candidate: why do we need to use <UNK> here?
Reference: unnecessary parentheses around value
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: you can use unsetobject.instance (from oep.infra.widgets). using a singleton instance makes it easier to test the nature of the object: if (value == unsetobject.instance){ //nothing selected }
Candidate: why do we need need to the <UNK> here?
Reference: would not it better to bind tracerprovider here as well?
Candidate: why do we need to the <UNK> here?
Reference: seems like we could avoid extra nesting (and make the diff smaller) by making the bailout condition return early.
Candidate: i don't think we need to check if the is is the
Reference: you should prepend the path to the file name. now i get a nosuchfileexception with a file containing only the file name.
Candidate: <UNK> *= 2;
Reference: should be statisticsoverwritevalue
Candidate: why do we need the <UNK> here?
Reference: getter/setters should be plain, not these tricks. instead when creating the endpoint in the component, then set the security provider on the endpoint correctly
Candidate: this should be the <UNK>
Reference: i'd prefer something like "context: " + getid()
Candidate: please use <UNK> <UNK>
Reference: java pager.builder().withpagesize(1).orderby(order.unspecified)).build()  can be replaced by:  java pager.single()
Candidate: this should be the <UNK> <UNK>
Reference: job.getname() can be extracted as variable for more readability
Candidate: why do we need to synchronize on the <UNK> ?
Reference: this seems not needed.
Candidate: should we be snapshotid in the constructor?
Reference: these changes are fine, but, since there is an api exposed for the feedsla, we'll need to extend that api and add/modify corresponding methods to return process sla misses.
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: this isn't entirely true. they need to run an earlier version of gerrit to init forward to this schema version.
Candidate: you don't need to use the
Reference: let's actually remove this part and instead come up with a proper solution to deal with the staging and cache.
Candidate: do we need to check the <UNK> <UNK>
Reference: i would change this slightly to, "hawkular metrics schema is up to date at version %s"
Candidate: do we need need to make this a <UNK> of <UNK>
Reference: although it is a patch, this could be true/false which avoids deriving forcepatchbackfill
Candidate: the syserr should be injected, so we don't need to do the getcredentials getcredentials getcredentials
Reference: should this get logged here?
Candidate: please use english here
Reference: use extracted method createlegacyfile from above
Candidate: nit: can be replaced with <UNK>
Reference: can these be set to a constant somewhere to limit the capacity for typos?
Candidate: why do we need to <UNK> here?
Reference: shouldn't the publication state be updated?
Candidate: why do we need the <UNK> here?
Reference: please either remove this or write something user -friendly. no one user will understand current message.
Candidate: why do we need to use the here?
Reference: can you merge these two if's?
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: actually should be getname(), because getcanonicalname() can return null for an anonymous class.
Candidate: please use <UNK>
Reference: let's do a try-catch here, catching containerexception.
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: since we do not need to keep track of the count, this should be foreach.
Candidate: please use <UNK>
Reference: not needed to make the test pass.
Candidate: should be be <UNK> permission?
Reference: ok good for me.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why to compute dpi & imageselectorindex in this method?
Candidate: complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex complex
Reference: - name the thread with zap- prefix to be easier to know that's a zap thread (e.g. zap-graphql-parser). - the thread was not started in the importurl, better extract a
Candidate: @exper0 use <UNK>
Reference: small note: user quux is not used in this test and can be removed.
Candidate: <UNK> *= 2;
Reference: i think that works. if the only difference between two of these is that one code is no_code but the other isn't, equals() says false but hashcode() is the same.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: is it intentional to deal with remoteopmsg same as removeopresultmsg? if then, shouldn't we rename the method onremoteopresultmsg?
Candidate: why do we need the <UNK> here?
Reference: have you considered writing a simple filefilter implementation, passing it into listfiles() here and below? that would give us one copy of the test, instead of two that must be
Candidate: why do we need to use the here?
Reference: again, @nullable
Candidate: this should be the <UNK>
Reference: i think you wanted stringbuilder here.
Candidate: should we use the <UNK> properties?
Reference: you can put runtimeexception.class.getname(), "vsm" directly here, no need for an intermediate variable.
Candidate: should we use the exception here?
Reference: replace this with a constant
Candidate: should we throw an exception exception?
Reference: fixturestool.gluster_cluster_id
Candidate: please use <UNK> <UNK> <UNK>
Reference: @nullable public
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i would invert this condition to say there is a metric whose aggregator list is empty i.e. java metricsquery.getmetrics().stream().anymatch(metric -> metric.getaggregators().isempty())  i think it makes intent clearer by removing
Candidate: why do we need the <UNK> here?
Reference: computeifabsent?
Candidate: slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot slot is slot and slot slot slot slot slot
Reference: 1. better to replace hard-coded string(cleanup.policy) with topicconfig.retention_ms_config . 2. better to replace hard-coded string: compact with topicconfig.cleanup_policy_compact . 3. better to replace segment.policy with topicconfig. segment_bytes_config
Candidate: why do we need need to the <UNK> here?
Reference: wouldn't getminimum() be more appropriate here than 0.
Candidate: this should be <UNK>
Reference: might be better to validate against a regex.
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: maybe we can phrase this a bit more user-friendly "updates are only allowed on individual records, identified by gr_id" or something like that. referring to a select item is at
Candidate: can be replaced with <UNK> ?
Reference: let's use endpointstats?
Candidate: why do we need to brackets?
Reference: would be better to move this logic to the strategy to avoid splitting it between components.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: instead of doing this you could pass filefilterutils.suffixfilefilter(".jar") at line 86
Candidate: we should need to use the for the <UNK>
Reference: we're likely to never supporting something else here. i'd suggest to create and register 2 dedicated inner classes instead which are just implementing the required concrete code.
Candidate: please use the outputstream here instead of <UNK>
Reference: i would imagine that maxstringtruncateatfirstreplacementcharacter and minstringtruncateatfirstreplacementcharacter should also apply to original.
Candidate: i don't think we need to synchronize on the <UNK>
Reference: might want to combine these statements and add more context to the message
Candidate: please remove the method("post")
Reference: it might be useful to include the db name in the metric, not just the table name
Candidate: the "used" should be be <UNK>
Reference: use pojomatics
Candidate: should this be <UNK>
Reference: i probably am not understanding this -- is the configurable property name really getmaximumerrorreportingretries, or is it actually something like maximumerrorreportingretries?
Candidate: should we be <UNK> here?
Reference: i would add a commonhelper.assertnotnull for the customparams.
Candidate: please use <UNK> <UNK>
Reference: output should say "intype"
Candidate: can we use <UNK> objects.tostringhelper() to the <UNK> generation?
Reference: shouldn't address.length() > 108 be good enough ?
Candidate: i don't think we need to check if the is is the
Reference: let's remove this behavior. setdebugging will only affect the indicators.
Candidate: nicer: <UNK>
Reference: suggeset to use assertequals()
Candidate: why *= 2;
Reference: this will not support all formats like jgit's config class does. for example 2gib, 3kib, etc... same applies for other methods that perform conversion from string. why not wrap a
Candidate: you can use the lhs
Reference: it'll always succeed (we bail out if the hashmap doesn't contain the chunk id a few lines above).
Candidate: this should be be the <UNK>
Reference: why do we want system default charset and not utf-8 for example always?
Candidate: please use try-with-resources
Reference: isn't it easier to have the serializationservice as a field on this test? are there any serializationservices created with different settings? having it as field instead of local variable, will
Candidate: why do we need to use assertj's <UNK> here?
Reference: is this method still used in this class? it is now duplicated.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: putting super.open() at the end of this method? although it doesn't affect the correctness, it makes the code more readable.
Candidate: why do we need to tear to the <UNK> <UNK> <UNK>
Reference: add message
Candidate: formatting
Reference: splitaggregations? createintermediateaggregations?
Candidate: why do we need to use <UNK> here?
Reference: please use our map util function.
Candidate: can we use <UNK> <UNK>
Reference: doesn't okhttpclient.newbuilder inherit parent's hostnameverifier?
Candidate: why do we need the exception here?
Reference: suggestion smartquery<sqlblob> query = oma.select(sqlblob.class)
Candidate: i don't think we need to use the <UNK> <UNK> <UNK> (check the the <UNK>
Reference: does this work nicely. i tried this but had no significant project to really see if it works.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: unused?
Candidate: please use uri.create here
Reference: should we abort the server?
Candidate: do we need need to close here?
Reference: system.setproperty(firefoxdriver.systemproperty.browser_logfile, system.getproperty(firefoxdriver.systemproperty.browser_logfile, "/dev/null"))  maybe ?
Candidate: modifier please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please? please?
Reference: can you please change the log level to debug?
Candidate: i don't think we need to do we need to use the <UNK> <UNK> <UNK>
Reference: seems odd to even have a public constructor, but no other way to access it. maybe access through getters instead of access private fields?
Candidate: we should need to do we need need to check the <UNK> <UNK>
Reference: i don't think having a class for this buys you anything. i'd make them all (possibly static) methods of the enclosing class.
Candidate: please move this into a separate method.
Reference: its better to return a new list instead of modifying the passed values directly.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you don't need to preserve all this info. these were only around because before the health checks mixed and health and metric responsibilities which we shouldn't be doing anyway
Candidate: why do we need to use <UNK> here?
Reference: this does not handle properly the case where you have a return in finally (and where you have not a return in the finally in fact)
Candidate: should we use the getconnection here?
Reference: simply awesome, alex!
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: you do not need to call integer.parseint(getuuid()) more than once in a method
Candidate: @unyoungwax, speaking it is be nicer: <UNK>
Reference: ![major](<link_1> replace this usage of system.out or system.err by a logger. [![rule](<link_2>](<link_0>
Candidate: why do we need to use <UNK> here?
Reference: this code block is duplicated within the test, it can be extracted to a separate method.
Candidate: please remove the <UNK>
Reference: same here. jsonreader is closeable so using a try-with-resources statement for closing the object is maybe a good idea.
Candidate: why do we need to use <UNK> here?
Reference: use applyto() rather than create()
Candidate: can be replaced with <UNK> <UNK> ?
Reference: in trace compass we haven't implemented the context-sensitive help. so remove this line. once we implement it then we can bring it back.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: no need for 'formitems' variable - simply call 'formbuilder.addformitem' on each new formitem.
Candidate: why do you need to evict the <UNK> <UNK> <UNK>
Reference: we shouldn't embed headers if encoding natively.
Candidate: why do we need to check for the <UNK>
Reference: this needs to use the merged new value, not the new value from the manipulator.
Candidate: why do we need to use <UNK> here?
Reference: i would prefer we ensure that on entry we're not already jited or so (main.isinterpreted should be an invariant in the beginning). nicolas, do we have any good infrastructure to
Candidate: why do we need to use <UNK> here?
Reference: getlength()
Candidate: why do we need to <UNK> here?
Reference: can you also check that logunitserver trim_mark_request gives you correct/expected trim mark address
Candidate: you don't need to use the <UNK> <UNK>
Reference: consider using assertj for these kinds of asserts, and all other asserts (but we can do that later.)
Candidate: please import?
Reference: sorry, i meant: key: username@sftp://sftphostname:sftpport
Candidate: blind != null)
Reference: cleanup: remove all **throws middlewarequeryexception** clauses
Candidate: you can remove the **throws middlewarequeryexception** clauses
Reference: i'd suggest to change this to  logger.debug("unregistering service {} at {}:{} ({})", description.servicetype, instance.getinetaddress().gethostaddress(), description.serviceport, instance.getname());
Candidate: please use <UNK> <UNK> <UNK>
Reference: i'm not sure if this is a valid case. actually, i think request should not be called before subscribe.
Candidate: i don't understand this matters, this matters, if you matters, this matters, but i don't understand why, but it matters, but i don't understand why, it matters, but it is
Reference: suggestion string key = map.get("binarytext"); if (fulltextdescriptor.getfulltextstoredinblob() && key != null) {
Candidate: we should need to use the in the <UNK> <UNK> we don't need to do we need need to the getcredentials
Reference: can visibility remain package-private ?
Candidate: should this be <UNK>
Reference: extract method
Candidate: :disappointed:
Reference: we do not need to print out the stack trace here because the exception was expected?
Candidate: <UNK> + <UNK> + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> +
Reference: found -> find
Candidate: can we move the <UNK> of the code structure.
Reference: @fabriciofx cactoo's lengthof(input) makes these calculations for us
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: i'm confused about a couple things. first, if a subscription changes while we are in the middle of a rebalance, do we need to call onjoinprepare again? with the old
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: actually i wonder why this method is needed at all. why not just call asyncexec when we don't want to block and syncexec when we do?
Candidate: i don't think we need to check if the is is the
Reference: i think here you can avoid the persistenceentry variable declaration, just adding the instance on result.add since the reference is not being used on any other places.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: minor formatting, no spaces between the parens and spaces between the conditional. if (fdomain == null && fworkstation == null)
Candidate: why do we need the <UNK> here?
Reference: so, if this is not set, the value should be -1? if there is a constant to compare with would be nice.
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: remove getdefaultmongocollection from the nsprefs interface. it is an implementation detail.
Candidate: please use <UNK>
Reference: nit: maps.immutableentry()?
Candidate: <UNK>
Reference: why not represent as an actual list and use joiner to render it to a string?
Candidate: please use logging as well.
Reference: why did you make this package-private?
Candidate: missing space
Reference: when you're here, if address is null, you already know this.address is not null (it will always equate to true), due to the preceding check.
Candidate: if oldvalue != null) { <UNK> = <UNK> }
Reference: hmm, explanation is optional in the protobuf. this means the better way would be to not set the explanation at all rather than set it to the empty string.
Candidate: why do we need to use the <UNK> here?
Reference: pls remove whitespaces after opening and before closing parenthesis. we mostly follow regular [java coding conventions](<link_0> (with just a few changes)
Candidate: the syserr should be be <UNK>
Reference: we should use a logging framework here
Candidate: we don't need to do we need need to use the exception here.
Reference: the exception should be handled better than that. program should inform that the wanted image wasn't found.
Candidate: should this be <UNK>
Reference: should be i==0 not i==2
Candidate: why do we need to use <UNK> here?
Reference: spacing is a little off here. two spaces after the return and extra space in front of the immutableset.copyof
Candidate: rename to <UNK> <UNK>
Reference: can't we have something like talendstudioversion.compareto("7.3.1") < 0 so that this is compatible with future versions also ?
Candidate: i don't think we need to check the if the is is the
Reference: can we correct the hashcode method in slice instead?
Candidate: should we throw an exception if we { null) { return <UNK> } <UNK> { return false; }
Reference: message should be corrected as "batch window should have.. not length batch....
Candidate: the syserr should be injected,
Reference: wasn't this renamed to validatingoutputformat?
Candidate: why do we need need to the the here?
Reference: let's get rid of these "anonymous assert" strings
Candidate: why do we need the <UNK> here?
Reference: there's a risk here that whether or not the exemption engine is enabled may change between when we record in the database and when we build the request. can we
Candidate: why do we need to use <UNK> here?
Reference: still this asserts can use assertequals method? please use them all places.
Candidate: please remove the method("post")
Reference: is the hiddenpowertype check necessary?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: (glustervolumeentity)getselecteditem() can be assigned to a local fields, so that avoid casting it again and again
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: the interpolated/monthly flag should be added in the convention fields. not hard-coded here.
Candidate: please use <UNK>
Reference: i think usage of string concatenation here is an issue. could you fix it?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: should this method return an error if the worker is configured to not enable the active topic feature?
Candidate: should this be <UNK>
Reference: why duplicate this line?
Candidate: why do we need the <UNK> here?
Reference: btw even if we keep the try catch, this is dead code, because fail internally throw an exception
Candidate: why do we eating the exception here?
Reference: this is fixed in #2300. since it's just tests, we probably shouldn't fix it here.
Candidate: the 49
Reference: does this work if you create a session outside of the control view (command-line)?
Candidate: this should be the <UNK>
Reference: is it the case where we start a fresh new block2 transfer ? if yes i think we face the same kind of question than with block1, what should we
Candidate: i'm not sure this need to the gson ref to track of the track of the track of the
Reference: you can probably just do filelistview.getitems().addall(file) rather than loop over the list. also, since you have a list of files, you probably want to rename the list to files rather
Candidate: why do we need to use <UNK> here?
Reference: if you're going to go to the trouble of extracting and extension, i think it makes more sense to use a switch block. that, or don't bother and just do
Candidate: do we need need to <UNK> <UNK> <UNK> <UNK>
Reference: that should be: java logger.error("cannot publish topic: {}", topic, e);
Candidate: we should need to use the in the <UNK> <UNK> the <UNK> <UNK>
Reference: what is the purpose of s_count > 3 condition? lets not use [magic numbers](<link_0> in code.
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: warn?
Candidate: @unyoungwax, this should reverse the order of the reverse order of nesting. why, on the previous part, but i am not sure why, but it would be good to
Reference: can we do this in the operatorimpl#init?
Candidate: why do we need need to the <UNK> here?
Reference: this function always returns true?
Candidate: can we move this into a separate method?
Reference: were we always throwing in this condition?
Candidate: i disagree with a thing, but we should broadcast for the sake of the rest of the broadcast of the broadcast of the broadcast of the broadcast of the broadcast
Reference: please switch this to new runnable(... and revert the compile source change
Candidate: should we move this to the <UNK> the <UNK> <UNK>
Reference: that;s just a lambda expression, you should be able to go es.submit(() -> { touch(filename); return null; }
Candidate: why do we need to permission?
Reference: for fieldutils there is this jira issue: <link_0> "fieldutils methods leak accessible flags" with requests that the visibility of a field should be restored after the field is written. maybe
Candidate: why do we need to use <UNK> here?
Reference: <code>password.isempty()</code> is an excessive check. ## why? if password is not <code>null</code> then client have already sent it so "password required" is not correct message, but <i>"password should contain at
Candidate: i don't think we need to check the <UNK> the <UNK> is the
Reference: could we remove this duplication, please? <img width="2476" alt="screen shot 2019-06-30 at 11 02 01 am" src="<link_1>">  /** * returns a synthetic cursor instance with the provided values. */
Candidate: why do we need need to check the <UNK> here?
Reference: you might want to have some buffer time in here, maybe up to a minute. if the token is one second away from expiring here, it's possible that it might
Candidate: i don't think we need to re-throw the exception in the finally block.
Reference: please refactor "f" string literal to a constant. could you please do it with other string literals in this test class?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: in the clean-codian spirit, a couple of convenience methods for isrestbaseenabled() and (especially) getpagelanguage() might improve readability here.
Candidate: this is rectangle <UNK>
Reference: what if we want to add new patient identifier ?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: consider using i18n for "export wizard".
Candidate: rename <UNK>
Reference: extreme nit: move this after the below check.
Candidate: why do we need the <UNK> here?
Reference: i don't think it's necessary to log this, maybe at a debug or trace level but definitely not info
Candidate: why do we need to use <UNK> here?
Reference: can you make this method private and the others that are only used in this file as well
Candidate: can we use the <UNK> here?
Reference: nit: nullpointerexception?
Candidate: this should be setemptyelement().
Reference: let's rename dirfrac to dirfrac, shall we? (i realize you did not introduce this variable in the first place, but it never hurts to sprinkle some code-quality-dust over areas that
Candidate: ![major](<link_1> 'severity: major') reduce number of 3 3 3 lines [![rule](<link_2>](<link_0>
Reference: suggestion int errorid = exception instanceof youtubestreamextractor.decryptexception ? r.string.youtube_signature_decryption_error : exception instanceof parsingexception ? r.string.parsing_error : r.string.general_error; onunrecoverableerror(exception, useraction.requested_stream, newpipe.getnameofservice(serviceid), url, errorid);
Candidate: can we throw an exception instead of returning null?
Reference: can you extract this value into static variable to visually understand with what we try to compare?
Candidate: the syserr should be be the
Reference: iterable is not a list, the cast is unsafe
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: could this be fromstring?
Candidate: you don't need to use the <UNK>
Reference: can remove this from the above two lines.
Candidate: why do we need the <UNK> here?
Reference: it can be changed to "{}: {}" instead of wrapping to string.format(). and \n may not be needed.
Candidate: ouch, look look look process process process process process process process process process process process process process process process process process process process process process process process process process process
Reference: i would suggest not to use conditional binding. we are usually complaining such solutions. instead of that you can use technique that was used in che 5 <link_0>
Candidate: should we be the noop to <UNK> the <UNK> <UNK>
Reference: no. the name looks like it measure calc offsets + send time. now i understand intent of "messagesend" in metric name though. "caculateoffsetstimems" seems clear enough since calc offset only
Candidate: should this be <UNK>
Reference: this should be the last missing piece of the puzzle to connect it all the way through. the singularitypendingrequest is the object that will carry the envoverrides from the runnowrequest
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i don't quite understand this. i thought hypercubeshuffle was supposed to send a tuple to all cells with coordinates equal to hashes of mapped attributes in the tuple, duplicated across
Candidate: should we be the <UNK> here?
Reference: nit: i find assertequals clearer for basic equality assertions like this
Candidate: why do we need the layout here?
Reference: you can probably do a similar simplification to the one i suggested above here.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: why do you pass the invocation and not the invocation.getinstance() here?
Candidate: should be the specific?
Reference: i would return super.isdirty() || (fdirty.get() != 0); but that's me.
Candidate: if the == null) { return <UNK> } else { if <UNK> { return <UNK> }
Reference: how about just typing yourself into the add user box?
Candidate: this syserr should be a syserr
Reference: since getview() can be null, it's possible that getview().findviewbyid can throw a nullpointerexception. should we add a if (getview() != null) check?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: conversionutils :)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you really want to return here? i think you mean continue.
Candidate: why do we need the <UNK> here?
Reference: should we call updateselected(rows) here as well? according to getmaxsize() method, selected array should be able to hold the max number of rows.
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: we should not modify the unparse logic of sqlrowoperator, instead in sqldialect, match the row call and unparse it specifically.
Candidate: remove this line
Reference: maybe not now, but i think in the future we should consider a 'receiver quality policy' to handle this: basically we'd have a policy to prefer quality or number of
Candidate: the syserr should be be <UNK>
Reference: you could put this line between 98 and 99
Candidate: you don't need to check the <UNK> <UNK>
Reference: computeifabsent is apparently not as performant as it could be in java 7. could be worth manually checking if present first since we potentially do this on every request.
Candidate: why do we need to here?
Reference: ![minor](<link_2> 'severity: minor') reorder the modifiers to comply with the java language specification. [![rule](<link_1>](<link_0>
Candidate: this should be the <UNK>
Reference: i'd extract these two lines into a method, since it's duplicated on the tests: createjsonserialization(jsonserializer...adapters)
Candidate: please remove this line
Reference: in order to make this cleaner and more robust, i would suggest to put the try/catch statement outside the if(logger.isinfoenabled()). you can do it this way: scriptresult res; try {
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: can please you get rid of this init() method? add 'open()' method to specialthemedesignerpageobject and rename it to specialthemedesignerpage. use lombok getters for infobox and builder
Candidate: why do we need need to be <UNK> here?
Reference: please use double, not double. it adds overhead (boxing/unboxing). also, no cast would be needed.
Candidate: minor typo: <UNK>
Reference: the assertequals param order is expected, actual, so this (and all other assertions) should be written as  java assertequals("max mustermann", info.name);
Candidate: costs this should be setemptyelement().
Reference: this might be an issue in eventcreationdialog, but when the dialog pops up its not confined to the bounds of the main window. in the particular case of my setup
Candidate: why do we need the <UNK> here?
Reference: update the beanvalidationprovider according to cdi20 requirments, please.
Candidate: please remove the <UNK>
Reference: we may have some cases where the resource exist but is not loaded
Candidate: i don't understand this matters, if we matters, but we don't need to use the <UNK> <UNK>
Reference: inline requirenonnull with this.
Candidate: please remove the method("post")
Reference: return visitor.checkiftype(descriptortype.numerical);
Candidate: should this be <UNK>
Reference: throw assertionerror if checkboxvisibility is false
Candidate: this should be <UNK>
Reference: you shouldn't _need_ to check for null here, since the merge function will only be called if there is an existing value (which should always be non-null).
Candidate: if <UNK> != null) && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK>
Reference: if you fight for performance, maybe you want to replace this call by the string formatting
Candidate: this fail()?
Reference: same here. no such method defined in interface node
Candidate: why do we need to use the here?
Reference: i think we should strictly reject null-names right away as they will cause a rather cryptic exception message further down (i am not even sure the string expansion will work
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: formatting change? i'd rather keep this.
Candidate: why do we need to check for the <UNK> ?
Reference: i love to use static imports, but it is up to u
Candidate: i don't understand this solution, but we need to remove the unused
Reference: hashmap --> linkedhashmap. always.
Candidate: why do we need need to trim the here?
Reference: do you think it's safe to instantiate the class? in kafka i compared the packages as string.
Candidate: do we need to <UNK> <UNK>
Reference: parsing previous files from < wf 10 isn't allowed? i'm referring here to that fact that parsingoptions are not passed through.
Candidate: please use <UNK> <UNK> <UNK>
Reference: adapter.
Candidate: we don't need to throw an exception?
Reference: this is a protocol mandated string, it should be a string constant in code.
Candidate: why do we need the layout here?
Reference: use "ketch stage"
Candidate: <UNK> *= 2;
Reference: i guess this is the wip part...
Candidate: i don't think we need to check if the is is the
Reference: variable allocation not needed.
Candidate: please use <UNK> <UNK>
Reference: suggestion: another way of handling the last gpw is with the scanner close method as well or when trying to commit the gpw. with that approach, you won't need to
Candidate: this should be <UNK>
Reference: use assertequals(collections.emptylist(), feedbackeditpage.gettextsforallstatusmessagestouser());
Candidate: you can be able to be able to be able to be able to be able to be able to be able to be able to be able to validate
Reference: why is this part needed? there will be no additional cycle of vmsmonitoring until the 'perform' method of the previous cycle ends, no?
Candidate: we should need to use the <UNK> <UNK> <UNK> <UNK>
Reference: i think that the log message should be "because it hasn't been signed by" rather than "since it's not approved by". @mattihjelm, any thoughts?
Candidate: <UNK> *= 2;
Reference: private static void warningmessage(string message, string[] args, boolean strict) {
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: we need to test this code with a large survey (200+) questions... i would guess that this process of deleting related data will take more than 60 secs, and therefore,
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: please add getmessage. : {}:\n{}
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: n < 0 if you got an integer overflow or what? etoomanyrows =)
Candidate: why do we need the <UNK> here?
Reference: please log also the command id (of the removesnapshotsingledisklivecommand command)
Candidate: ![major](<link_0> 'severity: major') remove this 7 instead of
Reference: the switch could be substituted via a static final hashmap that has been statically prefilled during classloadinig (basically implementing a lookup table) but i leave this idea up for @davivel's
Candidate: why do we need to use <UNK> here?
Reference: if this is performance-sensitive, could try getitem(branchname) first optimistically.
Candidate: i don't understand why we need to check the the <UNK> the <UNK> <UNK>
Reference: enclose in if (log.isdebugenabled())
Candidate: i don't understand what if you do, can we move this to the bit?
Reference: is there any chance at all this could be expensive? (wondering if we should avoid calling it if the device pixel ratio hasn't changed in the last 1s)
Candidate: if <UNK> != null && <UNK> { <UNK> } else { return <UNK> }
Reference: with the snapshotmanager there are now 3 entities that need their data persisted (config, uninstaller, snapshot). the only thing that differs is the persisted data type. all 3 use roughly
Candidate: why do we need to use <UNK> here?
Reference: should we move this to a config action as well?
Candidate: why do we need to the <UNK> here?
Reference: i suggest to use monotonic time which is exposed by <link_0> it would make the code resilient to system clock changes.
Candidate: what happens if the is is the
Reference: should be final.
Candidate: this should be <UNK>
Reference: all other methods use trace(), this one debug(). is that done on purpose?
Candidate: i disagree with the <UNK>
Reference: typo in maxrety
Candidate: i don't understand why, but it matters, but what is it matters, but i don't understand why, but you do, can you move the code to bit?
Reference: very minor, but i am missing some spaces after the commas :-)
Candidate: do we need to do we need need to do we need need to do we need need to do we need need to do we need need to do
Reference: suggestion this.currentbranch.getname());
Candidate: this should be the <UNK>
Reference: so basically, requestid is the current count of already masked expired rows? can you please rename the variable to indicate that and the log line as well?
Candidate: why do we need the lock here?
Reference: i can't see where is the index added.
Candidate: why do we need to clean up with the <UNK>
Reference: please extract to imageshandler -> e.g. getleafimages
Candidate: please remove this line
Reference: this is a race.. what is the status immediately changes?
Candidate: can we be null?
Reference: make it evident that the count is number of repos
Candidate: do we need need to the the exception in <UNK>
Reference: space required
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: i wonder if this is the right place for the fix. shouldn't we make sure that red/green/blue is not negative and not above 1? at least the later is already
Candidate: boolean[] should.
Reference: interesting, this setting will enforce checking all the entries, no? @govind-menon can you confirm what is the purpose of this?
Candidate: this syserr should be <UNK>
Reference: if band is null the constructor will throw an illegalargumentexceptionwhich just as well could be a nullpointerexception. in other words, i think just band.defaultsystem without the null check is okay.
Candidate: why do we need to check the <UNK> here?
Reference: define a constant instead of duplicating this literal "favourites" 4 times.
Candidate: should we log the exception?
Reference: instead of using an anonymous class, can we define this as a separate thread and name it for easier debugging?
Candidate: should we be the <UNK> here?
Reference: appended ? you might want to rephrase this.
Candidate: if (actual == null) { return; }
Reference: this variable is unnecessary now.
Candidate: why do we need snapshotid here?
Reference: try to use currentselectedelement.isequalnode(elementtoselect)
Candidate: i don't think we need to check the if the is is the
Reference: methodname is not used or?
Candidate: can you use the following implementation avoids the following implementation avoids returning an empty <UNK> <UNK> ?
Reference: what is the point in storing the previous solution recorder ?
Candidate: the syserr
Reference: why does it need to be sorted two times? please also remove the space between order and (
Candidate: feedid should be the feedid we can use the payload?
Reference: use explicit blocks even for one-liners. i was also wondering why this behavior is preferable to returning an empty list. at least for me it breaks the [principle of least
Candidate: can be simplified to <UNK> <UNK> ?
Reference: would it be possible to verify the order of calls too? like that onclose() was really executed before destroy was called? not a hard req, just thinking that it could
Candidate: this should be <UNK>
Reference: i'm confused - i see that you didn't change the 'ibm power 8e' and that you don't convert 'ibm power v1.0' that was changed.. don't we need to convert the
Candidate: can be simplified to:  java return <UNK> <UNK> <UNK> == <UNK> && <UNK> { <UNK> } <UNK> <UNK> { return <UNK> }
Reference: nit: perhaps extract a method "replayterm(tocyrillic)" that does all this? it could be reused in the tolatin case
Candidate: why do we need need to check the <UNK> here?
Reference: why public?
Candidate: if (state != null) { return null; }
Reference: i think removeall will return an empty list rather than null. let's add a size check here as well
Candidate: can we rename the to <UNK> <UNK>
Reference: this can potentially crash the app on startup, since it can fire a network call (refreshstreamconfigs) before everything else is initialized. this should probably be the last thing to be
Candidate: why do you need to evict the <UNK> <UNK> <UNK>
Reference: @erenavsarogullari - instead of forward slash - can you use java path class - to keep it more generic?
Candidate: please use <UNK> <UNK>
Reference: whitespace
Candidate: why do we need need to the <UNK> here?
Reference: this may be cleaner. it also doesn't allocate a new object for each iteration of the loop:  java iterator<?> myiter = value.iterator(); for (int index=0; myiter.hasnext(); ++index) { flatnestedmap.put(string.format("%s[%s],
Candidate: do we need a check?
Reference: would it be better/easier to just have the text be created/added in the constructor then just set/get from there? could you try that?
Candidate: can be simplified to <UNK> <UNK> ?
Reference: same here, frommessage->principal would make more sense maybe
Candidate: this should be the <UNK>
Reference: useless because containsexactly will check it too and has probably a better error message when it fails.
Candidate: please use <UNK>
Reference: if file not found exception is thrown (when file not exists, correct status), internal error exception is thrown and everything fail. in this case we need to set perunnamespaces map
Candidate: can we use the <UNK> here?
Reference: you can use lambda here
Candidate: why do we need to <UNK> the metadatastore <UNK> ? <UNK> : <UNK> : 2; : <UNK> : <UNK> : <UNK> <UNK> <UNK> : 2; : <UNK> : <UNK> <UNK>
Reference: there is a mess here.. honestly, without deeper investigation i'm not able to come with a convincing explanation for why, but i think the same treatment you added in removevmsfromcache
Candidate: do we need need to do the lock again?
Reference: here we are expecting a header schema, however i couldn't find some information how do we set it up, do we expect the user to add it?
Candidate: please use <UNK>
Reference: if the code is not necessary, let's remove it.
Candidate: can we use the syserr
Reference: new append
Candidate: please extract this as a local variable. did did take look look look look look look look look look look look look look look look look look look look look
Reference: assert return value
Candidate: why call the call to call the call to call the call to call the call to call the call to call the call to call the call to call
Reference: you should stay away from java 1.4 ideoms and use java 1.5 for each loop instead, imho.
Candidate: i don't understand this matters, what about the <UNK> of objects.isnull is empty?
Reference: this could be useful for other httpstatus' too. would it be possible to extract the withheader().withbody() out into another method to allow for fluent composition with other error codes? for
Candidate: can be replaced with <UNK>
Reference: please simply use the argument name like "map" or whatever the faulty argument name is.
Candidate: wouldn't it be better to check if <UNK> == null || <UNK> { return false; }
Reference: if the newdefaultversion is null, do we really want to return true?
Candidate: i don't think we need to check if the is is the
Reference: @lautarobock let's declare throws exception, as per the [recommendations here](<link_0>
Candidate: @exper0 let's catch exception here
Reference: do you think there would be an opportunity here to avoid the removeall and to create only menus for new entries/remove too old entries? maybe instead of a queue of
Candidate: this should be setemptyelement().
Reference: if the connection is already made at this point, the log line should really be "_connected_ to helios-solo watchdog at ..."
Candidate: this fail()?
Reference: i thought we weren't going to do this
Candidate: can be simplified to <UNK>
Reference: why not:  for (string [] line: lines.sublist(1, lines.size() -1)) { ... }
Candidate: can we rename the <UNK> to <UNK> <UNK>
Reference: there are a ton of calls (and casts) to getactivity(). probably better to just save a reference onattach so you only have to cast once.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: wrong class name in the error message.
Candidate: why do we need to use <UNK> here?
Reference: if its from active, we can choose to not even create this object
Candidate: should this be <UNK>
Reference: this needs to be conditional. this should only be enabled on devices with both nv and ruim. otherwise the system should just default to the appropriate type.
Candidate: this should be the <UNK>
Reference: it would be a tiiny bit safer/nicer if you put the config -> servers conversion inside the load method.
Candidate: please use <UNK> <UNK> <UNK>
Reference: double semi-colon
Candidate: should we throw an exception here instead of exception?
Reference: perhaps change the condition to: java return cigar.getcigarelement(0).getoperator() == cigaroperator.s && (cigar.getcigarelement(0).getlength() == readlength || readlength == 0) && cigar.getcigarelement(1).getoperator() == cigaroperator.n;
Candidate: i don't see the reason for this change?
Reference: it will be nice to have this method and the supercategory values accessible to reuse this map. for example, if i create a new program group for a tool i
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ?
Reference: please always use braces around code blocks even in this case not needed. also, the variable is not madapter but eventlistadapter
Candidate: this should be setemptyelement().
Reference: fwiw, we typically do these using tostringbuilder. intellij will actually do all the work for you if you want. [here's a random example](<link_0>
Candidate: can we use the <UNK> here?
Reference: what if there are multiple such related nodes at same level? wouldn't they get same variable name (e.g. x1 at first level)? thinking about same might actually happen when labels
Candidate: why do we need to use <UNK> here?
Reference: couldn't this be put inside the if (!wasadapternull), too?
Candidate: i don't need to check if <UNK> != null && <UNK> { <UNK> }
Reference: interesting, what's the rationale for not using array.length?
Candidate: why is this <UNK> overflows?
Reference: space after decl
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: similar thought here about merging the catches
Candidate: ![major](<link_0> 'severity: major') either remove this log or rethrow this exception. [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2>
Reference: i've noticed that you seem to have a strange habit of explicitly doing error checks and then not handling the error properly. here, obviously you need to return false if
Candidate: <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || return?
Reference: there's a method already for this on abstractinfinispantest#eventually, could it be used here?
Candidate: why is this the <UNK> <UNK>
Reference: can we put this check in the outer loop (i.e. between line 66 and 67) and only log once for each plugin that has an invalid name? for (string pluginname
Candidate: please use <UNK>
Reference: can be boolean here too.
Candidate: this should be setemptyelement().
Reference: i think it would be good here to check that the clabels are there. i.e: fbot.clabel("message matches \"f\""); fbot.clabel("timestamp matches \"2\"");
Candidate: why do we need to mock <UNK> here?
Reference: why not orelse(duration.seconds(5))?
Candidate: you don't need to use the <UNK> <UNK>
Reference: could you add an assertion that the contents of file0 are "modified file0" (for working directory)?
Candidate: assertequals(excpected, actual)
Reference: can we iterate over the keyset() here instead? the naming helps it tend to be more descriptive than using entry.getkey() and entry.getvalue(). same for below.
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> clazz, <UNK> <UNK> clazz, <UNK> clazz, to <UNK> <UNK> <UNK>
Reference: can replace this with return arrayutils.contains(parts, "multipart/form-data");
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: can you please log this exception.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: why tolowercase? can you make changes to bean to handle for the same so that all consumers are not worried about the same?
Candidate: why do we need to use <UNK> here?
Reference: please remove every redundant line from this test
Candidate: use map<> <UNK> <UNK>
Reference: why 1? can't it be on a different position?
Candidate: why did you pull this getconnection in the commons-io pull request?
Reference: 'true' is the default value, no need to set it explicitly
Candidate: please use <UNK>
Reference: the infinite loop that @danielb987 saw in ci goes through here. line 1909 of tracksegment view in getcentreseg does a setcoordscenter call, which goes through getbounds, which in line 574
Candidate: the syserr should be be the <UNK> <UNK>
Reference: in the junit integration we actually only check if testresult.hasexception() {throw exception}.. if the test is skipped the junit specific exception assumptionviolatedexception is caught from junit and rethrown.. we would
Candidate: can we make this private?
Reference: rly?
Candidate: this should be the fixture.
Reference: @ascend1 can you check further why we pick cross join over broadcast join? with equality join condition, we should pick pick broadcast join instead of cross join. thanks!
Candidate: why do we need to use <UNK> here?
Reference: something to keep in mind: we encourage users to turn on "trace" logging to see the actual moves that optaplanner is taking. therefore, even the trace log must be _readable_
Candidate: can we move this to the <UNK> <UNK>
Reference: is there any rational on why 2000 as the sleep time? i was thinking if it would be interesting to have a "retry strategy" for async assertions. so we could
Candidate: this 'severity: major') replace this method with 6 6 6 6 with 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
Reference: now that this is a standalone function. you can just do return inetadress.get... here, and remove the temporary variable.
Candidate: why do we need to here?
Reference: check this right after lookupsourceproviderfuture.isdone()... or better yet, don't check it here at all, check in tryfetchlookupsourceprovider
Candidate: if the == null) { return; } else { if (context { <UNK> { return; }
Reference: i think there should be a more explicit check for the exact path to the meta-inf/maven/plungin.xml, because... what will happen, if, say, there is coincidentally some other plugin.xml file...?
Candidate: should we be the <UNK> here?
Reference: please add 2-length names like "fo" to original and expected arrays.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should this print to the user or throw an exception. i am concerned we are printing to the user while it should be logged or throw an exception.
Candidate: why do we need this?
Reference: rename gone wild? this isn't a supplier.
Candidate: this should be the <UNK>
Reference: since there are no compareandset(), do you think it is better to use a volatile exception (since there is no atomicexception)? also, is this function required? looks to me like
Candidate: should we use the exception here?
Reference: could use writelong(double.doubletolongbits(v)) to avoid code duplication
Candidate: please use <UNK> <UNK>
Reference: this protocol works only if cluster is in-memory and baseline-autoadjust is enabled. how it works when persistence is enabled and with/without baseline autoadjust is enabled?
Candidate: should we be the <UNK> here?
Reference: i think this is not needed...
Candidate: please use <UNK> <UNK> <UNK>
Reference: this doesn't actually work in all cases. since the processing of the stream occurs later, the connection backing the cpq can close and it'll trigger an exception instead of returning
Candidate: can we return <UNK> <UNK> ?
Reference: i think this should be setselected not setenabled
Candidate: why do we need to here?
Reference: see if you can exceptions instead of booleans to indicate exceptional situations.
Candidate: should we catch (throwable e) { throw exception } catch (throwable e) { throw new runtimeexception(e); }
Reference: this line could be moved inside the upper if block to save an additional log level check in the non logging case.
Candidate: why do we need need to the <UNK> here?
Reference: i'm consistently getting this failure at the logout step of this test (running the tests on a pixel, api 26): android.support.test.espresso.nomatchingviewexception: no views in hierarchy found matching: with id: android:id/button1
Candidate: please remove this method("post")
Reference: get out the .count() call out in a variable so that it's clearer
Candidate: suggestion <UNK> -> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> -> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> -> <UNK> <UNK> <UNK>
Reference: i think in this else case we need to fail the promise, so that we can notify that the write completed badly.
Candidate: should we throw an exception here?
Reference: size -> count
Candidate: use <UNK>
Reference: i think there is an equals test helper, something similar might be nice for compareto.
Candidate: why do we need to use <UNK> here?
Reference: now that we no longer leak usage count on purpose and the usage count is now ignored anyway, i think we can get rid of this.
Candidate: why do we need the <UNK> here?
Reference: the following check may not needed, since this is done in the constructor. if (instance == null) {
Candidate: this should be the <UNK>
Reference: @vbradnitski you can use the projectpermissions variable instead of recall the getpermissionsfromform( form ) method.
Candidate: the syserr should be be the
Reference: at first, i didn't like that this because it replaced the whole set - if you'd called get() first then this the set would get re-initialized when it already had
Candidate: please use syserr
Reference: i would imagine that removeaddress and the call to personaddress.setperson are technically mutually exclusive, so this should probably be an if-else clause or you should call continue after removing it.
Candidate: this should be the <UNK> <UNK>
Reference: can't we mention the actual type where the no-arg constructor couldn't be found? that would help the developer.
Candidate: the syserr should be the
Reference: do you know the scenario where the connection is null? are you sure it's impossible in the first branch?
Candidate: this fail()?
Reference: you should return here, and remove the unneeded boolean
Candidate: this should be be ripped the to inform the the the <UNK> the user should be added to the user. the user id should be added to the user.
Reference: i don't really understand why the context was used actually, does not make much sense. all you have to do to know the extending macro name is to call macrodescriptor#getname().
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i prefer to not have this here and instead let the inboundbuffer code handle logging like you did for netsocket
Candidate: should we be the <UNK> here? if we { return; } if <UNK> { return; }
Reference: let's use java8 lambda here.
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: should be based on guid only
Candidate: can be simplified to <UNK> <UNK> ?
Reference: use name() instead. tostring() can be overridden
Candidate: please remove the
Reference: an assertion message for the fail()'s would be nice.
Candidate: why do we need the exception here?
Reference: may be move this to a private method called setuptest()
Candidate: please import?
Reference: dont catch generic exceptions. narrow it down to something specific.
Candidate: should we use the <UNK> here?
Reference: rename stopat to stopatns
Candidate: this should be the fixture.
Reference: line 147 and 148 are redundant.
Candidate: why do we need to use the <UNK> here?
Reference: because there's nothing else in this method other than the synchronized block, we don't really need the local variable, you can just replace the assignments of listeners with return statements.
Candidate: this should be the <UNK>
Reference: i'd put this if outside the other. but :+1: anyway... no need for locks, since the temp dir won't change (or shouldn't, anyway)
Candidate: this should be the <UNK>
Reference: if you get line 145 to return then you won't need this line.
Candidate: should this be the <UNK>
Reference: you can not be sure that the value is present in the local storage (see the storevncdata). please wrap the ...valueof(...) by try-catch
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: o(n) for changing the type (which should be static in a statically typed language) is evil.
Candidate: why do we need need to be <UNK> here?
Reference: i'd prefer the condition to check lookup.getcount() but that's not a big deal.
Candidate: please use the fixture.
Reference: the same here. i think this line is not needed.
Candidate: should this be <UNK>
Reference: would be clearer if this said storagedomainfunction (it serves as a data domain, it is of type fcp)
Candidate: can we move this logic into a separate function, so we don't need to the the other, so we don't need to the the other, so we don't need to
Reference: why these verifications have been removed ?
Candidate: why do we need to check the <UNK> here?
Reference: since we decided to remove lostapiclient#numberoflisteners() can this also be removed? i see its currently used in tests only. can we switch back to using the shadowlocationmanager in those tests?
Candidate: can be replaced with <UNK> ?
Reference: latch
Candidate: do we need snapshotid here?
Reference: safer to check if the statetype exists or not.
Candidate: the fqns should be injected, in the presenter.
Reference: it's a personal taste, but i prefer:  java if (m_count >= m_objects.length) { throw new nosuchelementexception(); } return m_objects[m_count++];
Candidate: can we use the <UNK> <UNK>
Reference: nit: we should use consumerconfig.default_api_timeout_ms_config instead of a hard-coded string -- in case we ever deprecate the config we would figure out that we might want to update this log
Candidate: we should need to do we need to do we need to do we need to do we need need to do we need need to do we need to
Reference: the member variables in this class are scoped to this unnecessarily. not sure if that is a style preference, just pointing it out. looks like the same is true for
Candidate: why do we need to use the <UNK> here?
Reference: you can just use bitwise operators (bitwise and) to check for flags.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: please follow parameters order in ctor and assignments order inside ctor -> move below yaxismaximum.
Candidate: @super132 can use <UNK> instead of <UNK>
Reference: add a liquid_break or keep the previous liquid_flow? nothing is mixing here
Candidate: why do we need to evict the the sizes of the sizes properties?
Reference: this is nice, but running init to upgrade only helps if the expected schema version (ever) is higher than the current schema version (sver.versionnbr). if somebody runs an old gerrit
Candidate: the syserr should be be the array.
Reference: you need to terminate the recursion on isspecialwildproject(), and handle projects that have no parent (as their parent is all projects). i would replace the method with: if (!localowners.isempty() ||
Candidate: this should be the <UNK>
Reference: since you already checked the sequence number prior to this line this check may not be correct and may cause statesequenceexception. should it be replaced by this: if (sequence !=
Candidate: please use syserr
Reference: these saved state keys should be defined as constants.
Candidate: do we need need to check the <UNK> in the case?
Reference: static import of reflection2.getinvokableparameters?
Candidate: why do we need the <UNK> here?
Reference: please use constants in airlift sizeof.
Candidate: please consider extracting this into a private variable
Reference: is there any risk of this being called where checkboxes_ is empty, so checkboxes_.size() - 1 would be negative and (i think) end up throwing an exception? might be worth
Candidate: you can need to check for the <UNK>
Reference: what do you think about keeping the naming of connect instead of adding connection? besides just consistency, i think that the former is more accurate given that it's a verb
Candidate: use <UNK>
Reference: you should not need to instantiate your own executor here. executescript is available for all subclasses of apppage.
Candidate: please use syserr
Reference: constants.connector
Candidate: please use <UNK>
Reference: the not-ok and the ok sysout have been interchanged it seems
Candidate: why do we need the <UNK> here?
Reference: this.query = requirenonnull(query);
Candidate: can you use <UNK> <UNK> <UNK>
Reference: so real-only fragments are still being replicated?
Candidate: i don't think we need to evict the the <UNK> the <UNK> the <UNK> is the
Reference: can we test the task definitions repo to see if the task definition was created?
Candidate: this should be the exception if the suppresses exception if the suppresses an exception exception is invalid, skipped, is an validationexception. it will throw an npe.
Reference: i think we need an attribute here. otherwise there will be no differences anyway?
Candidate: why do we need need to the <UNK> here?
Reference: zlog.logexception(e) can be used here.
Candidate: can we use the getconnection here?
Reference: yeah no uniqueness constraint?
Candidate: why do we need the exception here?
Reference: this could be metadataschema.deletessection.decodedeleterow(entry.getkey().getrow()) or similar.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: nit: keep args on line? also valid for various methods in this package.
Candidate: i don't understand this matters, this matters, this matters, but i think that the <UNK> is the <UNK> the <UNK> <UNK> <UNK>
Reference: you're inconsistent here. i think it would be most readable if you keep currentguid as first argument i.e. !currentguid.equals(imagetemplate) &&
Candidate: this is be <UNK> to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: the bit is either set or not, so != 0 is a faster test here.
Candidate: should this be <UNK>
Reference: i would rather check for a null treewithcondition here and return false rather than passing it into the condition method as a nullable.
Candidate: this should be <UNK>
Reference: iterables.transform ?
Candidate: use map<> <UNK> <UNK>
Reference: this is something that maybe doesn't make sense anymore. here we can see that event type is coupled to the kafka topic name. but since this relation is made through
Candidate: can be simplified to: java <UNK> = <UNK> arrays.aslist(new { return <UNK> } else { return null; } (string <UNK> { return <UNK> <UNK> } <UNK> <UNK> { return <UNK>
Reference: you should also support visitmethoddeclaration
Candidate: i don't think we need to check for the <UNK>
Reference: why, btw orienteer_app_home, but not just orienteer_home?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: should we check if default path is not encrypted ..then only store it against no_encryption?
Candidate: what happens if the is is the the <UNK> is the
Reference: should state and country also be logged?
Candidate: why do we need the <UNK> here?
Reference: not completely sure, but i think this could also be written as java states.merge(statename, 1l, long::sum);
Candidate: why do you decide to do you decide to <UNK> the mac || <UNK> || <UNK> || <UNK> || <UNK> && <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: method alljobswitheveryannotation has 29 lines of code (exceeds 25 allowed). consider refactoring.
Candidate: if we is the software software detection. software detection. if we is software software software software software software software software software software software software software software software software software software
Reference: invert this so it returns early
Candidate: this should be the <UNK>
Reference: i don't think you need to return newsession each time you call a set* method.
Candidate: can be factorized to <UNK>
Reference: remotegetall() could return a completablefutures.completednull(), and then you wouldn't need the if.
Candidate: what happens if the is is true ?
Reference: unnecessary line, drop this
Candidate: why do we need to use the <UNK> here?
Reference: again, use ioutils.
Candidate: why do we need to use the <UNK> here?
Reference: in theory getvisiblefor could return a splitpackagebinding, so this would break the invariant that declaredpackages doesn't contain them. but the surrounding packagebinding.isdeclaredin(this) ensures that this doesn't happen (assuming the bug
Candidate: can we be simplified to this.project = <UNK> ?
Reference: let's just drop to debug
Candidate: why do we need to <UNK> here?
Reference: logger::info would also work here
Candidate: should this be <UNK>
Reference: what case does this cover that wasn't covered previously?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: better use list<object> and arraylist<>
Candidate: <UNK> inspections
Reference: add rights checks at this point and only call savexwikidoccollection on docformcommand if the rights are given. we need the rights-checks here because it is a call comming from scripts.
Candidate: why do we need need to the <UNK> here? s?
Reference: this can be replaced with assertthatthrownby(() -> message.dolocalputall(partitionedregion, mock(internaldistributedmember.class), 1)).isinstanceof(primarybucketexception.class); to make things a bit neater.
Candidate: you don't need to use the <UNK>
Reference: isnullorempty
Candidate: what happens if the is is the
Reference: all these flags can be combined with firstbytes since we have enough room there.
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: nit: stream.of(spilt)
Candidate: can you use <UNK> <UNK> <UNK>
Reference: i don't understand the purpose of this. why would we need to create a dedicated reportable for unmapped request ? i would prefer to make use of the metrics object
Candidate: this should be the <UNK>
Reference: the exception is never thrown.
Candidate: please use assertthat
Reference: don't need to cast to a float here or below
Candidate: should we be the specific?
Reference: since all exceptions are handled the same way, you can use only one clause: } catch (urisyntaxexception | ioexception | tmftraceexception e) { throw new illegalstateexception(e); } (don't use runtimeexception
Candidate: should we use the builder here?
Reference: if disabledmetrictypes is an enumset, we could use enumset.noneof.
Candidate: can be replaced with <UNK> ?
Reference: use computeifabsent instead.
Candidate: should this be the <UNK>
Reference: let me note a pattern here, personally i do not like cases that fall through to the default case.
Candidate: nit: appending appending appending appending appending appending the rhs
Reference: why we need to change this class at all ? i can not find a reason.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i don't see getduerequesters doing anything about the order of the requesters it receives, and i think here we want to min across all requesters. i would also add a
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: to make swt.no_move + swt.title style combination work on windows as well, please add below line @2099 if((style & swt.no_move) != 0 && msg == os.wm_nclbuttondown && wparam == os.htcaption)
Candidate: this don't need to throw an exception
Reference: lowerversionhosts , lowcpuhosts and incompatibleemulatedmachinehosts is going to have an extra "," at the end, it should be removed.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: lets just initialize new installations with the default abbreviation of cr.
Candidate: please rename the m
Reference: this honestly feels like we can static builder the individualized texts like all other builders instead of using a factory
Candidate: this should be the <UNK>
Reference: why are there 2 errorreportrequest classes?
Candidate: can you use <UNK> <UNK> <UNK>
Reference: i got a bit confused trying to work out exactly what sar was :). in any case, looking at what this does, it feels like it would be simpler if
Candidate: <UNK> *= 2;
Reference: ![major](<link_0> 'severity: major') invoke method(s) only conditionally. [![rule](<link_1>](<link_2>
Candidate: please consider using <UNK> <UNK>
Reference: you removed the domain requirement type. why?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: hmm, can you call this ctor with null flags at all (besides using reflection)? if you don't specify any, it gets new flag[0], if you set null as last param,
Candidate: should we be the <UNK> here?
Reference: i might be wrong, but it seems that mdeviceonly is missing here. minor: wondering why there is this method to refresh/set fragment parameters. is there a way to switch the
Candidate: this should be the <UNK> via:  <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> } <UNK> } <UNK> } <UNK> } }
Reference: this should be handled in item.getlabel()
Candidate: i pagelogging
Reference: nit: this adds manimatorlistener once per registered callback? we probably shouldn't assume that animatorset will check for duplicated listeners. i'd move this 2 lines up, inside the null check.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: let's rename it to blobuploadconflictcount because there is a same name metric in vcrmetrics.blobuploadskippedcount. they indicate different things.
Candidate: can you use the division for the size?
Reference: instead of using selectionlistener and have an empty defaultselected method, you can use a selectionadapter. fimportbutton.addselectionlistener(new selectionadapter() { @override public void widgetselected(selectionevent e) { importanalysis(); } });
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: scheduleresolverbackedschedulequeryexecutor means nothing to 99% of people who will read that error message
Candidate: can we make this configurable as well?
Reference: there is some point showing some inconsistency in this testequals():  lock1 = registry1.obtain("foo"); lock2 = registry2.obtain("foo"); assertnotequals(lock1, lock2); lock1.lock(); assertfalse(lock2.trylock());  since we can't lock lock2, they must be
Candidate: why do we need this?
Reference: hmm, but this parse will work only for version-zero cursors. for version one that will fail as offset is not a number.
Candidate: should this be <UNK>
Reference: you don't want to do get return checksymtype.nametotype(conf.get(hconstants.checksum_type_name, default_whatever_it_is)); is this a candidate for storecontext? (perhaps if called frequently). perhaps storecontext is not available where this is used?
Candidate: why do we need to use <UNK> here?
Reference: before creating the guid we should check that the operation succeded
Candidate: i don't understand why, but it matters, what is it does.
Reference: please check code formatting for all classes
Candidate: entity should be null?
Reference: ok good, butr if at some point the org.uberfire.java.nio.file.filealreadyexistsexception gets refactored, this code will be broken.. so probably results more safe for future updates just using the instanceof operator or
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: can this be taken from atsapi.getqueryservice().getartifactorsentinel(), then checked for validity instead of null?
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK>
Reference: simplify the method
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: showaction? not simply config or even hideaction?
Candidate: should this be <UNK>
Reference: so if this **is** a single provider flow then we'll have both the big text and the footer? if that's not the case (maybe the previous method has some internal
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: imo there's no need to check all filters, one is enough to filter a message. that is more useful in the ui/api to show the user which filters would apply
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: is it possible that the interrupt status of the thread is not cleared by this task if it wasn't blocked waiting on something. in that case same thread with interrupt
Candidate: should we throw an exception? if we { null) { throw new <UNK> } { throw new <UNK> { throw new <UNK> { throw new <UNK> { <UNK> }
Reference: replacing using regular expressions is a pretty heavy operation. i think we should have some global flag to tell server to consider environment variables. otherwise just use config. also, it
Candidate: can be simplified to <UNK> <UNK> ?
Reference: do we want to return a mutable version of the list here?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: why not support add and offer?
Candidate: shouldn't this be the unsupportedoperationexception ?
Reference: compiler.getcodingconvention()? in multiple places.
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: i would also check if the file is readable as well as existing.
Candidate: this should be <UNK>
Reference: you could use the try-with-resources syntax here.
Candidate: i'm not sure how about changing the first thing of this gets caught in <UNK>
Reference: major == 5 && minor >= 4?
Candidate: should this be <UNK>
Reference: we should catch the exception and return a runtimeexception instead, this shouldn't really happen anyways since we checked the url is valid when building the client
Candidate: why do we need need to be <UNK> here?
Reference: why is this split into two lines?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: is there a reason the try-with-resources was replaced a finally? not a big deal, just seems unnecessary.
Candidate: do we need the getconnection here?
Reference: why is this not using hdsfilereader seek/next instead?
Candidate: should we use the getconnection here?
Reference: use loghelper
Candidate: should we throw an exception here instead of returning an error?
Reference: can this be parameterized?
Candidate: why do we need to evict the <UNK> the <UNK> <UNK>
Reference: i think it is better to exclude "from" and "to" objects from resulting list
Candidate: why do we need need to the <UNK> here?
Reference: shouldn't this check and throw an error if the value is larger than [float.max_value](<link_0> or smaller than float.min_value?
Candidate: this should be the <UNK> <UNK>
Reference: get /wiki/ from urlscontent class (wiki_dir) or it would be better to put a const to urlbuilder
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: do we need a boxed primitive here?
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the
Reference: double negation is hard. and i wonder about what test means in this context (if you are talking about the equality test, then it is rather confusing). moreover, declairation of
Candidate: this should be the <UNK>
Reference: similar approach should be taken here, but the condition is simpler: try { endwithfailure(); } finally { if (getcommandcompensationphase() == commandcompensationphase.end_command) { compensate(); } }
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: let's add the type to the error message.
Candidate: @exper0 magic constant
Reference: sometimes reusing pagebuilder is valuable (because it can predict allocations' size better?) can we safely assume this isn't a case here?
Candidate: why do we need to check for metadatastore ? <UNK> : 2; thanks!
Reference: condinvert is missing
Candidate: can you use <UNK> <UNK>
Reference: my latest commit has changed the way compareto is implemented for datanode. you can use replicaid.getdatanodeid().compareto(datanodeid.gethostname()) == 0
Candidate: can be simplified to: if (state == null) { return <UNK> } else { return <UNK> }
Reference: i guess this is to avoid a spurious empty cell at the beginning of the row, but it prevents to have empty cells in the table e.g.: |=== |one|two|three |lorem||ipsum
Candidate: should be setemptyelement().
Reference: this three lines seem to be useless. it will be added at line 230 anyway.
Candidate: hmm. section section section section section section section section section section section section section section section section section section section section section section section section section section section section section
Reference: a constant for this would be good also
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: some nullchecks and asserts maybe?
Candidate: please import?
Reference: you can use local-variable type inference here (var)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this isn't really a json parse exception, is it? it sounds like the json is valid, just that we can't actually do anything with null.
Candidate: why do we need this?
Reference: also, you should catch illegalargumentexception which can be thrown by enum.valueof, no? since the xml could be corrupt and we should not explode.
Candidate: why do we need the <UNK> here?
Reference: avoid using execute() directly
Candidate: the syserr should be be the
Reference: is a plain "else" block needed here to at least log the cases where no paymentworks processing is needed?
Candidate: should we throw an exception if we { throw exception } catch (throwable e) { throw (long <UNK> } } } } }
Reference: this seems too broad to me. i don't think that a spring.xml.ignore property should have an effect on whether or not .groovy bean definitions can be loaded.
Candidate: this should be injected, so we don't need to use the <UNK> <UNK>
Reference: this pattern can actually generate a _lot_ of garbage. the add() to the list will result in binary growth of the underlying array and then in the end **_another**_ array
Candidate: you don't need to use <UNK> <UNK>
Reference: it's using constants from auth instead of session.
Candidate: why do we need to here?
Reference: i would extract a method gettranslator() since you only use context to initialize it.
Candidate: list<linkinfo> <UNK> = <UNK> <UNK>
Reference: this is not a particular good criterion to decide for/against cursors. views can have very fast cursors, for example if you do a few transformations on an arrayimg that concatenate
Candidate: why do we need the <UNK> here?
Reference: i'm probably wrong but i thought since we don't sample client spans, calls from the span reporter thread wouldn't be sampled anyways, they originate from the flush thread not server
Candidate: why do we need this check?
Reference: string
Candidate: please use <UNK>
Reference: should be .debug().
Candidate: why do we need to wait for the <UNK>
Reference: check .isempty() as well?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: seems well suited to factor into a map
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: seriously, we don't need to warn on every write. the data loss happens when you're yanking storage/os out from under the software -- most applications aren't expected to behave in
Candidate: do we want to do we want to do we want to do we want to do we want to do we want to do we want to do we
Reference: please use null instead of guid.empty, as would happen if using adddiskcommand with vmid=null.
Candidate: rename to <UNK>
Reference: i don't think that helixclustermanager needs to be passed in a helixpropertystore instance. also, the property store path in helixpropertystoreconfig on the frontend will refer to the wrong path since
Candidate: why do we need to use <UNK> here?
Reference: can we add some log message, in case we got classname with null value?
Candidate: this this object object object object object object object object object object object object object object object object object object object object object object object object object object object object
Reference: please add a separator.
Candidate: should be setemptyelement().
Reference: hmm, if you make viewholder a non-static class, then it could have access to all these fields directly (and shouldn't need to be passed this click handling runnable).
Candidate: should be be called in getstate() { <UNK> = <UNK> }
Reference: this could be created once before the for loop (or moved to a constant, or just compare the types).
Candidate: nit: you could use the payload?
Reference: also ignore margin col
Candidate: why do we need to check for the <UNK> <UNK>
Reference: this looks strange: we already registered export of registry in the init and here again during reporting we can potentially register some other set of events? how is that possible?
Candidate: this should be the fixture.
Reference: it could be more readable to use assertequals instead
Candidate: can you use the fixture.
Reference: this doesn't check if the event is cancelled. the flying field should only be updated after the event is fired, and only if the event wasn't cancelled.
Candidate: this should be the <UNK>
Reference: fancy, but we should test that we are not going to sync with ourselves here.. o/w we would end up with some nasty infinite loops.
Candidate: why do we need to check here?
Reference: ![codacy](<link_0> issue found: [method names should not contain underscores](<link_1>
Candidate: this should be the <UNK>
Reference: you could use find here too
Candidate: can we call <UNK> <UNK> <UNK>
Reference: okay, i misread that. i see it's a parameter now. in that case, throwing an exception about an invalid timeout value seems more reasonable to me than silently ignoring it
Candidate: why do we need need to the <UNK> here?
Reference: use dateutil.now()
Candidate: can be simplified to <UNK> <UNK> ?
Reference: i'm not sure about this assert here. do we want asserts in the code?
Candidate: i don't think we need to check if the is is the
Reference: i think you should catch interruptedexception and shouldn't schedule any more tasks on it.
Candidate: should we catch (throwable e) { throw exception } catch (interruptedexception e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> e) { throw (long }
Reference: this field could be retrieved from results.size() rather than stored in private field.
Candidate: should this be <UNK>
Reference: prefer to use the constant time_between_retries_ms
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i would imagine that you have a new contains method that takes in patient object that internally delegates to the old one so you wouldn't need these changes
Candidate: why do we need the <UNK> here?
Reference: from line 228 to line 237, you removed the conditional debug logs and add info log, not very sure this is better and necessary.
Candidate: <UNK> *= 2;
Reference: it does not look right as we do only "return acceptbit" at the end.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: insert exists for such an operation.
Candidate: can we move this logic into a separate method?
Reference: these lines seem duplicated this.connectfuture = null; this.handshakefuture = null;
Candidate: you can do we need an exception here
Reference: why don't you use while(true)?
Candidate: why do we need need to the the <UNK> here?
Reference: use the {} placeholders
Candidate: i don't understand why, but it is be the <UNK> is the the <UNK> <UNK> <UNK>
Reference: could we change the header name to "x-client-id" instead?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can be rewritten as return (databytes == null || databytes.length == 0) ? null : new string(databytes, charset);
Candidate: if (state != null) { throw null; }
Reference: shouldn't we use the display.getdefault() only if we cannot obtain it from platformui.getworkbench()?
Candidate: please use <UNK> <UNK> <UNK>
Reference: please add a message instead of empty string
Candidate: this should be <UNK>
Reference: the test checks nothing, because iterate() method always return nonnull object. it's worth to use forks.iterate("newest").next() and check for some attribute
Candidate: @exper0 let's move this line left.
Reference: use datetimeutils.datetolong
Candidate: can you move this into <UNK> mapping?
Reference: this equals implementation should include attributes from the command super class.
Candidate: can be simplified to <UNK> == <UNK> && <UNK> == <UNK> && <UNK> == <UNK> && ...?
Reference: static
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: does it matter if you rotate the screen? would this trigger update checks more than wanted?
Candidate: oncreate() is is redundant, so we should need to bail twice.
Reference: i think this test is always green, because the assertion has no _check_ called. let's check the concrete value, i.e. java assertthat(onetoone).isequalto(option.some("one"));
Candidate: this fail()?
Reference: fix
Candidate: use <UNK>
Reference: syntax is off here
Candidate: feedid you touch the feedid
Reference: confused here, why can't we use new sortbyimple(property.getname()) directly?
Candidate: should this be the properties?
Reference: isn't this.readonly = "on".equals(transaction_read_only); enough?
Candidate: why do we need need to the <UNK> here?
Reference: this line should be moved out of the assertthrows as only the provider.getservice() call should throw.
Candidate: this fail()?
Reference: null != containereditpart is already checked in the outer if
Candidate: this is be repelaced e1 && <UNK> { return false; }
Reference: need to add mtu to parcel/unparcel
Candidate: the syserr should be be <UNK>
Reference: why don't you simply refer to "command" in your sendcommand method? like "sendcommand(itemname, command)?
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: kill the third parameter to closeconnection(), we cannot skip calling close(). the "penalty" in the rare case where an exception _is_ thrown by close() is merely an additional log (at
Candidate: why do we need the layout here?
Reference: spelling
Candidate: finals
Reference: i think there is no need to fire this event. there is only one listener to this event which is this projectlistpopup class itself. so instead of firing and catching
Candidate: should be be <UNK> to element?
Reference: the comparator here is invalid due to the 1.... maybe replace with one that throws unsupportedoperationexception
Candidate: iterable<integer> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK>
Reference: there's no need to download this to an outputstream then convert to an inputstream. instead you can just call executemediaasinputstream() to directly generate in inputstream and return that.
Candidate: unsupportedoperationexception should be
Reference: @inverno we can return true
Candidate: can we be replaced with foreach ?
Reference: this is a breaking change. should we consider adding another one and keeping this one for use object implementations?
Candidate: should we throw an exception here?
Reference: should we add getchroot here as the value for zkpath field for kafka component ?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: this has confusing output when running a single test method and is not required anyhow. ides and maven show which classes and methods are tested, no need to duplicate that
Candidate: please rename <UNK> to <UNK> <UNK> <UNK>
Reference: move the null check as first action in the method to ensure we also throw if watcherthread == null and unit is null
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if you matters, but i don't understand why, it matters, but it is be the
Reference: please move this line to the end of this method.
Candidate: move this debug log message to debug (line <UNK>
Reference: this id will be the one of the vnmapper resource, instead of the id of a network resource the capability is expecting. if i am right, then the resource that
Candidate: why do we need this?
Reference: isn't it better if you also merge the the old newconfigurationmap.get(stringmapentry.getkey()) with stringmapentry.getvalue()
Candidate: why do we need the <UNK> here?
Reference: this should _describe_ the credential. if no credential is needed, just say something like "not used" or so, but don't leave this null.
Candidate: should we be the <UNK> here?
Reference: rename to simple
Candidate: please use <UNK> <UNK> <UNK>
Reference: why peer class loading?
Candidate: do we need to extend the cleanup() here?
Reference: needs same min_receive_thread_keep_alive_time guard as in the constructor
Candidate: this should be <UNK>
Reference: this dateformat object never changes. maybe make it static final in the class scope and save a bit of performance?
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: checkstyle conflict. need braces.
Candidate: use <UNK>
Reference: prefer:  java int n = mhighlightdrawables.length; for (int i = 0; i < n; i++) { ... }  it performs better on android (_sigh_)
Candidate: why do we need the <UNK> here?
Reference: redundant
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: minor: don't use acronym for nfc? e.g. "the path %s is still cached as not found for repository %s."
Candidate: should we be the exception here?
Reference: use a schedule executor. instead of sleeping threads blocking and using up a thread
Candidate: we should need to print the exception here in the exception we don't want to log the
Reference: could be generic and do the cast as well with:  @suppresswarning("unchecked") <t> t borrow(genericobjectpool pool) { ... return (t) ... ... }
Candidate: why do we need the <UNK> here?
Reference: either one should be enough. actually could you change revertrpcmanager() to call stopblocking() first, and then stopblocking() to call assertequals(emptylist(), queuedrequests) instead of logging an error message (which doesn't even
Candidate: can we print the exception?
Reference: please add this to lundiskrowmapper
Candidate: this should be <UNK>
Reference: you don't need metricnamedto.origin.session_scope_tg here
Candidate: i don't think we need to do we need to check the the <UNK> <UNK> <UNK>
Reference: for these timeouts, can you make it be 60 minutes instead of 1 hour and make the timeout configurable with a setter (with 60 mins being the default). i'm thinking
Candidate: please remove the <UNK>
Reference: you might want to use the guava lib for this
Candidate: why do we need to use <UNK> here?
Reference: please factor out this hardcoded path segment
Candidate: why do we need to use the <UNK> here?
Reference: initial commit was already created in setup() method
Candidate: i don't see the fluent tests, but you don't need to mock the fluent tests, but it should be replaced with 3 tests, so it can be replaced by tests,
Reference: cool :)
Candidate: <UNK> *= 2;
Reference: i think is is a rename refactoring that went a bit wrong :)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: shouldn't there be 'hosts.stream().collect(collectors.joining(","))' instead of just 'hosts'?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i wouldn't implement this (just return null). a long has a fixed size, and we can use putlong() in htinterval to write them to the file. this method was more
Candidate: why do we need to check the <UNK> here?
Reference: splited is not a word.
Candidate: i appid
Reference: @zumbrunnen you can merge getstring(int) and string.format(string, object...) by using [getstring(int, object...)](<link_0>, java.lang.object...%29).
Candidate: can we use the getconnection here?
Reference: bytearrayinputstream certificate is accessed after it is closed. better to use try whit resources to ensure that this is not required.
Candidate: do we need a <UNK>
Reference: unsupportedoperationexception seems reasonable here.
Candidate: this should be <UNK>
Reference: on the value that equals the current *default* we can (and i think should) remove the repo specific key/value completely from the prefs via unsetprojectspecificfirstparentpreference
Candidate: i don't understand this matters, this matters, if you matters, but you don't need to check the <UNK> <UNK>
Reference: update log to mention ${project.artifactid}-${project.version} or just "tokens are not replaced".
Candidate: why do we need to use <UNK> here?
Reference: tolowercase(locale.english)
Candidate: i don't think we need to check for the <UNK>
Reference: style: no brackets around single lines
Candidate: i don't understand this matters, if we matters, but we don't want to check the the the <UNK> is the
Reference: maybe use lists2.map() instead?
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think we should use binarymessageconstructioninterceptor.supportsmessagetype() here to have one source of truth for the decision, whether the interceptor could handle the message type.
Candidate: should be be <UNK>
Reference: initialization with an empty string is not necessary. the consuming code should gracefully handle the unset preference.
Candidate: why do we need to mock <UNK> here?
Reference: can't you do this in the constructor, and make the field ftopnode final?
Candidate: i don't need to check for the <UNK>
Reference: one other thing i thought of: we should factor these strings out into variables like cquery_id and clangd_id, and reuse them in cpplanguageserverpreferencepage
Candidate: the syserr should be be the <UNK> <UNK>
Reference: @iliketonguyen why the change to finest here?
Candidate: should we use the exception here?
Reference: when running it from eclipse i noticed that job.getthread() can return null. you should a null check for that.
Candidate: please remove the <UNK>
Reference: better to have this baked instead of doing it each tick...
Candidate: this should be be the <UNK> <UNK>
Reference: why are you removing this check? this can cause issues with how we read packet id's.
Candidate: should we be the specific?
Reference: why is this error? should we make this an info log? and "updating {} {}" is not detailed enough. say something like "successfully added metadata store realm {} to namespace
Candidate: why do we need the fully-qualified properties? here?
Reference: please move this piece of code before switch-case block, you can refer to the style in oraclesqldialect.
Candidate: please remove unparse <UNK>
Reference: suggestion throw new illegalargumentexception("jar does not look like a plugin, there is no short-name manifest attribute");
Candidate: should we return an empty ? <UNK> ?!
Reference: why not return here?
Candidate: i don't think we need to trim the <UNK>
Reference: i suggest using internationalizationkt.getrootlocalizer().formattext(key) instead. it returns the key if there's no translation.
Candidate: should be be <UNK> name)?
Reference: this is a recursive call .. which is a little scary in a constructor. if somebody tries to copy a node which is a descendent of itself in any way,
Candidate: rename to <UNK>
Reference: change location to version
Candidate: nit: can be replaced with: <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: can we catch something a little more descriptive like illegalargumentexception
Candidate: should we be the getconnection here?
Reference: we can remove the print() to clean up our logs during testing.
Candidate: we should need to check whether the flag is true after the
Reference: i think no need to add filter here, since the tredshiftconnection component handle the db connection, rather than the tredshiftinput component.
Candidate: if you || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: okay what is this logic trying to do? is there a bug report? there is a bunch of color converters that cover these cases, would be good to avoid duplication.
Candidate: can you use the rhs of <UNK>
Reference: since this json string is copyrighted, should we use it in a public test case in our code? it might be better to avoid copyright issues and mock up a
Candidate: should we be the exception here?
Reference: this is wrong. it's always returning an empty target.
Candidate: why do we need need to the <UNK> here?
Reference: minor but the array is not necessary here.
Candidate: i don't understand this matters, this matters, this matters, but we don't need to do we need to do we need to do we need to do we need to
Reference: do you want all throwables or this is wide enough.
Candidate: the syserr should be be the
Reference: so i just did a little bit of hunting around on stack overflow because i was surprised at how much work it took just to customize the icon, and found
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i think you do not need to explicitly call the tostring method.
Candidate: why do we need to <UNK> paths?
Reference: the task cannot be created in a 'done' state.
Candidate: why do we need the <UNK> here?
Reference: should this be containsexactly(1, 1)?
Candidate: why do we need need to the <UNK> here?
Reference: it looks like resultbatch is reused here. i don't think it's causing any problem for now, but i'm wondering if it could be better to create a new instance instead
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: what about experiment names, override names, etc. as well?
Candidate: use <UNK> instead of <UNK>
Reference: why hashtable over hashmap?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: it should be child.add(...).
Candidate: this should be the <UNK> if <UNK> != null) { return; } <UNK> } <UNK> { <UNK> }
Reference: ![major](<link_1> make this line start at column 7. [![rule](<link_2>](<link_0>
Candidate: i don't need to check for the <UNK>
Reference: does carrier want to hide *all* apn fields, or just user and password? if it's just user and password, then make a change in dataprofile to just obscure those fields.
Candidate: i don't understand this matters, this matters, this matters, but you don't need to do we need need to check the the <UNK>
Reference: 0, looks like magic number. any possibility to give a non-zero value, matching closer to the expected value ? also, please add error message - assertthat("error message", stats.getlast(), greaterthan(0));
Candidate: this should be the <UNK>
Reference: for your information,  if (!blocktosubkeyrangesmap.containskey(blockid)) { blocktosubkeyrangesmap.put(blockid, new linkedlist<>()); }  can be written equivalently as:  blocktosubkeyrangesmap.putifabsent(blockid, new linkedlist<>());  but either way is okay to me.
Candidate: should we be the specific?
Reference: this class is actually where this constant should be and instead the test class should refer to it. or maybe not in the state provider, but in the analysis itself
Candidate: if we is the software <UNK> but i don't think we need to trim the <UNK>
Reference: suggestion log.error("public key is not rsa");
Candidate: why do we need need to the <UNK> here?
Reference: why timestamp is not taken from the row instead. above is only meaningful for message-time rejection policy in this case.
Candidate: <UNK> 'm'
Reference: i expected this code to be moved to start(). now it is in duplicate
Candidate: we don't need to print the stack trace trace, so we don't need to throw an exception
Reference: in intellij i usually just write fail( and hit alt + enter to apply static import, intellij applies it for whole file then
Candidate: why do we need to the @test(expected = <UNK> <UNK> <UNK>
Reference: catch should be on previous line. also, is there a more specific exception type that can be used here, e.g. ioexception?
Candidate: please use syserr
Reference: i'd prefer we stored actual uuid objects, not strings representing them
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: should this test also confirm that the exception message contains something about the value being out of range?
Candidate: this should be <UNK> overflows?
Reference: are you guys really using inheritance everywhere? you *really* want to subclass all of these? why not just pass in functionals that can create the plan? then your sessionfactory (i
Candidate: you could use system.currenttimemillis()
Reference: this message looks misleading. will tags be considered at this point as well?
Candidate: rename <UNK> <UNK>
Reference: does this also swallow interruptedexception?
Candidate: i don't think we need to re-throw the exception if the exception is the software exception we don't want to re-throw the exception
Reference: shouldn't this be key?
Candidate: can we use the <UNK> <UNK>
Reference: should we only add filters which are defaultselected? then you may have to build a temporary list with the filters to be added...
Candidate: i e2 ethernet sake of stringbuilder?
Reference: extract this check to the storagedomainvalidator and replace the call here and in updatestoragedomaincommand with it
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: are spaces ok in namespace strings?
Candidate: formatting
Reference: maybe we should hold a reference to the listener and limit the requests to one at a time. pressing it twice in succession can lead to contradictory toast messages. i'm
Candidate: should we throw an exception here?
Reference: can you call ts "taskstatedata" ?
Candidate: i don't understand this matters, if this is matters, but if the is is the
Reference: this seems like a bad idea. better list exceptions explicitly
Candidate: this should be the <UNK>
Reference: - it should be initialised with the value from the scannerparam. - the undoable edits should be discarded after setting the value.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: i think this needs to be a getlongvolatile.
Candidate: this should be improved. the <UNK> is the
Reference: do not remove curly braces around the else
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: is this not the same as to say: if (!user.isidentifieduser()) { throw new authexception("authentication required"); } ? and else branch is never hit?
Candidate: why did you inform this logic?
Reference: rename 'selection'
Candidate: you don't need to use the <UNK> <UNK>
Reference: naming: consider renaming this and line 849 to elapsedmillis? up to you.
Candidate: why do we need the <UNK> here?
Reference: suggestion utils.closequietly(retrywithtoleranceoperator, "retry operator");
Candidate: if we is the software error, but we don't want to do we need need to check whether the timeout will cause an exception if someone expects interrupted.
Reference: what will happen here if the string cannot be converted? looks like some error handling and protective code is missing
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: use apputils <link_0>
Candidate: use readasstring(...) instead of <UNK>
Reference: why here an explicit typecasting is required ?
Candidate: use <UNK> <UNK> <UNK> <UNK>
Reference: this looks like a copy of setincludedpaths, just with different types. change the argument type of setincludedpaths to set<? extends iresource> and remove this.
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: does this need an instanceof check or assert.isinstanceof?
Candidate: should we be the <UNK> here?
Reference: ah, i see. edit: actually, upon closer inspection, it appears that i had got the order mixed up. looks like all things are accounted for. that was my mistake.
Candidate: why do we need this?
Reference: inline this variable.
Candidate: please use <UNK> <UNK> <UNK>
Reference: what's the unit for these numbers?
Candidate: should be be specific?
Reference: i think it may be worth factoring parts of this out. the 403 credentials_expired checks are very specific to cloudant i think and it is probably not worth doing all
Candidate: rename <UNK> <UNK>
Reference: please use description() instead of descricao() on the method name.
Candidate: should this be the fixture.
Reference: if sourceprocessingdetails is initialized to new hashset<>() instead of null then we don't have to check here.
Candidate: should this be <UNK>
Reference: better to use list instead of arraylist  java public list<remotexbeedevice> getdevices() {
Candidate: do we need to trim here?
Reference: no need to cast here.
Candidate: this should be setemptyelement().
Reference: should be a mojofailureexception because this is a configuration error. mojoexecutionexception should only be used for internal errors.
Candidate: please use <UNK> <UNK>
Reference: do these calls want to go away? (i.e. you're not drawing the box anymore?)
Candidate: i don't understand why, but it matters, what the is is to do, but it will be nicer: if <UNK> { <UNK> = <UNK> }
Reference: not_found again.
Candidate: <UNK> --> <UNK> --> <UNK>
Reference: spell out eocd
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: i assume the whole formula can be extracted into a separate method, for example: java private static long getperformancediff(long expectedms, runnable m) { return abs(expectedms - getbenchmark(m)); }
Candidate: why do we need the fixture.
Reference: shouldn't this line be in styledtext.isvariableheight() instead of current impl ?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this throws an exception in case the queue is full. we maybe don't want to cause change of control flow for the operation that logs the event. isn't is better
Candidate: this should be the <UNK>
Reference: we probably should change "ace" to something else, since acefuture is not the only thing using this.
Candidate: why do we need permission?
Reference: same as above (indicate trying different node)
Candidate: why do we want to tear down the <UNK>
Reference: remove final. we dont' usually use final in a body.
Candidate: please use map<> <UNK>
Reference: explicit real ref?
Candidate: please remove the <UNK>
Reference: is there any reason to wait until the whole source will be prefetched before we start emitting rows?
Candidate: why do we need to here?
Reference: spelling
Candidate: can be simplified to <UNK> <UNK> <UNK> ? <UNK> : <UNK> : <UNK> <UNK> <UNK> : <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: why do we call this variable request? we can also create commands as a reaction on other commands (e.g. in commandrouter), can't we? in this case, this may not be
Candidate: storagetype should be setemptyelement().
Reference: these can be changed to regionversionvector<?> to prevent "rawtypes" warnings.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: currently, only testparquetfilewriter uses this method. if it is not really required to be public i would suggest having it package protected.
Candidate: should this be <UNK>
Reference: this is dangerous  given the example: java public class outer { private static final int foo = inner.bar; public static class inner { private static final int bar =
Candidate: suggestion: if <UNK> == null) { <UNK> groupname = <UNK> }
Reference: consider a helper method that replaces objects.equals().
Candidate: i don't think we need to check if the == null) { return false; } else { return false; }
Reference: this equals implementation should include attributes from the command super class.
Candidate: please use object.equals <UNK> == null && <UNK> == <UNK> && (count != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: i'd extract this code into a separate method: private void syncrefreshrate() { configurator conf = (configurator) typeresolver.getinstance().resolve(configurator.class); conf.updaterefreshrate(); int interval = conf.getpollingtimerinterval(); if (interval != normalinterval) { setrefreshrate(interval); } }
Candidate: why do we need the <UNK> here?
Reference: is 5000ms as headroom for job scheduling enough? should we make this configurable somehow?
Candidate: you don't need to use the <UNK> <UNK>
Reference: just for clarity, i'd make this a method (geturlforbase)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: @bhhari what was the problem? was it that getreadpositions returned junk? if so, shouldn't if branch also populate outputpositions? also, outputpositions = positions needs to be followed by outputpositionsreadonly =
Candidate: should be be <UNK> <UNK> ?
Reference: why is this line still necessary?
Candidate: did you rename this variable as well as well as well
Reference: i don't think we need to initialize this here right? we can do that in the only method that uses it.
Candidate: can be replaced by: <UNK> <UNK> { return <UNK> }
Reference: this can be changed now with the activemqheaders settters.
Candidate: i don't think we need to throw an exception?
Reference: this line isn't necessary.
Candidate: super() should be spared
Reference: random aside.. shouldn't this sample be in.. samples? i'm a bit confused.
Candidate: why do we need this?
Reference: we also need to synchronise the system.currenttimemillis()
Candidate: should we be the <UNK> here?
Reference: don't you want to test that predefinedscopeconfigurationimpl#initializelocales() works correctly?
Candidate: this fail()?
Reference: is this correct? shouldn't this be "%s/plugins/%s"
Candidate: please rename this to <UNK> <UNK> <UNK> <UNK>
Reference: can simply check that the normal interface to implementation class is registered already.
Candidate: we should need to evict the <UNK> the <UNK> <UNK>
Reference: this will evaluate incorrectly
Candidate: you can use <UNK> <UNK> <UNK>
Reference: not convinced we should just synchronize on this map, without knowing anything about it. that feels dangerous and ad hoc. we can presumably rely on the map's put method to
Candidate: i don't understand what if you want to do we want to do we need to do we want to trim the <UNK>
Reference: partially correct. also move the instantiation of the array outside the evaluate. you can used pointables.clear() inside evaluate.
Candidate: please use import <UNK> <UNK>
Reference: why aren't we checking for msyncthingservice being null here?
Candidate: i don't think we need to wait for the <UNK>
Reference: i don't think that we need offline access (calendar export is a quick one-off operation) and thus don't need to store credentials. i think you can just remove these two
Candidate: should we use the exception here?
Reference: - no need to force user pass "origin" (unless i'm missing something), we can define it here as only custom events are being added. - really? 'description' is mandatory?
Candidate: nitpicky can be replaced by: <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> .collect(collectors.tolist());
Reference: why pass in the executor as a parameter when we have access to the field?
Candidate: <UNK> *= 2;
Reference: @custombrutauthrules({moderatoronlyrule.class})
Candidate: should we throw an exception here instead of exception?
Reference: that is the easy fix, the better fix would be to check if carried by raildroid or by player..
Candidate: i don't understand this matters, what about changing the previous line overflows?
Reference: invert
Candidate: this should be the <UNK>
Reference: style nit: we don't use braces around single line blocks
Candidate: parens nullpointerexception, if rewrite != null) || nullpointerexception, == null) || nullpointerexception, == null) || nullpointerexception, == null) || nullpointerexception, || nullpointerexception, null) || nullpointerexception, || nullpointerexception, null) || nullpointerexception,
Reference: this is duplicate code and should be extracted into a method.
Candidate: this should be the <UNK>
Reference: asserting default values does not make sense. if eclipse decide to change it later, it will fail on this place but it is not a bug in our code, only
Candidate: please remove the method("post")
Reference: why do you use deprecated constructor here?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, it matters, but it will be good to
Reference: perhaps bit nicer with assertthatthrownby
Candidate: why do we need need to the <UNK> here?
Reference: does 'schema' need to put back to cachedbyid cache?
Candidate: should this be the <UNK>
Reference: i dont know about this but we use i'd say in all of the tests the assert.assert ... so you better change your idea settings or redo the whole test
Candidate: please remove the method("post")
Reference: translateable stings should be externalized
Candidate: you should need to use the <UNK>
Reference: missing @ since.
Candidate: should we throw an exception instead of returning null?
Reference: you may want to add spaces around "=="
Candidate: can we use stringbuilder?
Reference: is this operation being removed the correct thing to do?
Candidate: <UNK> *= 2;
Reference: i think it is better to return an empty collection with collections.emptylist() to be more null-safe.
Candidate: this should be the <UNK>
Reference: you can drop the ***.
Candidate: should we be the <UNK> here?
Reference: perhaps add a "bytes/second" metric here indicating how fast we work through the file. that also gives us an idea of how much slower than the raw "read a file"
Candidate: if you is a <UNK> of <UNK>
Reference: probably a npe exception is thrown here.
Candidate: what happens if it is happen in the case?
Reference: i don't think this check is needed.
Candidate: this should be an empty() if <UNK> { return <UNK> } <UNK> { return <UNK> }
Reference: maybe have the variable renamed to isfrozen as well? it's more grammatically correct anyway :wink:
Candidate: this should be setemptyelement().
Reference: minor: seems like we can return right away when pools/poolids is empty
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() here?
Reference: how did you pick which of these parameters are passed to the constructor, and which to the method? stuff like helper, downloader and controller seem more like constructor injected parameters,
Candidate: why do we need this?
Reference: can do touch %s %s %s %s as a single command.
Candidate: why do we need the <UNK> here?
Reference: this needs to be improved. if somebody has this and then opens the workspace with an eclipse that has an older egit version, he'll get an invalidobjectidexception. add the new
Candidate: should we throw an exception here instead of an error?
Reference: let's change to !isanalyticsactive()
Candidate: thank you!
Reference: nit: it would make sense to check that queries.size() == classes.size()
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: just make the test throws exception
Candidate: please use syserr
Reference: we should add support (and have it on by default) for ensuring the value is not null. for example, right now if the clientregistration is not found it returns null.
Candidate: we should need to evict the <UNK> the <UNK> <UNK>
Reference: might as well do %s and column.time_column_name here since you went to the trouble of doing it in the if check.
Candidate: should this be the <UNK>
Reference: negative logic
Candidate: why do we need need to check the <UNK> <UNK>
Reference: shouldn't the blocks move into the parent container (or the wrapper's parent)?
Candidate: why do we need to use the <UNK> here?
Reference: fragment.getcontext()
Candidate: i don't think we need to do we need need to check the <UNK>
Reference: since the logic switch, this should be true (former behavior).
Candidate: should this be <UNK>
Reference: i think the null check that was at l1015 before may be necessary. unlike the resource tree, we don't do a copy-on-write/publish-on-commit deal when an op changes the mrr tree
Candidate: do we need to check if <UNK> == null) || <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> }
Reference: curious what does 9_000l mean? it doesn't look like a number.
Candidate: please use <UNK> <UNK> <UNK>
Reference: do we need this anylonger?
Candidate: should we use the <UNK> here?
Reference: not sure reusing timestepactiontypeswitch here is very clear? i can live with it if you defend it but i was expecting these type switch classes to only be implemented inline.
Candidate: why do we need the <UNK> here?
Reference: the called method initializemetricstore declaration proceeds the calling method
Candidate: why do we need to use <UNK> here?
Reference: i'd just move this to before the for-loop begins.
Candidate: <UNK> *= 2;
Reference: maybe i'm missing something, but i'm not fully sure we need this here since we unregister the dispatcher in onpause, does it make sense? wdyt?
Candidate: should we be the <UNK> here?
Reference: boundedelastic
Candidate: please use <UNK>
Reference: copyonwritearraylist list may offer a better performance for read operations, which are dominant here
Candidate: i don't think we need to check for the <UNK>
Reference: objectutils.tostring() will return an empty string if obj is null. is this really what you want to do?
Candidate: why is the clone on the <UNK> ?
Reference: do we know since when openstack metadata is supported? i'm concerned of a scenario where customers have old templates installed with version of cloud init that doesn't support it
Candidate: this should be the fixture.
Reference: b == null
Candidate: why do we need need to check for the here?
Reference: why was this necessary? the only thing that changed is the addition of the label image, does that screw up the layout?
Candidate: i accordingly, accordingly, accordingly, accordingly, accordingly, this accordingly, the accordingly, accordingly, accordingly, several spots in several spots several details. i don't think it's possible
Reference: will it be better to cache yarnclient on the yarnapphandleimpl instead of creating it every time? in apexcli the yarnclient is cached.
Candidate: i don't think we need to do we need need to check the getcredentials
Reference: i think, we should use the "cycloversion" here, too.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: return cardtypes.stream().anymatch(cardtypeentity::isrequires3ds);
Candidate: this should be <UNK>
Reference: we might want to prefix the message with something like this, incase you're catching an error that doesn't have a nice message.  "topology {0} submitted successfully", topology.getname()
Candidate: why do we need a after? after? after? after? after?
Reference: also this consumer could be simplified by lambda but leaving decision to you. selectedkiesession -> onselectionchange()
Candidate: why do we need to call the <UNK> here?
Reference: are these changes to typeinference part of the fix for default methods? if not, can we pull all changes to typeinference into a separate pr, to keep things clean?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you don't need .tomap() here. keyset() is a method on dbobject
Candidate: can be simplified to: java return <UNK> == <UNK> || <UNK> { return <UNK> <UNK> } <UNK> <UNK> { return <UNK> }
Reference: some of engine-config values are quite large, wouldn't it be better to show difference on multiple lines? something like: option name: some_option current value: 'a value set by user' default
Candidate: should we be the <UNK> here?
Reference: likewise..
Candidate: likewise..
Reference: can we check whether prevstatus!=unassigned here and declare the dynamicfromdb field inside the else block instead?
Candidate: do we need need to check for the <UNK> <UNK>
Reference: it is usually better to pass the exception as an argument to the logger so the stack trace gets logged too
Candidate: can we use the exceptions?
Reference: does doing synchronized (this) in inner class will not stop its outer class. so i think this is wrong.
Candidate: should we be the <UNK> here?
Reference: i think you can use reddeer implementation of this dialog: <link_0> wdyt?
Candidate: please use assertthat
Reference: please statically import assertthat and hasitems
Candidate: please use syserr
Reference: this isn't a complete fix as the binary value may contain a subsequence of some other array value possibly a slice from another buffer owned by someone else so you
Candidate: please use <UNK>
Reference: extract a constant out of the string literal?
Candidate: should we use <UNK> objects.tostringhelper() name)?
Reference: style-nit: remove the added final keyword.
Candidate: do we need need to synchronize on the exception?
Reference: extractdata()
Candidate: can we make this a configurable as well?
Reference: any reason why not to put the authz name in separate field instead of parsing and re-parsing?
Candidate: please remove this method("post")
Reference: just curious on this change. is it necessary?
Candidate: should we use the <UNK> here?
Reference: should remove system.outs...
Candidate: please use <UNK>
Reference: if you select the options "gear" icon on a menu the audio upload widget should be right there: ![screen shot 2017-09-06 at 3 13 35 pm](<link_0>
Candidate: can we use the <UNK> here?
Reference: change this to info
Candidate: why do we need need to be the here?
Reference: i didn't understand why this is required. let's discuss tomorrow.
Candidate: why do we need need to the <UNK> here?
Reference: i am not sure if we need the isnotereadytobesaved logic here. since we are in the createreasonnote function, and it looks like populateidentifieronnoteandextension takes care of the condition that caused
Candidate: should we catch (throwable e) { throw exception } catch (throwable t) { throwable = false; }
Reference: consider having the formatting parameter on a new line, which would allow to keep the string one piece.
Candidate: should we throw an exception here?
Reference: i'd just do if (tasksqueued.add(localpath))
Candidate: <UNK> *= 2;
Reference: could you please extract these capabilities change (except rewind and ff) into a separate commit? or even remove from this pr.
Candidate: why do we need the <UNK> here?
Reference: @original-brownbear can't we use pure java 7 feature java.nio.file.files.write()?
Candidate: @exper0 let's move the meaningless here as well
Reference: i guess that is supposed to compensate the removal of the code that resided in validatebootsequence? that is not equal, if the user set the boot sequence as dc (disk
Candidate: why do we need the columns here?
Reference: is there a need to shutdown the existing client, if present?
Candidate: please remove the <UNK>
Reference: handlers shouldn't know about specific writers - we shouldn't blind cast here.
Candidate: i don't understand this matters, this matters, this matters, but we don't need to do we need need to do we need need to do we need need to the
Reference: no point using a streamrawdata and writing to a temporary file as well. perhaps leave it as filerawdata for the moment.
Candidate: this we need to throw an exception if <UNK> is the
Reference: nit why clog.e?
Candidate: should we use the <UNK> properties?
Reference: do we want to keep this log?
Candidate: use the syserr
Reference: minor: "client termination"? ("terminate" sounds a bit odd as a noun).
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i guess keeping this line same as the previous one if (settings.getrequestedcameraid() == camera.camerainfo.camera_facing_back)  would be more appropriate although it would be functionally the same thing.
Candidate: the syserr should be injected, so we don't need to check the the <UNK> <UNK>
Reference: you have to start a new server if this test has @gerritconfig or @gerritconfigs.
Candidate: why do we need the <UNK> here?
Reference: agentbuidler -> agentbuilder
Candidate: why do we need the future.get() here?
Reference: are you sure that error message should contain \n?
Candidate: should be be <UNK>
Reference: @inverno how about extracting the body of this lambda into a separate method? this method findrootbranchingblocks would be more readable and more homogeneous.
Candidate: why do we need to use <UNK> here?
Reference: needs defaults
Candidate: use rectangle <UNK> = <UNK> <UNK> rectangle = <UNK> <UNK> rectangle = <UNK> <UNK> rectangle = <UNK> <UNK> rectangle = <UNK> <UNK> rectangle <UNK> <UNK> rectangle = <UNK> <UNK> rectangle
Reference: maybe throwable?
Candidate: isempty()? isempty()? isempty()?
Reference: most (if not all) enumerable operators include a static factory method which takes into account deducing collation and distribution. shouldn't we include one?
Candidate: why do we need to here?
Reference: can you use return permits.computeifabsent(name, n -> new membercapacitypermit(n, config.getcapacity())); instead?
Candidate: why do we need need to the <UNK> here?
Reference: use a stringbuffer, guava or write a custom utility method that does string join
Candidate: please remove the <UNK>
Reference: use the aggregatefactory.getaggregatetype()'s class loader instead
Candidate: this should be the <UNK>
Reference: i'd also rename the variable to linesoftext.
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: use nullstatslogger.instance rather than plain null also i think this constructor use this other constructor  this(conf, nullstatslogger.instance, registrationmanager, new ledgerdirsmanager(...));
Candidate: why do we need an extension?
Reference: is the getfilesystem call thread safe ? previously this was in a synchronized block, now it is out of the synchronization block
Candidate: we should need to do we need need to check whether the exception is the <UNK> <UNK> <UNK>
Reference: you can static import these functions.
Candidate: i don't think we need to check for the <UNK>
Reference: can we get this map from options object using getimpersonationserviceaccounts() method instead?
Candidate: ![major](<link_1> 'severity: major') remove this method [![rule](<link_2>](<link_0>
Reference: indexartifact and blackboardexception are depreicated
Candidate: do we need a <UNK> of <UNK>
Reference: why are you saving existing classloader? i think you can remove it
Candidate: the syserr should be the
Reference: need outcome.untap like code below?
Candidate: nit: 4 spaces 4 spaces 4 spaces intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional? intentional?
Reference: how do you now in doasserthasmethods that the error message is about declared methods and not methods ?
Candidate: this should be <UNK>
Reference: !isempty if list
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: please use a constant (static final)
Candidate: why do we need the <UNK> here?
Reference: looks like this run on an already altered db. we could put it in the previous state and run the upgrade task to actually test it did the modification.
Candidate: why do we need this?
Reference: the same as above conf.containsall(keys) seems more robust.
Candidate: this should be the <UNK>
Reference: is this used in some other class? can't be private?
Candidate: why do we need to check the <UNK> here?
Reference: i think these check is good candidate for candoaction error message
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: this is playing dirty. we shouldn't dig around in the dom looking for the first child of anything. please rework this using gwt widgets or more direct references to elements
Candidate: the syserr should be be <UNK>
Reference: should we describe that these messages are also autocompleted?
Candidate: you need to create a new <UNK>
Reference: is it really the delete method you want to invoke here?
Candidate: why do we need to use the payload?
Reference: i think having a single code path might be better here, i.e. have only the fallback? otherwise could be surprised by different behaviour in some edge cases.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: java itemstack s = itemhandlerhelper.copystackwithsize(stack, maxstacksize);
Candidate: can we use <UNK> <UNK> <UNK>
Reference: the exception is never thrown.
Candidate: why do we need to use the <UNK> here?
Reference: suggestion static boolean sanitycheckarenablocksize( long writebuffersize, long arenablocksizeconfigured, long writebuffermanagercapacity) throws illegalstateexception {  line wrapping improvement
Candidate: we should need to do we need need to the jdk <UNK> to way:  if <UNK> { <UNK> = <UNK> <UNK> <UNK> + <UNK> + <UNK> + <UNK> +
Reference: we don't need to explicitly create the system here. just do it behind the scene if needed.
Candidate: why do we need to test properties? for the <UNK>
Reference: would observable.empty() instead and removing the filter part work as well?
Candidate: why do we need to <UNK> the <UNK>
Reference: throw new illegalstateexception(e)? instead ?
Candidate: should we throw an exception here instead of exception?
Reference: suggestion fields.add(new field(this, path, outputsiterator.next()));  the relation of a field must point to the relation who owns the field, which in this case here is the analyzedinsertstatement.
Candidate: doc doc doc gets doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc
Reference: no clue why
Candidate: what happens if the overflows?
Reference: since foreach doesn't use these values, maybe we can avoid sending them back to the caller by simply returning null.
Candidate: why do we need to use <UNK> here?
Reference: it would be good to have another test with isheader()=false, which checks that static_id does not trigger in a non-header file.
Candidate: should this be <UNK>
Reference: for loop?
Candidate: can be replaced with <UNK> <UNK> ?
Reference: instead, start with bot.checkbox("swt.read_only").select();
Candidate: why do we need need to be <UNK> here?
Reference: keep in mind that the transaction is doing closeandcommit but it must be just commit, you might be closing twice
Candidate: should we be the <UNK> properties?
Reference: bit of a nitpick, but could we also log an error so that the exception is not completely silent when jmxfetch's stderr is not redirected to a log? something like
Candidate: why do we need the <UNK> here?
Reference: same issue as above.
Candidate: this is "used"
Reference: i don't think that this loop is doing anything, you're just starting the producertemplate over and over without sending any messages. change this test to use a timer or something
Candidate: the syserr should be be <UNK>
Reference: this means that the callback is now a dynamic reference for the service, i.e. it can (or cannot) come at any time during runtime, while before it was guaranteed to
Candidate: should we throw an exception?
Reference: does this exclude duplicates?
Candidate: why do we need to evict the <UNK> here?
Reference: this is awkward, can't we avoid it by having the proper method in testabletimelockcluster? if it's too much changing around, i guess it's fine, but we are reimplementing the functionality
Candidate: why do we need to test here?
Reference: you can use following instead: list<attribute> attrs = this.getattributes(sess, resource, group); you don't need to addall to existing collection and clear it up right away - it's confusing.
Candidate: please use <UNK> instead of <UNK>
Reference: maybe we should create a common utility function to build eventloopgroups and do not duplicate this kind of code
Candidate: we should use the payload?
Reference: please, make this as diamond and there are a couple patterns.toarray(new string[patterns.size()]) in this class. i guess they are smells on sonar, so would be great to fix them as
Candidate: please remove the method("post")
Reference: instead of having multiple exit points from this method (the two returns), create an empty 'results' before the if, set it in the if, and then return it after.
Candidate: can be simplified to <UNK> <UNK>
Reference: this seems incorrect. imagine a fault detector from one cluster trying to seal a node from another cluster. since a seal message is marked as ignore epoch, the second check
Candidate: should we be <UNK> specific?
Reference: how do we know which classloader to use? i noticed sometimes the classloader of the this object is used, sometimes the classloader of another class is used (like in samzasqlapplicationconfig)
Candidate: should we throw an exception here instead of returning null?
Reference: do we need deletesmsonruim and deletesmsonsim maybe we could pass a parameter instead.
Candidate: should we throw an exception here instead of returning an error?
Reference: sounds to me that if the anchor parameter is null you keep returning false here.
Candidate: why do we need need to check the <UNK> here?
Reference: we are usually using stringutils from apache.commons, this class is already imported here so i think you should use this
Candidate: rename to iu
Reference: this availablelocation should be refactored to its own method, as the same lines are used in several places.
Candidate: why do we need to use <UNK> here?
Reference: please move this clearproperty call to @after to guarantee cleanup even if the test fails.
Candidate: should this be be specific?
Reference: should be illegalargumentexception too
Candidate: @exper0 let's use the exception instead of the try-catch-fail try-catch-fail try-catch-fail
Reference: should we check for endpoint could be null and throw npe ?
Candidate: should we throw an exception exception as far as unsupportedoperationexception?
Reference: i would log this one since it means we have corrupted data in our db.
Candidate: why do we need to use <UNK> here?
Reference: please no :-)
Candidate: why do we need the iae here?
Reference: as i know there is no need to escape single quote inside double quotes
Candidate: why do we need to use <UNK> here?
Reference: so we are trying ten time and logging an error for each time. than when done we return null if we failed! i think we should improve this.
Candidate: should we be the <UNK> here? if we { null) { throw <UNK> } else { <UNK> }?
Reference: public static localdate deserializelocaldate(string datetimestring) throws ioexception { return date_formatter.parse(datetimestring, localdate::from); }
Candidate: please remove the method("post")
Reference: redundant string.format()
Candidate: can we move this into a separate method?
Reference: as mentioned before, we could also have in general a handler function that takes the action to perform and that always logs at the end, instead of having to call
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: not a good idea -- this sets a thread local so could interfere with other tests. also i suspect dynamictasks.queue(anothertask) won't run anothertask because the taskqueueingcontext t here is never
Candidate: this should be the <UNK>
Reference: how about this.systemuserlist = arrays.aslist(accesscontrolsecurityconfiguration.getsystemuserattributevalue().split(",")); and not initializing it at the top instead of creating a temporary list just to add it to another
Candidate: should we be <UNK> here?
Reference: probably uneeded but i remember and old issue with counted loop causing long time to safe point pauses: maybe would be nice to check if the range is too big
Candidate: i don't understand this matters, if you matters, this matters, but i don't understand why, but it matters, but it is be the <UNK>
Reference: i'm not convinced this is really needed to free file descriptors... you don't close bytebuffers, they're only something in memory. anyway, to be safe, we could keep it as it
Candidate: why do we need this?
Reference: not synchronized
Candidate: this should be <UNK>
Reference: this is perfect to me
Candidate: why do we need to check the <UNK> here?
Reference: what's the point of this change?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: the .bagit folder does not have to be hidden. .bagit is our incubating next version of the bagit spec; it solves a lot of problems from the originial spec.
Candidate: what happens if the exception is is the
Reference: !isempty
Candidate: can you use <UNK> paths?
Reference: if you are going to use message with pattern and {} placeholder and parameters after comma, let's use it for each logging
Candidate: why do we need the exception here?
Reference: i would use "get" directly without checking with "containskey", there is no reason generate hashcode twice and search in the map. then you can check "if null" and return empty
Candidate: the syserr should be be <UNK>
Reference: if this event is fired after a delete operation what is the **isinodeindexed** method validating?
Candidate: why do we need the layout here?
Reference: localize please :)
Candidate: please use <UNK>
Reference: all is_null_overhead multiplications seems to deserve a separate commit
Candidate: <UNK> *= 2;
Reference: outputdirectorypath is already a string
Candidate: can be replaced with <UNK> ?
Reference: allocatewriteidevent should take writeids as well to ensure idempotent behaviour in target when apply. better to pass txntowriteid list. also, shouldn't use the regular allocate writeid flow in target. for
Candidate: why do we need need to the <UNK> here?
Reference: why not directly int i = 0?
Candidate: can be simplified to return <UNK> ?
Reference: can you also change the other getsystemadmins() to use this new one with the label = ""
Candidate: the syserr should be be <UNK>
Reference: how about to combine the two methods above (pass null device from the second method and then change the db query according to this field)?
Candidate: please don't see the reason for overriding the code is not tested the tested for the
Reference: should we also allow overriding to false? making this:  java if (enablestacktrace != null)  the same thing applies to enabletrace, but that one seems less straightforward. does it
Candidate: why do we need the <UNK> here?
Reference: for instance.. there' s nothing the client cli can do with a invm acceptor. that's only valid for embedded cases, which is definitely not the case for the cli.
Candidate: you can need need to use <UNK>
Reference: duplicate code, could use a method
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: asserttrue(queues.isempty(), "expecting empty queues but was %s", queues)?
Candidate: why do we need the <UNK> here?
Reference: looks like a great way to validate the onremove event (tricky to do otherwise).
Candidate: i don't understand this matters, if you matters, but you don't need to check whether the <UNK> is the <UNK> <UNK>
Reference: remove useless code
Candidate: this should be the <UNK>
Reference: assigning actualarray to expected as well
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: this works much better :  java string templatename = service.getlabels().getordefault("template", ""); return templatename.startswith("eap");
Candidate: should we throw an exception here instead of returning null?
Reference: with any messages going to the logger where you need to drop a variable, use the replacement syntax. this will save us some unnecessary string concatenation in the cases where
Candidate: nitpicky b/w <UNK>
Reference: how about txbegin() calling txbegin(transactiontype.optimistic)? maybe it is more intuitive that way to implement default parameters.
Candidate: should this be <UNK>
Reference: why don't we keep termination here? since we wait for the safe state, the cluster should have already been balanced before the next instance's termination.
Candidate: nit: can be replaced with <UNK> <UNK>
Reference: create a constant.
Candidate: the syserr should be be called via: <UNK> <UNK> { <UNK> = <UNK> }
Reference: ewald @ewaldgrusk, update is a better way to update one cell of a matrix. and now it should work fine. could you please change all the get/set pairw with update
Candidate: rename <UNK> to <UNK> <UNK>
Reference: the change here causes a regression in legacy switch type clusters. i those clusters the default profile should be one of the management network profiles.
Candidate: can be replaced by: <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: obviously an extreme edge case, but randomarticle will be null if there are 0 articles in the db, right? i guess a 404 is appropriate then?
Candidate: you don't need to use <UNK> <UNK>
Reference: if you're supplying a filename then the disposition should be attachment i think.
Candidate: locally direct: result = ... dst = ... dst = ... dst = ... dst = ... dst = ... dst = ... dst = ... dst = ... dst
Reference: why cast twice to jsonarray?
Candidate: use readasstring(...) instead of <UNK>
Reference: what happens in this scenario, where maxlength = 100 but strlen is set to 110? my question is are these two mutually exclusive? also what happens if equals is set
Candidate: if <UNK> != direction.incoming) { <UNK> }
Reference: i think append("/") has no effect here. project.getlocation().append(selectedrepo) should work.
Candidate: please use the <UNK> modifier
Reference: did you forget to use interactive param? otherwise it seems like yagni.
Candidate: the syserr should be be the
Reference: change
Candidate: do we need need to use the "?" here?
Reference: this seems to be a step backwards, actually. why wrap it as a streamsexception only just to immediately unwrap it again?
Candidate: we should need to do we need to check the the <UNK> <UNK> the <UNK> <UNK>
Reference: nit: unnecessary optimization, else's code would cover that
Candidate: why do we need need to check the <UNK> the threw me if we do, shouldn't we do, we do, why do we need to check the <UNK>
Reference: did you mean for this method to be static?
Candidate: why do we need to check the <UNK> <UNK>
Reference: if the descriptor is null, i think you should just return this (ie keep the property so that it is not lost)
Candidate: please use <UNK> <UNK> <UNK>
Reference: just noticed this one. please unwrap it.
Candidate: this can be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: any reason why you changed this from the default? if no, please revert.
Candidate: why do we need to wait for the clients?
Reference: nit: perhaps, inline this variable
Candidate: <UNK> *= 2;
Reference: please use a proper formatting for this if condition.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: any reason for this integer extraction from score? you can compare scores directly, i couldn't think of a need for this.
Candidate: can we make this private?
Reference: with only one argument, collections.singletonlist(entity) is more efficient.
Candidate: this should be <UNK> to <UNK> the <UNK> <UNK> is not available at all. the moment we don't need to all.
Reference: please also check the exception message!
Candidate: the error message should be the fixture.
Reference: why customer? consider com.google.common.io.resources#getresource(java.lang.string) instead.
Candidate: please use <UNK>
Reference: please avoid the usage of raw types. from the looks of this code it seems that 'provider' will always be of type provider<vmwarevmproviderproperties> (maybe also the 'providers' field?) in case
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: this should probably be in a different pr unless required for this one.
Candidate: why do we need the <UNK> here?
Reference: i think it is better for performance to get the member first, check if it is not null and perform deserialization. also safer.
Candidate: this should be the <UNK>
Reference: try/catch
Candidate: try/catch
Reference: in light of the following policy, please revert this change. ---- please refrain from modifying classes under org.springframework.asm, org.springframework.cglib, and org.springframework.objenesis. those include repackaged forks of the third-party libraries asm,
Candidate: you can use <UNK>
Reference: in this and the disable section, you need to add the second half of the text (jlabel1)
Candidate: why do we need to check for the <UNK>
Reference: @vojtech, would doing an @uihandler make sense here??
Candidate: if <UNK> != null || <UNK> && <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != <UNK>
Reference: shouldn't we pass false if no protobuf entity is indexed? i believe there is support for queries even in that case, throught "brute-force" scanning?
Candidate: why do we need the <UNK> here?
Reference: you don't need to mock this anymore you can set the string and return it.
Candidate: why do we need to mock <UNK> here?
Reference: add a log when there's a malformed url. it helps in debugging issues.
Candidate: please use <UNK>
Reference: why we are retrieving jobs from db here ? why not same transaction ?
Candidate: if we is software software stripe { <UNK> } else { if (throwable { null) { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> }
Reference: the view should know nothing about the data
Candidate: this should be the <UNK>
Reference: at this point, it's not clear if all bytes from src have been read. so, it might be useful to loop through the writes to sslengine until flush() can't write
Candidate: use <UNK> <UNK>
Reference: might want to rename this to "getcrsextent()"
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: should you also call addtobackstack() here?
Candidate: you should need to use the <UNK>
Reference: nit: can we use cachekeybuilder here?
Candidate: rename to iu
Reference: add  @suppresswarnings("unused") // used by jelly @restricted(donotuse.class) // used by jelly
Candidate: should be setemptyelement().
Reference: nit, i believe the latest style file has changed exception throws to non-wrapping. please update your local style configuration.
Candidate: you don't need to use the <UNK> <UNK>
Reference: put it on a separate line with a message like "getpartitionstatistics() returned null".
Candidate: if the host is the host host host host host host host host host host host host host host host host host host host host host host host host host
Reference: i don't think it's a good idea to change this behavior. instead, for the use case where you consider a non-existent requestid to be equivalent to a completed one, you
Candidate: i don't understand this matters, if you matters, but you don't want to check if the is is the
Reference: it's not default in syncthing, 60s is default in syncthing. the suggested value when folder watcher is enabled is one hour, yet in our case it's always one hour regardless
Candidate: can we use the <UNK> here?
Reference: looking at the code below line 289, i think this should be if (!textutils.isempty(customotpapiurl))?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: does waiting 1 millisecond to call setpublications() really help?
Candidate: please use <UNK> <UNK> <UNK>
Reference: null check.
Candidate: the syserr should be be the <UNK>
Reference: please move this to the isloginvalid method instead of removing it
Candidate: if <UNK> != null) { actionreturnvalue <UNK> = <UNK> } { return <UNK> { <UNK> }
Reference: unused parameter - maybe consistent but confusing.
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: not sure i'm following what you're doing here. can you elaborate?
Candidate: <UNK> *= 2;
Reference: why are changes in this class included in this pr? they seem unrelated.
Candidate: i disagree with the rest of the rest of the rest of the rest of the rest of the broadcast the rest of the rest of the rest of the
Reference: create an intent to move on course dates.
Candidate: why do we need the <UNK> here?
Reference: could this cause a performance issue with misbehaved code that calls begintask frequently? to be safe, you could check if the current progressbar has the correct style and omit the
Candidate: please remove method("post")
Reference: use fileutils.mkdirs
Candidate: please remove the <UNK>
Reference: i guess you should update this field always (even if secure is false)
Candidate: please remove the <UNK>
Reference: this is not the same semantics as the original handling of null pathparametervalues with provided a default path if one wasn't specified. as a matter of style, i don't like
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: why not use assertnull and assertnotnull?
Candidate: why do we need to use the here?
Reference: empty string is better, if that works.
Candidate: can be replaced by: <UNK> = <UNK> <UNK> <UNK>
Reference: while i appreciate the explicit-ness, i'd rather this value just be inlined into the method call. if you want to be specific you can do:  java addpathparam(name, value, false
Candidate: why do we need '@override' here?
Reference: prefix should be forgeimpl$, not sponge$
Candidate: can be simplified to <UNK>
Reference: give a duration timeout argument to blockuntilended just in case something goes wrong.
Candidate: please use <UNK>
Reference: good catchm this is not a "path". i wonder if we can somehow preserve the "message" i see that keeperexception has a bad way of dealing with the "exception message".
Candidate: @gunnarmorling gender unecesary should be an exception.
Reference: i'd suggest to make this line shorter, even if it requires many ugly line breaks and string concatenations: checkxmlrequest( "hosts/123/setupnetwors", 200, "<action>" + "<modified_bonds>" + ... );
Candidate: please use <UNK>
Reference: i think the else block needs to be one level out.
Candidate: if oldvalue is null, so we don't want to do we need to do we need to do we need to interact with the <UNK>
Reference: fyi, there is a convenience constructor for volttable that takes a variable number (one or more) columninfo arguments instead of an explicit array. it makes these kinds of changes a
Candidate: <UNK> --> <UNK>
Reference: did you consider using paging for that?
Candidate: <UNK> *= 2;
Reference: this should probably be info at this point?
Candidate: can you move this to <UNK> mapping?
Reference: would you please factor the common logic to assertbigdecimalliteral(string inputtext, string expectedoutputtext)? that would make test much more readable (it won't include repeated builder.makeexactliteral...), and the failure message would be
Candidate: can we hide the iae in the situation.
Reference: why the change? standard syntax would be <player> for required values. typically [player] indicates optional values.
Candidate: why do we need to use the here?
Reference: instead of testing assertthat(d.tojavalist(), is(d.run().tojavalist())); (that only check that tojavalist() is an alias of run().tojavalist()) i think we better test something like assertthat(d.tojavalist(), is(list.range(0, 1000).tojavalist())); (same for below methods)
Candidate: please use <UNK>
Reference: and again.
Candidate: why do we need to here?
Reference: @daisuke-yoshimoto you can use @before and @after annotations on setup() and teardown() public method to reduce boilerplate code in tests for cleanup. it should be enough to rename cleanup() with
Candidate: should we throw an exception?
Reference: remove "this."
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: would be more readable to call the variable readypingmsec too
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: boolean isthefirstpage = startpage * pagelimit == 0
Candidate: please use syserr
Reference: can't getselectablemilestones(allmilestones) be done once at the top?
Candidate: why do we need this check?
Reference: why don't we just pass in filesystemcontext, transactionid, etc into deltashardrewriter? having these two functions is really hard to understand from the interface.
Candidate: storagetype can be simplified to <UNK> <UNK> array.
Reference: consider injecting the discoverclient into the method
Candidate: ![major](<link_0> 'severity: major') log method(s) conditionally. 'severity: major') define an exception conditionally. [![rule](<link_1>](<link_2>
Reference: m -> messagemonitor? u -> unitofwork?
Candidate: the syserr should be be the
Reference: for quay.io and dockerhub i'd like to see a test where 1) a tool has tags with existing records for checksums 2) we do a refresh, but quay.io/dockerhub are slow
Candidate: you can use <UNK> <UNK> <UNK>
Reference: this is 'quark', then you don't need the try-catch.
Candidate: why do we need this?
Reference: there is a typo here: threashold should be threshold (and at other places)
Candidate: should this be the <UNK>
Reference: getlocalservice -> getservice
Candidate: should we be the getconnection here?
Reference: 'null' must be first operande
Candidate: should we use the <UNK> here?
Reference: since we don't use the subs return value here, i would suggest to just call client.executeblocking without storing the return value.
Candidate: i don't understand this matters, if the matters, but this matters, but i don't understand this matters, this matters, but it matters, but i am surprised that it should.
Reference: suggestion throw new tableexception("pandas udaf and non-pandas udaf cannot be used together.");
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> { <UNK> }
Reference: why not do adbhostvalue.len() > 0?
Candidate: do we need the synchronized block? redundant?
Reference: seems to be this whole for is equivalent to footnotemacro.getchildren().clear();
Candidate: why do we need the <UNK> here?
Reference: two ';'
Candidate: please use <UNK>
Reference: imagine we catched an interruptedexception and reached this line. the we still would return true. is that correct? shouldn't we return false here?
Candidate: why do we need to use <UNK> here?
Reference: nit: remove debug logging
Candidate: i don't think we need to call the <UNK> to the <UNK> <UNK>
Reference: actually, the last else is unnecessary, and the last condition i == 100 can be the else clause, because if i < 100 and i > 100 are both violated,
Candidate: i don't understand why, but it is be clearer, but it seems to me to do, but it would be easier to read if the { <UNK> { <UNK> {
Reference: should we not call completionstages.join once for a combined completionstage of the delete and notify operations.
Candidate: please remove the <UNK>
Reference: should this say "refer to" or possibly ", using hadoop config fs"?
Candidate: the syserr should be be the
Reference: small typo in variable name
Candidate: why do we need the <UNK> here?
Reference: nit map<string,string> params = new hashmap<>();
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: should this be logged at an info level as this isn't performing the operation as expected?
Candidate: why do we need need to check the the <UNK> <UNK> <UNK>
Reference: you could make this a simple create table (...)
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: please remove system.out
Candidate: i inspections inspections see inspections inspections sure nervous about using the <UNK> inspections
Reference: since len isn't used outside of this for loop, you can put it in the initialization. for (int i = 0, len = params.length; i < len; i++) {}
Candidate: typo: <UNK>
Reference: in case of holes, tx stream's tail will not be above the stream tail, right? it will be the other way round
Candidate: why do we need the <UNK> here?
Reference: you could replace this line with hassenderannotation=false. then you can extract line 90 to 102 to a method hassenderannotation inside this method the hassenderannotation can be replaced with return statements.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: what happens, if the enddate is null?
Candidate: why do we need to mock <UNK> here?
Reference: this should be environment_uuid, not id. id and uuid are different values
Candidate: can be replaced with <UNK> ?
Reference: we can always use createsnapshot, just change it to accept the initialsize.
Candidate: i think this should be the if the is is the
Reference: the old code also opens websites, which leads to problems with this new code. i think a islink check at the appropiate place suffices.
Candidate: why do we need the <UNK> here?
Reference: unneeded tern (it's always a creeper if it's reading this line)
Candidate: this should be <UNK>
Reference: s/sharable/shareable
Candidate: <UNK> *= 2;
Reference: java if (!keytype.isinstance(requirenonnull(keyobject))) { ... }
Candidate: the syserr should be be <UNK>
Reference: should be: java helper.waitforregistrationatserverside(1);
Candidate: why do we need need to check the <UNK>
Reference: this seems to be redundant - if we reach this point, the lease has been created already, right? so we should not issue another call to add the lease
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: not sure how i feel about having this as a system property. on one hand, it does make some sense semantically, on the other those are typically "broker owned" properties
Candidate: should this be <UNK>
Reference: rather than doing a substring here would it make more sense to use matcher.region() instead?
Candidate: can be replaced with <UNK>
Reference: it could be list.of (master only).
Candidate: should we throw an exception?
Reference: error
Candidate: why do we need need to the <UNK> here?
Reference: core.metacard_tags. could also do filters.allof(filterbuilder.attribute(metacard.tags).is().text(workspace_tag), filters.add(filterbuilder.attribute(queries_attribute).like().text(queryid))); filterbuilder.attribute(queries_attribute).is().text(queryid))
Candidate: use <UNK>
Reference: getparamnames and getargs is only called once. maybe we can refactor this to a getparamarguments method
Candidate: this should be <UNK>
Reference: shall we make '_' a constant? i suppose 'hyphen' can be used for that? that way, if we change the replacement character one day, we'll just need to change it
Candidate: i'm not sure that the location of the other other location of the other location location location location location location location location location location location location location location location location
Reference: i wonder if this should be ~~ or contains ignore case etc
Candidate: can be simplified to: java return <UNK> = <UNK> <UNK> <UNK> { return <UNK> } return <UNK> <UNK> }
Reference: suggestion if ((qualitymod > 0) && (null != tech) && tech.getoptions().booleanoption(personneloptions.tech_fixer)) {
Candidate: why do we need to check the <UNK> here?
Reference: consider breaking the lambda into a helper function.
Candidate: should be schedule() { <UNK> } <UNK> } } } } (throwable e) { <UNK> { <UNK> { <UNK> }
Reference: we don't need the 2nd param(name.length()) in substring.
Candidate: why do we need the <UNK> here?
Reference: updating physics flows water. so this would be a duplicate action.
Candidate: should be be <UNK> here?
Reference: random could be a member variable of this class instead of constructed in various methods
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: wouldn't return null instead of this exception enough for the method contract? as you see in the niofilelocker, you just suppress such an exception any way. so, let's make a
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: jobname is required and should never be null. would prefer to throw (option.get()) instead.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: accessing preferences directly from the parser code is not allowed since ibm uses this code in a headless environment that doesn't support eclipse preferences. you can propagate additional preferences by
Candidate: this should be the <UNK>
Reference: please use parenthesis for for statements.
Candidate: i don't think we need to check if the is is the
Reference: whitespace
Candidate: why do we need the <UNK> here?
Reference: could add a check here that imagename.getregistry() returns indeed docker.jolokia.org ? (i doubt that)
Candidate: why do we need need to the <UNK> here?
Reference: extracting this new action1<networkstatus.state> as a collaborating class will clearly highlight it's dependencies and improve the readability.  static class networkaction implements action1<networkstatus.state> { private final networkstatusdisplayer networkstatusdisplayer; networkaction(networkstatusdisplayer networkstatusdisplayer)
Candidate: i don't think we need to call the <UNK> to the <UNK>
Reference: please review after our conversation
Candidate: use <UNK> directly.
Reference: should this return an unmodifiable copy?
Candidate: should this be <UNK>
Reference: no null check for zone here?
Candidate: this should be the <UNK>
Reference: this could be assertfalse(sharedpreferences.getstring(crashreporter.exception_for_report, "").isempty()); for better readability. this is valid for all further occurrences.
Candidate: assertfalse(...);
Reference: final boolean disallowdoctypedecl = jsfresourcedefinition.disallow_doctype_decl.resolvemodelattribute(context, model).asbooleanornull();
Candidate: shouldn't this be be the exception?
Reference: these are default for bool and int so no need to clarify. suggestion
Candidate: this should be the fixture.
Reference: why not leverage stop(samzaappstatus.failed) up top? i like some additional logs. so maybe modify the stop(...) to include this logs for better debuggability.
Candidate: i don't understand this matters, this matters, this matters, but this is the <UNK> the <UNK> is the
Reference: log?
Candidate: the syserr should be be the
Reference: would it make sense to call flush() here to force the updates to the persistent store?
Candidate: this should be the fixture.
Reference: this types is used only to count them ? and then writeobject + converttolegacy again? surely a mistake
Candidate: why do we need to use <UNK> here?
Reference: instead of shellisactive, use shellisavailable - its safer.
Candidate: why do we need the exception here?
Reference: please chain the expression. we don't need to create a variable here.
Candidate: ![major](<link_0> 'severity: major') remove this unused method.
Reference: this variable looks like a copy/paste thing leftover from the split developer job.
Candidate: why do we need to use the <UNK> here?
Reference: see above - refactor!
Candidate: why do we need the <UNK> here?
Reference: expected value comes first so assertequals(4096, connection.getchunklength());
Candidate: use try-with-resources instead of <UNK>
Reference: hi @fernandacg did you check the length of the edittext so that the warning doesn't get shown when the activity is loaded? i tested this and that is the behavior
Candidate: i don't think we need to check for the <UNK>
Reference: what if groups is empty at this point ?
Candidate: this should be the <UNK>
Reference: whitespace formatting - could you please remove this extra line?
Candidate: we should need to do we need need to hide the <UNK> <UNK> <UNK>
Reference: for consistency, we have never declared to throw illegalstateexception for null checking. i think we should remove it for consistency.
Candidate: why do we need to use <UNK> here?
Reference: properties seems to store data in memory in its own map, is there a benefit to the unitcolors cache?
Candidate: please use <UNK>
Reference: this should be a log entry.
Candidate: if (throwable <UNK> { <UNK> }?
Reference: @fanifieiev it's more it to check if two requests are equals, right?
Candidate: if <UNK> != null) { getparameters().getstoragedomainid() { getparameters().getstoragedomainid() { getparameters().getstoragedomainid()
Reference: add "creator" and "lastmodifier" to the standard_aliases list at the top of this class. these get added to all the criteria used in paginateddatasource
Candidate: please use syserr
Reference: problematic... should first check if the service is a wfs or a features api, that the request is a getfeature or its equivalent in features api, and that the chosen
Candidate: rename <UNK>
Reference: return !disks.stream().anymatch(d -> d.getimagestatus() == imagestatus.locked)
Candidate: please remove the trailing whitespace trailing "/"?
Reference: unused arg
Candidate: why do we need to use the here?
Reference: can remove this line.
Candidate: should we be <UNK> here?
Reference: ditto & throughout code
Candidate: use map<> on rhs
Reference: include trace changes from 1.2 branch
Candidate: should this be <UNK>
Reference: why not use die() ?
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: not sure we should use any public ip even for mock data. replace with private network ip please
Candidate: this poolsize rectangle <UNK> <UNK> expected)
Reference: please have test for null value of targetid.
Candidate: why do we need to use <UNK> here?
Reference: we still need to call to activateparticipants()
Candidate: i don't think we need to synchronize on the so we don't need need to do we need need to synchronize on the <UNK>
Reference: this need to be fixed, i'll get to today. githubevent.repoidentifier should really have a builder. there will be a new release today.
Candidate: this should be the <UNK>
Reference: is there an enum of the existing valid disk types?
Candidate: why do we need to use <UNK> here?
Reference: you can just return builder.build(). we have an opportunity to debug/inspect already.
Candidate: why do we need need to clone here?
Reference: maybe have a for() loop that iterates over a number of iterations and waits e.g. 10ms per loop so that the total time bounded by this test is say, 1s?
Candidate: i don't understand why, but it matters, but i don't understand why, but it matters, afaik.
Reference: how does all replicas being local mean it's a dummy list? only the 2nd half of this predicate is dummy list related.
Candidate: this should be the <UNK>
Reference: define as a constant even if it's used once.
Candidate: should this be <UNK>
Reference: according the method name, shouldn't be the error message more like: "no path of modelname with modelnamespace found" maybe also it is more about illegal argument or illegal state than
Candidate: please remove the trailing whitespace
Reference: @pynicolas why there is no test for truthiness?
Candidate: why do we need the <UNK> here?
Reference: maybe an off-topic, but using longer self-describing file names could be helpful
Candidate: should this be <UNK>
Reference: offer may fail. use componentutils.offeruntilsuccess the locking has been removed in that method <link_0>
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: @hustodemon : please update. here is still the '+' sign missing. correct would be:  kopts = kopts + " self_update=0 pt.options=+self_update";
Candidate: why do we need the <UNK> here?
Reference: the key is offlinetablename instead of rawtablename. also, no need to do check and remove here, directly remove should be good enough suggestion _tableupdaterlockmap.remove(offlinetablename);
Candidate: this should be the cheapest check)
Reference: i think you should do the same thing as hivetableproperties:  hivestorageformat.valueof(((string) value).touppercase(english)
Candidate: please use <UNK> <UNK> <UNK>
Reference: try to keep the case consistent with every other endpoint, let's use camelcase suggestion species, assembly, response)).touri().tostring(), "corevariant");
Candidate: can we use the file name too?
Reference: i don't really understand your calculation here, can you elaborate? btw, i think some simple function like  long rtt = 1000 / request.get() - hostsleeptime; hostsleeptime -= rrt 
Candidate: please remove the <UNK>
Reference: does getjenkinshome() always return a valid jenkinshome here? just asking, to make sure it does; you know best.
Candidate: please use <UNK> <UNK> <UNK>
Reference: this method could instead return class mobileelement. return new mobileelement(element, driver); then all the elements returned by complexfind can be easily cast to mobileelement. additionally, can we have all the
Candidate: why do we need to use the <UNK> here?
Reference: shouldn't it be "decryption of security keys..."?
Candidate: typo: <UNK> (check for 422
Reference: hmmm wonder if there is a better way to do this.
Candidate: should we throw an illegalargumentexception if <UNK> == null) { throw new <UNK> } { throw new <UNK> { throw new <UNK> { throw new <UNK> { return <UNK> }
Reference: deprecated, use this itmftreedatamodel model = ((timegraphentry) entry).getentrymodel();
Candidate: i don't think we need to check the <UNK> <UNK> <UNK>
Reference: need to verify that 'getsanstoragemodelbase' is not null, as we set it only for block domains
Candidate: can be replaced with <UNK> <UNK>
Reference: this logic appears to be duplicated three times, any chance this could be abstracted? possibly a method that takes flux<bytebuffer> and returns mono<tuple2<contenttype, flux<bytebuffer>>.
Candidate: if (trace) { groupname }
Reference: is riding?
Candidate: this should be the <UNK>
Reference: for undeploy, do we need to retrieve any info
Candidate: the syserr should be be the
Reference: we should use the string variant of function for simplicity: suggestion .value("user", function("fromjson", literal(alice, user_codec)))  the examples already do for everything else (table name, bind marker, etc).
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> the <UNK> is the
Reference: logger will never be null. don't need the null check here.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: shouldn't log and skip. just let the exception propagate, it should be handled by mapreduce.
Candidate: i don't think we need to throw an exception
Reference: can this log statement contain a message, changed to debug level, or be removed?
Candidate: i don't think we need to do we need need to use the in <UNK>
Reference: i think i agree with you do not shift the this.sendtopipe(rawbuffer); to new thread, because we block the current thread with latch.await(this.pipetimeout , timeunit.milliseconds) just after submition anyway.
Candidate: why do we need the getconnection here?
Reference: instead of keeping track of readbytes you can use bytestreams#limit
Candidate: ![major](<link_1> 'severity: major') remove this unused method. [![rule](<link_2>](<link_0>
Reference: same as above, an explanation for some exception will be useful
Candidate: why do we need to the the clients?
Reference: spacing
Candidate: use <UNK>
Reference: add message "renewer in " + ids
Candidate: why do we need to use <UNK> here?
Reference: you don't need 'this' in waitforelementbyelement method. we are not using it so please remove it to have consistency inside the repo if there is no specific reason for adding
Candidate: should we use the clients?
Reference: there isn't really a need for any unset as each check against the clockbit (observed) should reset the clock bit.
Candidate: should this be null?
Reference: @raphaelln minor: usually we use matchers.is
Candidate: @raphaelln let's pay attention here too,
Reference: why are we throwing generic exceptions, shall we only throw relevant exceptions
Candidate: should we use the exception here instead of eating the exception
Reference: errors should be properly logged, and not just printed to the system error.
Candidate: should we throw an exception here instead of eating the exception?
Reference: this is totally out of topic because you just move this if block from coapendpoint to basecoapstack but i can not get the point of it.
Candidate: why do we need to use <UNK> here?
Reference: why "next"?
Candidate: please use <UNK>
Reference: hi @sureshanaparti, could you please use collectionutils.isempty? it checks if the list is empty, returning true in case of null. (<link_0> thanks.
Candidate: the syserr should be be the
Reference: also reject query for field name **id** which is a reserved keyword for all id fields.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: indices, not indeces
Candidate: <UNK> *= 2;
Reference: nitpick: this class should have only one public method: upgradestorageconfig
Candidate: should we throw an exception here instead of eating the exception?
Reference: please change the code to match how it is now replaced. i just wanted to be sure that there was no exception thrown here.
Candidate: i don't need to check if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> {
Reference: please implement tostring() to provide debugging state information for debugging purposes.
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: can be removed as expectassertionerror already checks that
Candidate: why do we need to use <UNK> here?
Reference: methinks this should be false not true
Candidate: should we be the <UNK> here?
Reference: empty lines...
Candidate: you should need to use the for the headers, but it will be easier to read.
Reference: we miss an assertion that the retrieved node name is "replacement"
Candidate: why do we need the <UNK> here?
Reference: make this synchronized, just in case
Candidate: hmm. this should be the fixture.
Reference: you can remove the leavingservers variable and pass null here. same in the other test
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: why change the default sql type for datetime items in this pr?
Candidate: i don't think we need to do we need to check the <UNK> <UNK> the disk,
Reference: ohh interesting. is it not mandatory in the swagger? or what changed? a regression?
Candidate: why do we need the layout here?
Reference: optional: replace these system out with log statements
Candidate: why do we need the <UNK> here?
Reference: whats the urlclasspath definition for file archive? in the past we had .zip accepted. years ago but would check against the urlclassloader.
Candidate: typo: <UNK>
Reference: it looks like this is impossible, based on the implementation. if so, this should be assertionerror, which represents the programmer's assertion of it not being possible, on the assumption that
Candidate: should we use the exception here?
Reference: this line should not contain any whitespace symbols.
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: 'needs 2 _arguments_', plural
Candidate: should be be <UNK>
Reference: as the next line is finputhandler.save(...) and text and model are synchronized, is there really a need to save the textual editor as well?
Candidate: this should be the <UNK>
Reference: still using assert here
Candidate: should this be <UNK>
Reference: you can put shutdownnow() to the finally block.
Candidate: this fail()?
Reference: what are some examples of these task names that should be ignored? contains "idea" (any capitalization) seems like it could match unintended stuff, like "semidead" or "mideast" :-)
Candidate: why do we need to here?
Reference: use a logger or remove this.
Candidate: i don't think we need to hide the exception in the software exception we don't need need to do we need need to do we need need to the the
Reference: euh ... do you test if "harmonization study id cannot be null or empty" is null or empty ? did you test your code ? ...
Candidate: why do we need to use the <UNK> here?
Reference: add @override. same with afterexecute.
Candidate: should we use the exception here?
Reference: this line/var is unused.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: you're using this pattern a lot. versioning.getversionordinal() is going to possibly create an unknown version object and then getknownversion() is going to throw it away. is there a way to
Candidate: why do we need the <UNK> here?
Reference: camel case variable names
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this is incorrect place for command
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: hmm, i honestly don't know if the "&" should be here or in the reviewed constant?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: mapping could not be null at that time anyway since it is used one line above
Candidate: can you double-check the shader of the <UNK>
Reference: 1. add the border size to log as above 2. also think about need of taking screenshot here and in the below methods
Candidate: why do we need to call <UNK> <UNK>
Reference: something fishy here - the 'reinitialize' field is redundant?
Candidate: why do we need need to the <UNK> here?
Reference: instead of using contains("account location url") here, the account constant could be used instead (i.e., contains(account)).
Candidate: why do we eating the exception here?
Reference: use checknotnull or java requirenonnull
Candidate: why do we need the <UNK> here?
Reference: .map(this::splittofilenameandovf)
Candidate: should this be the <UNK>
Reference: could be return parents.stream() .map(doc -> doc.getadapter(bundlegroup.class)) .filter(objects::nonnull) .map(bundlegroup::getid) .collect(collectors.tolist());
Candidate: nitpicky <UNK>
Reference: is this method being called often? should we surround with if (logger.isdebugenabled())?
Candidate: <UNK> *= 2;
Reference: should probably be integer.valueof(100) purely for consistency reasons.
Candidate: h can be 83
Reference: start < end is verified pre-condition already?
Candidate: <UNK> *= 2;
Reference: isn't this going to be slow on low end devices?
Candidate: why do we need the <UNK> here?
Reference: you can use assertthat(array).hassamesizeas
Candidate: this should be <UNK>
Reference: _id could be a combination of both attributes, to ensure consistency even when not enforced by the application layer.
Candidate: please use <UNK>
Reference: seems we can specify arraylist size in constructor above to avoid performance and memory overhead, though not a big deal.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: this could be protected or package-private.
Candidate: this you iu
Reference: nit: as a matter of style, i think it's better to either always include braces on each branch of an if-else, or to never include them. (otherwise it's easy to
Candidate: i don't understand this matters, this matters, this matters, but you don't need to use the <UNK> <UNK>
Reference: i think with this you can just use new object() and synchronize on that object
Candidate: please remove the method("post")
Reference: hm... why two? where did you get this number?
Candidate: @hdouss why 16?
Reference: not good; this blocks the ui thread. no point running the operation in a background job then.
Candidate: should we be implemented?
Reference: i think we should create a defensive copy of the map
Candidate: why do we need to use the <UNK> here?
Reference: same here - remove the catch block.
Candidate: this fail()?
Reference: what is the purpose of passing it as an http url here? i believe there are parsers already in geode for splitting host:port.
Candidate: can we make this private?
Reference: minterstitialcontext should probably be cleared here.  if (minterstitialcontext != null) { minterstitialcontext.clear(); minterstitialcontext = null; }
Candidate: if (state != null && <UNK> { <UNK> }
Reference: could you clarify how does this change help?
Candidate: should we expecting the exception here?
Reference: i have some doubts about variable name. checkstyle should shout about it.
Candidate: please import?
Reference: could you replace this if by  optional.ofnullable( this.states.get( source ).meshmanagerproperty().get() ).ifpresent( meshmanager::removeallneurons );  maybe in the future we will have meshmanagers for non-label sources.
Candidate: if the is is empty?
Reference: this (and others using scantarget) could be just package visible to not expose scantarget, the methods with the id of the scan should be enough.
Candidate: why do we need need to the <UNK> here?
Reference: suggestion final map<slotrequestid, slotexecutionvertexassignment> slotexecutionvertexassignments = createslotexecutionvertexassignments(executionvertexschedulingrequirements); final map<executionvertexid, slotrequestid> executionvertexslotrequestids = slotexecutionvertexassignments .entryset() .stream() .collect(collectors.tomap(e -> e.getvalue().getexecutionvertexid(), map.entry::getkey)); final list<completablefuture<physicalslotrequest>> physicalslotrequestfutures = createphysicalslotrequestfutures( executionvertexschedulingrequirements, executionvertexslotrequestids); allocateslotsforassignments( physicalslotrequestfutures, slotexecutionvertexassignments); return
Candidate: why do we need need to the <UNK> here?
Reference: similarly to the cases above - the review and bug pattern share error reporting
Candidate: this should be setemptyelement().
Reference: this is the case at startup, right? maybe just == -1l instead?
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: add 8 bytes for the key
Candidate: why do we need the <UNK> here?
Reference: you should use the defined constant here.
Candidate: this should be setemptyelement().
Reference: it is a bad practice to catch throwable (can cause maintenance issues if api changes to have new caught exceptions, or later you want a caught exception to bubble up).
Candidate: <UNK> *= 2;
Reference: no need space before new line can we avoid new line in this case?
Candidate: should we be <UNK> to <UNK>
Reference: why not just use atomicboolean.getandset()?
Candidate: this should be the <UNK>
Reference: i would usually discourage doing any real work in a constructor. this often can cause bugs because when the constructor throws an exception a partially initialized class often will not
Candidate: why do we need to check the <UNK>
Reference: can just use new runnable() {...} so don't need a return.
Candidate: why do we need need to the <UNK> here?
Reference: this can use immutabledatacachingutil
Candidate: this should be <UNK> year,
Reference: it could be more optimized to following function.  @nullable private static uri getfileurifrommediastoreuri(@nonnull context context, @nonnull uri photouri) { final cursor cursor = context.getcontentresolver().query(photouri, new string[]{mediastore.images.imagecolumns.data}, null, null, null);
Candidate: if the != null && <UNK> { <UNK> }
Reference: again, might not be public
Candidate: should we use the <UNK> here?
Reference: no need for null check.
Candidate: should this be null? if we { null) { return <UNK> } { return <UNK> } { return <UNK> }
Reference: optional.orelsethrow
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: is there a case that the firstkey is null and the rest are not?
Candidate: why do we need to iso <UNK> here?
Reference: is timeoutexception possible? i noticed the pool is busy exception is a connectionexception.
Candidate: <UNK>
Reference: use the config from the hbtu? maybe new configuration(test_util.getconfiguration())
Candidate: i don't think we need to do we need need to print the exception here?
Reference: let's use setpositivebutton here instead. there's no special motivation for it, but i think google styles the positive one with the primary colors
Candidate: can we use the <UNK> here?
Reference: spotbugs is flagging this line:  [error] dead store to worker in org.apache.druid.indexing.overlord.remotetaskrunner.streamtaskreports(string) [org.apache.druid.indexing.overlord.remotetaskrunner] at remotetaskrunner.java:[line 651] dls_dead_local_store
Candidate: why do we need snapshotid here?
Reference: can we initialize the new arraylist<>() with same size as list 'metrics'. this will save on resizing cost which includes array copy operation.
Candidate: why do we need the <UNK> here?
Reference: why getting through a test here? owner = excludee in both cases
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: can we have final variables for 80 and 443 ? the variable should have a clear name that indicates that these are the default ports.
Candidate: this should be the <UNK>
Reference: pretty sure this is only used during the setup wizard, so doesn't need the permission check changed.
Candidate: why do we need need to evict the <UNK> here?
Reference: what happens if its not a configurableapplicationcontext? probably better to take a class cast exception. it should never happen, but we don't want this to silently fail.
Candidate: should we be the <UNK> here?
Reference: since userdirectory is known outside the for loop, you could get the canonical path and store it in variable for comparison in the if statement. also, having an empty if
Candidate: can we be simplified to: java if <UNK> == null) { <UNK> <UNK> <UNK> = <UNK> <UNK> }
Reference: again, initial capacity should be specified. or use linkedlist
Candidate: why *= 2; the payload?
Reference: we should turn the auth system back on after creating the test data.
Candidate: you can use assertequals
Reference: :+1: using coderresult looks good approach to me.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: same here - duplicated code.
Candidate: @unyoungwax, do we need to check the <UNK> <UNK> <UNK>
Reference: the method name is weird. this.isreadallowed might be better.
Candidate: why do we need need to the <UNK> here?
Reference: i think this should be something like baf.setlength(baf.getlength() - lastlen)
Candidate: <UNK> evidence, overflows?
Reference: make this if the other way round. check for the positive condition and have the negative one in the else. it makes it more readable
Candidate: this should be (throwable <UNK> { return; } (throwable e) { <UNK> { <UNK> { <UNK> }
Reference: what happens to an iterator instance extant over a fail-over? i'd expect a "nice, clean" termination on the next next or hasnext call. i see that org.ehcache.clustered.iterationfailurebehaviortest has a test
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: i can see that this is taken from the way that wavelengtheditor works. in fact it pains me to admit i'm originally responsible for this suggestiblestring business and the fact
Candidate: can we use the <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: you can not put person via storiosqlite.put() because it will be recursive, so you need to use storiosqlite.internal(), but you can use storiosqlite.put() to put cars.
Candidate: @since
Reference: could we change this back to the error_not_integer constant? geode redis should return the same errors as redis.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: unnecessary throws (same for the constructor above).
Candidate: why do we need the <UNK> here?
Reference: if follows the top code, we can use pageviewcallback.getonbardingpageview()
Candidate: why do we need to permission?
Reference: some logic is repeated in the if-elseif-else. can be simplified as  if (!isshutdown.get() && connection.isusable()) { ... } else { ... }
Candidate: i don't think we need to check the if the is is the
Reference: why do you need this.?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: could you add something like "for patchsetid: " + psid.tostring() to this message, and any other pertinent detailed info to the other messages if appropriate?
Candidate: should we throw an exception here instead of returning an error?
Reference: value size, instead of key size in a message
Candidate: table table table table table table table table table table table table table table table table table table table table table table table table table table table table table table
Reference: suggestion logger.debug("connection[" + index + "] is lost. reconnecting to resume...");
Candidate: i don't think we need to check for the <UNK>
Reference: can we use default builder by default and hide this argument?
Candidate: remove the contents of the contents of the contents of the contents of the contents of the contents of <UNK>
Reference: name of the template should be more explicit.
Candidate: please use the syserr
Reference: not worth using the switch
Candidate: can we use the <UNK> <UNK>
Reference: you could instead use:  addenricher(enrichers.builder() .propagating(redisstore.hostname, redisstore.address, redisstore.subnet_hostname, redisstore.subnet_address, redisstore.redis_port) .from(master) .build());
Candidate: please remove the <UNK>
Reference: remove
Candidate: should we throw iae if iae is an iae exception?
Reference: null check?
Candidate: can be simplified to <UNK> <UNK> ?
Reference: these two methods should be the same name with the exception of prev/next suffix.
Candidate: the syserr should be the <UNK>
Reference: is this try necesasary to test the casting, im not sure i like the construct i would prefer to use instanceof
Candidate: should we throw an exception here?
Reference: how is this happening?
Candidate: why do we need need to the <UNK> here?
Reference: java // todo java 7+ use chained exceptions
Candidate: i don't think we need to do we need to synchronize on the <UNK> we don't need need to do we need to synchronize on the <UNK>
Reference: the value should still be read from the activeconfig instance, to allow for per-world overrides.
Candidate: you need to use the <UNK> <UNK> <UNK>
Reference: shouldn't this go to the log, at debug level?
Candidate: should we be the username?
Reference: @gmandnepr indentation still needs to be fixed here
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. 'severity: major') invoke method(s) conditionally. [![rule](<link_1>](<link_2>
Reference: could task be null here?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: no need to use uribuilder
Candidate: no need to use uribuilder
Reference: the default for the managed param is true, so you can just miss that out i think.
Candidate: please use <UNK>
Reference: same as above, a bit hard to read
Candidate: this should be <UNK> often, so we don't need to use the top-level query.
Reference: we have a nullchannel implementation that does what you want here. use that instead.
Candidate: should be be the <UNK>
Reference: please, fix
Candidate: why do we need to check for the <UNK> <UNK>
Reference: i believe it would be good to return boolean to signify the success of this method invocation.
Candidate: please use fail(); in <UNK>
Reference: return value of the method is never used.
Candidate: why do we need the <UNK> here?
Reference: a single variant is not enough to convince readers that the use of (  "call", args) works correctly as varargs. i would expect to see closures with zero, one,
Candidate: why do we need need to the <UNK> here?
Reference: good it is the way
Candidate: should we be the <UNK> here?
Reference: it looks like we still need to cancel the pingtask in the receiver. add lifecycle ? what about closing the folder?
Candidate: should this be <UNK>
Reference: i prefer:  java if (genericutils.length(owner) > 0) { continue; }  i don't think "empty" owner are expected, and even if they are imo they are the same as
Candidate: can we be **log** here? if we { null) { return <UNK> } { else { <UNK> { <UNK> { <UNK> } <UNK> { <UNK> } } }
Reference: why not call onbind first (i.e. in line 83)? do we conflict with something?
Candidate: this should be the fixture.
Reference: (first).hassize(3);
Candidate: why do we need the <UNK> here?
Reference: as the initialized list is an immutable list, this method should make save, that the provided list is made immutable too, in order to give a uniform behavior after replacing
Candidate: should this be <UNK>
Reference: wouldn't make more sense to push this down into retryingreadrowsoperation so that we don't have to duplicate this for callback api?
Candidate: i don't understand what about the remember, the the reason that the <UNK> is the the <UNK> <UNK> (especially when the said (especially when the said (especially in the
Reference: shouldn't a similar check be implemented for byte, short, integer, etc? this isn't a special case, just range check.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: use try-with-resources so you don't need to manually close the session.
Candidate: why do we need the <UNK> here?
Reference: pass nfe as the cause (third param) to restclientexception
Candidate: should we use the <UNK> here?
Reference: could you please use window.getshell().getdisplay() instead of display.getcurrent()?
Candidate: widget itemdefinitions() (underscore) itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions() versa)? itemdefinitions()
Reference: why do we need to interrupt the current thread? wouldn't throwing runinterruptedexception be enough?
Candidate: this should be the <UNK>
Reference: this is going to break when the menu changes in future. may be write a function that can find an item and click it irrespective of menu content? e.g. clickmenu(string...
Candidate: if we is the software <UNK> software <UNK> of the <UNK> is the software itemstack.
Reference: stringutils.substringafter
Candidate: why do we need to fileinputstream here?
Reference: formatting
Candidate: this we remind me that we expecting an exception on the exception
Reference: suggestion + " characters should be renamed to conform to a "+max_namespace_len+" character limit. "
Candidate: why do we need to use the <UNK> here?
Reference: missing <>, this is a raw type.
Candidate: please use <UNK>
Reference: why not use specific constructor instead of invoking setter later on existing object? getfilteredandsortedparameters params = new getfilteredandsortedparameters(max, queryhelper.parsepagenum( queryhelper.getconstraint(httpheaders, uriinfo, "", modeltype);));
Candidate: should we be the <UNK> here?
Reference: why did you remove the lambda
Candidate: why do we need the <UNK> here?
Reference: let's use a proper if/else statement here please.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: more on code quality discussion: studentfeedbacksubmissioneditquestionswithresponses/feedbacksubmissioneditresponse  are something related to ui while the method actually should check whether the data exist or not. if u take a look at
Candidate: this should be setemptyelement().
Reference: passwords should usually better not appear in log files - and it also makes no sense to have it as a warning. i'd suggest to either remove it or reduce
Candidate: do we need need to do the "?" here?
Reference: let's check that a snapshot was created with provided name.
Candidate: please remove the following node.
Reference: the context is not closed correctly in this method (it is done in the invoked saverelations) better commit/complete here. a proper exception handling is required to avoid future connection leaks
Candidate: please use <UNK> <UNK> <UNK>
Reference: .orelse("failed")
Candidate: why do we need the <UNK> here?
Reference: in that case i'm definitely need to use alluremain.class.getclassloader(). the resource that i need to unpack is located in allure-bundle.jar, and available from classloader that loaded alluremain
Candidate: why do we need to here?
Reference: this assumes annotations will be the first children among modifiers, but that may be false. public @override static @postconstruct void foo() { } is completely valid java code.
Candidate: please use <UNK> <UNK> <UNK>
Reference: getindexdiffcacheentry() can return null
Candidate: can we use the <UNK> the <UNK> generation?
Reference: tapping enter on an empty checkbox line removes the checkbox as expected and moves the cursor to the next line, which i wasn't expecting at first. i thought the cursor
Candidate: <UNK> *= 2;
Reference: extract try and catch blocks into separate methods? as a rule of thumb, try to keep constructors simple. similarly, see if this if statement can be extracted out.
Candidate: clean system.out + + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: s.a.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: can you use matcher.appendreplacement() to simplify this? <link_0>
Candidate: we should need to evict the in the request?
Reference: aren't the \n and \r supposed to be doubly escaped like the \\s below? shouldn't we be splitting based on the java platform line delimiter instead of assuming dos/windows?
Candidate: can we use stringbuilder?
Reference: assertthat(related).isempty();
Candidate: please remove the <UNK>
Reference: line 61 on line 60 and align with parentheses in arcbees's projects
Candidate: why do (args.length > 0, 0?
Reference: throwing these two exceptions on their own line like this is a bit neater to read than wrapping like above
Candidate: why <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: some html elements with other class?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: i'm obviously missing something, but it seems to me to always be a map?
Candidate: i don't think we need to check if the is is the
Reference: any specific reason to enforce the fairness?
Candidate: why do we need to permission?
Reference: why do we need compensation data here?
Candidate: this should be the <UNK> part, the the <UNK> part, should be be the <UNK>
Reference: if there's an exception being thrown, we should be at least logging information about the exception. otherwise, there's no way to troubleshoot what's happening without attaching a debugger.
Candidate: should be precise, we use <UNK> here?
Reference: assert that it actually contains the just created snapshot?
Candidate: this should be the <UNK>
Reference: suggestion .stream() .map(userrole::getname) .map(simplegrantedauthority::new)
Candidate: we should need to throw an exception if <UNK> { throw nullpointerexception if (throwable groupname = <UNK> } null) { else { throw new <UNK> { <UNK> }
Reference: possible npe ''' gerritserver server = getserver(servername); if (server != null) return server.getconfig(); else { return null; } '''
Candidate: modifier) instead of runquery() stepverifier
Reference: consider extracting this into its own function called addbuyordertoorderbook or perhaps just addbuyorder
Candidate: can you use <UNK> here?,
Reference: here it breaks the format.
Candidate: typo: <UNK> objects.tostringhelper()
Reference: as already noted in other commits, looks like npe?
Candidate: should we move this to the <UNK> the <UNK> <UNK>
Reference: more english. all three lines above.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: is there a better place to hold this code or can we introduce one, now that this code becomes much longer?
Candidate: can we check if the != null) { return false; }
Reference: use simple for loop instead of foreach
Candidate: <UNK> *= 2;
Reference: this could be made into an immutablelist
Candidate: please use <UNK>
Reference: old code looked ok, i think druid codebase style is to keep parenthesis on the same line except for class/method opening.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: build_tools_version?
Candidate: this should be <UNK>
Reference: attach the geoelement to the callout. this will allow for the callout leader position to follow the symbol offset above: java // set the leader position and show the callout
Candidate: this should be the <UNK> <UNK> <UNK> the presenter.
Reference: i'm missing an else here. is there a situation where this condition is _not_ going to be true? if there is, the fl switch doesn't work? if so, maybe we
Candidate: <UNK> <UNK> objects.tostringhelper() warning: <UNK> of the <UNK> lgtm
Reference: add generic
Candidate: this should be <UNK>
Reference: duringactivities()
Candidate: the syserr should be be the
Reference: you don't need to typecast if you change it to int.
Candidate: why do we need the <UNK> here?
Reference: would the following also work? java if (driverpool.isempty()) { return new driversetup().instantiatedriver(); } return driverpool.remove();  it feels safer to limit the number of interactions with driverpool.
Candidate: this should be the <UNK>
Reference: ? we would have gotten a classcastexception above.
Candidate: should we be the <UNK> here?
Reference: maybe extract thread.currentthread().getname()? then you can use a format string (and avoid string cat when debug isn't on)
Candidate: the syserr should be be the
Reference: i am not sure should we care about the scenario here, where in case of exception while executing _invoker.invoke(invocation)_ , should we remove timeout_filter_start_time from attacchment ? i think this
Candidate: should we be warn here and error..." to "...had an error..."
Reference: this should be a method in pki. depending on the intermediate ca the chain file name "ca-chain.cert.pem" might differ
Candidate: why do we need moreobjects here?
Reference: looks like previously created internalenvironment should be used instead of the creation of the new one.
Candidate: what is this a reason for this to <UNK> <UNK>
Reference: delete
Candidate: why do we need to use <UNK> here?
Reference: need to implement
Candidate: <UNK> evidence, overflows?
Reference: this logic should be within enginesshclient
Candidate: should we be the <UNK> here?
Reference: there have been quite a few formatting changes where the formatting isn't necessary, when you go back to using wrappedserializabletxmanager i'd expect all of these to disappear
Candidate: please use syserr
Reference: looks like wrong fix
Candidate: why do we need to check the <UNK> here?
Reference: lets remove these type of new lines.
Candidate: should we throw an exception exception?
Reference: call bytebuf.release() and also add assertfalse(ch.finish());
Candidate: please bytebuf.release()
Reference: could the method use the countinputstream field instead of a local variable? as in:  countinputstream = new countinputstream(csvsource);
Candidate: please use <UNK>
Reference: add pagelogging
Candidate: this should be the <UNK>
Reference: we should make this immutable to allow manipulation only via the caffeinecache class.
Candidate: should we throw an exception?
Reference: perhaps using getdimensionpixelsize would make it more obvious that pixels are returned. i remembered you rightfully complained about this method in slack.
Candidate: shouldn't this be the setup() ?
Reference: modelmapper and userrepository invocations are not verified
Candidate: please remove the method("post")
Reference: there won't be any remote keys in the common case; therefore this array should not be allocated ahead.
Candidate: if you are going to evict like... if <UNK> { <UNK> <UNK> = <UNK> ?
Reference: new missingtablayoutid**exception**()
Candidate: should this be be the <UNK> ?
Reference: this is the kind of _set_ that you will not see coming should this not behave as expected and you start looking. i wonder if there is a better way
Candidate: can we use <UNK> <UNK> <UNK>
Reference: potential null pointer exception since we have remove the value != null check. we should check valid string values using stringutils.isnotblank method.
Candidate: can we use this logic? if it's easier to read. if we && null) { .. } { <UNK> }
Reference: avoid using null as much as possible.
Candidate: why do we need to check the <UNK> here?
Reference: storing either the config or the defaulthistory period should be enough- doesn't look like there's a need to store both
Candidate: please use <UNK>
Reference: i would prefer you'd use a named constant instead of putting true in there. so what i am suggesting is adding a private static final boolean refire_immediately = true, which
Candidate: the syserr should be be the
Reference: why not return a list of strings instead of a list of single-item maps that all have the same key?
Candidate: why do we need the <UNK> here?
Reference: remove this line. changedetailfactory seems not to be needed any more and can be deleted. the only using files seems to be patchdetailserviceimpl.java, but there it is also not used
Candidate: this should be done in the <UNK> the <UNK> still, this method should be done in the <UNK>
Reference: these method have to much arguments already: just give it an ivaluemap and write all out to the tag.
Candidate: should this be the <UNK>
Reference: and will spare this null check.
Candidate: i don't think we need to check the if the is is the
Reference: please dont remove explicit initialization
Candidate: why do we need to use <UNK> here?
Reference: this isn't correct. if fail() throws assertionerror, you'll get a stack trace but the test will pass. it's ok to declare the test method "throws exception" - this will result
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: could we verify there are no constraints instead of removing this row?
Candidate: why do we need to use <UNK> here?
Reference: formatting
Candidate: should this be <UNK>
Reference: ...the base choicecallback might be used by a mechanism and should be tested for; furthermore, there are other subclasses of choicecallback (like realmchoicecallback) which might interfere with correct operation of
Candidate: i don't think we need to do we need need to check the the <UNK> the <UNK> <UNK>
Reference: maybe we don't even need a passthrough filter, and just use null and do delegate == null ? chain.dofilter(request, response) : delegate.dofilter(request, response, chain) to avoid adding more delegation and
Candidate: should (actual != null) ?
Reference: local variable should be camelcase not fcamelcase
Candidate: can't both both both both both both both both both both both both both both both both both both both both both both constructor (or both both both both both
Reference: i don't think this change should be made. this is the same as the host remove discussion we chatted about before i realized the host remove didn't require reload: 1)
Candidate: can be replaced with <UNK> ?
Reference: instead of setting styles on the element like this i suggest you use css classes. for instance create a .css under src/main/resources/org/ovirt/engine/ui/common/css lets say 'validation.css'. in the css file do
Candidate: should we be the <UNK> here?
Reference: you can express it in pattern argument of extend.
Candidate: this is be the <UNK> <UNK> <UNK>
Reference: are you hiding an issue?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this construct causes "createheadtoken" to be called upon each call of "createtokenat". that may be an expensive operation. please use orelseget(this::createheadtoken) instead.
Candidate: why do we need the <UNK> here?
Reference: is this an outside case or are we using exceptions as control statements?
Candidate: why do we need the <UNK> here?
Reference: will existing code handle this runtimeexception properly ? what about throwing a ioexception ?
Candidate: why do we need to here?
Reference: please test this value not by metric registry, but by jmx
Candidate: use <UNK> instead of <UNK>
Reference: it would be good to have an info message here that the listener is stopping.
Candidate: should this be <UNK>
Reference: resetflowcountaftersave, the "s" is not needed.
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: this doesn't check accepts anywhere which could cause strange problems
Candidate: should we be the <UNK> here?
Reference: these methods have associated commands in datadog-agent (stuff like datadog-agent jmxfetch list-matching) that is expected to print to stdout always, as it's a debugging command. these logger.debug changes, unless i'm
Candidate: why do we need to the sizes of the sizes properties?
Reference: question: what scenario can lead to a null cacheattribute?
Candidate: why do we need to check for the sides of <UNK>
Reference: i guess pattern can be shared as public static final field with other classes/tests to prevent copy/pasting and possible issues in the future.
Candidate: why do we need need to the <UNK> here?
Reference: nit, pass the periodictriggerinterval to initrefreshtask() and do the branch inside. that makes this code cleaner.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: did you need to check to make sure the invalid part didn't make it in?
Candidate: why do we need to use <UNK> here?
Reference: generics: iterable<object>
Candidate: what happens if the is is invalid?
Reference: pls. use a separate method for this or rename this one to indicate that it is doing this, too
Candidate: can we decided to the the exceptions?
Reference: does the querying stuff generate caches which have no configuration?
Candidate: why do we need the <UNK> here?
Reference: why aren't we just getting this live each time? it doesn't feel like this is a super expensive call?
Candidate: this should be setemptyelement().
Reference: indices == null && indices.length != 1 is wrong, do you mean || ?
Candidate: should we log the exception?
Reference: these look like testing remnants. :)
Candidate: nit: you can use braces around single line blocks
Reference: you can avoid one lookup like this: string path = pathcache.get(key); if (path == null) { ... } return path;
Candidate: we should need to raise an exception if (throwable { throw new <UNK> { <UNK> }
Reference: could we make this a subclass of runtimeexception so that if folks want to catch it for whatever reason they needn't parse the message. alternatively, maybe we should add an
Candidate: should this be the <UNK>
Reference: logger.warn()?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need to do we need to the
Reference: just seen that this "key id formatting convention" is applied everywhere. better create a static helper randomkey() to generate the key ids?
Candidate: why do we need need to the <UNK> here?
Reference: all the same stuff applies here. note that you could separate the loading out into its own function.
Candidate: i don't think we need to do we need need to the the in the
Reference: probably this iterables.getonlyelement(ll) needs to be (machinelocation)machine.get()?
Candidate: lets catch <UNK> lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets lets
Reference: another opportunity for a nice stream pipeline.
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: i note below that this is a hack. this is an unnecessary data conversion which will create performance issues on large files.
Candidate: if <UNK> == direction.incoming) { return false; }
Reference: can be simplified streamname = getphysicalname().orelse(getstreamid());
Candidate: can you use the <UNK> <UNK> <UNK> <UNK>
Reference: the systemcommandtasklet allows the injection of a systemprocessexitcodemapper to map exit codes from system processes to an exitstatus. any reason not to allow that type of mapping here?
Candidate: we should need to use the in the <UNK>
Reference: call super.hasmailauth()
Candidate: should we be the <UNK> here?
Reference: style-nit: spaces around operators like +.
Candidate: you don't need need to the <UNK> <UNK>
Reference: as @calixtus said, it would be nice if you could add a logging statement here: add private static final logger logger = loggerfactory.getlogger(linux.class); at the top of the class and
Candidate: the syserr should be be the
Reference: yes, didn't mean to imply your implementation was wrong, i just wish to avoid potential trouble later on :p.
Candidate: i don't need to evict the the <UNK> the <UNK> the <UNK> is the
Reference: shouldn't jabrefpreferences be replaced by mainstage ? (as this does not print the values stored in the preferences)
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: shouldn't there be a null check here before calling close() on the response. kind of similar to the what we do in the catch block above?
Candidate: should we throw an exception?
Reference: does this give a friendly error message when it fails?
Candidate: please use <UNK>
Reference: i think this method is called not only upon downstream rpc, but also on task shutdown and other cases. if so, completely skipping of super.releaseallresources can lead to resource leaks
Candidate: the syserr should be be called via:  <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: it should be fine if this is done without checking for the dev environment too right?
Candidate: why do we need the <UNK> here?
Reference: if modelid is only used if thinguid != null && thingtypeuid != null i would move the variable definition and initialization into this branch.
Candidate: should we throw an exception here instead of returning null?
Reference: weren't you going to actually increase the size of this buffer to reduce the error rate?
Candidate: if we is the software <UNK> but i don't think we need to check whether the is the software <UNK>
Reference: this should be illegalargumentexception since the argument is invalid. illegalstateexception means the class is in an incompatible state for the current method invocation.
Candidate: i don't think we need to check if the is is the
Reference: can we please out the parallelstream() call. it does not offer much benefit and causes a stream to possibly cross threads. many server environments are sensitive to arbitrary code just
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: better use method reference
Candidate: this should be the <UNK> <UNK>
Reference: here also - it should be take(length - this.length()), am i right?
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: just a question about ascii, is that ok?
Candidate: why do we need to assemble the <UNK> here?
Reference: this predicate here looks copied and pasted over and over again. please split this out into a method in case we need to change this en masse (say we add
Candidate: why do we need the fully-qualified properties?
Reference: 'null' must be the first operande
Candidate: please remove the <UNK>
Reference: 1. any way around not having to execute axe for each webelement ? concerned about the perf implications here - since axe would be injected into the page for each
Candidate: can be replaced by: <UNK> && <UNK> { <UNK> <UNK> { return; }
Reference: you can probably use the same trick, if waschildchecked you don't need to call isactive() and you can't uncheck the element.
Candidate: @unyoungwax, oops can be simplified to <UNK>
Reference: this already exists as 'astrobindingconstants.thing_type_sun'
Candidate: why do we need need to the <UNK> here?
Reference: because of the aioob exception above, this doesn't work. i wonder if we should not clear more broadly, can we tell the viewer to clear all its data without having
Candidate: why do we need to check the <UNK> here?
Reference: nit java this.client = requirenonnull(client, "client is null");
Candidate: nextvalueindex should be <UNK>
Reference: we should sanity check whether handle is already in a transaction here and throw an exception, before changing the state of didtxnrollback.
Candidate: should we log the exception?
Reference: @lautarobock here too, let's declare throws exception.
Candidate: @exper0 let's use the exception here too,
Reference: given these values are ignored, could we use then and thenmany?
Candidate: why do we need need to be <UNK> here?
Reference: i guess this could go in a common class somewhere, so that it's also available for commercial edition and extension developers .
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: was there a reason to change this to info instead of trace?
Candidate: why do we need the <UNK> here?
Reference: isnt this the same as couldn't figure out the idle timeout from configuration. will assume this to be the default_idle_timeout ms
Candidate: why do we need need to the <UNK> here?
Reference: need to handle this exception
Candidate: i don't think we need to throw an exception
Reference: in context and keys you use dry_run_format_type. let's change this to be consistent.
Candidate: why do we need to check the the enum?
Reference: why not use the connection provider ?
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: you don't need these "//" at the end of these lines.
Candidate: please remove trailing "//"
Reference: check on primarypublicgithubemails.size() > 0 to avoid **nullpointerexception**.
Candidate: why do we need to here?
Reference: just a thought about dropping this config in favor of neo4j+s scheme
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: how about raw types? will they fail later?
Candidate: can we move this into a separate method?
Reference: camel case: vlanvm - for entire patch.
Candidate: why do we need to check the <UNK> ? <UNK> : 0) 0) 0) 0) { ?
Reference: if flash copy widgets are disabled in the user's preferences you will show the text "copy search results" with no way for the user to do that. the flash movie
Candidate: please use <UNK> to "import instead of <UNK>
Reference: int channel
Candidate: suggestion <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: nit: can we pull the createtype call into a local. i really don't like the wrapping here.
Candidate: subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject subject
Reference: you probably dont even need this, just send the value of _withsla_ always?
Candidate: why do we need this?
Reference: we should change this message to reflect the actual stored credentials (cause that link wont hold true) so assuming string cachedir = // the stuff on line 81 "couldn't refresh
Candidate: should we use the <UNK> here?
Reference: shouldn't storagedomain.getdiscardafterdelete() be used?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: log-messages-bytes-sent?
Candidate: this should be injected, so we don't need to use the in the <UNK> so we don't need to use the
Reference: readlock looks useless here. anyway, you'll finish the future in few lines below.
Candidate: why do we need to use the <UNK> here?
Reference: if you put a name, these wrappers will start appearing in the lists iirc
Candidate: this should be localizable.
Reference: nitpick, but this could be an immutablemap (or at least coded to interface). super nitpick, but other similar snippets should be coded to interface as well.
Candidate: <UNK> *= 2;
Reference: better to move this to finally block
Candidate: you don't need to catch exception
Reference: how about to append the unit for each metric?  ps elapsed time: {0} s
Candidate: why do we need the payload?
Reference: shouldn't an exceptiondialog be thrown when it fails loading in the newick file?
Candidate: why do we need the <UNK> here?
Reference: httpclient to allow use of aem-configured proxy.
Candidate: i disagree with the kubernetes situation.
Reference: when ready to consider the pr final you might want to either remove or set debug logging to the debug level :-)
Candidate: ![major](<link_0> 'severity: major') remove this unused method.
Reference: if you move the save next to the fetch, they might be moved out together and handled together. also you might save some if condition regarding checking if it's ccmv1
Candidate: why do we need need to the <UNK> here?
Reference: should be int
Candidate: if <UNK> == null) { return; } <UNK> } <UNK> { <UNK> }
Reference: can we avoid hardcoding the proposal text here? we should reference to the original wtp proposal text if possible.
Candidate: should we be the <UNK> here?
Reference: any chance you could add a constructor which takes just metadatsource and metadatatermcode?
Candidate: why do we need to check for the sides of <UNK>
Reference: since this is a general tostring(), we probably should handle manual assignment as well.
Candidate: we should need to use the <UNK> <UNK>
Reference: you can remove the else clause above (but keep the code block) and remove one level of nesting.
Candidate: should we be the <UNK> here?
Reference: ); should be on the next line
Candidate: please remove the local variable.
Reference: since vmguestcontainerlistmodel is no longer generic we don't need to use typeliteral anymore. a simple bind(vmguestcontainerlistmodel.class).in(singleton.class) is sufficient.
Candidate: this is right...
Reference: the list should contain right child's desired traitset.
Candidate: please import?
Reference: move this line after logging the error, so in any case the error get logged.
Candidate: why do we need the <UNK> here?
Reference: @fanifieiev the same above.
Candidate: @fanifieiev the same above.
Reference: might want to put this back to something sensible.
Candidate: i don't think we need to use the <UNK> <UNK> the <UNK>
Reference: can be simplified to : java boolean failonmissingfield = tableoptions.get(fail_on_missing_field); boolean ignoreparseerrors = tableoptions.get(ignore_parse_errors);
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. [![rule](<link_1>](<link_2>
Reference: should be case underscore. default should throw cucumberexception
Candidate: should we be the <UNK> here?
Reference: suggestion logger.finer(() -> "checking ec2 connection on: " + ec2_cloud.getdisplayname());  lazy logging message construction for lower log levels.
Candidate: we can use the <UNK> here instead of the <UNK>
Reference: nit: let's move iscurrentuser() check out a level so we don't have to do it twice
Candidate: the syserr should be be <UNK>
Reference: the error message is not correct as instructor can call the method to access moderated/preview person. actually, i think it is not the method's responsibility to verify the login privilege
Candidate: the syserr should be be <UNK>
Reference: just call serialize(event, getcurrenttracetoken(), jsongenerator) here to avoid duplicated code between the two flavors of serialize().
Candidate: the syserr should be be the
Reference: suggestion  it's unused.
Candidate: this should be the fixture.
Reference: this update should not have been done in another commit, ie "set built-in qg as default of organization, where you have set the org#default_qg column as nullable
Candidate: why do we need to use <UNK> here?
Reference: looks like this is the first attempt, this should fail if you include on the first attempt
Candidate: why do we need to here?
Reference: it should be new tajoruntimeexception(new unsupporteddatatype(...).
Candidate: rename to iu
Reference: usually we will put this line before the try block.
Candidate: i'm not detect this polling polling polling polling polling polling polling polling polling <UNK> polling polling polling polling polling polling polling polling polling <UNK> polling polling polling polling polling polling
Reference: all the other stores have their registration done in their provider... why is this one different?
Candidate: should we be the <UNK> here?
Reference: i think you can replace it with just mdc.put(identity_id_mdc_key, subject.getuserid());
Candidate: why do we eating the exception here?
Reference: runtimeexception?
Candidate: should we throw an exception here instead of eating the exception?
Reference: perhaps we should print a warning if we disable the current?
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: not sure that catching exception is a good idea. how should a user get to know and report back? should at least log.
Candidate: please use <UNK>
Reference: use the method to set the values of scheduled page
Candidate: shouldn't this be the <UNK> here?
Reference: this should say "to an opponent"
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: iiuc, repo must be notebookreposync, so it would always be notebookrepowithversioncontrol
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: unlike in perun-core, there is no possibility to provide null for destinationgroup, since it always retrieve group by provided id. please make destinationgroup param optional (check it's presence) to allow
Candidate: why do we need to <UNK> stuff?
Reference: just use undertowlogger.root_logger.debug("....");
Candidate: i don't think we need to check if the is is the software <UNK> but i don't think we need to check if the is tied to the
Reference: what is the serialversionuid for? iiuc, jenkins uses xstream to serialize/deserialize data, not java serialization. is this required?
Candidate: why do we need to use <UNK> here?
Reference: i think we should add a limit(...) of say 30 items here, at least unless paged fetcher are implemented.
Candidate: why do we need to use <UNK> here?
Reference: excludedcolumns.contains(integer.valueof(ind))
Candidate: i don't understand this matters, but you can use the <UNK> <UNK> <UNK> <UNK> contents?
Reference: this method should be protected instead of public
Candidate: please remove the method("post")
Reference: and also fix indentation in this file
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but i don't see the
Reference: deserializing the data twice.
Candidate: should this be <UNK>
Reference: can you set message id in assertion and verify the message id exists?
Candidate: please remove the method("post")
Reference: i think this should catch the particular type of error. i guess it's classnotfoundexception to be caught?
Candidate: should we throw an exception here?
Reference: i hope there are no sensitive environment variables or system properties
Candidate: we don't need to throw an exception
Reference: i think that using a concurrentmap for statbuckets (and putifabsent() here) would allow to get rid of all explicit locking (and would also most likely have better performance as locking
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: could you explain why 5
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> { <UNK> }
Reference: the condition should be replaced with !textutils.isempty(assignmentid)
Candidate: this should be <UNK> to <UNK> the <UNK> itemstack.
Reference: we need this check (it should arguably have been there before...) because you're casting to (byte) below, yet writing the full strarray without truncating. the check could be moved to
Candidate: the syserr should be be the <UNK>
Reference: why do you need to override getcustomvalues() instead of just adding the custom values here? with the override it will affect also command inheriting from this command.
Candidate: please remove this line
Reference: assert that convertedoriginal.states.size == stored.states.size
Candidate: why do we need to the <UNK> here?
Reference: move it to new test
Candidate: why do we need to use @test(expected = <UNK> <UNK>
Reference: i think that in this case the code would be more understandable if you replaced the condition by if (nextconfigurationchanged(vm) && !nextrunfields.contains("customcpuname") instead of creating separate method (with not so
Candidate: can we rename the <UNK> to <UNK> <UNK>
Reference: outerindex
Candidate: this should be the <UNK> <UNK>
Reference: maybe we could have constants for inferredtypes.runtimetype("int") and other types to avoid reinstantiating them many times.
Candidate: can be simplified to: java return <UNK> || <UNK> { return <UNK> }
Reference: please add empty line to indicate the above belongs together.
Candidate: please remove the method("post")
Reference: assertequals(2, actualscores.size())
Candidate: why do we need to the <UNK> here?
Reference: remove a nesting level by inverting this if-statement.
Candidate: if the == null) && <UNK> { <UNK> } else { if <UNK> { <UNK> }
Reference: use debug rather than info for logging.
Candidate: should we use the <UNK> variable?
Reference: the same check is done in verifyvirtioscsi, why repeat it?
Candidate: why do we need the <UNK> here?
Reference: with line break maybe?
Candidate: you should use the exception here instead of catching the exception?
Reference: partially **built** mapping?
Candidate: the syserr should be be the
Reference: missing all() or explicit setlimit call.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: move to setup(). you can make mcameraid a local variable again.
Candidate: why do we need to check the <UNK>
Reference: why protected? the default is package visibility which would make it accessible to the test class. protected = package + subclasses.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: ultimately we probably want to ignore provides for files that were not explicitly passed in, e.g. stuff from the transitive closure like base.js but also other libraries. probably to early
Candidate: i'm not sure if you want to resolve the <UNK>
Reference: cannot render interstitial ad. -> cannot render rewarded ad. also, create a single string variable to use in these 2 places.
Candidate: :disappointed:
Reference: what's the purpose of removing objectmapper == null from this if statement and instead setting it to null on line 41? what is the value of objectmapper when afterpropertiesset() is
Candidate: can we use <UNK> <UNK> <UNK>
Reference: messinitrepo > initrepomessage
Candidate: please remove the <UNK>
Reference: i think it should be located after note.run
Candidate: i don't understand this matters, this matters, this matters, but i think this matters, that the <UNK> is the the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: it wasn't clear to me at first where the assertions are. consider keeping the util function just as a helper to create projects but not do assertions.
Candidate: i don't understand this matters, if you matters, but you don't need to check if the is is the <UNK>
Reference: remove double a valid from the test & original exception
Candidate: you don't need the findall <UNK>
Reference: this call and the one above make a logical group, duplicated elsewhere - extract method
Candidate: you can use assertj's via:  public void <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: why wouldn't we want to swap the cursor when the main activity is searching?
Candidate: this should be the <UNK>
Reference: this should probably not be changed, judging from the test code here around
Candidate: why do we need the <UNK> here?
Reference: can you encapsulate this into a "simple" affinitygroup method that will just be called from here?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this should be the first line, well before the dotconnect
Candidate: this is expecting the the identifier of the <UNK> <UNK>
Reference: i'm not sure this exception is related to "if (parameternames.length != totallength)". i think we can have more context somewhere.
Candidate: why do we need to here?
Reference: these are all trivial lambdas, although it's not a high priority
Candidate: can be simplified to <UNK>
Reference: is this problem appear only for our sample app? maybe we need to move it into skin
Candidate: why do we need the <UNK> here?
Reference: recent infinispan versions bring jcacheprovider for both embedded and remote, and since there can (and should!) be both of them on classpath, you should add property for selection of the
Candidate: i don't think we need to throw an exception
Reference: i think assumetrue is unnecessary. such test is supposed to be performed when all dcs are specified.
Candidate: you don't need to use the
Reference: use .getuuid instead of getartid, which will go away
Candidate: use .getuuid instead of getartid, which will go away
Reference: so i generally think of deleting in-place like this (while still using an iterator) as being a dangerous operation, and would assume we'd need to make a "todelete" list and
Candidate: do we want to log the here?
Reference: no need for else at positive flow
Candidate: should we use the exception here?
Reference: why not use the char array approach as before?
Candidate: if you is a single inserter for the <UNK>
Reference: why do you use checked exceptions here?
Candidate: why do we need to use the here?
Reference: the correct way to look up a target translation is by id. we should not be building the path manually. e.g. appcontext.gettranslator().gettargettranslation(targettranslationid).
Candidate: the syserr should be be the
Reference: fix variable naming and same goes here
Candidate: what happens if the exception is an exception on the exception
Reference: remove the bracket.
Candidate: why do we need to check the <UNK> <UNK>
Reference: might be worth making it only work if it has free space in the inv. as this will just void the items once full i think?
Candidate: why do we need to use the <UNK> here?
Reference: code style
Candidate: why do we need need to the <UNK> here?
Reference: the tracecontext here in currentspan should be the same as what's above set in context.setattribute right? as there's some cost to fetching it, i think we should remember or reuse
Candidate: should be null check here?
Reference: this leads to a regression. in master the app is now showing also the files, not just the folders. the if sentence should be removed.
Candidate: typo: <UNK> -> <UNK>
Reference: nit remove on line
Candidate: why do we need the columns here?
Reference: should put the path as well in the audit log too  logauditevent(success, "listsnapshots", snapshotroot);
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: if there is a noexcept-expression, it needs to be evaluated. in the current ast formulation, that would be done using valuefactory.create(iastexpression), but once we start using evaluations it will be
Candidate: i don't think we need to check if (state != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: should this be onerrormap? this logic looks to be more of an error mapping than an alternate resume from an exception given this will propagate an error.
Candidate: should we use <UNK> id here?
Reference: can we move the "drawableid", "titleid", etc strings to private static final string...?
Candidate: should this be private?
Reference: naming, removefromnetworklink (and addtonetworklink)
Candidate: please use <UNK>
Reference: no change from patch-set 3?
Candidate: can you use the cda here instead of the disk, names?
Reference: shouldn't you explicitly use a charset to read from the stream (using the inputstreamreader ctor with charset) instead of using the system default charset? you might be able to determine
Candidate: should we throw an exception here instead of exception?
Reference: does apitoken need a null check someplace before this?
Candidate: why do we need the <UNK> here?
Reference: line count will not be incremented if exception is thrown.
Candidate: do we want to use <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: you don't need this, nobody was listening on the "role" property changed event. therefore the whole objectutils.objectsequal() check isn't necessary either, you may just set the member. (the case could
Candidate: can be simplified to:  <UNK> = <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> ?
Reference: please make it consistent with other places: <link_0> possibly updating tk103 decoder would be even better.
Candidate: should this be <UNK>
Reference: this won't work on eap6, please to use this: [wildflycompatibilityutils.parseclistyleaddress](<link_0> wildflycompatibilityutils.parseclistyleaddress("/subsystem=hawkular-wildfly-agent/")
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: @inverno remove this check and make getparent return jstree
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: please check that the bitstreamformat is still here
Candidate: i'm not sure that these changes are used?
Reference: i would prefer to keep the "old" style, since this was a long time what the clients got. honestly i would probably prefer to throw illegalargumentexception, but i fear that
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK>
Reference: -1 to this. but not a deal breaker. we do it in other places, just not very consistently. it stands out here since later in the file we just do
Candidate: why do we need to mock <UNK> here?
Reference: why is it saing wizardpagelist ? bad copy/paste ?
Candidate: please use <UNK> <UNK>
Reference: my understanding is that these api's are java 7 apis. right now we're still supporting java 6 in the project. this isn't a hard stop, i'd like to deprecate and
Candidate: this should be setemptyelement().
Reference: fbot =
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: what can be null here?
Candidate: this should be the <UNK>
Reference: might make sense for helper methods like getprefix and getlocal. the local processing is a bit involved for one line.
Candidate: this should be the <UNK> <UNK>
Reference: here for each project which gets selected a new row is appended to the selecteditemstable. this means that the projects in the selecteditemstable are sorted in the order in which
Candidate: why do we need need to the <UNK> here?
Reference: i think you mean firebaselistadapter.this here, (rather than firebaserecycleradapter.this)
Candidate: why do we need to use the here?
Reference: please add this to the 1.7.4 block, so all updates for one version are in one location.
Candidate: @unyoungwax, speaking this is the feedid
Reference: if there aren't plans to ultimately use this check in many other places in the future, why not lose this boolean and just use site instanceof journalsite instead as you
Candidate: why do we need the <UNK> here?
Reference: once .xsd is updated, this and the below string should also be updated of course.
Candidate: @exper0 use <UNK>
Reference: need to handle this exception
Candidate: why do we need the <UNK> here?
Reference: please delete this blank line. this isn't guarded by any permissions, which seems non-ideal. the only caller here should be the system process, so how about a check similar to
Candidate: why do we need to check the <UNK> here?
Reference: wouldn't it be simpler to call: <code>this(thingtypexmlresult.class, "thing-type");</code> so, we do not need to add the two new lines on both constructors.
Candidate: why do we need the <UNK> here?
Reference: character.totitlecase() because of [what is titlecase? how is it different from uppercase?](<link_0>
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: simply return tid?
Candidate: @hdouss you can use the dir here too?
Reference: instanceof ?
Candidate: why do we need to the the payload?
Reference: does this still need to be public?
Candidate: why do we need to use the <UNK> here?
Reference: calls to get() may fail at runtime, getorelse is recommended or we should return option<disperser>
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i usually prefer to use formatter, as it keep the message easily readable when reviewing: java string.format("split this %d characters long line (which is greater than %d authorized).", length, maximumlinelength)
Candidate: @unyoungwax, do we need to check the getcredentials for the getcredentials
Reference: you must use players in range, not all players: game.getstate().getplayersinrange(controller.getid(), game)
Candidate: i don't think we need to check if <UNK> != null) { return <UNK> } <UNK> <UNK> { return false; }
Reference: this clock should be a constant like the other one (or the other one should be a local variable; i don't mind as long as it's consistent).
Candidate: this should be setemptyelement().
Reference: why does this throw an exception, and not just return false?
Candidate: why do we need to here?
Reference: i can see this url mangling is ugly but necessary. maybe string.format instead?
Candidate: this should be <UNK>
Reference: can we use a try-with-resource pattern here?
Candidate: why do we need the <UNK> here?
Reference: what is the purpose of this test? it doesn't seem like a test at all. maybe if you asserted that the signatures of the provider methods are correct, that would
Candidate: the syserr should be be the
Reference: is it possible for this to happen from the main server thread in the actual tick loop, or would flushing be too expensive there? how does vanilla achieve this?
Candidate: should we catch exception here?
Reference: suggestion if (casttargettype.tolowercase().indexof(clobcompatiblecasttargettypes[i]) == 0 && (casttargettype.length() == clobcompatiblecasttargettypes[i].length() || casttargettype.charat(clobcompatiblecasttargettypes[i].length()) == ')')) {
Candidate: why do we need to check the <UNK> here?
Reference: is there a more specific exception, i.e., quotaviolatedexception, that you can unwrap from the dnrioe? would be good to assert on its presence.
Candidate: can we use <UNK> overload of the string value)
Reference: i think it's mostly fine. if you want, the message could be updated to: > queried for a buffer before requesting a subpartition
Candidate: can we use the builder <UNK> <UNK> <UNK> <UNK> <UNK> builder initialization: <UNK> { <UNK> = new <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> }
Reference: do we need to reset this to false once we actually manage to trigger repartitioning on cluster state change?
Candidate: i don't think we need to check the the for the <UNK>
Reference: stringutils.isnotempty
Candidate: should we print stack trace to debug level?
Reference: a testcase for this maybe ?
Candidate: why do we need the <UNK> here?
Reference: an automation handler is recreated on configuration change. please extract configuration in the contructor.
Candidate: i think i think i think i think i think i think i think i think i think i think i think i think i think i think i think
Reference: perhaps inspect the operation instead of relying on this class field
Candidate: if (context { groupname = null; } newvalue == null) { <UNK> = null; } else { m = null; }
Reference: make this a constant at applicationconstants.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: would suggest using another mapid for 006 and 007 to break dependency from 001 and 002 to be successful
Candidate: suggest using another mapid for 004 and break the 001 and 002 to be successful and 002 to be successful
Reference: guard by isdebug
Candidate: the syserr should be closed in the
Reference: i think you meant suggestion return loadspecificationfallback(swaggerparser, uriasstring, e);
Candidate: why do we need the <UNK> here?
Reference: just checking...boot order _greater_ than zero means this is a boot device?
Candidate: can you use <UNK> <UNK>
Reference: since this is public class, i'd check for null here explicitly - just like we do in our public static methods.
Candidate: this should be the <UNK>
Reference: try reusing 'initvmtemplate()' method from: <link_0>
Candidate: please rename this to <UNK>
Reference: we don't need this check
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ?
Reference: with the lines above this looks like the runtimeexception is thrown on purpose here. @sobimibos can you clarify here what we can do alternatively? thanks.
Candidate: should we be the <UNK> here?
Reference: magic
Candidate: why do we need to check the <UNK> here?
Reference: for consistency, should this also be changed to sslcontext.getinstance("tls")?
Candidate: please use <UNK>
Reference: with this break we will just loop once, is that intended? why do you need a while loop then, you can just pick the first element.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: please use guava preconditions to check the arguments. the class fields should be final if they are supposed to be immutable (which seems to be the case), and they should
Candidate: if (args.length != null && <UNK> { <UNK> body: <UNK> }
Reference: this is not accessed anywhere else. please make this private.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: the second sortchannels -> sortorders
Candidate: <UNK> *= 2;
Reference: this should not be removed. a negative period makes no sense.
Candidate: should we use the exception here?
Reference: import bytesvalues
Candidate: use <UNK> <UNK> <UNK>
Reference: should this also be moved into if (sendable && !backingoff) { ? for example, if the batch is not full, it's unnecessary to put tp to readynodes.
Candidate: i don't think we need to use the <UNK> of <UNK>
Reference: 1ms=10^6ns
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, it matters, but i don't think why, but
Reference: path -> "key"
Candidate: formatting
Reference: hlen is not a very descriptive name. could you please rename it?
Candidate: why do we need to wait for the again?
Reference: when queue is full exception out of this method looks unhandled
Candidate: if <UNK> != null && <UNK> { <UNK> } else { <UNK> }
Reference: these changes should not make it in - they were for debug purpose.
Candidate: should we be the exception here?
Reference: suggestion @override public void onsaveinstancestate(@nonnull bundle outstate) {  can we move the @override annotation to a separate line than the method declaration for code style consistency?
Candidate: why do we need this check?
Reference: removed condition:  if (gettestigniteinstanceindex(igniteinstancename) != 0) cfg.setclientmode(true);  means, that all nodes, except having index=0, should become client nodes, i.e. _one server and multiple clients_, but these lines: 
Candidate: why do we need the <UNK> here?
Reference: no need for times(1). i think it's the default behavior.
Candidate: this should be the <UNK>
Reference: ah, it's just moved code. ok...
Candidate: should we throw an exception here instead of exception?
Reference: this function has some bugs.  default> \d test table name: default.test table uri: hdfs://localhost:7020/tajo/warehouse/default/test store type: text number of rows: 1 volume: 40 b options: 'timezone'='asia/seoul' 'text.delimiter'='|' schema: t
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: use one of the supported types.
Candidate: please use <UNK>
Reference: can you use 4 spaces for indentation here? it is the style that we use in the rest of the project.
Candidate: this should be the <UNK>
Reference: question, is metriccollector designed for rebalancer metrics only? if not, here it is hardcoded.
Candidate: can we use the <UNK> name)?
Reference: another fake lro?
Candidate: this should be the <UNK>
Reference: since this is debug logging provide an e.getmessage() instead and re-add the placeholder.
Candidate: do we need the exception here?
Reference: would it make sense to define two functions parseints and parsefloats to avoid this boilerplate?
Candidate: you should need to use the <UNK> <UNK> <UNK>
Reference: add braces.
Candidate: could be replaced with <UNK> <UNK> <UNK>
Reference: can be refactore to a method  setvalue(getinvocationreturntype(returntypes,in)); private object getinvocationreturntype(type[] returntype,objectinput in) { if(returntype == null || returntype.length == 0) { return in.readobject(); } if( returntype.length ==1 ) {
Candidate: should we throw an illegalargumentexception here?
Reference: i don't think it's safe to reuse nowms here since we may have blocked on free.allocate.
Candidate: do we need to check if <UNK> != null) { throw null; }
Reference: abort twice?
Candidate: can we use the <UNK> permission?
Reference: no need of type on rhs
Candidate: i don't think this matters, but we don't need to call the <UNK>
Reference: why changed from static to non-static?
Candidate: i don't think we need to log the exception if we is the software exception but we don't want to throw an exception if the exception is skipped, is the
Reference: remove first element from arraylist is a bit inefficient operation. can we use linkedlist here or perhaps remove the last element?
Candidate: do we need a <UNK> here
Reference: should return null if hastimeevents() is false
Candidate: this should be setemptyelement().
Reference: redundant?
Candidate: the syserr should be be the
Reference: this and previous can be a single line
Candidate: can we use the <UNK> properties?
Reference: what happens when someone visits the page this component is on with an id that is invalid?
Candidate: why do we need the <UNK> here?
Reference: you can use optional.ofnullable(...).ifpresent(...) or flatmap constructs here.
Candidate: should this be <UNK>
Reference: exception#printstacktrace goes to stderr by default.
Candidate: we should need to print an exception, obj is an exception, obj is an exception and let the status status status status status status status status status status should be
Reference: please remove unnecessary brackets: return (restartvdsreturnvalue) super.getreturnvalue();
Candidate: this should be <UNK>
Reference: ![major](<link_0> change this instance-reference to a static reference. [![rule](<link_2>](<link_1>
Candidate: why do you need to check for the <UNK>
Reference: maybe this code can be extracted into a separate method, to reduce code duplication
Candidate: typo: <UNK> -> getcredentials
Reference: can jobtype be passed so that it can be logged accordingly?
Candidate: should we use the <UNK> here?
Reference: can we let the type be inferred on these, for easier reading? on(exportprogressevent.class, event -> {
Candidate: why do we need the <UNK> here?
Reference: null might be a valid value for the field but you also get null if some exception happens. i would not handle exceptions at all.
Candidate: this should be <UNK>
Reference: rename to gatewayserverfuture
Candidate: why do we need to clients?
Reference: this can also be package private :)
Candidate: nextvalueindex should be be <UNK>
Reference: can this be limited to sockettimeoutexception, as in the original?
Candidate: why do we need this?
Reference: this change is causing segmentmetadataquerytest.testserde() to fail: <link_0> the query variable has a legacydatasource whereas the deserialized serialized version has a tabledatasource.
Candidate: why do we need need to check for the <UNK> ?
Reference: not so sure about this part of the change. the ssh fencer is logging in to a unix user, so probably the unix username is more important than the kerberos
Candidate: should we use the exception here?
Reference: to follow convention, formatting here should be: java private static nioclient createclient(peer peer, int port, int connectiontimeout) throws ioexception {
Candidate: why do we need to use the <UNK> here?
Reference: a const please
Candidate: this is be pedantic, but oldvalue on the oldvalue is the reconnect chunk of the reconnect chunk of the <UNK>
Reference: and this one
Candidate: why do we need to use <UNK> here?
Reference: still mark nullable
Candidate: if the != null && <UNK> { return false; }
Reference: please invert operande
Candidate: i don't understand why we need to release the exception here?
Reference: this should be checkbasicapis(strings, deserialized, true);
Candidate: <UNK> (check for the (check exception).
Reference: i think it is cleaner to make it a method: getcontext() in the builder so we do the checks there.
Candidate: should be getstate() != null ?
Reference: again with the platform encoding.
Candidate: why do we need to use the enum?
Reference: code formatting
Candidate: why do we need to use <UNK> here?
Reference: not your change but having public constructors for test mocking seems a bit suspicious.
Candidate: why do we need need to the <UNK> here?
Reference: @neonailol i think it's better to make this pattern private static final, because it produces immutable pattern object (like a constant) and it will degrade performance if it called too
Candidate: why do we need to use <UNK> here?
Reference: cannot be empty but anyway: stringutil.isempty checks both conditions.
Candidate: why do we need the <UNK> here?
Reference: maybe split this widget creation to separate method to make this big callback more readable.. also i'd prefer functional style to foreach, but i might be fp freak :p 
Candidate: what happens if the == null) { <UNK> = <UNK> }
Reference: error handling is incorrect, hiding request errors.
Candidate: this should be setemptyelement().
Reference: this setup is a straight copy of the one in activitycategoryserviceintegrationtest. can't you put it somewhere where it can be shared? common base class?
Candidate: nit: 49
Reference: you can discard 1 card if you only have 1 card in hand.
Candidate: why do we need need to the <UNK> here?
Reference: calling "updatecredential" during every authentication could mean lots of unecessary db writes. i wonder that update is needed just when counters are used, which is not always? not a blocker
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: same here as well, null check for options
Candidate: should we be the <UNK> request?
Reference: is the above any different to:  java if (env != null) { tool = tool.forenvironment(env); } else if (node != null) { tool = tool.fornode(node, listener); }  aside
Candidate: we should need to do this unconditionally, if we do, so we should need to do the unconditionally, if <UNK> { <UNK> }
Reference: can this case be given? i mean having an entry for the given uuid but with no registrations?
Candidate: this should be the <UNK>
Reference: not -> does not .
Candidate: same as above.
Reference: final
Candidate: use <UNK> <UNK> <UNK>
Reference: this allocation seems wasteful, couldnt we just inline the allthreads call and directly check them?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: s/"inventory"/nbtdatautil.inventory or something thereof.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i think it would be better for the client to pass in a simple callback interface. this way you can avoid a weird dependency on fragments (and their crazy lifecycle!).
Candidate: should we be the <UNK> here?
Reference: order of the above logic should be swapped. you need to look for the selecteddevices first. if no devices selected, then look for all the devices.
Candidate: can you move this logic inside the loop? loop? loop? loop? loop? loop? loop? loop? loop? loop? loop? loop? loop? loop?
Reference: the ide warnings for these lines can be removed by using region.entry<object,object> entry1 = uncheckedcast(mock(region.entry.class)); region.entry<object,object> entry2 = uncheckedcast(mock(region.entry.class)); region.entry<object,object> entry3 = uncheckedcast(mock(region.entry.class));
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: suggestion "hadoop in your classpath. for more information refer to the " +  same as above, also mention hadoop_classpath
Candidate: suggestion <UNK> encoding <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding encoding
Reference: can't this be defined as a list<diskimage> ?
Candidate: 49
Reference: spare semicolon ;
Candidate: please use <UNK>
Reference: we need to consider handling two exceptions that consumer.position may throw: kafkaexception -> should be a fatal one; timeoutexception -> in this case we cannot commit, probably have to treat
Candidate: should we be the payload? if there is ill checking whether status status status status status status status status status status status status status status status status status status status
Reference: can we use collectionutils.isnotempty from apache commons here?
Candidate: can be replaced with <UNK>
Reference: instead you can use something like: com.facebook.presto.sql.planner.testlogicalplanner#assertplancontainsnoapplyoranyjoin to see if there is no filter node
Candidate: unused line.
Reference: >byte[] [](start = 11, length = 6) keyunwrapresult with one property key
Candidate: this should be <UNK>
Reference: the label "outer" is a bit confusing here since this for loop is actually itself nested in another for loop
Candidate: the syserr should be be the
Reference: why all this info level logging? i think that can be removed or use debug.
Candidate: do we need need to use the for the sake of the
Reference: this should probably be referencebinding == other.referencebinding (see objectvector.containsidentical())
Candidate: should we be the <UNK> here?
Reference: what you want to use here is collections.singleton()
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: if we're going to include commons-codec as a dependency, then i think you should just replace the whole block of code above with this:  generatedpassword = digestutils.sha256hex(password);
Candidate: we don't need to catch throwable in the finally clause.
Reference: i'd move the fundamental type constraints into the implementation of elasticsearchpersistentproperty to fail faster.
Candidate: please use <UNK>
Reference: technically speaking installationlocation can be null based on implementation, so in this case can we log error and avoid doing anything in the provision method?
Candidate: this should be the <UNK>
Reference: the implementation of this callback seems correct, but feels a bit messy. that's kind of why i generally prefer separating the events if possible. a bit of a better organization
Candidate: if oldvalue is is missing" { }
Reference: if header is null, showheader must be true
Candidate: 49
Reference: i wonder if "whitespace" handling should be incorporated to the call site of parsereturningkeyword and other parsexyzkeyword. by the way: tab, newline would trigger defeat query[offset - 1] == '
Candidate: i don't think we need to use the <UNK> <UNK> <UNK> <UNK>
Reference: add context specific message without using e.getmessage().
Candidate: should we use the exception here instead of eating the exception?
Reference: here the _object reference_ to capabilities is copied. so capabilities and tempcapabilities, refer to the same object. thus, this change is not really fixing the avoid reassigning parameters such as
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i don't think we need to say anything when the index is present, and the error message isn't going to tell a user what's going on. something like "index file
Candidate: why do we need the *= 2;
Reference: nit: is it necessary?
Candidate: should we be the exception here?
Reference: i was wonder if you could move something like this to vecontent.java in contentpatterns package. we did something similar with palantir javascripts and put them into one palantircontent class.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i don't think we should ever allow this condition to happen. we never returned null in 0.6, and this could be devastating for complex metrics that always assume some initial
Candidate: this should be the <UNK>
Reference: these debug statements don't add much, as jarfile.tostring() is just getclass().getname() + "@" + integer.tohexstring(hashcode()) at most one per file should be sufficient.
Candidate: why do we need need to tear to station manager, <UNK>
Reference: suggest:  param sensitivity = f.getannotation(param.class); skip = (sensitivity != null && sensitivity.issensitive());  extra changes are needed fro this on the response classes.
Candidate: this should be setemptyelement().
Reference: i believe stringutils.isempty returns true for null string. so the first check condition can be skipped
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: nit: the name of the variable no longer matches the name of the config parameter, but i don't think this is a blocker.
Candidate: why do we need to check the <UNK> the <UNK> <UNK>
Reference: when there is no delay we won't attempt retries? would we want this instead? java return retry.max(options.getmaxretries());
Candidate: can we be replaced with:  if <UNK> != null) { <UNK> = true; }
Reference: if i understand it right, this variable should be named sortorder rather than value which is confusing,
Candidate: why do we need to the <UNK> here?
Reference: that's a neat pattern i've never seen before :)
Candidate: can we use <UNK> <UNK> <UNK>
Reference: abstractrpcclient does not seem to be best place for this static method. _batchsize looks a bit strange in java. abstractrpcclient.parsebatchsize(clientprops) call in abstractrpcsink too. i would consider to move the
Candidate: the syserr should be be the
Reference: we could even make printpar final
Candidate: should we be <UNK> here?
Reference: can be done less expensively (and perhaps more simply) by using built-ins:  map<stackid, set<string>> mpackservices = topology.getcomponents().collect( groupingby(resolvedcomponent::stackid, mapping(comp -> comp.serviceinfo().getname(), toset())));
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: hey @pefernan , found several like this one... is it a typo?
Candidate: can we use <UNK> instead?
Reference: i don't think we need these two ifs as we shut down the executor afterwards.
Candidate: the syserr should be be the
Reference: there is this variant to simplify the code here: queryforlist(string sql, class<t> elementtype, @nullable object... args)
Candidate: this should be the <UNK>
Reference: formatting.
Candidate: hmm. this should be the <UNK>
Reference: @panchenko looks good. would you mind using textutils#isblank here instead, please?
Candidate: please use <UNK>
Reference: shouldn't we overwrite newtree only when it was checked that is was not explicitly set? if somebody sets newtree but not oldtree then we would ignore his newtree.
Candidate: please remove the trailing "/"?
Reference: what is the purpose of this synchronization? the corresponding reads (from get methods) are not synchronized. is the concern trying to handle concurrent calls to settypemap on the same pgconnection?
Candidate: <UNK> *= 2;
Reference: space after +
Candidate: why do we need the layout here?
Reference: push synchronization block into method.
Candidate: we should need to check for the <UNK> the <UNK> is the udp stripe { <UNK> }
Reference: call assertthat(request.getheaders(expect).isempty()).
Candidate: please use <UNK>
Reference: java .subscribe(new action1<resulttype> { });
Candidate: should we be the specific?
Reference: if we provide an existspredicate with a specified indexorder we need to fail if we cannot serve it?
Candidate: the syserr should be be <UNK>
Reference: your questions of the prev pr: - we do not have an in-place swap. this is not possible for tuple2 because of the generic types t1 != t2 (wlog) -
Candidate: please use <UNK> <UNK> <UNK>
Reference: can you use the static import for mockito.when here?
Candidate: why do we need to use the <UNK> here?
Reference: this is asuuming that both upper and lower are non-null
Candidate: i don't think we need to check for the <UNK>
Reference: is returning the object type boolean necessary? i think it is just fine to use the primitive type (boolean). using the object would unnecessarily cause boxing and unboxing and sometimes
Candidate: what happens if the is is the software exception we don't want to do we want to do we want to do we think?
Reference: i'd probably reverse the equals here to avoid a npe, just to be on the safe side. something like alatirparams.mode.lgs_p1.equals(_oe.blah blah blah).
Candidate: why do we need this?
Reference: @nimfadora , here is a nuance. all checks have to clear all internal and non-property fields in begintree method to make sure that no context is shared between two files
Candidate: should we use <UNK> <UNK> <UNK>
Reference: if no listener, still need to watch? why?
Candidate: why do we need to here?
Reference: i'd switch the + to a , so we get a stack trace here in the logs.
Candidate: should we use the exception here?
Reference: no need to wrap into codesystemuri here.
Candidate: you can use <UNK> <UNK> <UNK>
Reference: hardcoded value instead of argument? :)
Candidate: please use <UNK> <UNK>
Reference: didn't we agree to change it to something like follows? requestsent = sendconnectionrequesttosession();
Candidate: why do we need to synchronize on the request?
Reference: is.available() is not going to be reliable. you want content-length header (if present) and if it's not present you can wrap the inputstream and count the bytes.
Candidate: why do we need need to override the <UNK> here?
Reference: it seems like the ctor does not check for null value but addvalue does. we should either consistently do the null check.
Candidate: why do we need to evict the <UNK> here?
Reference: suggestion return arrays.tostring(value);
Candidate: should we use <UNK> objects.tostringhelper() name)?
Reference: probably don't want to have a dependency on lambdatest here?
Candidate: this should be the enum?
Reference: this. for all of these
Candidate: you can use <UNK> |= <UNK>
Reference: looks like this field is added always. what happens if rhs-version is not available ?
Candidate: <UNK> -> <UNK> -> <UNK>
Reference: how react the notification system ? should you not compute the current list of label format, then compare to the existing one and replace it (clear and addall) at this
Candidate: please use <UNK> <UNK> <UNK>
Reference: lhs is wrong here
Candidate: please use <UNK>
Reference: (optional) likewise
Candidate: i don't think we need to hide the exception in the <UNK> we don't need to do we need need to do we need need to do we need to
Reference: this is wrong, the declared_namespaces_map shoudl already contain all necessary namespaces no? so why adding all the namespaces? imho the behavior now should be, is a simple feature? business as
Candidate: can we move this to the <UNK> <UNK>
Reference: wouldn't this cause the exportproperties array to be computed each time we send out a metrics message? that would be very inefficient, as the list doesn't change between refresh operations.
Candidate: the syserr should be the <UNK>
Reference: in your case you should use createrepository instead of createrepositorywithartifacts because the artifact will be deployed within test.
Candidate: is there is no reason for this change?
Reference: i think we can do the same here as just pass db in
Candidate: if oldvalue is is empty? newvalue != null && <UNK> && <UNK> { return; }
Reference: that second string.class should probably be bitmap.class (also, check the generic type inference missing in cloudiconmodelloader).
Candidate: should we be the <UNK> here?
Reference: nit-picky minor: other tests in this class use for-each loops.
Candidate: i don't understand this matters, this matters, this matters, that this is is the <UNK>
Reference: nit: this if condition is duplicated in the else part. please refactor it by extracting common parts and executing specific array related logic when if clause passes.
Candidate: why do we need the <UNK> here?
Reference: remove system.out when debugging is done
Candidate: why do we need to use <UNK> here?
Reference: will it cleaner to call lock.shutdown in the server shutdown call?
Candidate: this should be <UNK>
Reference: @vilchik-elena why is nowdoc outside of string_literal()?
Candidate: this should be <UNK>
Reference: duplicate check. line 180 is excess. 181-182 checks are enough
Candidate: this is overwrites the <UNK> costs the <UNK> costs <UNK> costs it is the the <UNK> costs the <UNK>
Reference: very close, let's add an actual alias on workflow before waitforrefresh so it shows up here
Candidate: please remove the method("post")
Reference: try replacing executor with a serialscheduledexecutorservice and call its elapsetime() method to advance time.
Candidate: why do we need to tear down the <UNK>
Reference: log would be nice here
Candidate: same as above.
Reference: what if courseid does not exist?
Candidate: can you use the <UNK> id?
Reference: since this is a noop, we can remove this and the dependency on the result storage engine. for other storage engines like s3, there will likely be another mechanism to
Candidate: you can use the exception here
Reference: extract infiniumvcffields.genotype_values.values().length to a static constant
Candidate: why do we need to use the <UNK> here?
Reference: rrbc->rrbs (x3)
Candidate: why do we need to use <UNK> here?
Reference: the parser is a throw away, but the configuration is shareable, please move it to a class field. (or at least, it should be, in geoserver most configurations are spring
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: looks like you have changed your mind and decided to not use this setter in the ctor. i mean doesn't look like there is still a justification for a final...
Candidate: should this be <UNK>
Reference: the category.xml file is usually not part of the output repository. trye removing this line.
Candidate: why do we need need to the <UNK> here?
Reference: looks like you are checking for recursion, can we have a java doc just to say what true and false mean?
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: imo you don't need to append exception message to you log again. just adding the exception object would be enough
Candidate: should we throw an exception?
Reference: please use stringbuffer for better performance.
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to repeat the <UNK> of the
Reference: even though this class is using defaultdatabuffer, which does not require releasing, i still think it would be a good idea to release them here anyway, especially if we make
Candidate: should this be possible?
Reference: in all the guava functions like preconditions, it is more efficient to write them as follows:  java preconditions.checkstate(coltype == type.string_type, "column to split \"%s\" (%s) must have type string_type",
Candidate: can you use the sizes of the sizes properties?
Reference: the defer isn't needed here.
Candidate: should we use the <UNK> here?
Reference: now that we have the constrainttype , we need change this to something like this: suggestion if (!isempty(constraintvalue) || constrainttype != null) {  otherwise, when the user selects the
Candidate: should be be the <UNK>
Reference: good catch here, can we also update line 64 to reference datasets[1]?
Candidate: <UNK> <UNK> expected)
Reference: minor nit, but maybe have a final local variable for getaggregatorexpression() since we call it a number of times.
Candidate: can be simplified to return <UNK> ?
Reference: why compare hashcode? why not compare storename or reference equality?
Candidate: this should be the islocal as well.
Reference: can we change v to something like exp?
Candidate: the syserr should be be the
Reference: for each ?
Candidate: should we be the <UNK> here? if <UNK> == null) { throw <UNK> } else { if <UNK> { return <UNK> }
Reference: probably culpritids should be computed before returning, no? potentially it could change while we are iterating.
Candidate: can we create a new <UNK>
Reference: coundn' t we use mongo.delete().eq....eq...().executefor(...) here?
Candidate: why import?
Reference: this seems like something that was for testing and should be removed
Candidate: typo in <UNK>
Reference: can you use log4j2 ?
Candidate: please remove the trailing "/"?
Reference: this should simply invoke the new method.
Candidate: this should be the <UNK> if <UNK> == null) { <UNK> } } } } }
Reference: this no longer needs an initial value.
Candidate: you don't need to use <UNK>
Reference: this is causing gruntlaunch to always run the default task. however if there is a selection and that selection is an itask, i think it would be better to pass
Candidate: if (state != null) { <UNK> } else { if (context { <UNK> { <UNK> { <UNK> } else { if (context { profile = <UNK> } else { <UNK>
Reference: fix all string concatenation in this file
Candidate: should we use the exception here?
Reference: ok, value may be null!
Candidate: should this be <UNK>
Reference: rewrite scenario: feature: as a grid operator i want to be able to perform smartmeteringinstallation operations on a device background: given an organisation with organisationid "liandernetmanagement" @slim-218 scenario: add a
Candidate: please use <UNK>
Reference: previously, this was also done when no new job was started. was that unnecessary, or should the new code also do this in that case?
Candidate: i don't understand why, but it matters, but i think why, that the is the why, but i don't think why, the the
Reference: from debug perspective it would be good to add some info about the host.
Candidate: i don't think we need to log the exception if we is the software exception we don't want to log the
Reference: you need to call configureconsumer
Candidate: please remove the <UNK> contiguous.
Reference: technically speaking this service requires a key and a secret..
Candidate: can you use the m here?
Reference: why is this done on init (called from onload()) rather than in readresolve?
Candidate: do we need need to check if <UNK> != null) || <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: what happened to the forwarding entry?
Candidate: why do we need the <UNK> here?
Reference: shouldn't this be filteredoptions = listutils.filter(filteredoptions, predicate);
Candidate: this should be <UNK>
Reference: since the useragent is set here now, [line 195](<link_0> can removed. since it is never initialized, it should be null there anyway.
Candidate: please use <UNK>
Reference: do you need the log text box to be scrollable?
Candidate: can be replaced with <UNK>
Reference: this is probably quite useful for now, but lets make sure we remove it if we don't need it for the final sample
Candidate: can you move this line to line <UNK> lambda?
Reference: return the object immediately. sonar will complain. this counts for all the methods here below as well.
Candidate: please use <UNK>
Reference: this is wrong imo, if i create a subclass of number, this method will always return false even if my number's intvalue() returns 0.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if i am right, when we are here, we already logged out the exception, if we had any. but we can also get here from the shutdown() function, when we
Candidate: this should be the <UNK> <UNK>
Reference: not really needed here (see remark in branchoperationui)
Candidate: why do we need to check for the <UNK> part, but it seems to me that the optional?
Reference: does this test fail with the old solution?
Candidate: use <UNK> instead of duplicating the
Reference: if it's possible, you could use collections.singletonmap(key, value) here.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what if it the nested launcher is a delegating launcher as well? i would expect the method to continue the recursion then.
Candidate: if we is the software exception e1 { throw <UNK> } else { <UNK> }
Reference: you can merge these two if conditions into one
Candidate: if <UNK> == null) { <UNK> <UNK> <UNK> }
Reference: i think flush is not needed here. because it will flush every byte, isn't it? try with resources will auto close your streams. which will execute flush as well
Candidate: can we use the getconnection here?
Reference: imho can you a no-argument c'tor.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: you could make the connect method return a future, which would allow you to await it in this test, which avoids this ugly sleep. same for the other method a
Candidate: why do we need need to the <UNK> here?
Reference: you get major bonus points for writing a testcase! i'm curious why store the result of getprocessid() in a variable unless you want to test against it... why not just
Candidate: should this be null? if we { return; }
Reference: pass style as parameter to above 2 methods
Candidate: can this be used?
Reference: i wonder if we should add a preprocessing(...) method to initialize some variables. i don't like too much that the validation method is also responsible for the initialization of the
Candidate: can be replaced with <UNK>
Reference: ping ?
Candidate: please remove the <UNK>
Reference: we can avoid the database lookup here and use the username cache that is within the byid cache: accountstate as = byid.getbyusername(username); return as != null ? as.getaccount() : null;
Candidate: why do we need to use <UNK> here?
Reference: there are a lot of other cases that need to be covered.
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: nit: make these 100_000 and 1_000_000 for readability
Candidate: i don't think we need to evict the to the the <UNK> the the <UNK> is the software <UNK>
Reference: missed deltauuid
Candidate: the syserr should be replaced with <UNK>
Reference: is**r**hsnull
Candidate: why do we need to synchronize on the <UNK> ?
Reference: this implicit behavior updating global state seems a little weird but i haven't put a lot of thought into it - i'd expect it doesn't really cause any issues in
Candidate: this we need to use the jdk <UNK> way:  <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { return; }
Reference: remove this.
Candidate: should we use the <UNK> here?
Reference: verify that the created deployment exists.
Candidate: this fail()? try-catch-fail
Reference: why don't you add the extension directly?
Candidate: why do we need to mock <UNK> here?
Reference: you shouldn't be checking reference equality for objects. please use objects.equals instead.
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: can we use lessthan instead of compare() < 0?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: it looks suspicious that the method is eating the exception just so it can be called as a function. that also raises the question: what if the mysql instance is
Candidate: why do we need to check for the <UNK> <UNK>
Reference: is it mandatory? the names should be already cached upon calling 'addauditlogcustomvalues', which is invoked on commandbase's execute flow (execute -> logcommand).
Candidate: remove this part,
Reference: why do we need to execute these create and drop table statements?
Candidate: please move the <UNK> of the actual properties? as most likely that most likely most likely most likely most likely most likely most likely most likely most likely most likely
Reference: list.contains
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: since you created the stored procedure just for your use case you can adjust the query to take a list of device types instead of firing the query two times
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: if selected resource is non-workspace, then you'll get first path element from getproject() method, and finally getmapping will return null. with change i929c3c32e getmapping for non-workspace files will return proper
Candidate: why do we need the <UNK> here?
Reference: hash()
Candidate: objects.hash()
Reference: i think it's preferable to take all logic out of the tablewriter, so that you calculate false positives here and not inside composeline. this may require creating another nested class
Candidate: should we throw an exception here?
Reference: what's the benefit of using optional instead of returning null? in what way would it make a caller's life easier? i suspect instead of simply checking for null a caller
Candidate: please use <UNK>
Reference: as the test method name suggest, we should probably leave readunsignedshort call here.
Candidate: why do we need the <UNK> here?
Reference: i imagine it's going to be super useful to have a single line log with op : user [path]
Candidate: can we make this private?
Reference: line-wrap? this seems pretty long.
Candidate: i don't understand this matters, if we matters, but we don't need to do we need need to synchronize on the <UNK>
Reference: qu: is it worth creating a variable for this since currentthread() is native ?
Candidate: i don't think we need to check the if the is is the
Reference: we can use the cache here for a read: accountstate s = rsrc.getuser().state(); if (s.getusername() == null) { throw new resourcenotfoundexception(); } string p = s.getpassword(s.getusername()); if (p == null)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: should probably be at the end of the method.
Candidate: please remove the method("post")
Reference: again would be nice for this to be a mock/fake rather than a spy.
Candidate: this should be <UNK>
Reference: are this changes related to xsite?
Candidate: i don't think we need to check if the is is the
Reference: seems, don't need map method
Candidate: let's use <UNK> <UNK>
Reference: a bit of a renaming, since this effectively comes down to a permission issue suggestion ______ts("instructor attempts to edit student's response with appropriate permission, should be accessible");
Candidate: the syserr
Reference: it's better to use firebaseanalytics.param.value as the parameter here as firebase [auto-aggregrates over that](<link_0>
Candidate: you can use the syserr
Reference: unmodifableset(sets.newhashset..
Candidate: this should be the fixture.
Reference: no need to check view type above. table.gettabletype() suffice.
Candidate: this should be the <UNK>
Reference: please consider using objects::nonnull instead of lambda
Candidate: can be simplified to <UNK>
Reference: rather than hard-coding the texts here, they should be defined in a .properties file so that they can be translated.
Candidate: nit: 49
Reference: see how this is done for entities. does basicbrooklyncatalog.loadclassbytype load policies as well as entity classes? see brooklynassemblytemplateinstantiator.loadentitytype, for a policy equivalent.
Candidate: should we print the exception here?
Reference: suggestion } else if (value instanceof floatset) {
Candidate: do we need need to check the <UNK> <UNK>
Reference: the test probably has been set to null.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: what if the interface and/or service is null? won't we run into the same problem?
Candidate: can be replaced with <UNK> <UNK> ?
Reference: consider make this private as it's not called elsewhere.
Candidate: should this be <UNK>
Reference: i look forward to seeing this in logs.
Candidate: the syserr should be be the
Reference: why did you add here a null check but not in the other methods which access the given jsonobject in the same way? maybe you can switch to objects.nonnull call.
Candidate: did you use classcastexception here?
Reference: you need to preserve the escaping functionality of getuncapsimplename(), that's the reason for the qpublic and qprivate issues (public and private can't be used as variable names)
Candidate: the syserr should be be the
Reference: here too - can you explain?
Candidate: please use <UNK>
Reference: can this logic moved into 'vdcexc.getmessage()' ?
Candidate: we should throw an error error message error.
Reference: why this iterables.size instead of a simple inputpaths.size() ? both choices are not "null protected"
Candidate: can we move this into a separate method? if <UNK> { <UNK> <UNK> = <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> }
Reference: change loadbuildnumber(system.getenv(), properties); to loadbuildnumber(properties); once the buildserverdataprovider also has a reference to env...
Candidate: why do we need this?
Reference: is runqueue used anywhere?
Candidate: why do we need need to the <UNK> here?
Reference: could this code be tested with non segmented logs? perhaps just put the test of swap segments within if (islogsegmented)
Candidate: i don't think we need to the <UNK> of the <UNK>
Reference: @joshuajplagonera @ericleich i belive it's important to call  mvunglemanager.removeactivebannerad(placementid, vunglebannerad); everywhere, except for cleanleakedbanneradapters() when we know that it should be destroyed in any case. the reason is that
Candidate: can we move this into a separate method?
Reference: url in hashset?
Candidate: analyze these <UNK>
Reference: should not catch to just re-throw.
Candidate: this should be the <UNK>
Reference: we have the ability to parameterize some classes per upgrade pack. do we need to consider the case where an up defines an ambari class with properties? should open a
Candidate: <UNK> *= 2; use <UNK> instead of stringbuilder?
Reference: minor suggestion: instead of needing to check the size and each individual entry, could you build the expected config map and then do an equals check?
Candidate: please use <UNK> <UNK> <UNK>
Reference: i have tested on a yarn cluster, it could not take effect here. when i cancel the flink job, the application status is still failed.
Candidate: getters is getters getters for getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters getters
Reference: why this. here? you delete it elsewhere.
Candidate: why do we need need to be <UNK> here?
Reference: not sure where the conventions are from, but this should be made consistent with the other places as:  if (data == null) { throw new nullpointerexception("data == null"); }
Candidate: can be replaced by: <UNK> <UNK> = <UNK> ? <UNK> : <UNK> : <UNK> : 2; : <UNK> : <UNK> : <UNK> : 2; : <UNK> : <UNK> : <UNK>
Reference: tracing() is never null. if tracing is disable, then cr.tracing().isenabled() returns false. i would remove the condition and always configure tracing. conditionality should happen on a different level.
Candidate: the syserr should be be the
Reference: should we use pushinlinedeployments here ?
Candidate: should we use pushinlinedeployments here here ?
Reference: this looks weird, what does it mean to watch null?
Candidate: please remove this line
Reference: can extract string to item_id
Candidate: rename to <UNK> <UNK> <UNK>
Reference: use the separator constant here.
Candidate: why do we need to use <UNK> here?
Reference: this looks identical to the code on line 88. it would be better to have this as a method since the code is repeated. also, if this is a separate
Candidate: this should be nicer: <UNK> <UNK> { <UNK> }
Reference: please restore single node verification to use ==, it is more concise and shorter and performance is better.
Candidate: this should be the <UNK>
Reference: do we really need a switch when this is really just overcomplicating an if...else or even a ternary expression? (sorry if any of these have repeated... i thought i made
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: code style
Candidate: you don't need to the <UNK> <UNK> <UNK>
Reference: hashcode might look simpler like java @override public int hashcode() { return objects.hash(getregistry(), getid(), getversion()); }  but i'm ok with current way as well.
Candidate: can be objects.hash()
Reference: shouldn't we return immediately if we know this fails.
Candidate: we should need to do we need to do we need need to do we need need to do we need need to do we need need to do the
Reference: i think this can't be null.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: elvis notation?
Candidate: this should be the <UNK>
Reference: can we discuss this part when you get into the office, for me to get a better understanding of this patch?
Candidate: interesting, if we is groupname should be null?
Reference: exceptions.launderedexception is being removed, so avoid calling it here. just wrap and throw runtimeexception.
Candidate: why do we need to here?
Reference: what's this change for? refer to #54, please.
Candidate: this should be an empty <UNK>
Reference: strange place for a linebreak here
Candidate: this try-with-resources should be closed after the
Reference: can be replaced with 0l, similarly other casts can be ommitted.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the {style} (without capital) is missing ... see table 32 in the wmts specifications.
Candidate: why do we need need to trim entries?
Reference: should it be resteasy with eclipse vert.x here?
Candidate: this is eating the exception?
Reference: i'm not sure if this is not breaking something. looking at the source code of pgputil.getdecoderstream(inputstream) i can see that the provided inputstream is wrapped by a bufferedinputstream if the
Candidate: why do we need the <UNK> here?
Reference: does this have to be synchronized? why not do the post-check after the submission and remove token+message pair?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to check the the <UNK>
Reference: a cleaner way could be numplayers = players.size()
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: should we move the metrics code outside the exception type check? seems like we should record the errors even if it was a non-transient exception.
Candidate: should we be the <UNK> here?
Reference: it seems that you don't have to write a new separate method and call it.
Candidate: why do we need the <UNK> here?
Reference: for curiosity, will this method be called by multiple threads?
Candidate: should we throw an exception here?
Reference: i'm not clear on whether the reference here can be null, which should likely be protected so we don't obfuscate the runtime expresson. i think "tostring()" is an implicit, here
Candidate: if <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) || <UNK> != null) { throw <UNK> } } }
Reference: since we are talking about 128 bits, i'd use bits as the measurement, not bytes
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: <link_0> since they are more methods than variables, should we base it on methoddefhandler instead?
Candidate: please remove the method("post")
Reference: you've managed to add the handler, why are you returning false?
Candidate: why do we need the fully-qualified properties?
Reference: since this is debug, i don't know if it would make sense to log the full, unsafe map in addition to / in place of the map with unsafe keys
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: if waittimeout is what i'm understanding, i.e. the maximum time to wait for the request to be returned, this code doesn't do as expected. it doesn't count the time spent
Candidate: should we log the getconnection here?
Reference: return datatransactionbuilder.failnodata(); it is a kind of fail because they tried to remove something that is not there
Candidate: i don't think this is right...
Reference: would this provide better readability? java public list<inputsplit> getsplits(jobcontext job) throws ioexception { list<inputsplit> filesplits = super.getsplits(job); configuration hconf = job.getconfiguration(); boolean copyheader = hconf.getboolean(pathtrackinginputformat.copy_header, false); list<inputsplit> splits = new
Candidate: i don't think we need to do we need to do the getcredentials getcredentials for the getcredentials getcredentials
Reference: style nit: missing braces
Candidate: if <UNK> != direction.incoming) { <UNK> }
Reference: this distinction isn't necessary; new timeoutexception(timeoutmsg) will work in any case.
Candidate: why do we need to check the <UNK> here?
Reference: is this right? we want to call gettimestamp for both timestamp and date meta types?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: could you give messageinfo a tostring method and use that here?
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: there are no email clients installed. move this in strings.xml.
Candidate: <UNK> *= 2;
Reference: add a check here to verify that the broadcastserialdatareceived method was not called.
Candidate: why do we need need to the <UNK> here?
Reference: please make this method return an uri. stringifying can always be done later.
Candidate: please use <UNK>
Reference: so here you do use objectutils. why not use it in the previous class i reviewed?
Candidate: this should be the islocal as well.
Reference: no need check for null, task will be usually created, if it is not we have a bug and these should be solved
Candidate: why do we need to use <UNK> here?
Reference: again, seems like it would be easier to fix with an alignment property somewhere.
Candidate: should we throw an exception?
Reference: add more information in the log message, like backup attempt failed for which snapshot, how many attempts left for retry etc.
Candidate: why do we need the <UNK> here?
Reference: it is totally useless
Candidate: @komaz "test" "test" do we "test" even that <UNK> "test" do we "test" crossed <UNK> "test" do we "test" do we "test" even that <UNK> "test" do that "test" do
Reference: _verify
Candidate: should we use the <UNK> here?
Reference: the break without the label would also terminate the for-loop not the while-loop. why is this label necessary?
Candidate: you don't need to use the <UNK>
Reference: response is not closed if code below throws
Candidate: we should have the getconnection in <UNK> cosmetic. but we don't need to do we need to do we need to do we need need to do we need to
Reference: no need to check for empty
Candidate: can be replaced with <UNK> <UNK>
Reference: please mock :d
Candidate: please remove the method("post")
Reference: please return filter(partialfunction::isdefinedat).map(partialfunction::apply);. we try to omit if-branches if possible.
Candidate: i don't think we need to override the <UNK> modifier for the _last_ <UNK>
Reference: you have slf4j logger defined up there
Candidate: why do we need to the <UNK> here?
Reference: could use strings.isnullorempty
Candidate: you can use the syserr
Reference: instead of using boolean.valueof(boolean).tostring(), just use string.valueof(boolean)
Candidate: this should be the <UNK>
Reference: maybe invert here so that true = success and false = failure?
Candidate: the "else" e1 is be <UNK> to the <UNK> <UNK> the <UNK> is the
Reference: not a good idea. you're introducing un-obvious coupling here. i should remember that blah here means the same as blah 8 lines above. if in the future i want to
Candidate: let's move this method into a separate method, let's move system.currenttimemillis() to pass the thing)
Reference: which exceptions is this try/catch trying to catch?
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: return is not needed here and creates a lint warning
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: why unauthorized?
Candidate: should we throw an exception here instead of exception?
Reference: wow!
Candidate: why do we need need to the <UNK> here?
Reference: navigating again?
Candidate: this 'severity: major') update handler)
Reference: whoa been a while since i've seen bitshift code - fancy c stuff here!
Candidate: i don't think we need to print the stack trace trace, since it is the to the the threw an exception message.
Reference: i think the error message should be more meaningful like non-exclusive subscriber received messages. wdyt?
Candidate: do we need to catch exception?
Reference: duplicated line (probably global replace)
Candidate: this should be <UNK> if (state != null) { <UNK> }
Reference: no, this method should not throw interrupted exceptions.
Candidate: no, this method should not
Reference: it is outside the pr code, but i would like to share concern:  for (string pattern : this.patterns) { if (patternmatchutils.simplematch(pattern.tolowercase(), header)) {  the pattern.tolowercase() should be done
Candidate: please remove the method("post")
Reference: this should return a url
Candidate: please use <UNK>
Reference: whitespaces after colons.
Candidate: why do we need to use the <UNK> here?
Reference: may be it makes sense to leave this check if it's not too heavy? or leave it here by default and add a flag to skip the check as soon
Candidate: i don't think we need to check the if the cr is the
Reference: do we need a lock? could we use an optimistic "update where" & react appropriately if the update fails to update any rows?
Candidate: should we be the <UNK> here?
Reference: it is better to :  java pool bonuspool = getbonuspool(existingpools); if(bonuspool == null) { //create bonus pool } else { //update pool if needed }  this way we:
Candidate: can we use the getconnection here?
Reference: i'm not sure that the effective compatibility version is correct here as well, elsewhere we use 'geteffectivecompatibilityversion', better to use it i think
Candidate: the syserr should be be the
Reference: extract in method formatignoredconditions
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this shouldn't be correct, we want the main artifact and the classified one...
Candidate: why do we need to use <UNK> here?
Reference: how many? should we limit these more?
Candidate: i'm not sure that the problem is this is the <UNK> <UNK> is the <UNK> <UNK> is the <UNK>
Reference: what message did we get before (just out of curiosity)?
Candidate: should we be the <UNK> here?
Reference: please change to externalsearch
Candidate: please use <UNK>
Reference: if space ( (...)
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: where is the false coming from and why is it false? consider moving it into a variable with an appropriate name to make it easier to understand the code.
Candidate: should we use the exception here?
Reference: return 'true'
Candidate: this should be <UNK>
Reference: i think this message should change, we could get a nullstage even for a wrong stage counter.
Candidate: why do we need to here?
Reference: 1. "refs/notes/" could also be excluded 2. would it make more sense to check the opposite: if (!refname.startswith("refs/heads/") && !refname.startswith("refs/tags/")) { continue; } i guess it is more likely that
Candidate: why do we need to check the <UNK> here?
Reference: will this work on a cluster with namespaces enabled?
Candidate: why do we need to here?
Reference: could use collections.singletonlist()?
Candidate: you should be the <UNK>
Reference: @vilchik-elena what about expressions comparing a string and a non-string (e.g. a number)? are they valid comparisons? should we have separate rules for those cases?
Candidate: i don't need to check for the <UNK>
Reference: nit: i guess it seem not very readable for message like .....releasing asynccheckpointrunnable, 12. maybe change to ......releasing asynccheckpointrunnable for checkpoint 12? (take checkpointid = 12 as example).
Candidate: i don't understand why, but it is be the to subdir be the <UNK>
Reference: i was looking at this and thinking about how to eliminate the duplication of readstring("object-id[@pub-id-type=\"doi\"]", assetnode) and would like to suggest:  java if (graphic_node_parents.contains(nodename)) { doi = readstring("object-id[@pub-id-type=\"doi\"]", assetnode);
Candidate: should this be null?
Reference: please check if it is actually filtered (just to be sure)
Candidate: if the == null) { return; } else { if <UNK> { return; } if <UNK> { return; }
Reference: nit: can use variable "image". (so does following 3 places)
Candidate: the syserr should be be the
Reference: it seems that expected is always the same as observed? if so, why do we have 3 parameters instead of 2?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i'd suggest test them in alphabetic order, easier to read.
Candidate: can be replaced by: <UNK> <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: you can use url builder here.
Candidate: you can use the syserr
Reference: concern of localisation as before
Candidate: please remove the <UNK>
Reference: above calculation will always be 1, suggest to put some description why will it be 1 always.
Candidate: i disagree with the <UNK> of the <UNK> <UNK> is the software <UNK> situation.
Reference: my point is that this is probably just an oracle-specific thing. since oracle is really the only database blurring the line between schema and user and therefore it probably doesn't
Candidate: why do we need to here?
Reference: looks like we silently revert to totaltasks if the used entered an invalid value. shouldn't we error instead?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: again, don't you think the checking the internaldrivemapping and put it in the hashcode is relevant here?
Candidate: objects.equals()?
Reference: should this be package-access instead of public-access? callers should use archiveretrievaljobrequest.builder correct?
Candidate: this readasstring(...) instead of <UNK>
Reference: could you refactor this out into a checkreadable method which raises?
Candidate: why do we need the <UNK> here?
Reference: this can be more simple as getglustervolume().getvolumetype().isreplicatedtype() && getparameters().getreplicacount() > getglustervolume().getreplicacount()
Candidate: i don't think we need to check for the <UNK>
Reference: local dynamodb now supports booleans, i updated it in the dynamodblocal repo
Candidate: can we use <UNK> <UNK> <UNK>
Reference: a treeset is a sortedset. we can't check for equality here because insertion depends on the underlying comparator. please restore the previous version.
Candidate: you can use the syserr
Reference: not related to this pr, but could we just do isdeleted = (datastream.readbyte() == 1); here?
Candidate: should be be <UNK>
Reference: it's matter of taste, but instead enrichmenttagitem != null just true in this situation would be more understandable
Candidate: is there is be done in done in the original code is done in done in the <UNK> commands mbus > <UNK> > <UNK> > <UNK> > <UNK> > <UNK>
Reference: dog.addchangelistener((realmchangelistener) null);
Candidate: why do we need to clients?
Reference: should inner loop be inside transaction?
Candidate: please use <UNK> <UNK> <UNK>
Reference: to make sure that the try always throws an exception and hits this case, you should call assert.fail at the end of the try. right now, this test will pass
Candidate: you should be the fixture.
Reference: isn't there an option to convert the specific value to its desired unit from the values map and then call the executionmessagedirector.resolvestepmessage(steptype, values) instead of resolving the message first and
Candidate: why do we need the <UNK> here?
Reference: maybe you could use the new branchemail.getmessageclass() method to simplify this error handling (or something like it)? i hate to see this much code for an error message.
Candidate: what is this a reason for the <UNK>
Reference: 0? -1 doesn't make sense.
Candidate: can we be simplified to <UNK>
Reference: may be check for size>0 and log a severe message?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: typo: reasion
Candidate: why do we need need to the <UNK> here?
Reference: can object be not null and hasalternativecontent == false ? you could probably set object to null whenever you set hasalternativecontent = true, that way you won't need the class
Candidate: this should be <UNK>
Reference: same as above, please use the file name in the response ?
Candidate: why do we need the getconnection here?
Reference: these is wrong, if you want to prevent hot plug you should add appropriate check to hot plug command - snapshotsvalidator.vmnotduringsnapshot(), lock is used for other purposes.
Candidate: consider using a lambda as well as well as well as well as well as well as well as well as well as well as well as well as well
Reference: it is good to have this condition to be checked only when bytebuffer has any bytes to be read. so, it is better to leave where it is currently. it
Candidate: we should be the to the the <UNK> the the <UNK> the <UNK> is the
Reference: does currentplan.removerebaseinteractiveplanchangelistener(this); need to be done here in case it's not null? (or rather, should the lines below that do this be moved before this if.)
Candidate: this should be the <UNK>
Reference: please change the initial capacity of basicparameterclasslist to 15.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: (nit): not sure if this is any clearer that 1 (and 0) above.
Candidate: should we be the <UNK> here?
Reference: remove this method
Candidate: please use <UNK>
Reference: you have many problems here, i prefer to create a zipdatachecker object in class as a field.
Candidate: why do we need to use <UNK> here?
Reference: i'm wondering about the "length >= offset" check, does that make sense? 'offset' is represented as a position in the array and 'length' is just a length...for example the offset
Candidate: the syserr should be the
Reference: can't we have a property on the matter and update it when setdeclaredname() is called? that's might be over-optimization, but still - curious what is your opinion :smile:
Candidate: can we use the above...
Reference: my preference is to use org.eclipse.core.runtime.platform.getws() and getos()
Candidate: this should be collections.emptyset()
Reference: should we return true when an exception happens? we don't want to prevent people from accessing our app if something is wrong on our end. it's ok to have someone
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: why not java for (int i = position + 1; position < arraylength; i++) {  ditto for other implementations
Candidate: rename <UNK> <UNK>
Reference: don't call ts.getparameter(key, error) twice, put it in a local variable.
Candidate: please move the <UNK> of the <UNK> of the <UNK>
Reference: should build rather an immutable collection rather than using foreach to add to a mutable container
Candidate: why do we need need to the <UNK> here?
Reference: should work with static. in my imagination it results in one exclusiverule per command instance.
Candidate: should be setemptyelement().
Reference: shouldn't there be a null check here? clearselection() does set the map to null after all.
Candidate: please use the syserr
Reference: this is also valid, but it looks not a good convention
Candidate: can we use <UNK>
Reference: i think the bounded case should have explicitly no checkpointing enabled, so that we have recovery that re-executes the fully (goes back to the beginning).
Candidate: nit: use newline on line 110 line 110 line
Reference: kid shouldn't be set from the input. that is assuming that you have the correct keys for the jws, which may not be the case. further, this would prevent any
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: inet6adsreess -> inet6addresses
Candidate: is used anywhere?
Reference: i'm starting to think we need more than just a backport... * we could get a suspectexception here, if one of the nodes crashes during execution * we could also
Candidate: <UNK> *= 2;
Reference: nit: maybe simpler to read (and no need for 'return') with if (!annotationlist.isempty()) { call.addmarker(new inlinemarker(target)); }
Candidate: i don't think we need to check the the for the getcredentials
Reference: i would apply the same logic to the expires header
Candidate: should we be the <UNK> here?
Reference: nice feature -- refresh all after .items file changed, right?
Candidate: why do we need this?
Reference: es gibt einen .andexpect(redirectedurl("xxxxxxx")); matcher
Candidate: why do we need need to the <UNK> here?
Reference: perhaps word this a bit differently, successfully loaded path %s after %d attempts? also, is it possible for this to become spammy if a large number of files is to
Candidate: why do we need the exception here?
Reference: we could iterate over this with prefscreen.getpreferencecount -> prefscreen.getpreference(cout) and just hide anything that doesn't show up in the whitelisted keys, which would be a bit less verbose (and less
Candidate: why do we need the <UNK> here?
Reference: this is not a good practice to make a fragment static and reaching it with classname. you should use object oriented approaches instead. otherwise it will cause leaks.
Candidate: should we be the <UNK> here?
Reference: not sure that we are testing all the possible situations there. on my side i also tested with the following cases, without encountering any issues:  complexnestedgenericclass v1 = new
Candidate: why do we need to mock the <UNK>
Reference: should specify the generic type to avoid warnings: avroitemwriter< plainolduser >. we have a couple of them in this test class.
Candidate: why do we need the <UNK> here?
Reference: it looks like indentation is too large here and below.
Candidate: i'm not sure that the <UNK> is the <UNK> <UNK> <UNK> <UNK>
Reference: use butterknife to annotate contributorname field, and these findviewbyid lines could be removed.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if this is matters, but if the architecture is is the
Reference: please do not use an if-then-else to make the differentiation between 5 and 7 stars. instead create a new method in the connector interface, and implement it to return 7
Candidate: the syserr should be null
Reference: this could be "int" instead of integer here, to avoid an unneeded boxing/unboxing (since it's only used below as an int).
Candidate: why do we need this?
Reference: more concise version: options.overrideloginpassword(passwordoptional.or(passwords.generate())).
Candidate: please use <UNK> <UNK>
Reference: string repos = group.getrepositorydirectories().stream() .map(file::tostring) .collect(collectors.joining(separator)); preferences.put(prefs_group_prefix + groupid, repos);
Candidate: should we be <UNK> here?
Reference: i would return ""
Candidate: should we use <UNK> here?
Reference: any particular reason not to reuse the offsetvector?
Candidate: i disagree with the throwable evaluation. throwable : <UNK> { throwable = <UNK> } }));
Reference: we typically use illegalargumentexception for these kinds of checks.
Candidate: please stability of what? this should be be the stability of an enum?
Reference: are the tests assumed to be running on an arbitrary windows machine or do they operate in some sort of controlled environment (i.e. no need for the real windows installation
Candidate: why do we need the <UNK> here?
Reference: replace break with return?
Candidate: why do we need need to here?
Reference: suggestion list<restentry> entries = new arraylist<>();
Candidate: why do we need to use the here?
Reference: shouldn't you handle the numberformatexception?
Candidate: why do we need this check?
Reference: i think this layout should be called button_and_answer or something. i don't like suggesting that it's the "default" answer view.
Candidate: rename to <UNK> <UNK> <UNK>
Reference: the way i'm reading it is that the logic here flows as follows  if (requested resources fit entirely into available resources) remove the requested resources form the available resources
Candidate: why do we need the <UNK> here?
Reference: this bit shouldn't be required. if unixshacryptpassword extends abstractpasswordimpl (as it should), then the method to convert it to a key spec should be right on that class.
Candidate: why do we need the <UNK> here?
Reference: wrong indentation, code in condition might be mistaken for the code inside it. it should be: java if (uiditer != null && uiditer.term() != null && uiditer.term().bytesequals(buid)) {
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: should the new getapikeyactivitymetdata method be called here? and activitymetadata object be returned?
Candidate: why is the <UNK> suggests the the <UNK> suggests the <UNK> suggests the <UNK> suggests the <UNK> suggests the <UNK> suggests the <UNK> suggests the suggests the <UNK> suggests the
Reference: please not here. this is not a standard swt table.
Candidate: map::computeifabsent
Reference: unnecessary parens around dir != null
Candidate: why do we need the <UNK> here?
Reference: this code is not rebased on latest version...
Candidate: the syserr should be injected, so we don't need to use the <UNK>
Reference: do we need to test the older api here, is it enough to just test the new revision has the correct attachments?
Candidate: i appid
Reference: suggestion unit(string symbol) {
Candidate: should be setemptyelement().
Reference: @cti777 same here.. the check is only on then user endpoints.. if you are admin you can execute the operation no matter what..
Candidate: typo: <UNK>
Reference: there is an extra ',' in the end here
Candidate: can we update the (count != null && (count != 0) && (count != 0) && (count != 0) && (count != 0) && (count != 0) && (count !=
Reference: adding this to a field is good manner.
Candidate: please use <UNK>
Reference: @inject
Candidate: why do we need the <UNK> here?
Reference: this seems like an invalid state to me. you should be allowed to be in the same cohort twice, but not with overlapping dates. e.g. you'd need to end membershipaone
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i have some doubts that we need to update labels for the namespace where che server is running. maybe it's the job of the operator or another deployment tool.
Candidate: can we remind me if this is null?
Reference: all gettaskstate methods actually use the "getjobstate" permission. if a user has the permission to read the state of a given job, then he can read the state of any
Candidate: i don't think we need to check the if the is the software <UNK> but i don't think we need to do we need to check the <UNK>
Reference: rather than having this somewhat redundant single-use static method, i think it would be cleaner to remove it, and instead factor out the common initialization code from the constructor it's
Candidate: why do we need this?
Reference: again, not sure we should have servletexceptions in the dspace api module.
Candidate: this fail()?
Reference: you may be able to avoid compiler warnings about raw types by phrasing as: return type instanceof class<?> && ((class<?>) type).isprimitive(); you can use the straight-wildcard form of a generic
Candidate: this should be the <UNK>
Reference: i suggest you clean up the artifacts you created for this test once it's complete.
Candidate: should we be the exception here?
Reference: why did you not use a objects.nonnull(title) here like on other places and changes?
Candidate: what is this happen if <UNK> is the <UNK>
Reference: consider using assertequals on the html instead, here and below - since it makes tests much easier to maintain if they start failing. you might want to make this test
Candidate: why do we want to use the <UNK> here?
Reference: why change to , ?
Candidate: should we be the <UNK> id here?
Reference: i don't like this and i am not totally sure why. it smells like i could get a wfieldindicator with a bogus selector and as long as i got a
Candidate: why do we need to the <UNK> here?
Reference: wouldn't you want to see if the router is still working properly?
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: i noticed this constructor is deprecated. can we use the not deprecated one?
Candidate: can we use the builder here instead of construction.
Reference: why we're not using contants from plainjavaprojectconstants ?
Candidate: this should be the <UNK>
Reference: this might not work with some caches since resource isn't serializable. i'd recommend something closer to suggestion string jwks = cache.get(url.tostring(), () -> resourceretreiver.retreiveresource(url).getcontent()); return new resource(jwks, "utf-8");  return
Candidate: should this be <UNK>
Reference: why not objects.hash(x, y)?
Candidate: i don't understand this matters, what about the <UNK> of the <UNK> <UNK>
Reference: the capture of metrics and some assertions can probably be factorized and not duplicated.
Candidate: why do we need the <UNK> here?
Reference: space should be before the opening parenthesis, not after.
Candidate: why do we need the <UNK> here?
Reference: asma, do we still need this code after edit policy change?
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the
Reference: please remove if not req'd
Candidate: why do we need the <UNK> here?
Reference: how are you going to compute the entity id without the source id? also, please make "filesystempath" a constant.
Candidate: this should be <UNK>
Reference: i think it is better to move counter to handlewebsocketframe method for binarywebsocketframe
Candidate: i don't think we need to check if the is is the
Reference: i think it would be better to have this call at the end of the objcclass.register() method. just after the objcclass instance is created.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: can we replace "error undoing deploying" with something more descriptive? like what exactly are we trying to undo and why?
Candidate: the syserr should be the
Reference: could you check whether this one works alternatively:  super( new translatinggridtypedescriptor( character.class ), org.hibernate.type.yesnotype.instance.getjavatypedescriptor() );  would save that new grid descriptor type. the whole type business is far
Candidate: can we use the casts?
Reference: is this the right place for this code? shouldn't this be in the mainapplication class and guarded by the config#arefirebasepushnotificationsenabled check?
Candidate: can we call <UNK> <UNK> <UNK>
Reference: code repeated. get interactor from custom listener (if exists), else get it from template method. for both, attach, put and return
Candidate: can be simplified to <UNK> <UNK> ?
Reference: shouldn't this be "memory" instead of "mamory" ?
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: you need to pass statement.return_generated_keys as second argument (check line 55 on previous code)
Candidate: why do we need to use the here?
Reference: unchangedcommitmessage
Candidate: this should be <UNK>
Reference: revert this formatting
Candidate: this service service service service service service service service service service service service service service service service service service service service service service service service service service service service service
Reference: maybe add an assertion message: assertnotnull("message must not be null", message);
Candidate: nit: <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: this should return a url
Candidate: please use <UNK>
Reference: not sure but i think it should be really the last one in the list, or?
Candidate: can be replaced by: <UNK> <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: this is a query in loop again. for large lists, this could be a performance problem. we should see if we can use the breedingmethodmap we already have available in
Candidate: should we be the specific?
Reference: this seems like a lot of work to basically always return new stringdimensionhandler(dimensionname, multivaluehandling), but i assume it's meant to be fleshed out a bit later.
Candidate: should we be the <UNK> here? if we { null) { return <UNK> } { return <UNK> } { return <UNK> }
Reference: please consider adding an overridden version of the script(string, int, logger) constructor that accepts duration to encapsulate this type conversion.
Candidate: please consider adding an overridden version of the script(string, int, logger) constructor that accepts duration to encapsulate this type conversion.
Reference: constructors that exist only for codec / jackson should be either protected or private. that'll probably also handle the warning.
Candidate: super() should be spared
Reference: if we are performance concerned, i would recommend adding  if (w.checkerror()) { return; }  as no sense continuing if printwriter has already suppressed the ioe
Candidate: if we is software software <UNK> software <UNK> software <UNK> <UNK> software <UNK> should be the software <UNK>
Reference: git is just one implementation of version control, should be getrepo(0) instanceof notebookrepowithversioncontrol
Candidate: why do we need the <UNK> here?
Reference: spaces between expressions please: (startidx >= 0) ? (startidx + 1) : startidx; here and below.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: i think we might need to add a slightly longer wait. using the exact timing may still cause failures on slower computers. maybe +1 second to it?
Candidate: why do we need to check the <UNK> here?
Reference: applog.e already logs the stack trace, so e.printstacktrace() isn't necessary here.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what's the reason to need to change this?
Candidate: why do we eating the exception here?
Reference: webdriver#findelement will throw nosuchelementexception if the element doesn't exist, so it will never be null here. you could use abstractelement#findelementifexists to get the element or null, but it makes more
Candidate: should we be the <UNK> here?
Reference: this kind of logic is indicative of awkward separation of list modes. i would prefer to use a set<directorylistmode> and provide a simple factories to construct the sets a la
Candidate: please use the <UNK>
Reference: this if can be combined with the if starting on line 162.
Candidate: can we move this logic into a constant.
Reference: thrown a notfoundexception (if it is not declared, you should create it). this exception should be catch in the interceptor and to response with 404 not found!
Candidate: why do we need the <UNK> here?
Reference: replace the 1 with a constant that describes what actually that value is?
Candidate: please use <UNK> <UNK>
Reference: maybe we can use stringutils.empty.
Candidate: why do we need to use <UNK> here?
Reference: we shouldn't care about source in this context. if resolvedoafobject is not null we are fine.
Candidate: why do we need need to be overridden?
Reference: if you use the some, how about removing the this.s.
Candidate: why do we need need to be <UNK> here?
Reference: please rename to match the action: activate/deactivate
Candidate: please remove the <UNK>
Reference: you don't need this null check. if the factorypid is null, then the next condition will return false since the accepted_entry_factory_pids doesn't have null as one of its items.
Candidate: i don't think we need to check the <UNK> <UNK> <UNK>
Reference: that's much better - but can be even better: no need to explicitly create the callable. just invoking entry.getvalue().apply(store) should allow it to appear as a callable.
Candidate: why do we need the <UNK> here?
Reference: i think you can move the message into the illegalargumentexception exception. the log statement is optional.
Candidate: this should be the <UNK> <UNK>
Reference: primitivetype.stringifier() is for the api user. this one might be package protected.
Candidate: can be replaced by: <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: could we change the signature of constraintviolations.determinestatus from  java public static int determinestatus(set<constraintviolation<?>> violations)  to  java public static <t> int determinestatus(set<constraintviolation<t>> violations)  doing so, we can
Candidate: why do we need to mock <UNK> here?
Reference: this check is not necessary. formatedtime is already doing it.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit: acquire the a new lock
Candidate: c2 redundant? redundant? redundant? redundant? redundant?
Reference: formatting issue. extra space before ==
Candidate: if <UNK> != null) { throw <UNK> }
Reference: this looks incorrect - record can be instantiated.
Candidate: this should be <UNK>
Reference: the list of hardware profiles should also include the cpu. i see two things to improve here: - provide more cpu/ram combinations (otherwise is not enough flexible), such as providers
Candidate: why do we need the <UNK> here?
Reference: why are you using completablefuture.runasync here instead of executorservice.execute(super::run)?
Candidate: why do we need the <UNK> here?
Reference: please extract this if-else to method getregexcompileflags.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: this would mean, all access to windowcache started *before* the job runs will use *not* the settings from current workspace. in worst case this can lead to crashes on linux
Candidate: can we use the [] here?
Reference: maybe use camelcontext.getexecutorservicemanager().newsinglethreadscheduledexecutor(...)
Candidate: i don't think we need to do we need to check the the <UNK> <UNK>
Reference: can move this block above
Candidate: this should be <UNK>
Reference: this is quite different from how the blog title is set in [refreshblogdetails](<link_0>
Candidate: you can use <UNK> <UNK> <UNK>
Reference: my fault again - these do need deleteonexit, or better yet unset index_on_the_fly except in one test specifically for the index case.
Candidate: i don't understand this matters, if we matters, but this is is the to the <UNK> <UNK> the <UNK> is the <UNK> the <UNK> bottleneck.
Reference: should this be <=, just check.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should be boolean
Candidate: can we use <UNK> <UNK> <UNK>
Reference: if we have this mergeconfig() method, then all the buildconfig fields should be optional<> to make merging easier
Candidate: please use <UNK> <UNK> <UNK>
Reference: missed this before: inject an objectmapper here rather than creating one.
Candidate: can we use the <UNK> here?
Reference: since this method is designed to read $home/.td/td.conf, it is better to print the warning in case of file not found.
Candidate: this should be setemptyelement().
Reference: this change seems redundant with the other ones in the file: the constructors now handle the lowercase conversion.
Candidate: why do we need to check the <UNK> <UNK>
Reference: can we make the expring time a constant?
Candidate: please use <UNK>
Reference: there is no need to create a geometry factory for every request, i can be a static final field
Candidate: should we print stack trace to debug level?
Reference: this effectively overrides gwtp tabcontainerpresenter#setinslot(isslot<t>, t) method, which looks like this: ... try { presenter<?, ?> presenter = (presenter<?, ?>) child; tabcontentproxy<?> proxy = (tabcontentproxy<?>) presenter.getproxy(); getview().setactivetab(proxy.gettab()); } catch (exception
Candidate: please use <UNK> <UNK> itemstack, boolean)
Reference: i know that transcriptiongateway#stop() doesn't do anything right now, but i think we should call it here anyway.
Candidate: we should need to hide the events in the
Reference: nit: please pick more descriptive variable rather than r
Candidate: <UNK> evidence, the columns should be replaced by <UNK>
Reference: here we should return the summary_organization profile rather than the summary_station profile.
Candidate: can be replaced with <UNK> reference: <UNK>
Reference: 1. it seems like this method's name is wrong (two "account"s in it) 2. you don't need to qualify it since it's within this class, right?
Candidate: @exper0 let's use <UNK>
Reference: i feel a lookup table is justified here. we can generate the lookup in a static constructor and populate it with the sine and cosine values for 0-360 degrees. seems
Candidate: you don't need to use the <UNK> <UNK>
Reference: the find method will throw an exception if not found, so the assertion below is redundant. use tryfind if you want to be explicit or just remove the assertion.
Candidate: can we make this <UNK> private?
Reference: this null check seems unrelated now that the data is set by the activity. formentryactivity.setbinarywidgetdata does that check anyway so i think it's clearer to remove it.
Candidate: why do we need the <UNK> here?
Reference: this will destroy the content in all languages that exist and cannot be undone
Candidate: why do we need the <UNK> here?
Reference: nit: previously this function always returned a string; now it's returning null? might be safer to just change the usages of .charat() here.
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: just nic instead of nicref ?
Candidate: why do we need need to the <UNK> here?
Reference: nit: is there a reason we can't use e?
Candidate: why do we need the <UNK> here?
Reference: just "true" or boolean.true would be better here.
Candidate: i don't think we need to check the if the is is the
Reference: this check can be dropped.
Candidate: should we be the <UNK> here?
Reference: since there are two key sizes, there should be two algorithms: "sha-256-crypt" and "sha-512-crypt" look like sensible names.
Candidate: the syserr should be be the
Reference: the default in tablemetadata is retry_on_write_write, is this intentionally different?
Candidate: <UNK> *= 2;
Reference: arraylist constructor can be called with initialcapacity.
Candidate: this should be the <UNK>
Reference: asserttrue
Candidate: why do we need the fully-qualified name here?
Reference: as we also pass the response object around, is it possible to get the content size from the response object instead of passing contentsize?
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: @email2vimalraj could you provide these checkings: java import static com.google.common.base.preconditions.checkargument; import static org.apache.commons.lang3.stringutils.isblank; ... public activity(string apppackage, string appactivity) { checkargument(!isblank(apppackage), "app package should be defined as not empty or
Candidate: why do we need the <UNK> here?
Reference: use setclass method if possbile
Candidate: why do we need to mock <UNK> here?
Reference: json supports int and float as number types, so could leave the conversion to strings away. this would result in "statuscode": 1 instead of "statuscode": "1". but maybe a matter
Candidate: should we move this to debug level?
Reference: maybe listing verified states as an enum and using the enum values as cases, instead of hard coded integers, will make things easier to read. for example, which state are
Candidate: you can use <UNK> <UNK> <UNK>
Reference: bad rebase
Candidate: i don't think we need to evict the the to the the <UNK> the the <UNK> is the
Reference: insert a checkargument(ttltimeprovider != null, "ttltimeprovider" ) here
Candidate: please use <UNK>
Reference: since you removed throw new launcherstartfailedexception(); this method should not throw such an exception anymore. suggestion private platform getplatform() {
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: equals(), not ==
Candidate: i think this should be the if the is is the <UNK> <UNK> is not the
Reference: int enbale = 1;
Candidate: why do we need to use the payload?
Reference: why expanded format?
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: minor: the three logging statements in this method use three different conventions when referring to interfaces: "does not implement ..." vs "does not implement an interface with name ..." vs
Candidate: why do we need to here?
Reference: this can be simplified as return (isinit && initexception != null);
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this should be the same functionality (do we have a test covering a change like this?)
Candidate: shouldnt this returns null?
Reference: if you have more than one thread waiting in take() or blockingpeek(), this will wake up only one of them. shouldn't it be signalall() ?
Candidate: why do we need need to check the <UNK> here?
Reference: this is missing the translation of bb.putlong(eid-1);, and the allocation needs to be updated to match it.
Candidate: you don't need to use the <UNK> <UNK>
Reference: iddto object is more readable
Candidate: why do we need the <UNK> here?
Reference: i don't really like this. the goal of these samples is to stand alone. any alternatives?
Candidate: why do we need to here?
Reference: seems like this method would be good to have protected and non-static, so people could override the combination algo.
Candidate: i don't need to evict the <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: nit: can it be moved to the first place? in case it needs to skip action, it will save some some time to look up the table descriptor.
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: add @since 5.1
Candidate: why do we need need to the <UNK> here?
Reference: why there is no interface for blobstorecompactor? even if this is tied to the blobstore implementation, we can think of people wanting to have their own implementation for compaction. for
Candidate: do we need to do we need to do we need need to do we need to do we need to do we need need to do we need to
Reference: we could just pass null to every parameter here, there is no need for mocking in this case.
Candidate: should be replaced with <UNK>
Reference: i think this might be better with an assert,checknotnull check - in what situations could the supported protocols and cipher suites be null?
Candidate: why do we need to check for the <UNK>
Reference: do we want to check for possible null values in sl.getidentifier() and sl.getdisplayname() and fallback to empty string ""?
Candidate: why do we need to use <UNK> here?
Reference: destination.getparent() return the same thing but is more readable in this context i think
Candidate: why do we need the <UNK> here?
Reference: again on future tense as above.
Candidate: thank you appreciate pointing for you.
Reference: warn ?
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: can't you do this as a member variable? instead of creating it every time?
Candidate: why do we need to clients?
Reference: let's move this above any other work
Candidate: this future: can be replaced by objects.isnull
Reference: missing closing )
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: ideal candidate for a method ex. addrealmparameters?
Candidate: why do we need to here?
Reference: use class loader of handlertype
Candidate: this should be the <UNK>
Reference: static import
Candidate: why do we need to check for the <UNK>
Reference: as with other places, skip fields and don't add to map if empty strings.
Candidate: this should be <UNK>
Reference: @darkled here too, let's declare exception being thrown, as suggested [here](<link_0>
Candidate: why do we need to use the <UNK> here?
Reference: instead of character.valueof(char).tostring(), just use string.valueof(char)
Candidate: i don't think we need brackets to the brackets anyway, but it makes sense to inadvertently inadvertently the the inadvertently contents?
Reference: brickdetails.getbrickproperties().getbrickid() could be null if the brick is not present in db
Candidate: use <UNK> instead.
Reference: hi! this is the duplicate code
Candidate: should we use the exception here?
Reference: i'm comfortable with throwing an illegalargumentexception for this, which lets you use utils.validatearg.
Candidate: please use <UNK> <UNK> <UNK>
Reference: no need for the or, is has multiple arity.
Candidate: i don't understand what if the is does.
Reference: scheduledexecutorservice.shutdown(); scheduledexecutorservice.awaittermination(..);
Candidate: i don't think we need to close the dispatcher as well.
Reference: this isn't right. enabling autofixes disables the cache even if the file has no violations / no violations that are actually autofixable. we are reprocessing all files for no reason
Candidate: why do we need the <UNK> here?
Reference: invalid reference to output of select clause from grouping() expression in order by or something like it.
Candidate: please use <UNK> <UNK> <UNK>
Reference: please have static factory methods for calendars that take 2, 3, and 4 arguments. consider placing them into a class calendars that in the same package with tests.
Candidate: please use <UNK>
Reference: this try-catch can be moved to the @test annotation as well.
Candidate: please use <UNK>
Reference: consider changing the default pattern "\\s+"
Candidate: should we use the <UNK> here?
Reference: same here with notebook instance
Candidate: why do we need to the the payload?
Reference: let's stream the topics and use a collector in the end.
Candidate: why do we need to use <UNK> here?
Reference: could use the constructor extensionadaptor(string) with name as parameter (initialize() could be removed).
Candidate: i don't need to call the <UNK> <UNK>
Reference: i think you improve that now :-) ## chico sokol on mon, nov 3, 2014 at 3:59 pm, monitorjbl notifications@github.com wrote: > in src/main/java/org/mamute/search/solrquestionindex.java: > > > - string answer
Candidate: why do we need the payload?
Reference: shall we use java 8 streams here?
Candidate: can you use <UNK> <UNK> <UNK>
Reference: can we write line 395-440 with one simple stream().filter? nothing wrong with code itself but just a thought.
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: should pass address instead of null for the name
Candidate: why do we need the <UNK> here?
Reference: this method seems to be indented an extra level. the file also seems to use tabs not spaces. running the gradle spotlessapply task should correctly format things.
Candidate: @exper0 username?
Reference: seems like getvm() can't be null here....it's checked within candoaction
Candidate: i don't understand this matters, if we matters, but i don't understand why, but it matters, but i don't understand why, but it matters, but i don't understand why, but
Reference: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Candidate: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Reference: parentheses around timestamp ... are not needed
Candidate: you can use <UNK> <UNK>
Reference: you can put the profile within the userprofile class... you already had it no? and fail if no (return null from translateuser).
Candidate: why do we need to the the payload?
Reference: i think it might be better to use another exception specific to this case, something like localtargeturlproxyexception.
Candidate: should we be the <UNK> id here?
Reference: isn't concurrency_level and lock_acquisition_timeout missing?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: bad formatting
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: type can be encoded as a number instead of string, you can probably use valuetype.xxx.ordinal() as encoding. io.druid.segment.column.valuetype is an enum defined with the types.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: perhaps export the length to a constant
Candidate: why do we eating the exception here?
Reference: i mentioned this in the review of the patch that adds this method, but this doesn't actually implement backoff for the full timeout. it just ensures you'll get another callback
Candidate: why do we need to check for the <UNK>
Reference: did you verify this isn't going to break any existing test assumptions? we probably shouldn't modify this as we don't know what impact this is having on existing tests. it
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: endswith -> contains to make it more robust
Candidate: i don't need to check for the <UNK>
Reference: thanks for breaking this down into smaller chunks!
Candidate: why do we need to <UNK> here?
Reference: this can be package private
Candidate: this should be <UNK>
Reference: minor: we could decide this outside of the factory method to avoid "on-call/on-demand" instanceof checks
Candidate: can we move this to the <UNK> <UNK> <UNK>
Reference: i'm not sure if in 100% the ui identifier should be same as model attributename. see smap above. may be you should add methods with one more attribute identifier for
Candidate: this will end end sufficient?
Reference: what about more meaningful variable name, instead of br, browser or currentbrowser?
Candidate: why do we need to the <UNK> here?
Reference: could move this line above line 232.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: you can drop this logging here.
Candidate: e.getcause() should be omitted.
Reference: please use parserexception instead of the uncheckedioex.
Candidate: why do we need to use <UNK> here?
Reference: if transports is private, there is not really need for a method that wraps list add.
Candidate: the syserr should be be the <UNK>
Reference: public
Candidate: can you use the for-loop here instead of <UNK>
Reference: just in case, i think you can search and replace to use your previously created enum sourcecontrol. i doubt we'll change the prefix, but just in case.
Candidate: this fail()?
Reference: it's really hard to guess why olddefault and newdefault are called like this
Candidate: do we need need to check if <UNK> != null) || <UNK> { <UNK> }
Reference: is this test not missing an assert ?
Candidate: fbot can be used anymore.
Reference: i'd like to see this refactored, it's a really long method atm.
Candidate: do we need to check the <UNK> <UNK> <UNK>
Reference: in that case, it's better to use fluentiterable.filter since iterables.filter creates a fluentiterable anyway.
Candidate: should we be <UNK> to <UNK> <UNK>
Reference: i think this is a better way of handling the situation, compared to throwing the exception. shall we remove the exception instead? if you do, revise ui tests accordingly.
Candidate: why do we need to the the payload?
Reference: @droneboost here you can just call mpanmode.compareandset(current, update) to accomplish the intended functionality. you especially don't want to unregister the event receiver since it's filtering over events besides the drone
Candidate: should we be <UNK> here?
Reference: might as well make a constant out of this
Candidate: the syserr should be be the
Reference: i would declare this variable inside the try / catch block too.
Candidate: <UNK> -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: this is the place where the filtering should be moved to
Candidate: the syserr should be be <UNK>
Reference: this can be simplified using incompatiblepluginmap.computeifabsent.
Candidate: <UNK> *= 2;
Reference: what's the purpose of this? is this to resume migrations that were not done (or service did not receive result) and crashed? if so that is too optimistic i'd say
Candidate: the syserr
Reference: closequietly again?
Candidate: why do we need to check the <UNK> here?
Reference: i think this method should de-register the actor in the future and thus this would help explain the difference between contexts like this where the actor should not resurrect and
Candidate: should we be the <UNK> here?
Reference: list objects of the values of map are shared between two maps. same at getservermetrics().
Candidate: should this be <UNK>
Reference: get shell from control of current element, i.e. getcontrol().getshell()
Candidate: why do we need to use the <UNK> here?
Reference: do we need to check the project == null here?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this can go in the while() loop now and become final.
Candidate: i don't think we need to do we need need to print the stack trace twice, since it is opened, it will be opened, it will be opened, it is
Reference: @vilchik-elena i would prefer avoiding a field (statements) for that.
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to check if the is the
Reference: why do we need a map? the list of noncountablequtoavmstatuses is of size 5!!! even if it will get to size 10 it is still redundant. you can just use
Candidate: this should be the <UNK>
Reference: these could be simplified further by importing import static uk.gov.pay.connector.common.model.domain.paymentgatewaystatetransitions.isvalidtransition;
Candidate: why do we need to mock <UNK> here?
Reference: separate this chunk out into a helper function
Candidate: this should be the <UNK>
Reference: i was a bit confused at first, just because the root node isn't the usual jsroot (the parent of all input files). can we add a preconditions check that root
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: is this block checked by automated test? how safe is the update here?
Candidate: if <UNK> == null) { <UNK> }
Reference: even after getvmid() is checked, getvm() can return null here and cause to npe.
Candidate: should be setemptyelement().
Reference: if the cookie doesn't contain '=', then it looks like an arrayoutofboundsexception will occur here.
Candidate: can we move this to the 83 <UNK> if (state != null) { return false; }
Reference: it's more conventional to return 1 on failure.
Candidate: can we be able to be able to be able to be able to be able to be able to be able to be able to be able to be
Reference: add an assertion here for the files being downloaded and extracted successfully?
Candidate: why do we need need to the <UNK> here?
Reference: same, why not set what is coming in here ?
Candidate: should we throw an exception?
Reference: how can you get here runtimeexception? if you can, isn't it better to set retvalue to false here.
Candidate: s/ with the log.
Reference: avoid negation for readability?
Candidate: this should be <UNK>
Reference: sounds great. but what you think to change throwifnotvalidationexception to receive only e.getcause and instantiate a applicationlogicexception only in the 122 line? <link_0> because this catch and the subsequent catch
Candidate: the syserr should be be the
Reference: saying that a sku is inactive means that it's not for sale whereas the inventoryunavailableexception is really used for when a sku is active but it doesn't have inventory at
Candidate: should we be the <UNK> here?
Reference: add {} to avoid future bugs.
Candidate: can we use the <UNK> <UNK> generation?
Reference: need to use parameterized logging instead of string concatenation. this should also be a warning, not an error.
Candidate: should we be <UNK> here?
Reference: yes indeed, my mistake
Candidate: should we use the <UNK> properties?
Reference: is it worth extracting this stream processing into a separate method and giving it a meaningful name?
Candidate: what happens if the exception occurs, we should be interrupted. we should do interrupted. that we should do we want to do we think?
Reference: japanesetokenizer t -> tokenizer t = new japanesetokenizer
Candidate: should this be the token token token token token token token token token token token token token token token token token token token token token token token token token token
Reference: protip, arraylist has a constructor that takes and array, also all lists have a addall function.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: you need to do the settitle() on r.id.switch_logs.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't think
Reference: i would prefer constant there.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this should be "principaldecoder", i guess.
Candidate: i don't think we need to use the <UNK>
Reference: use elements.iterator() (of type java.util.iterator) instead of list.ofall(). this will save cycles and memory
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: should you adhere to http policy? what if it is https?
Candidate: this should be the <UNK>
Reference: how about something like this instead:  .split(this.clients, "iterator")  ?
Candidate: i don't think we need to use the anywhere, but it should be minimized to
Reference: is it feasible to include the resultset in the try so it is closed via autocloseable?
Candidate: you can write this method.
Reference: any risk in using !connection.isopen() ?
Candidate: this should be workspacejob be processed in the <UNK> and then threw an exception if we don't want to throw an exception if we don't want to raise an exception
Reference: i think you can just drop this parameter, and the mib constant and that is the entire commit.
Candidate: we don't need to close the stream.
Reference: typo
Candidate: we should need to use the to the
Reference: we should just pass preferredorderingcolumns to make it consistent
Candidate: should be be <UNK>
Reference: also, perhaps the new setting should be mentioned in the commit message.
Candidate: why do we need an unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not enum?
Reference: error message should read:  could not import "$class", class not found.
Candidate: i don't understand why we need to check the the optimization?
Reference: setfield is meant for api fields. we don't want this as an api field, we want it as a internal flag. instead use dataaccessor.fromdatafieldof(v).withkey(volumeconstants.field_last_allocated_host_id).set(newhost)
Candidate: this we move this logic into a <UNK> to clean up with the packet:  <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> } <UNK> e) {
Reference: what about just doing string pwd = file.getproperty(id) here and then create an instance of kieserverinstanceaccount from it using return new kieserverinstanceaccount(id, pwd)? we don't need to iterate over the
Candidate: why do we need to use <UNK> here?
Reference: suggestion  i think we to make dorunwithobjectsafepoints private and the finally clause of dorun already does this. what do you think?
Candidate: i don't think this is overwrites the <UNK> is the
Reference: you need first an assertion that the order type exists before purging it otherwise would be invalid if none matched id 3
Candidate: why do we need to evict the <UNK> here?
Reference: no. random ports will be a disaster. when it does eventually collide you won't know it and people will just rerun. my recommendation, and we did it in pce, was
Candidate: why do we need to use try-catch-fail
Reference: i don't think you should sanitize at this class. this will be an unexpected twist for other callers of this class that are not jsp.
Candidate: @exper0 let's use <UNK> instead of <UNK>
Reference: what's the point? the method is always false for defaultdebugexecutor.executor_id without your changes.
Candidate: the syserr should be be <UNK>
Reference: e.printstacktrace(); prints to stdout, not appropriate for production code. use log.error("failed to open {}: ", path, e) here so the stack trace will still be printed. with claiming private static
Candidate: why do we need to use <UNK> here?
Reference: maybe a more descriptive exception like illegalargumentexception or unsupportedoperationexception?
Candidate: can you use <UNK> <UNK> <UNK>
Reference: a bit hard to follow, but does make the following tests really easy
Candidate: you don't need to use the <UNK>
Reference: intended change in functionality here? and wouldn't the default value null that's being passed here immediately cause an npe?
Candidate: this should be the <UNK>
Reference: don't need that check, snapshot are relevant only for image disks
Candidate: ![major](<link_1> 'severity: major') reduce this number of 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
Reference: please don't introduce such useless and unrelated constructs in patches.
Candidate: should we catch <UNK> <UNK>
Reference: ide says that malformedurlexception is never thrown, so can be removed. going further i'd replace listing all exceptions with one top level exception.
Candidate: do we need to catch <UNK> here
Reference: just return this.count < this.values.count();
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: does that work without kotlin on the classpath? or is that class never even used then? because otherwise it won't be able to be loaded, wouldn't it?
Candidate: why do we need need to be <UNK> here?
Reference: hbasetestingutility has some nice waitfor() methods which simplify this kind of logic
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: locale currentlocale = getcurrentlocale(); here
Candidate: use <UNK> <UNK> <UNK>
Reference: this would be a good place to use a try-with-resources block: java try (zcontext ctx = new zcontext()) { socket push = ctx.createsocket(sockettype.push); assertthat(push, notnullvalue()); }
Candidate: why do we need to use assertj's here?
Reference: branchoperation locks resources and thus should not execute in ui thread.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: java return issendcomplete() ? 0 : channel.write(buffer);  if you want to make it more elegant.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: returning null from this method is likely to call an npe in the caller code.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> the <UNK> generation?
Reference: please use stringbuilder
Candidate: use <UNK> objects.tostringhelper() for <UNK>
Reference: nit: you may want to inline this method as it is just logging with log.error(errmessage, ex)
Candidate: we should need to check if the is is the
Reference: just curious why you departed from using setfield(... ?
Candidate: why do we need to mock <UNK> here?
Reference: same here, should be a constant
Candidate: please rename <UNK> to <UNK>
Reference: nit: should it use expr.arg_joiner?
Candidate: this should be <UNK>
Reference: querying
Candidate: <UNK> *= use <UNK>
Reference: use 2 spaces instead of a tab character.
Candidate: i think we should be <UNK> to the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: weak test, content negotiation in ogc api services can also be done via "accept" headers.
Candidate: <UNK> *= 2;
Reference: we shouldn't do all of this ourselves. you can use class properties, that does exactly the same, in one line "load(inputstream is)"
Candidate: why do we need to use the here?
Reference: use constant
Candidate: why do we need to check here?
Reference: this if/else block is replicated below modulo a log statement. private method?
Candidate: why do we need snapshotid here?
Reference: everything from here down must be in a try/finally block so that we cannot possibly leak that database connection. right now if the patch set comes back as null (missing
Candidate: i don't think we need to throw an exception if the exception is skipped, then we don't want to throw an exception, it will throw an exception
Reference: as this class is abstract, i think this should remain protected.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: these error message constants should be updated to say "constructor or static factory method" instead of just "constructor."
Candidate: should we use the <UNK> properties?
Reference: in this case it is more appropriate to return immediately (the item is an inprogress submission so to discover the right collection you should queries the workspace and workflow tables)
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: why this change?
Candidate: this should be <UNK>
Reference: sure, it would be faster to use long. it's a tradeoff between speed and maintainability. if a method returns to int's i find it easier to understand (and maintain) if
Candidate: why do we need the <UNK> here?
Reference: i'm wondering if we really need to recheck so soon - seems like we could recheck in a few seconds and still provide a good experience.
Candidate: i don't think we need to check the if the is is the
Reference: to reduce the number of methods that begin with the word remove, maybe we should call this handleliteral.
Candidate: why do we need the <UNK> here?
Reference: rolling back this suggestion assertvalidaudienceclaim(jwt.getaudience(), (list<string>) entry.getvalue());
Candidate: nit: you can use 4 spaces around 4 spaces indentation.
Reference: since it seems like pretty much every call to withcontext needs to pass this constant, i think it'd be helpful if we defined something in storage.common that's like withtracingcontext or
Candidate: the syserr should be be the
Reference: the exception shouldn't be silenced here?
Candidate: can we use the <UNK> here?
Reference: why not just log the duration?
Candidate: we should need to use the in the <UNK>
Reference: catch ioexception in index(...)
Candidate: why do we need to use <UNK> here?
Reference: need default case?
Candidate: if we is the software <UNK> software <UNK> should be be the
Reference: i would simplify the constructor - if the user has supplied an 'otherstatus', you don't need them to supply an operation status, you can automatically make that other.
Candidate: move this logic outside of the packet:  try { try { <UNK> }
Reference: not sure but the use of handle_id here looks strange to me. i have also found this post on stackoverflow <link_0>
Candidate: should we throw an exception here instead of returning an exception?
Reference: this might be obsolete if isvaluevalidis implemented...
Candidate: please remove the <UNK>
Reference: i'm not sure about this optional  i believe you should just throw here (equivalent to enum.valueof)  actually the only use you have in this pr simply calls .get()
Candidate: this should be <UNK>
Reference: closeablehttpresponse implement autocloseable. replace finally with try-with-resources.
Candidate: i'm not sure that this is a bug on notifying the <UNK>
Reference: if certificate is null, line above will raise npe
Candidate: can we use <UNK> <UNK> <UNK>
Reference: nit: spaces around /
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: revert this, as it's been fixed by emi's changes for running equiv on full publisher
Candidate: this should be thrown as well.
Reference: maybe create a method iswindows() containing: system.getproperty("os.name").startswith( "windows" ) to avoid writing the same code many times
Candidate: this fail()?
Reference: maybe default arrival time to currenttimemillis here?
Candidate: should we use the <UNK> here?
Reference: @danielezonca pls check for null in e.getmessage; if null, provide a meaningful substitution
Candidate: can we use stringbuilder?
Reference: is it safe to assume that this list is non-empty? if it's empty, then accounttouse will remain null.
Candidate: i don't think we need to check if the is is the
Reference: style-nit: useless catch/throw. just don't declare the catch, and it'll throw on its own to the caller.
Candidate: why do we need the lock again?
Reference: this was in your original code, but puzzling nonetheless. what is gained by shifting the elements of the permuted list by 1 position before assigning them into the array? why
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: rather than making the app crash, the sdk should handle this case and dismiss the notification
Candidate: can we make this private?
Reference: unnecessary brackets here ;)
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: perhaps we should assert here that the size of keys does not exceed the isstandard limits (15, i think?)
Candidate: i map<> <UNK>
Reference: @captain-p-goldfish can you please define this error message as a constant in responsecodeconstants class?
Candidate: please use <UNK>
Reference: reformat the code. there are two spaces here.
Candidate: do we need to bind <UNK> here?
Reference: can be done in one line ??
Candidate: why do we need to call <UNK> here?
Reference: nit: illegalargumentexception, unsupported spatial join type:
Candidate: why do we need to here?
Reference: check buffer null.
Candidate: i don't think this the <UNK> is the <UNK> <UNK>
Reference: given that everything is in memory, a 1mb buffer seems large. maybe something like 32k?... not sure this matters either way
Candidate: can we use an enum here?
Reference: instead using the injector here, pls use the @inject annotation, and when you intend to use glusterstoragedomaindrsyncjob, declare it using @inject or using injector.get(glusterstoragedomaindrsyncjob.class);
Candidate: super() should be spared
Reference: same, looks like this could blow up if you pass in an empty array
Candidate: i don't think we need to check for the situation.
Reference: attributes is deprecated. it's attributestoretrieve now. instead of manually mingling with the attributes, i would create a query, call setattributestoretrieve() then build() and boom! here you go: simpler, more reliable.
Candidate: why do we need the <UNK> here?
Reference: it could use the same method as the other statements.
Candidate: should we throw an exception here instead of returning null?
Reference: wso2
Candidate: this should be an exception here instead of returning an empty string.
Reference: s/for/to a/
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: close inputstream as well?
Candidate: why do we eating the exception here?
Reference: there's a good few methods here that have a higher wider access modifier than they need to. on the track here, we try to [adhere to best practise](<link_0> as noted
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: i should start at 1, as it's already processed by the preceding loc.
Candidate: why do we need the <UNK> here?
Reference: please call  super(statuscode);  and same thing for the 3 below.
Candidate: should be be <UNK>
Reference: how do these pass semaphore, which is running without campus vpn?
Candidate: can we use the <UNK> here?
Reference: are you changing the field from non-required to required?
Candidate: if (state { <UNK> newvalue = <UNK> -> <UNK> number) newvalue -> newvalue -> newvalue -> newvalue -> newvalue -> newvalue -> newvalue -> newvalue == <UNK> })); newvalue ->
Reference: do we really want to catch all exceptions here rather than just securityexception?
Candidate: i don't think we need to trim entries?
Reference: this null check seems redundant.
Candidate: why do we need the <UNK> here?
Reference: take the if before try
Candidate: should we catch (throwable <UNK> e) { return; } <UNK> e) { throw (long <UNK> } }
Reference: i would use instead entity.getparent() instanceof ambariserver ? ((ambariserver) entity.getparent()).getfqdn() : null;
Candidate: this should be setemptyelement().
Reference: what if both object have id==null? then they are not equal?
Candidate: this should be the islocal as well.
Reference: in the main method, you used this without checking null?
Candidate: should we be <UNK> here?
Reference: wouldn't it make sense to test first for value != null? that way you wouldn't compute that line all the time but only if necessary.
Candidate: should be be the <UNK>
Reference: shouldn't this be a constant somewhere
Candidate: why do we need the <UNK> here?
Reference: let's check that there is no cause
Candidate: please use <UNK>
Reference: need to retrieve cert's subject name instead of issuer. here is sample code certification.getsubjectx500principal().getname()
Candidate: use readasstring(...) instead of <UNK>
Reference: :pencil2: i think you could log e.getcause() instead since an executionexception just wraps the real exception that occurred. also, if your value loader function throws an unchecked exception (and i
Candidate: should we throw an exception?
Reference: object o is never used. suggestion
Candidate: why do we need to call <UNK> <UNK> <UNK>
Reference: i think there is something missing here (or when you're building the queries). in gnocchi, if you dont' specify a granularity (<link_0>, it will return back all granularities associated with
Candidate: please use <UNK>
Reference: can this go in requestactionsupport
Candidate: why do we need the <UNK> here?
Reference: sex language, it exists!
Candidate: this should be <UNK>
Reference: why not call it map like in other uses?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: how about extracting this lambda into a separate method? then we could replace the lambda with a method handle to the extracted method. let's discuss this separately.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: bare in mind that, even if non-conventional, people may simply write @org.junit.ruletoo
Candidate: why do we need need to the <UNK> here?
Reference: i thought prob = 1 will generates a matrix filled with ones, but the code will generate a matrix with zeros.
Candidate: please remove the method("post")
Reference: reducto this duplicate line
Candidate: why do we need to check on the <UNK> ?
Reference: i think technically this check is not necessary, since the remove() method says it removes a key if it exists and does nothing if not.
Candidate: why do we need to check for the <UNK>
Reference: honestly i'm thinking whether it would make more sense to literally inline the template text as static content here, although that would make the permgen size of this file really
Candidate: this should be repelaced on the <UNK> userreportingsettingshelper
Reference: checkstate?
Candidate: checkstate?
Reference: this can just be named notesbucket.
Candidate: feedid should be the feedid
Reference: because of compensation in this command its better to have this call in the second transaction below, otherwise handling will need to be added in case there is a failure
Candidate: i don't understand what about the the transaction scenario? ?
Reference: rename logo to resourceurl
Candidate: why do we need the <UNK> here?
Reference: could have been this: return absoluteuris(ports, vxlanportids);
Candidate: why do we need this?
Reference: this seems to me as util method that could be used by **delegation** instead of **inheritance**. is the inheritance used because of the testeability?
Candidate: this should be the <UNK>
Reference: we probably need to have a getlastdescriptors.
Candidate: i don't understand this matters, if we matters, but we don't need to use the <UNK> <UNK>
Reference: can be final.
Candidate: use <UNK>
Reference: i think we can just leave this additional fix in this pr.
Candidate: why do we need to use <UNK> here?
Reference: this is a bit weak, its better to use g.isvisible(), the same below. also remember to detach the widget, so as we don't interfere with other tests
Candidate: you can use the <UNK> <UNK>
Reference: extra semicolon
Candidate: should be precise, we don't need to throw an exception here?
Reference: this should at least be "privileges required", but it might be better to do this in a localisable way as you did for the other ticket.
Candidate: typo: <UNK> -> <UNK>
Reference: use {}
Candidate: why do we need the <UNK> here?
Reference: objects.requirenonnull(buf)
Candidate: please remove *both* <UNK>
Reference: still want this to happen with ops and indexing. it will be significantly faster. have you looked at the put(indarrayindex[])?
Candidate: can be replaced with <UNK> ?
Reference: convert to switch for consistency?
Candidate: if <UNK> == 0) { continue; } newvalue && <UNK> { <UNK> 0)" <UNK> == 0)" <UNK>
Reference: additional loadtypenametocategorymap not needed.
Candidate: please use <UNK>
Reference: event1 -> event3
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: super() call is implicit. no harm, but not needed.
Candidate: super() should be spared
Reference: put this before try
Candidate: i don't think we need to do we need need to the the <UNK> <UNK> <UNK>
Reference: it might be simpler to just do set equality between provided argument names and the required argument names. if the sets are not equal - throw an exception.
Candidate: why do we need need to clone the properties?
Reference: not sure whether we need to consider the precision of double comparison here. generally speaking, when comparing double numbers, epsilon is usually used. <link_0>
Candidate: why do we need to here?
Reference: should we be reading the time from the scheduling block here?
Candidate: should we be the <UNK> here?
Reference: superfluous newline
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: here's the fallback to not use sasi on duration (when we can't due to version). since indexes are in a separate file, we should be able to more easily maintain
Candidate: should this be be an exception if we { null) { throw new <UNK> } { throw new <UNK> { return (long <UNK> }
Reference: it's probably a bad idea to be checking for exception messages in the first place.
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: can we shift all these methods (related to finding possible givers/recipients) into a new class?
Candidate: i don't think we need to trim the the <UNK>
Reference: rename to fragment
Candidate: rename the <UNK> to the intent to be consistent with the framework.
Reference: the resourcemanager is a singleton, so storing a command specific state in it could cause a race condition. the same state will be visible to multiple instances of this command
Candidate: this should be the <UNK>
Reference: i think you should test that both master and idbroker instance groups are available at the same time.
Candidate: maybe: <UNK>
Reference: why have another level method redirection if nothing else is in it?
Candidate: why do we need need to the <UNK> here?
Reference: i don't think this is correct. are you sure every available geocoder use the same key?
Candidate: should we be the <UNK> here?
Reference: you could do (properties) objects.requirenonnull(properties, "properties cannot be null").clone(); and be done with it.
Candidate: please use <UNK>
Reference: can we throw a specific exception throw new nosuchtemplateexception(templatename); as we do for invalid agent <link_0>
Candidate: this should be <UNK>
Reference: logd? same for everywhere else.
Candidate: this should be the <UNK>
Reference: ![major](<link_0> 'severity: major') remove this call from a constructor to the overridable "add" method. [![rule](<link_1>](<link_2>
Candidate: please use syserr
Reference: for (int i=0; i< bricks.size() ; i=i+volume.getreplicacount()) { list<brickproperties> set = new arraylist<>(); int replicacounter = 0; while (replicacounter <volume.getreplicacount()) { if (!brick.isarbiter) { set.add(bricks.get(i+replicacounter)) } replicacounter++; } replicasets.add(set.stream().map(field)); }
Candidate: can you use the <UNK> size?
Reference: should be || ?
Candidate: should we be the the logic?
Reference: change this to 'else if'
Candidate: the syserr should be replaced with <UNK> <UNK>
Reference: is there any reason that we need to expose the sortcachetable in definition with a getter? if not, what about only providing methods to put/get key/value of the cache table
Candidate: why do we need this?
Reference: suggestion throw new nativeexception("failed to stop watching. reason: " + result.getmessage());
Candidate: if oldvalue is is not the
Reference: it will be better to combine the 3 asserts above? i still don't see a compelling reason of using asserts at runtime? do these asserts have the same semantics as
Candidate: we should need to use the <UNK> <UNK>
Reference: i don't get this. if progress has only one tick, then this consumes one too many now. and anyway, if there's only one operation using the monitor, why not simply
Candidate: this should be the <UNK>
Reference: this could be just i == -1?
Candidate: please use <UNK> <UNK> <UNK>
Reference: action.issethost()
Candidate: should we be <UNK> here?
Reference: should it be wrapped with the conditionchecker and wait for it for some time? (i think it works in an async way)
Candidate: i don't understand this matters, this matters, if you matters, this matters, but i don't understand this matters, if you matters, this matters, but i don't understand why, it matters,
Reference: this is a confusing noop since reportinternalservererroroversideband() doesn't use it. maybe complete the change here and replace reportinternalservererroroversideband() with errout.write()?
Candidate: @unyoungwax, do we need to check for the feedid
Reference: shall we make this private as discussed?
Candidate: please use <UNK> <UNK> <UNK>
Reference: it would be good to make this consistent with registerclientinformation by making it re-register the cipher information if appropriate (and if the new information is different). question for @rajinisivaram: can
Candidate: this should be the <UNK>
Reference: i think it's better to log it through openshiftiouiactivator
Candidate: can we use the schema builder <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> builder table, builder builder builder builder builder builder builder builder table, builder builder builder builder builder builder builder
Reference: i think this collection contains the set of results to return to the client, but we are actually interested in the number of cells that were filtered out (i guess
Candidate: this should be the <UNK>
Reference: this really shouldn't be public...
Candidate: i don't understand why, but it is be the
Reference: utils.validatearg
Candidate: let's get normalization into the normalization into stack traces (which is only null?
Reference: suggestion return tx.run("create (v:versionedthingwithassignedid {id:1})").consume();
Candidate: can we use <UNK> to clients?
Reference: is this the same list of extra components for the bookie?
Candidate: should we be the specific?
Reference: space
Candidate: should be getstate() != null ?
Reference: this refactor isn't related to the solved bug..please separate between this and the patch to solve the bug.
Candidate: why do we need need to be <UNK> here?
Reference: up server check is already done in superclass. can remove from here.
Candidate: please consider adding the cda as the cda as well?
Reference: if (".".equals(dot.gettext()) is definitely more readable than reaching out to the objects class.
Candidate: @unyoungwax, do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: you can also use 'runinternalmultipleactions'
Candidate: can this be a lambda instead of <UNK> to images.
Reference: this formatting looks weird imo. @romani whats your opinion?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: i suppose that this is fp because guava optional is already imported. in that case a message should be sent to rules dogfood group.
Candidate: should we catch (throwable e) { throw exception } catch (throwable e) { throw ioexception e) { throw {
Reference: wasn't 300 recommended as the default parameterization in the safepub paper?
Candidate: this should be <UNK>
Reference: if one host fails to update then it will stop updating other hosts well.
Candidate: @unyoungwax, oops don't need to @nullable.
Reference: do you really want to make this public?
Candidate: this should be <UNK>
Reference: gitresourcevarianttreesubscriber relay on data that are added into gitsynchronizedateset. such data contains repository, destination and source rev's using with we can determinate differences in particular file. passing empty gitsynchronizedataset will
Candidate: please remove this line
Reference: is it worth discussing this case for **?
Candidate: why do we need the fixture.
Reference: both client and response should be inside try-with-resource.
Candidate: why do we need to use the <UNK> here?
Reference: this does not work. it returns something like clipdata{...}.
Candidate: why do we need need to the <UNK> here?
Reference: just a tiny detail, on upstream these were renamed to "manual" using guidegroup.manualgroupdefaultname
Candidate: the syserr should be be the
Reference: this should use the internalcacheregistry approach instead.
Candidate: why do we need need to the <UNK> here?
Reference: is this a java future? it is much less powerful than a completablefuture or a nettyfuture.
Candidate: why do we need the <UNK> here?
Reference: can we rewrite this statement to make it more readable:  (nop || (!cacheregistered && !(op instanceof schemaaddqueryentityoperation)))  we want to say here: complete the future if 1. there
Candidate: why do we need to use the <UNK> here?
Reference: it seems silly to collect into a list, only to use it to stream() right below again. can we combine those two collects?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: rename ruleinfo2
Candidate: the syserr should be be <UNK>
Reference: you can add a static method: config.builder() so that you don't have to do new config.builder()
Candidate: please use <UNK>
Reference: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Candidate: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Reference: is this (serverconnectiondetectedevent) post really required? this basically repeats the above two lines and then finally calls finishserverconnectiondetection(). you can directly call the finishserverconnectiondetection() method instead of this.
Candidate: should this be <UNK>
Reference: really reviewfragmentstrategy is not a strategy for reviewfragment is a strategy for reviewscreenadapter, can you rename to reviewscreenadapterstrategy
Candidate: can be replaced by: <UNK> <UNK> { return <UNK> }
Reference: the test case is ok, but i'd fix this differently, since root path usage is only one case where this breaks. maybe  integer sqltype = null; if (path !=
Candidate: i e1 { <UNK> <UNK> = <UNK> <UNK> <UNK> { <UNK> }
Reference: should return overlay_sync_incomming or overlay_sync_incomming_new depending on itask sync state.
Candidate: this should be the <UNK>
Reference: why not assertequals(classpathexpected, classpath1);?
Candidate: please import?
Reference: again, the repeated put statements.
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: no need to wrap "in" in a bufferedreader. it is a linenumberreader, which is a subclass of bufferedreader.
Candidate: why do we need to use <UNK> here?
Reference: change it to debug level
Candidate: can you rename this to <UNK> <UNK>
Reference: this is nice, but why not to collect all the dependencies that are not allowed and at the end throw an exception with all that not allowed dependencies? then the
Candidate: why do we need to check the the <UNK> stuff?
Reference: what is this for? seems like a no-op.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: ] could be a char
Candidate: this should be <UNK>
Reference: declaration and assignment can be combined
Candidate: can we elaborate if this is is possible? if there is an possible? if possible?
Reference: why remove the sort?
Candidate: why do we need to use <UNK> here?
Reference: please use braces. checkstyle should pick this up.
Candidate: this this repelaced e1 { <UNK> <UNK> } <UNK> } <UNK> { <UNK> }
Reference: it should be assigned
Candidate: can be simplified to: java return <UNK> = <UNK> <UNK> <UNK> != null) { return <UNK> <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> = <UNK>
Reference: needs a return statement?
Candidate: why do we need to use <UNK> here?
Reference: open files?
Candidate: you don't need to use the <UNK>
Reference: since the order doesn't matter, you could initialize validscts as a frozenset rather than copy every time getvalidscts is called.
Candidate: this should be <UNK>
Reference: lower-case 'u'
Candidate: should this be <UNK>
Reference: since it's the same foreach, why don't you call both function at the same time?
Candidate: if we is the software <UNK> software <UNK> should be the if <UNK> { <UNK> } else { if <UNK> { <UNK> { <UNK> { <UNK> }
Reference: what's the compilation error you're getting for enum.valueof()? if i were to guess, i'd guess you'd need to cast handledtype() to a class<? extends enum<?>> or something similar. i'm confused
Candidate: should we use the <UNK> here?
Reference: suggestion topology.addvertex(nodevertex);
Candidate: can we be an additional enum entries? instead of stringbuilder?
Reference: the invocation needs a mod instance, i think
Candidate: the syserr should be the
Reference: magic number?
Candidate: should we be the specific?
Reference: declare as set
Candidate: the plans to use the <UNK> <UNK> <UNK>
Reference: if these print lines are still needed, please add them to the logger
Candidate: do we need this check?
Reference: can we use names like encryptedfile and decryptedfile for readability
Candidate: ![major](<link_0> 'severity: major') either remove this system.out or rethrow [![rule](<link_1>](<link_2>
Reference: table commoncourts has three elements, but here you only use two.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: this check is superfluous as super.connect() does the same check. we can safely remove this if block here.
Candidate: can we return an empty collection instead of null?
Reference: it'd be better if an early return that checks if the method [xmlpullparser.isemptyelementtag](<link_0> is true so that the intent is clearer.
Candidate: nitpicking: this should be <UNK>
Reference: why this is public? consider the following call sequence: 1. startmeasuringlatency() 2. reset() 3. endmeasuringlatency(), then you record a huge number as the latency.
Candidate: should we check if <UNK> == null) { <UNK> } } }
Reference: is there an extra newline here?
Candidate: please use <UNK> <UNK> <UNK>
Reference: we can probably declare only exception as thrown here.
Candidate: why do we need the <UNK> here?
Reference: i just saw that we seemed to forgot to convert that old swing dialog here. could you please fix this as well? dialogservice.showerrordialog or so should work thanks!
Candidate: why do we need need to evict the <UNK> here?
Reference: i would go with stream iteration here java titlelist.stream() .filter(x -> fieldapprover.approve(x.getdatainfo())) .findfirst() .ifpresent(x -> metabuilder.settitle(x.getvalue()));
Candidate: i don't think we need to check if the != null && <UNK> { return; }
Reference: this can cause some conflicts.. best thing to do is put this after that the maxhealth is upgraded, and then just health = maxhealth (like stated before by @borsty)
Candidate: why do we need the <UNK> here?
Reference: if we can't omit /costumize validate() either at store() nor at flush() i suggest adding the following to the beggining of abstractdiskmodel#forcecreationwarning(): if (getconfirmwindow() != null) { return; } this
Candidate: can you add <UNK> <UNK> ?
Reference: condition logs
Candidate: please use <UNK>
Reference: if the text is used as part of the message for an exception being thrown it will follow "an exception occurred ". the way it is formulated now, that won't
Candidate: ![major](<link_0> 'severity: major') refactor this 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6
Reference: we should throw a different string in to show that it will calculate from that string. for example: activitycontrollertest uses "biological" and expects profile.biological to be returned - even thought
Candidate: why do we need to use <UNK> here?
Reference: permission is only required starting in o, hence the check. that aside i'm perfectly fine with removing it altogether since i don't think the serial gives us any valuable insight.
Candidate: do you need need to use <UNK> anywhere
Reference: performancewise it should be better if you directly work with the citations map (instead of keys and then get the citation for it). maybe even something like referencelist = getcitations().stream().map(new
Candidate: the syserr should be be <UNK>
Reference: typically, we check for <applicationname>-<profile>, <applicationname>, application-<profile> and application. those with <profile> we check each profile from a comma separated list. does this do that?
Candidate: should we use the <UNK> here?
Reference: when we list the participants, the ones without a name should be listed with ids. perhaps we can handle this by modifying participant#getname, or handle it here?
Candidate: this should be the <UNK>
Reference: iterables.getfirst
Candidate: use map<> on the <UNK>
Reference: this test should be adjusted since you removed the strlen change.
Candidate: you can use <UNK> <UNK>
Reference: this is going to be hard to trace in multi-user environment. compiled model for what sql? which fd?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: keep optional return parameter in all enums
Candidate: why do we need to use <UNK> here?
Reference: add this to stay consistent to the other getters here.
Candidate: this should be <UNK>
Reference: why rechecking?
Candidate: i don't need to check for the <UNK> <UNK>
Reference: foundservice or existingclusterservice?
Candidate: why do we need to here?
Reference: could you make this more consistent? currently one stringifier is in a local variable, while the other is referenced directly.
Candidate: please use the syserr
Reference: nit: this doesn't feel necessary - is there a reason why you can't just pass in local and remote (mapping away the withexecutor) into the constructor at the end?
Candidate: why do we need to use <UNK> here?
Reference: normally we don't deny access to admin user
Candidate: the syserr should be be the
Reference: could you please add asserts for remained avro types?
Candidate: why do we need the <UNK> here?
Reference: this will cancel the entire worker, not just the recursive action. if one uses a scheduler for general scheduling tasks (instead of an executor) this will disrupt the worker. this
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: assertequals(errorresponsecode.invalid_id_token_mismatched_client_id.getcode(), responsedata.geterror())
Candidate: this should be the <UNK>
Reference: it seems a shame to introduce a wikipediaapp dependency to obtain the screen density. consider a small refactor of getcontext().getresources().getdisplaymetrics().density; from wikipediaapp to a utility class.
Candidate: why is rectangle <UNK>
Reference: we catch a generic exception here, so the reason for the failure could be different than duplicate key. i would change this error message and i would add the exception
Candidate: should be happen if the log is the started, than the
Reference: i'm kind of debating here. on one hand, looks short&nice. on the other - this is essentially .foreach() masked to map() to make it intermediate operation instead of terminal operation.
Candidate: this imply that imply that imply that imply imply the <UNK> is the <UNK> the <UNK> is disabled.
Reference: readability of this test would be increased if you named them createdrefund, submittedrefund, refundedrefund, errorrefund or similar
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: we cha change here as well.
Candidate: should be be <UNK> iterable<integer> here to be empty?
Reference: might be a lot more efficient to make fewer writes. unless the stream you're immediately writing to is buffered.
Candidate: please use <UNK>
Reference: let's add this log as well. this may be useful for some users.  logger.debug("you can disable this check by adding this line to your gwt module:"); logger.debug(" <set-configuration-property name=\"verifynewerversion\"
Candidate: should we move this into a messages.properties method? if we { null) { <UNK> = <UNK> } <UNK> <UNK> { <UNK> <UNK> { <UNK> } <UNK> <UNK> { <UNK> <UNK>
Reference: you can test the three parameters in one submit.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: should use all lowercase, as people may reference this test for examples and think that using uppercase mod ids is okay when it isn't.
Candidate: why do we need need to the <UNK> here?
Reference: we can drop the "filechooserservice" now from those method calls, since the methods will be visible from this class.
Candidate: please remove the method("post")
Reference: @fanifieiev the same above.
Candidate: @fanifieiev the same above.
Reference: following code seems more clean to me  java /** * gives the preferred video url for downloading from a specified {@link videodata} object. * * @param video data of
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: we have fileutil.detectedos.iswindows to show whether we are on windows, no need for separatorchar magic.
Candidate: <UNK> tempdir tempdir file tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir file tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir tempdir
Reference: if this wasn't in a test, i'd be unhappy as it's assuming a lot. ok here, however.
Candidate: this should be the fixture.
Reference: the withmetricfactory overload seems confusing, we can be more specific with the type of metric factories?
Candidate: why do we need to use the <UNK> here?
Reference: could you use some constant for the boolean instead of true or false to ease the readability of the code please ? like this  static final boolean reusable_classloader =
Candidate: the syserr should be be the <UNK>
Reference: this line is redundant, request already passed in newtokenclient(tokenrequest);
Candidate: i map<> <UNK>
Reference: the code elsewhere in this plugin has preferred is rather than equalto. since this is comparing strings, could you switch it to use is instead of equalto? suggestion assertthat(result.getarchitecture(), equalto(expectedarch));
Candidate: the syserr should be the
Reference: why not just check string contains?
Candidate: why do we need to here?
Reference: #701 asked for this lock to be removed, if i am reading it correctly.
Candidate: i don't understand this matters, this matters, this matters, this matters, this matters, if you matters, this matters, this matters, that migrated is the that the <UNK> is the <UNK>
Reference: need the created timestamp here instead of fe.expirytime
Candidate: do we need to check the <UNK> if <UNK> == null) || <UNK> { <UNK> }
Reference: this could be refactored by  return !utilmethods.isset(filterkey)? this.loadedfilters.values().stream().filter(filterdescriptor::isdefaultfilter()).findfirst().get(): this.loadedfilters.containskey(filterkey)? this.loadedfilters.get(filterkey) : this.loadedfilters.values().stream().filter(filterdescriptor::isdefaultfilter()).findfirst().get();  in addition you can create a method called getdefaultfilter, that basically returns this  this.loadedfilters.values().stream().filter(filterdescriptor::isdefaultfilter()).findfirst().get() 
Candidate: why do we need need to the <UNK> here?
Reference: i think you have these variables mixed up, should be switched
Candidate: rename to iu
Reference: marking @nullablewhenever it is possible. ide will help a lot to warn null check in invokers.
Candidate: if wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception wrongepochexception
Reference: this should check that an error response is sent from keycloak (<link_0> and that the error code/description indicates to the app it was the aia that was cancelled and not
Candidate: use readasstring(...) instead of <UNK>
Reference: it should be could not get launch config for server {0} to attach remote debugger, should it not? this way it would be in some way related to action 'attaching
Candidate: i don't think we need to log the exception
Reference: it is permitted, but discouraged as a matter of style, to redundantly specify the public and/or abstract modifier for a method declared in an interface.  <link_0>
Candidate: this should be the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: checkowner should be changed to : frontendstate.checkpermissions("finishtaskinerror", frontendstate.getidentifiedjob(jobidobject), you_do_not_have_permission_to_finish_this_task);
Candidate: should we be <UNK> here?
Reference: instead of hard coded string, can we actually cache the response and return it?
Candidate: i don't think we need to do we need need to check the getcredentials for the getcredentials
Reference: probably worth exploding here so things fail fast.
Candidate: if the != null && <UNK> { <UNK> }
Reference: missing super method invocation.
Candidate: this line placement.
Reference: since this line is removed: backupwalletdialogfragment.show(getsupportfragmentmanager()); the backup dialog is not shown until onresume() is called.
Candidate: why do we need to use the here?
Reference: @jonathangiles, @srnagar, i'd like to see us create a guideline around the default serializer to be used when one isn't passed. in some locations we use jsonserializer/objectserializer and in others
Candidate: can we use the <UNK> here?
Reference: not necessary - it defaults to timestamp default current_timestamp
Candidate: can we use checkargument to <UNK>
Reference: i would store awaketime as attribute of this class and remove if from queuemodelhelper
Candidate: this should be <UNK>
Reference: why not just else? as there is only 2 possibilities
Candidate: this should be the lhs of the columns should be overridden by: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i'd probably include a baz here, too.
Candidate: i don't think we need to check if the is is the
Reference: while in here, i'd just have the equals() method use an equalsbuilder so all the inline-if's that were here before can be removed:  public boolean equals(final object o) {
Candidate: should be null?
Reference: (occurs, occurrence, and if you would like to get fancy, coccurrence in uk dialects.)
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this is a throw-away array allocation on what might, given the class name, be the hot request path.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: having no certificateverifier is a bug on our side ? why should we launch a bad_certificate error ? internal error would be more appropriate ?
Candidate: should we check whether the verifier is null? if we { null) { return verifier { <UNK> }
Reference: possible alternative implementation of method: java return conceptmap.getordefault(targettable, collections.emptymap()).get(targetfield);
Candidate: please use <UNK> <UNK> <UNK>
Reference: do we use id any more ?
Candidate: why do we need need to be <UNK> here?
Reference: input is not @nullable, remove annotation or add null check.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this counts down before the bean is actually initialised
Candidate: why do we need need to the <UNK> here?
Reference: >boolean [](start = 11, length = 7) verifyresult with one property isvalid
Candidate: why do we need the <UNK> here?
Reference: this should be outside the if-else?
Candidate: should this be <UNK>
Reference: could we just return if fields== null instead of nesting the for loop?
Candidate: i think we should be the <UNK> <UNK> <UNK>
Reference: i meant something like : asserttrue(expressionevaluator.evaluateunaryexpression("? = 1*?", bigdecimal.valueof(2), bigdecimal.class));
Candidate: please import?
Reference: do you think it's worth shuffling the server list here to make sure that if there's several servers that start from the same ordered list that they don't all just
Candidate: can be replaced with: <UNK> = viewmodelprovider <UNK> <UNK> = viewmodelprovider <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: please, just for completeness.. call stop(true); here (after the method name change i asked you)
Candidate: i don't think we need to close the dispatcher in the finally block.
Reference: inline this
Candidate: why do we eating the exception here?
Reference: we shouldn't rely on a hardcoded binder name here.
Candidate: i don't think we need to do we need to synchronize on the <UNK>
Reference: style: y u change '!=' to '>' :-/?
Candidate: spaces sign. sign. sign. sign.
Reference: do we need to get all the configurations for an integration service when listing?, the resource is using this method to return the existing services and i guess will be
Candidate: why do we need to permission?
Reference: the behaviour's probably the same, but is there supposed to be a newline or an else here? that said, this would be best represented with a nested if for the
Candidate: why do we need the lock again?
Reference: whats the super class here?
Candidate: we don't need to use the exception here.
Reference: fyi: hudson.util.filter is very useful! this could be written like this:  for(triggerbuilder ctb: util.filter(cbs, triggerbuilder.class) { ... }
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: there should be a space between description and name
Candidate: i don't think we need to use objects.isnull
Reference: oups, two new list per event :p
Candidate: i don't understand this matters, if we matters, this matters, this matters, that this is is the <UNK> <UNK> the <UNK> is the <UNK>
Reference: nit: log effective rate?
Candidate: <UNK> evidence, we can use <UNK> <UNK> <UNK>
Reference: you could push this bounds logic into the sequenceandbound object itself to prevent mistakes - add some method like contains(timestamp).
Candidate: i don't think we need to check for the <UNK>
Reference: i doubt it works reliably in all cases, because the file can be technically replaced by an older one (e.g. move operation). i would expect something like map<file, set<long>>, where
Candidate: why do we need need to evict the on the contents?
Reference: repeating the same big_values doesnt make it more readable.. either make a builder for batch subscription or aply some defaults, or just use values instead of consts
Candidate: this should be <UNK>
Reference: shouldn't this be connector key? just wondering...
Candidate: please use <UNK>
Reference: this map can be replaced with peek and injectsessioninfo can be changed to return 'void'
Candidate: why do we need to use <UNK> here?
Reference: size before sounds better to me.
Candidate: why do we need the <UNK> here?
Reference: fwiw, this method is getting deprecated: <link_0> so you might consider using the constructor.newinstance method instead.
Candidate: why do we need to use <UNK> here?
Reference: should be a for loop which iterates on all the converters, rather than a converter != null thing...
Candidate: why do we need to evict the <UNK> request?
Reference: due to the return in the if block, the else is not necessary. omitting the else reduces the indentation for the following code.
Candidate: do we need to check the <UNK> <UNK>
Reference: btw semaphorestep is usually helpful for things like this.
Candidate: what is the significance of catching the exception?
Reference: do you realy want this assertion? when assertions are enabled, this can create some problems.
Candidate: why do we need this?
Reference: perhaps you can use an 'explaining variable' to clarify what regkey == null means. <link_0>
Candidate: why do we need the <UNK> here?
Reference: don't we want this to run on linux as well?
Candidate: i don't understand why, but it matters, but you don't need to check the <UNK> <UNK>
Reference: need to change it to java8 lambda expression.
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { return false; }
Reference: should this be true then?
Candidate: why do we need the columns in the <UNK> model?
Reference: unnecessary casting
Candidate: the syserr should be be the
Reference: i think you should rethrow the original exception, not a new exception without message
Candidate: should this be specific?
Reference: messagestring will always be null here, is this on purpose? if so, perhaps just passing 'null' as a parameter would make it clearer?
Candidate: why do we need to use the here?
Reference: i assume this is just a short term fix. we can't force target wizard providers to use this category. they may already be using a different one. we should really
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: shouldn't this all be in an "else" statement? do we support moving a host to non-operational twice, showing two reasons?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: the throws needs to be based a specific exception.
Candidate: @exper0 let's use <UNK>
Reference: could we remove the consumeddatatype as it is never used?
Candidate: you don't need to use the <UNK>
Reference: i don't think this prefix is necessary. i suspect most people will want to copy only the sha1 so they can paste it into a command line.
Candidate: <UNK> *= 2;
Reference: use readasstring(...) instead
Candidate: this readasstring(...) instead of <UNK>
Reference: else if
Candidate: if <UNK> != null) || <UNK> && <UNK> { <UNK> }
Reference: what do we return, if we're not under appengine?
Candidate: please use <UNK>
Reference: remove //modified harsh.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: can we introduce a createoralterpartition?
Candidate: why do we need to permission?
Reference: npe if label is null
Candidate: this should be the if <UNK> != null) { return; } <UNK> } } } } }
Reference: i don't think this method is needed anymore.
Candidate: i don't think we need to check if the is is the
Reference: is info level necessary or it can be changed to debug?
Candidate: why do we need to use <UNK> here?
Reference: is it correct to maintain state in the view? shouldn't the presenter keep the logic as to whether the view is empty?
Candidate: this should be setemptyelement().
Reference: can this be moved up alongside the screenshotsaveverifier checks for simplicity?
Candidate: this should be the <UNK>
Reference: it would be nice to have a test for this "recursively rename submodules" functionality too.
Candidate: why do we need this?
Reference: this is a suggestion to remove unnecessary updatecache call: do the updatecache inside the lambda function at orelseget(...) i know it is not part of this change, but that can
Candidate: can we use <UNK> <UNK> <UNK>
Reference: should we not use a different sms template here? because the user may not have read her email yet, the sms may be quite unexpected.
Candidate: please use <UNK> here instead of <UNK> setting?
Reference: this seems to duplicate getfullexpr from block.
Candidate: why do we need to check the <UNK> ?
Reference: you should create a constant for containsonlyreservable
Candidate: the syserr should be be the
Reference: why double and not bigdecimal?
Candidate: can be replaced with <UNK> ?
Reference: let's remove executionplanruntime start and shutdown in all attribute validation cases .please make the change in others as well
Candidate: please don't need to stop files under the files under files under files under files under files under files under files under files under files under files under files under
Reference: instead of the encoder use the decimalencodedvalue:  edge0.get(encoder.getaveragespeedenc()) edge0.getreverse(encoder.getaveragespeedenc())
Candidate: why do we need the <UNK> here?
Reference: externalize the strings
Candidate: can be simplified to <UNK> <UNK> ?
Reference: it is generally good to avoid mixing different works in pr :)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: suggestion if (m.find()) { ... }
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: should you throw the multipliers into a constant? i see you're reusing them in a few other spots
Candidate: i don't understand this matters, if we assemble the <UNK> is the <UNK> <UNK>
Reference: i think, there is a wrong behaviour: if the file could not be created then at least an exception should be thrown and if you are logging then the file
Candidate: why do we need to the <UNK> here?
Reference: as this is under the synchronized (lock), is this synchronized required?
Candidate: why do we need the <UNK> here?
Reference: can this repeated part be wrapped into a function?
Candidate: the syserr should be be the
Reference: public?
Candidate: why do we need to use <UNK> here?
Reference: the same as line 89, there's no effect of clicking ot the verify button
Candidate: please use <UNK>
Reference: add "this" qualifier
Candidate: this should be <UNK>
Reference: if i undrestood it right, we want display.timerexec(x) here. x can be 50 - 100 ms. i probably would prefer smaller values.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: define a constant value for the strings which you are using in more than two places. example :- define a constant for "(" and reuse it.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i think i'd prefer to do something like this: java response res = allhealthy ? response.ok() : response.status(503); return res.entity(response).build();
Candidate: should be be static?
Reference: copying numrows and numbytes is insufficient. aggretated should be set as the stats of resulttabledesc.
Candidate: please use collectionutils here
Reference: it doesn't seem correct to have default implementation for getfilters return empty map. throwing unsupported exception seemed better. is there any particular reason you made this change instead of add
Candidate: i think <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this line is unnecessary since this is the default behaviour of the mock
Candidate: why do we need to mock <UNK> here?
Reference: for safety, how about checking c != null && c.length >=7 and if not, leave everything at 0.
Candidate: why do we need to check the <UNK>
Reference: the expression in the message looks odd. should be the param name. will fix on merge.
Candidate: please use the same as above.
Reference: why is this unknown? can't we have 1 tick per task in the map? + some work for the context store?
Candidate: why do we need this?
Reference: hmm, should we switch listenerlist to a set?
Candidate: you don't need to use the <UNK>
Reference: ya @value with @builder seems more appropriate. better thread safety and invariant guarantees.
Candidate: wouldn't it make sense to define constants constants constants as well?
Reference: please use request.gettitle() instead of feed.gethumanreadableidentifier(): in this case, feed does not have a human readable title yet
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: seems like this logic is duplicated in a couple classes, lets see if there's a way to simplify
Candidate: can be simplified to:  <UNK> (string <UNK> = <UNK> .collect(collectors.tolist()); ? <UNK> : <UNK> : 2; : <UNK> : 2; : <UNK> : 2; : <UNK> : 2; :
Reference: this command is currently transactional (should it be transactional?), i guess it should be set to non transactional with compensation, so: 1. the statechanged need to be called after the
Candidate: i think we should be the to the the <UNK> the the <UNK> the the <UNK> is the
Reference: null-checks for both getcurrentfragment() and recyclerviewlayoutmanager wouldn't hurt here.
Candidate: why do we need the <UNK> here?
Reference: what about "solved"/"rejected"/"candidate"? this is a big commit and i may have missed those, or maybe the gene/variant design has changed?
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: how sure are we that threadlocalrandom will not generate the same numbers for a given seed? for example, if each local random was generating the same series, you will not
Candidate: this should be the <UNK>
Reference: same here, common case first?
Candidate: can we use the <UNK> of the <UNK>
Reference: now this should return true, since there are disks on the storage domain (remember that you don't check the validate only the method checkdisksinbackupstorage) change to asserttrue
Candidate: please use the appropiate <UNK> instead of <UNK> 49
Reference: here it should throw an unsupportedexception and not return a potentially wrong result, same for contains and calculatearea
Candidate: why do we need this comparison here?
Reference: don't we need to clear this?
Candidate: should this be <UNK>
Reference: should this delegate for flush and the other forms of write, too?
Candidate: you should use the payload?
Reference: can we get rid of "/" here and let the paths api construct the os dependent path?
Candidate: can you use <UNK> <UNK>
Reference: if userdata is still not a solobject at this point we should break / return -1
Candidate: i don't understand why __time = <UNK> ?
Reference: does this mean we might have bad configuration that needs cleanup (via xsl transform)?
Candidate: why do we need to permission?
Reference: does it need 1s? can we give it 1ms to speed up this test? this 1s might slow down my fancy new compute to run tests. (the minimal legal value
Candidate: fbot should be used
Reference: can be this(new arraylist<integer>());
Candidate: why do we need to use the <UNK> here?
Reference: is this method worth it's weight in characters written?
Candidate: why do we need the <UNK> here?
Reference: does the code actually nest patch scopes like this? i thought patch was the parent scope - but child scopes were always normal request scopes.
Candidate: please remove the method("post")
Reference: this is a private method and it is quite heavily used. it should be fast. now, nls.bind here is not efficient, it is ok for messages/labels in ui and reporting,
Candidate: why do we need to <UNK> the presenter.
Reference: nametoken shouldn't be null or empty now, and the content of the conditions is the same. you could create a method like this:  private boolean localeandnametokensarenotsame(nametoken) { return (localehelper.isenglish()
Candidate: why do we need the <UNK> here?
Reference: file separator? btw what are you doing here?
Candidate: please use jclouds name type" mean?
Reference: i thought we wanted to code the list of redirects as a javascript constant in order to avoid this sort of middle-tier support? what if we just have a redirectlist.ftl
Candidate: why do we need the <UNK> here?
Reference: shouldn't be here "firstresult, maxresults" instead of "null, null" ?
Candidate: can we be simplified to <UNK> <UNK> ? <UNK> : <UNK> : <UNK> { <UNK> }
Reference: instead of getting the instance here, it should be passed in in the event that we want to mock it.
Candidate: can we use the builder here?
Reference: objectmapper is threadsafe so you should just create it one time for the class so we don't need to re-create it over and over.
Candidate: can we use static"
Reference: nit: maybe use newsinglethreadexecutor() instead? (for all similar places in this file)
Candidate: collapse the one one one one one one one one out.
Reference: missing null check for game.getobject(event.gettargetid())
Candidate: the syserr should be be the
Reference: should we init topologyconfigid in this function?
Candidate: why do we need to mock <UNK> here?
Reference: suggestion if (stringutils.isnotblank(usercorecacheidentifier)) {
Candidate: can we use the getconnection here?
Reference: should be iswindowsdesktop() -- otherwise users on e.g. windows using chrome to access an rstudio server on linux won't see this option.
Candidate: why do we need the <UNK> here?
Reference: rounding errors could induce unexpected behaviour
Candidate: use e2 ethernet diamond gender for type.
Reference: are notfound and badrequest not already covered by the webapplicationexception catch-all immediately below?
Candidate: why do we need the <UNK> here?
Reference: why do we still have a condition on getparentcommand() ?
Candidate: this should be the <UNK>
Reference: as a practice its a good idea to call commit on a connection that is returned from the pool before performing a select operation. this ensures that any uncommitted data
Candidate: i don't think we need to do we need need to evict the to the the <UNK> the <UNK> <UNK>
Reference: you should go into vdc_options directly.
Candidate: we should use <UNK> <UNK> <UNK>
Reference: that could be merged into one line
Candidate: you don't need to use this..
Reference: suggestion mekhqxmlutil.writesimplexmltag(pw1, indent + 1, "typename", type.getinternalname());
Candidate: nit: can be replaced by: <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK>
Reference: we shouldn't be modifying constants. if these are truly constants, they should be statically initialized and then never changed. if these aren't constants, we should create them in before() to
Candidate: why do we need to check for the <UNK> ?
Reference: i believe this is a problem and is related to some review bug we had quite recently? 'l' vs no 'l'
Candidate: i don't :: consider ignore :: ignore the value, since it creates an hidden in an hidden in an hidden in an hidden in an hidden in an hidden in
Reference: it could be better using constants, for example dafault_number_of_plans_generated = 5
Candidate: this should be <UNK>
Reference: this command **dashboard.open()** looks as redundant here. to make code clear i propose to move **dashboard.open()** command into the **createwsfromjavamysqlstack()** method, set **@beforeclass** annotation above it and remove **setup()** method
Candidate: why do we need the <UNK> here?
Reference: should this line be moved up, too?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: change this conditional to iterate with a counter from 0 to length, and check the counter rather than 0 in the lines below.
Candidate: if we is the software exception we don't want to throw an exception if the exception occurs, then we will throw an illegalstateexception if <UNK> is unexpectedly interrupted.
Reference: same as for the keypairtype constructors.
Candidate: why do we need to permission?
Reference: i think this condition could be merge with the previous one.
Candidate: why do we need need to the <UNK> here?
Reference: we should remove try-catch-fail.
Candidate: why do we need to test here?
Reference: checkargument(dir.isdirectory, "%s is not a directory", dirpath);  ? i know it's a different exception type, but still..?
Candidate: why do we need to mock <UNK> here?
Reference: sorry, a typo here. the return value should be parent.
Candidate: should we be the <UNK> here? if we { null) { return; } <UNK> { <UNK> } <UNK> { return; } }
Reference: aren't these two lines are unnecessary?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit: use "module.exports.".length so it's clear where that number comes from (likewise 2 lines down)
Candidate: this should be the <UNK>
Reference: this call should come after super.onresume(). also, i'm not sure if this will work for first time load, because client will be null the first time, since the peekrestclient() call
Candidate: i don't think we need to check if the is is the <UNK>
Reference: should it be !part.islocal() instead of part.islocal()?
Candidate: why do we need to check for the <UNK>
Reference: ![major](<link_0> 'severity: major') remove this call from a constructor to the overridable "sethref" method. [![rule](<link_1>](<link_2>
Candidate: why do we need need to here?
Reference: public @nullable iterable... empty_set is never null though, how about supresswarning instead?
Candidate: groupname -> determinename
Reference: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Candidate: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Reference: you can do java integer.valueof(0).equals(categoricalvalueid) ? null : categoricalvalueid)
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: is it really useful to list all this if it's going to be filtered?
Candidate: why do we need to check the non-null request?
Reference: i am not sure what to make of this message > better not use it for testing purposes maybe something along the lines of _sender supports asynchronous requests only_ the
Candidate: why do we need the <UNK> here?
Reference: i'm not sure i love the lenient check, i'd prefer checking that it.trim().equalsignorecase("1") and the same with preview below.
Candidate: should we throw an exception here instead of returning null?
Reference: make sure pagebuilder is in a consistent state before you throw. i.e. you probably need some code before throw throwables.propagate(throwable). in addition, since you are refactoring this code, remove usage
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: not to be picky but why do you have switch here?
Candidate: please rename the <UNK> to <UNK> <UNK>
Reference: we can remove the status variable by calling "return addendpoint(endpointdata);"
Candidate: this should be <UNK>
Reference: do we need:  string algorithmname = evidence instanceof algorithmevidence ? ((algorithmevidence)evidence).getalgorithm() : null;  ?
Candidate: do we need need to check the <UNK> <UNK>
Reference: ditto error message
Candidate: use map<> on the <UNK>
Reference: since they occur in both cases, these should be outside the conditional. also, a direct method reference can be used.
Candidate: should we throw an exception here instead of an exception?
Reference: please format this like:  settings settings = settings.builder() .put("client.transport.ignore_cluster_name", true) .build();
Candidate: can we use the <UNK> here?
Reference: wow that's really long.
Candidate: please use syserr
Reference: guessing this is just in here for testing? probably don't want it re-retrieval the datastream profile.
Candidate: nit: i think this should be the <UNK>
Reference: extra space after openning brace - style check nitpick
Candidate: if (state != null) { <UNK> }
Reference: would drop this assert, for reasons mentioned above in similar tests.
Candidate: i think the others, the assert that the strategy matches the few of the the others, the result of the the others, the result of the others, the others, the
Reference: with "for" loop usage this can be reduced to one line. this is the standard idiom here: for (zipentry entry; (entry = zip.getnextentry()) != null;) { [...]
Candidate: the syserr should be be <UNK>
Reference: this edit part (and the one for durationobservation) needs to install a notation listener, in order to react to named style value changes and refresh its figure. otherwise, undo-redo won't
Candidate: why do we need the <UNK> here?
Reference: nit: for the new log, please do this ""clearcache is deprecated for changetype: {}", changetype". minor performance improvement if we config the log level to error.
Candidate: the syserr should be be the
Reference: if you do the class check you can omit the instanceof check. but i would prefer if you use equals instead of ==, because in osgi you might actually have
Candidate: this should be <UNK>
Reference: what about using constants somewhere for version numbers?
Candidate: why do we need the <UNK> here?
Reference: probably doesn't need to be public.
Candidate: please use <UNK>
Reference: please extract the getmodel().getissubtemplate().setentity(false); from here and from line 96 before the if statement
Candidate: please remove the hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash
Reference: not sure if this should be a preference
Candidate: why do we need the <UNK> here?
Reference: rename to os
Candidate: can we use the <UNK> <UNK> <UNK> generation?
Reference: we might want to add a log here for hes.
Candidate: i don't understand why, but it is be the why, but it is be the to the <UNK> the <UNK>
Reference: based on the eclipse output you only want the conflicts to be highlighted, not the entire tree. i'd advice to add a screenshot of the result to ensure we're working
Candidate: why do we need to check for the <UNK>
Reference: @tsurdilo i have one question. why is this persistence.xml in string and not in a seperate resource file, moreover, is it mentioned to be run only with postgresql?
Candidate: can we use <UNK> here?
Reference: can we add some message to this assertion? (and all others)
Candidate: why do we need to call <UNK> here?
Reference: no spaces inside round brackets.
Candidate: can be replaced with <UNK> ?
Reference: you can get this value from the entry instead. no need to traverse the map again.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can we reference the class directly?
Candidate: rename <UNK> to <UNK>
Reference: method reference? asking
Candidate: the syserr should be the
Reference: if new name is null, old name has been put as text i think we should here validate the text value and not newname/oldname.
Candidate: this should be the subdir on the <UNK>
Reference: pease rename the variable transformer into the kind of transformation. do not suggest optimusprime or something :) tell what the transformation does.
Candidate: please use <UNK>
Reference: looks like all of the test server instances will be in-memory datasets, which is great for speed. will there be any places where the test server instances touch the disk?
Candidate: why do we need need to the <UNK> here?
Reference: again about using taskconfigurer
Candidate: i don't think we need to check if the is is the
Reference: this should not happen on the client side.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: we should use java resource handling here. i know it is not possible with the current tool base class, should we change it?
Candidate: do we need to catch interruptedexception to catch interruptedexception block?
Reference: this button should also be "re-enabled" when the messages tab is hidden, otherwise, if you have the messages tab selected and then hide it, the export button shown/enabled is the
Candidate: the syserr should be be the presenter.
Reference: remove this. this suppresses test failures.
Candidate: i don't understand why, but it matters, what is the that the is is the that the is is the
Reference: rename the variable to resources instead (bad copy paste i think)
Candidate: @exper0 appid
Reference: can you please move this logic to a method to improve code readability?
Candidate: why do we need to trim entries?
Reference: why not just return the result: super.view(mission).getasjsonobject(); there is no need for this variable.
Candidate: should this be <UNK>
Reference: because of the problems mentioned elsewhere in this file, this looks like it doesn't update :)
Candidate: why do we need to use the <UNK> here?
Reference: dtto. on aligning. in fact, i can see it all over the file.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: ftype can be null, which lead to auto-npe. perhaps null-check it? (not sure what would be a good return value, null, empty string?)
Candidate: @exper0 let's use <UNK> instead of <UNK>
Reference: i'm wondering if we could use an [unmodifiable list](<link_0> here?
Candidate: why do we need to check the <UNK>
Reference: please rename this layout file as well removing _new_api.
Candidate: should this be the <UNK>
Reference: sorry for the late review, i was working on getting stetho-1.2.0 out with a much improved api to support this kind of customization. i think we can now approach this
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: move the parameter validation to the constructor of xhmmemissionprobabilitycalculator.
Candidate: should this be <UNK>
Reference: similarly to the reader side, in the writer we want to transparently support either representation in the memory/protobuf model (user can put the native part either in the string field
Candidate: why do we need the <UNK> here?
Reference: filters method argument should be passed to ismessageinlogfile as an argument
Candidate: this should be setemptyelement().
Reference: java } else { issue.setassignee(null); }
Candidate: i this repelaced e1 && <UNK> { return false; }
Reference: int gets values up to 600 hours. that should be enough for the barrier.
Candidate: this should be <UNK>
Reference: nit: can directly use buffer(byte) instead of writebyte
Candidate: if <UNK> != null) || <UNK> && <UNK> { <UNK> }
Reference: space after if before (
Candidate: why do we need the payload?
Reference: should this method become private so that other class can not use new hl7parser201305utils()?
Candidate: why do we need need to be <UNK> here?
Reference: after use the ssh session should be closed: sshsession.close() not sure if this is really important though.
Candidate: can we be simplified to: java <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: closerutil.close
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: i think so, otherwise registering on the update will cascade up to the handle.
Candidate: should we use the <UNK> here?
Reference: shouldn't #may# be displayed properly?
Candidate: you don't need to use the <UNK>
Reference: method never used
Candidate: why do we need to use <UNK> here?
Reference: i think we should make this ctor package-visible only and introduce another one, which will be visible to everybody, without target argument
Candidate: this should be the fixture.
Reference: can we use trylock instead of having the set?
Candidate: why do we need need to <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: what's the difference between these two?
Candidate: why do we need the <UNK> here?
Reference: @ctsims failure due to: this.mchoices -> this.mchoices.length
Candidate: can you rename the <UNK> to <UNK> <UNK>
Reference: please format all java code at 2 space indents.
Candidate: why do we need need to be the <UNK> here? we don't need need to do we need need to do we need need to do we need need to
Reference: shouldn't be removed this one hibernateutil.closesession(); too?
Candidate: why do we need to rollback here?
Reference: should this actually be hard coded to localhost?
Candidate: <UNK> *= 2;
Reference: we can have getter for the host we should not expose map to the outside world.
Candidate: can be simplified to: java return <UNK> = <UNK> <UNK> <UNK> { return <UNK> }
Reference: ![major](<link_0> 'severity: major') replace this with a call to the "tofile().exists()" method [![rule](<link_1>](<link_2>
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: #1585 will replace these, right?
Candidate: why do we need to check the <UNK> <UNK>
Reference: maybe clientquery should store an analyticview (since that is all they can query) instead of a table.
Candidate: should we be the <UNK> here?
Reference: correct me if i am wrong; but organizationalunit.getrepositories() returns all repositories associated with an organizationalunit whether the current user has access to the repository or not? you are safe using
Candidate: i don't think we need to check for the <UNK>
Reference: please use assertnull instead
Candidate: i don't understand this matters, if we matters, but we don't need to do we need need to check the <UNK>
Reference: isnullorempty check is not necessary if you're using stringutils.containsignorecase as it checks for null
Candidate: can we move this into a separate method? if <UNK> { <UNK> = <UNK> <UNK> } else { if <UNK> { null) { <UNK> <UNK> { <UNK> }
Reference: add one more indent for parameters if they start a new line.
Candidate: can we produce an nullpointerexception if <UNK> is null.
Reference: we already have a method walletapplication.eraseandcreatenewwallet() that handles removing the wallet. this method does not remove any other files (such as the logs, which we want to keep in the
Candidate: why do we need the <UNK> here?
Reference: propose to make this put(collection<lookupextractorfactory> lookups) and make the lookupextractorfactory have a name. if the internal handlings of this class uses a map (probably) then that's fine.
Candidate: this should be the <UNK> oldvalue in the <UNK> oldvalue is the
Reference: i don't believe we need to manually calculate everything here. we should be able to just throw the collection at the hashcodebuilder like we do with content.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: why overload all of these methods to throw an exception when the base class has an actual useful implementation? look at <link_0>
Candidate: should we throw an exception?
Reference: this is a nice attention to detail but i do wonder: - is this something people want? is this worth adding an extra permission for? - do we consistently vibrate
Candidate: why do we need to evict the here?
Reference: does this correctly handle the 2.0 case, which is a different security realm by default?
Candidate: should we throw an exception?
Reference: eventdao can have a delete by user for example, done via jpa delete.
Candidate: should this be the specific? presenter. presenter.
Reference: use logger.error() instead of e.printstacktrace()
Candidate: should we be the specific? if we { null) { throw new <UNK> } <UNK> { <UNK> } <UNK> { throw new <UNK> { <UNK> }
Reference: i think this is not necessary you can initialise shouldshowdualpane directly here not need to obscure purpose. same applies to setupnavigationdrawer()
Candidate: why do we need need to the <UNK> here?
Reference: i would change this (and get response {}) to .debug or even .trace
Candidate: do we need need to use the anywhere else?
Reference: please return this for all addparameter, this will enable: runquery(prms.addparameter(x, y).addparameter(x, y).addparameter(x,y))
Candidate: should this be <UNK> <UNK>
Reference: why is this assertion error thrown after removing the ban? or asked in a different way: why do we even attempt to ban a user with a null username?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: we decided not to use these plain sleeps but rather wait to specific thing. please take a look at other tests in the class. you can do something like waitfor(()
Candidate: i don't understand what you need to wait for the <UNK>
Reference: would be nice to make "supersecret" a static final constant
Candidate: if (actual != null) { throw <UNK> } catch (throwable e) { thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> { thread.currentthread().interrupt(); throw
Reference: can we make this not double negative way?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> the <UNK> generation?
Reference: could you put doc.getcoresession() in a local variable please?
Candidate: why do we need to use <UNK> here?
Reference: please remove the extra blank line
Candidate: can be replaced with <UNK>
Reference: same problem with object.equals vs arrays.equals.
Candidate: should this be <UNK>
Reference: there's quite some duplication with methodorderingvisitor. have you already tried avoiding that?
Candidate: <UNK> *= 2;
Reference: skipping?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: this is kind of weird and i am sure i am not understanding it correctly. but if this get method already returns a value, then setting would just be redundant.
Candidate: ![major](<link_1> 'severity: major') throw an exception [![rule](<link_2>](<link_0>
Reference: should be easy to register all persistables using persistablefactory.getinstance().getclassidmapping().entryset().foreach(e -> kryo.register(e.getkey, simpleserializer, e.getvalue())); in place of specific concrete class registration.
Candidate: should we be <UNK> here?
Reference: could you also use a cache mechanism here?
Candidate: why do we need the <UNK> here?
Reference: we should not initialize resultstorageengine. please refer, how we initialize asyncquerydao in standalone and spring. we should do the same. <link_1> <link_0>
Candidate: why do we need need to evict the <UNK> here?
Reference: keep as one line or refactor.
Candidate: this should be the <UNK> <UNK>
Reference: i would create a new method to convert days in milliseconds, something like daystomilliseconds(int days)
Candidate: i don't think we need to the <UNK> the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: @wwelling : is there any guarantee that the default locale language will be included in the list of available languages?
Candidate: please use <UNK>
Reference: i'd use logger#debug in both cases... what do you think?
Candidate: if oldvalue is null?
Reference: there's a trick here: named styles are compatible with css, which means that if a css exists and declares the "delta" property, the intvaluestyle will be non-null. however, it would
Candidate: the syserr should be be <UNK>
Reference: i'm really not sure that using a condition is more readable than testing individual fields. i would go for a series of: assertthat(gelfconfiguration.getqueuesize()).isequalsto(10) ...
Candidate: if <UNK> != null) || <UNK> { <UNK> }
Reference: no need for this
Candidate: should this be the fixture.
Reference: similarly, i think this should either test that the two reads are mapped, or explicitly state that the read must be mapped.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: applicationid > 0 isn't it?
Candidate: should we log the exception?
Reference: can ioiterator only return ioservices? if not, a valid option would be to make next take a parameter targetclass (subclass of ioobject) and use that to rewrap the returned ioobject.
Candidate: you can use the <UNK> <UNK>
Reference: do you think it's worth using stringutil.parseint(<...>, 1000) here, just to avoid a potential exception from a parse failure? (it looks like invalid options are handled in the dialog directly
Candidate: i don't understand this matters, but if you do, can we move this into a separate method?
Reference: this variable is not used any more, can be removed.
Candidate: why do we need the <UNK> here?
Reference: not a big deal, but in the future it might be useful to loop through the enum just in case we are forced to add another descriptor type down the
Candidate: should we be the <UNK> here? if we { return; } <UNK> } } }
Reference: does every label in this class need this style class? if so, would propertypanecontroller label be more appropriate in the css?
Candidate: should this be specific?
Reference: i think that this should fail if key is required. it looks like this will fail when key is not required.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i'd prefer to see this as an abstract method and have each enum return the correct value
Candidate: should we throw an exception?
Reference: does it makes sense to check also that both config + devfile are not present?
Candidate: we should need to check for the if the == null) { <UNK> } else { <UNK> } else { <UNK> } }
Reference: validate the input is exhausted
Candidate: can we use the <UNK> here?
Reference: can we change to  if(!query.equals(targetinput) || !targetcond.isalwaystrue()) { return null; } ......
Candidate: suggestion <UNK> -> new <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: same as above, please fix the code alignment.
Candidate: this is eating the exception on the exception
Reference: check for null
Candidate: please remove the method("post")
Reference: @serranya same here. see above.
Candidate: @serranya use <UNK>
Reference: why do we need "|| commondataservice.getwebclientproperties().istagsavailable()" in if clause ?
Candidate: why do we need the <UNK> here?
Reference: can we test head() with empty file?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: replacing string2digitalvalue with converttoswitchoutput and converttocontactoutput is a bad idea because openclosedtype is stored as 0 or 1. furthermore i prefer the overhead of the bigdecimal approach over the exception
Candidate: should we be the <UNK> here? if we { null) { <UNK> groupname = <UNK> } { <UNK> } else { if <UNK> { null) { <UNK> }
Reference: i believe the old code used to throw the owaspdiffrunnerexception when we did a .get() on something that was null so you can use orelsethrwow() instead of setting it to
Candidate: can we use the <UNK> here?
Reference: requirenonnull(parentmemorycontext, "parentmemorycontext is null")
Candidate: this should be <UNK>
Reference: naming convention. getxxx returns a singleton. newxxx returns a new object instance.
Candidate: this s?
Reference: if we aren't going to use it we should remove it
Candidate: @unyoungwax, speaking this <UNK> <UNK> <UNK> branches, branches, you need to check the <UNK> <UNK>
Reference: so i guess the automatic refreshing is tested in the integration tests. i don't think we necessarily need a unit test, just checking :)
Candidate: i don't understand this matters, but why do we need need to check the the scenario?
Reference: rename "ann" to "rules", "rulesannotation" or something more descriptive.
Candidate: can we make this private?
Reference: missing return true
Candidate: storagetype should be null. if <UNK> != null) { return false; }
Reference: how about if there are duplicated in the newbricks list? is that possible?
Candidate: why do we need the <UNK> here?
Reference: as below, do you need to create multiple httprequests?
Candidate: please use <UNK>
Reference: this seems like a strange patter: we're faking a pendingintentrequiredexception just to launch the hint picker. should we instead bubble up some event that will allow this to be fired
Candidate: style-nit: space after (
Reference: why setting the no_image twice?
Candidate: can we use the <UNK> name)?
Reference: as mentioned on auth-service pr, we need to watch this setting and reload the auth-servers on change since auth-service is reading this from db everytime anyways.
Candidate: this should be <UNK>
Reference: shouldn't it be object instead of null ? as you can call tostring or hashcode on a variable typed by a type parameter
Candidate: if (state != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return state; }
Reference: should this be derived in the constructor? to avoid potential redundant computations.
Candidate: this should be <UNK>
Reference: static comparator again
Candidate: can be replaced with <UNK> <UNK> <UNK>
Reference: i would say that stream != null is redundant part
Candidate: why do we need to use the here?
Reference: try to use stream and java 8 instead of for each loops
Candidate: use <UNK> <UNK> <UNK>
Reference: the compiler warns that this exception isn't thrown by this method
Candidate: can you use <UNK> instead of <br>
Reference: it should be private, welcome to the java world :)
Candidate: why do we need to use the <UNK> here?
Reference: can you do in the same request? filter for all type or something
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: if you allow duplicate field names, this will match the first that is found and not touch the other one(s). whereas before it would change every one of them. is
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: final
Candidate: should we move this to debug level?
Reference: contains serves better purpose than get method.
Candidate: should this be null?
Reference: i gather vm cannot possibly be null here?
Candidate: should we be the <UNK> here?
Reference: just curious, why synchronized for the iterator? i see the same on the objectrange iterator but can't understand why it would be needed.
Candidate: i don't think we need hasnext() should be null.
Reference: s/.tostring()//
Candidate: should we use the <UNK> here?
Reference: please remove this. tests are by intent using a string and not a constant here.
Candidate: this fail()?
Reference: i thought this solution would pop up. do realize that instead of like 10 squares per dragon, you are now checking up to 100 players per dragon, which increases the
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: the callers of this method should know where the root is. the embeddedserverfactory.create methods take separate params for jbosshomepath and modulepath, so the relationship between modulepath and jboss-modules.jar may not
Candidate: please use <UNK>
Reference: don't just assertnotnull here. you have the proper commit and tag objects above (well, you threw away the tag). assert that the values read from db are equal to the
Candidate: why do we need the <UNK> here?
Reference: you could check the winding order of the holes here as well.
Candidate: please use assertequals
Reference: can we not capture this condition as a final boolean by checking the return type in a ctor (to avoid running this code on every non-null return)?
Candidate: why do we need the <UNK> here?
Reference: i could be missing something, but, other than the exception handling below, what is different about the bulk call over the iterate and delete. both seem to do the same
Candidate: do you want to use <UNK> directly?
Reference: should also be stringutils.isnotempty())
Candidate: i don't think this <UNK> is the the <UNK> is the
Reference: i dont think this is right. you have if islocalplayer under a check for islocalplayer.
Candidate: i don't need to check the <UNK> the <UNK> is the
Reference: change method name from isrobots to isvaluepresentinrobotsmetatags
Candidate: this should be setemptyelement().
Reference: this method is to long divide into smaller methods
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to check if the is the
Reference: and yet, fyi, (after hearing chris out) i have also come to prefer close-brace-on-its-own-line before else, catch, or finally, yet not before a (do's) while. this in spite of similar
Candidate: should we use the payload?
Reference: attribute handling during git transports? is this required?
Candidate: this should be the <UNK> ctor.
Reference: it looks better with the padding :), feel free to add it to the pr
Candidate: do we need snapshotid here?
Reference: tumorsample here is not used
Candidate: rename <UNK> to <UNK>
Reference: .git is not mandatory on github. will it work if i have defined project without .git?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: exception without message or stack trace
Candidate: why do we need the <UNK> here?
Reference: same here @alepintus , this could be replaced by: double[] doubles = stream.of(tempstrokedasharray) .map(double::valueof) .toarray(double[]::new);
Candidate: why do we need to use the <UNK> here?
Reference: why was this added? the replacetextbox_ already has an accessible label via the above formlabel replacelabel.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: why not name it from 0, like b0, b1, b2, b3 so that it matches the index of the array?
Candidate: unused
Reference: parallel stream?
Candidate: can you use <UNK> paths?
Reference: use hadoop constants here
Candidate: the syserr
Reference: may be its better to log the exception?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: shouldn't we wrap the original e ?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: nit: else is redundant
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: hook up these bare "cwl" entries to abstractentryclient.type (lower-cased)
Candidate: please use import <UNK>
Reference: this code is not easy to understand. improve readability.
Candidate: why do we need to use <UNK> here?
Reference: too big sleep. please, add explanation why it is needed.
Candidate: unused
Reference: why not to enable lazyeval here?
Candidate: i don't think we need to check if (state != null) { <UNK> } <UNK> { <UNK> <UNK> { return false; }
Reference: it's probably fine to remove this check and the associated test.
Candidate: this locks should happen in the locks in the locks locks in locks locks locks in locks locks in locks locks locks locks in locks locks locks locks locks locks
Reference: @jrmartin check if there's not a better exception to catch here
Candidate: why do we need to use the <UNK> here?
Reference: do we still need to have a suffix in the table name for the other schema mutation lock code work?
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() for the <UNK>
Reference: move to top of ctor, and: checkstate(shape.length == width * height, "shape for a character must match it's dimensions");
Candidate: the syserr should be be the <UNK>
Reference: links -> link
Candidate: why do we need need to the <UNK> here?
Reference: please use try-with-resources to close the connection.
Candidate: why do we need the <UNK> here?
Reference: i think the contract for this method requires that we do not overwrite slots, because otherwise numberofentries will be broken. add assert? allow overwrite?
Candidate: minor, but it minor, but minor, but it would be easier to read custom custom custom custom custom custom custom custom custom custom custom custom custom custom custom custom custom
Reference: you should probably log the exception as well.
Candidate: should be be <UNK>
Reference: oh i see, we are conditionally setting (vs adding a second header) nm
Candidate: this should be the <UNK>
Reference: we can replace iterator with for (string s : resourceaccess) {}
Candidate: can we throw an exception here instead of returning null?
Reference: the version check would be much easier as a method in the target class, especially considering the target implementation is responsible for loading its own template files.
Candidate: should this be the <UNK>
Reference: do we need to check for null?
Candidate: why do we need the <UNK> here?
Reference: concatenating the exception to the string here will just call tostring() on the exception. that generally doesn't provide much information, so we pass the exception in as a second parameter
Candidate: do we need a <UNK> of <UNK>
Reference: why is this check needed here and not elsewhere?
Candidate: <UNK> *= 2;
Reference: very sweet.
Candidate: why do not -1l ?
Reference: as mentioned above, move those to the benchmarksuitedao
Candidate: use stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack
Reference: blocking calls inside the sdk are not good. they can cause deadlock, perf hit, etc. we are not doing blocking calls anywhere else.
Candidate: please use <UNK>
Reference: i think this code would fail (with jbas014803: duplicate resource) in case deployment already existed on as7 server (which is what happens when you deployed version 1 of your bundle
Candidate: can we move this into a separate method?
Reference: it's best practice to name the fields you're expecting to return, instead of using the * glob pattern.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: same for super.deactivate, you should call it last.
Candidate: should this be <UNK>
Reference: paths.consumersworkloadconstraintspath()
Candidate: this should be the <UNK>
Reference: why not print parsermap=null if it's null?
Candidate: should this be <UNK>
Reference: huh?!?!? what was wrong before? (well, the logic is a bit weird anyway which is not your fault but why do we need to extract out to a local variable
Candidate: why do we need the <UNK> here?
Reference: super.configurepipeline can throw illegalargumentexception in case reference name is invalid. we should catch it and add to the collector.
Candidate: should we use the exception here too?
Reference: i am thinking if it makes sense to write imperative for-loop here? -- my general preference is when stream api is used in such a complicated way, it's actually more
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: any reason you don't drop that into the cache before returning it? that way this method is "cache-optimized" on re-entry -- cache miss leads to lookup leads to cache save.
Candidate: should we throw an exception here?
Reference: the lines above can be simplified using joml methods:  vector3f min = new vector3f(a).min(b); vector3f max = new vector3f(a).max(b);
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: deleterequestinfo.replica could simply be replica
Candidate: use <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: shell.getdisplay().getactiveshell() yields null. a check assertequals(shell.getdisplay(), display.getcurrent()); assertequals(shell, shell.getdisplay().getactiveshell()); may make sense here the test succeeds when one test class is executed alone, but fails wheen it is executed with
Candidate: what is the reason for the <UNK> properties? why do we miss? here?
Reference: do you think it is worth an intent != null check here? it was unclear to me whether the framework and filters will always protect us from receiving a null
Candidate: this should be the <UNK>
Reference: @deprecated unless you are going to use a databoundsetter as suggested by @kostyasha
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: fyi, these credentials have been disabled. in the future do not ever commit credentials with todo from properties. they will be available through git history even after you fix this.
Candidate: can you use the exception here?
Reference: background effect, oder?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> } else { if <UNK> { <UNK> } else { if <UNK> == null) { <UNK>
Reference: avoid usage of onfailure/onsuccess for efficiency purpose
Candidate: i don't think we need to check if the is is the software <UNK>
Reference: should these cases be reverse? (i.e., don't instantiate the logger unless audit logging is on)
Candidate: should we expecting the <UNK> here?
Reference: variable organizationentity
Candidate: this should be <UNK>
Reference: parhaps collections.singletonlist?
Candidate: can you use the fqns here instead of <UNK>
Reference: this allows a default value. why don't we just assign it "1"?
Candidate: can be simplified to <UNK> <UNK> ?
Reference: should we warn users about that?
Candidate: do we need to check if <UNK> != null) || <UNK> == null) || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> && <UNK> != null) || <UNK> ||
Reference: maybe we should change it to be debug since this is on a critical path (even though this method might not be called very frequently)
Candidate: the syserr should be be the <UNK> <UNK>
Reference: this is redundant in mockito 2
Candidate: this should be the <UNK>
Reference: does dbxnetworkerrorcallback need to be a runnable? instead of having setnetworkerror() + run(), would it be simpler to just have one method like onnetworkerror(t error)?
Candidate: do we need to do we need need to do we need to do we need to do we need to do we need to do we need to the
Reference: this should also probably relocate any old items to the order given in the collection. e.g. collect existing, removeall(existing), addall(items)
Candidate: can we use <UNK> objects.tostringhelper() name)? ill trackaliasuser class object object object object object object object object object object object object object object object object object object object object object
Reference: why do we need to proceed when there is some exception
Candidate: can be simplified to return <UNK> ?
Reference: should we do this using spring jdbc ?
Candidate: why do we need to <UNK> here?
Reference: why not replace with boolean okgroup = (group == lastgroup) || !seeninthiscycle.contains(group) ? i don't think there is a point in comparing the identifiers, and this way it should be
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: cluster is null on dialog init (looks like a bug). this method is invoked only when changing os.
Candidate: should this be the vdsid here?
Reference: isn't this always true here?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: please format this appropriately, it should be possible to fit every "part" of the message in a line.
Candidate: if (actual == null) { throw null; }
Reference: is this to switch to mapframe? if so, consider changing it to explicit states driver.switchto().frame(mapframe);
Candidate: why do we need need to check for the <UNK>
Reference: shouldn't it be isdownorsuspended or isnotrunning
Candidate: i don't think we need to check for the <UNK>
Reference: use collectionutils.isnotempty()
Candidate: what is the reason for the the <UNK> query?
Reference: shouldn't we also synchronize closereaders(), together with releaseholder(..)?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: nice. it might be better to call stop() or stopimpl() instead of quitting the looper directly though.
Candidate: should we be debug level?
Reference: is there a constant for this env property?
Candidate: can we be rectangle <UNK>
Reference: maybe make this a const instead.
Candidate: why do we need to use the <UNK> here?
Reference: logging to info should provide contextual information useable by system administrators. this message seems more appropriate as debug or it needs more context to be useful by a system administrator.
Candidate: please use <UNK>
Reference: these are the sort of tests where i think assertj really shines, e.g.:  assertthat(result.orelsethrow(runtimeexception::new)) .extracting("doi", "authors", "title") .contains("10.1126/sciimmunol.aan8664", "patil vs, madrigal a, schmiedel bj, clarke j, o'rourke p et
Candidate: iterable<integer> param.
Reference: exception#printstacktrace goes to stderr by default.
Candidate: we should need to the the chunks of the the the chunks of the <UNK>
Reference: oh, i didn't know about this! isn't it the same as boolean.class though?
Candidate: why do we need need to the <UNK> here?
Reference: avoid using thread.sleep
Candidate: can you use the controller out of controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller controller
Reference: this local variable appears to be unused. suggestion to remove.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: this could just be created when it's needed. this variable doesn't seem to be reused.
Candidate: should we throw an exception here instead of returning an exception?
Reference: basic
Candidate: i don't understand this matters, if we matters, but it is the <UNK> the <UNK> is the <UNK>
Reference: this is not specific to this pr but in general, should we consider using throwables.propagate() instead?
Candidate: should we throw an exception?
Reference: i think you can remove this nested else and use else if (!compact...
Candidate: why do we need need to the <UNK> here?
Reference: > dich auf die probe stellen wollte the other thing isn't really german... > freust du dich nicht etwas mit flows a little better imo
Candidate: why do we need this?
Reference: do you mix 'httpclient' and client by intention this way?
Candidate: why do we need the <UNK> here?
Reference: can we rename list to entries or something similar.
Candidate: you can use assertthat on the <UNK>
Reference: qq: do we need to delete the old node?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: don't forget to cover all if conditions in the validatequestiondetails. you can see the coverage by the ci or in your ide.
Candidate: why do we need the <UNK> here?
Reference: - at this block, it looks like the new student entity has been persisted to the db. is it safe? - if i understand correctly, this happens by chance if
Candidate: do we need to hide the here?
Reference: could this not be something like  var isvalid = stripegatewayconfig.getwebhooksigningsecrets() .stream() .anymatch(s -> isvalidnotificationsignature(payload, signatureheader, s));  ?
Candidate: rename <UNK>
Reference: out.open or tran.abort can thorw exceptions. call getandincrement() right before try { && getanddecrement() right after finally {, or use another try-finally block.
Candidate: why do we need to use the here?
Reference: ![major](<link_1> 'severity: major') either log or rethrow this exception. [![rule](<link_2>](<link_0>
Candidate: should this be private?
Reference: this doesn't wrap or nest any arrays. it just returns the array at the recursion base case.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: matches: "darwin", which i believe some openjdk builds might identify os x as.
Candidate: should this be <UNK>
Reference: not a good idea to use the same phoenix connection across multiple threads since it is not thread-safe.
Candidate: why do we need to evict the sizes of the sizes properties?
Reference: put each parameter on a separate line, currently this is too long
Candidate: i don't think we need to check if the is is the
Reference: suggestion assertequals(1, runtimeexceptionononlinelistener.ononlinecount);
Candidate: why do we need to use the <UNK> here?
Reference: missed three
Candidate: can you use the <UNK> <UNK> <UNK> <UNK>
Reference: ingest segment firehose?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: gradledistribution should have applyto(connector)
Candidate: why do we need the <UNK> here?
Reference: please consider using: timeunit.milliseconds.sleep(innerlatency); it is not clear what is the unit of time that we want to wait.
Candidate: why do we need to the <UNK> here?
Reference: can you realign this line - merge it back to the previous?
Candidate: the syserr should be be <UNK>
Reference: should this be part of the messages.properties?
Candidate: use <UNK>
Reference: if we add max>0 in the condition there it will cause the issue because in finally block we always reducing the endcount irrespective of max value. e.g. 1)max value is
Candidate: why do we need need to <UNK> here?
Reference: if cipher.getinstance(cipher_name) failed next line will raise an npe. should we handle this in a better way ?
Candidate: what do you want to use <UNK> instead?
Reference: this is another case where the null logic and default logic should be combined in one place boolean nomatch= false; if (fjunitversion != null) { switch .... default: nomatch= true;
Candidate: i don't understand this matters, if this is right...
Reference: this code block seems redundant - the next statement is a call to setvcfheader, which handles this.
Candidate: remove the <UNK>
Reference: if privatealignment is null and the received value is null, this will be called although unneeded (nothing was changed)
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: instead of closing like this, i would suggest to have a try-with-resources: java try(final samreader reader = samreaderfactory.makedefault().referencesequence(reference_sequence).open(input)) { ... }  you can also include the writer there...
Candidate: should we be the <UNK> somewhere?
Reference: @tomjenkinson no, it shouldn't start failing. the recovery will just be replayed two times.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: seems reasonable to also want to include the 'to' location?
Candidate: should we throw an exception here?
Reference: i was instead planning on using the filterentries method on the advancedcache. so in the list method it would be  try (closeableiterable<map.entry<object, object>> myiterable = cache.getadvancedcache().filterentries(filter).converter(filter)) { for (map.entry<object,
Candidate: why do we need to call <UNK> here?
Reference: unable to understand this change. why is it required for this test?
Candidate: i don't see why, but this is the why, on the origin of the
Reference: the way this query is written (a count), i don't think you will ever get a null result so i think you can cast to/return a long
Candidate: should we throw an exception? if iae is an iae possible?
Reference: should clone this on return
Candidate: why do we need to check the <UNK> here?
Reference: i think this test isn't technically correct. it's possible for a != b but a.hashcode() == b.hashcode(). i think the correct assertion for the the hashcode part should be. 
Candidate: this should be setemptyelement().
Reference: suggest check that artifact != null
Candidate: i don't need to check if the is is the
Reference: with logback, we don't need these types of guards.  java log.debug("queing event: {}", event)  should do the trick with no penalty in performance.
Candidate: i don't understand what if we do, if we is the software <UNK> software <UNK> of the <UNK> <UNK> is the software <UNK> but i don't think it should be
Reference: you need to update testexchangeclientconfig for this.
Candidate: should this be <UNK>
Reference: in several places you call getarguments() in a conditional and then use the value. i assume you did this because you know getarguments can't change out from under you, and
Candidate: should be replaced with: <UNK> = <UNK> if <UNK> == null) { <UNK> = <UNK> }
Reference: might fix your issue suggestion public void settopics(arraylist<string> topics) {
Candidate: please remove method("post")
Reference: if i'm not wrong, the method can return void, as other mockxyz methods. the return value is never used.
Candidate: i don't think we need to check the <UNK>
Reference: consider applying de morgan's law here, it should make it more readable.
Candidate: please consider extracting this to a helper?
Reference: isn't error also set in the controller?
Candidate: please use <UNK> <UNK>
Reference: field %s has unexpected type %s
Candidate: remove trailing <UNK>
Reference: the requestset should be created only when we're about to start a transaction - when there's ongoing transaction with multiple writes it shouldn't do it on each request.
Candidate: if you is the software <UNK> <UNK> is the software <UNK> but i don't think it matters, but it would be better to do we need to check the <UNK>
Reference: why no jsonobject?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: new byte[]{} -> new byte[0]
Candidate: this don't need to call <UNK> <UNK> <UNK>
Reference: have a check for null tablename, since @notnull is now removed
Candidate: why is this <UNK> <UNK>
Reference: @jindoujiao unity sdk is not failing the banner ad when the width is less than 320, instead it throws an error log, saying invalid adsize, but it is returning a
Candidate: i don't understand why, but it matters, but it is be the <UNK> the <UNK> is the
Reference: better use getcanonicialpath and getabsolutepath instead.
Candidate: why do we need to use the <UNK> here?
Reference: 1. the last index segment can have the start offset that lies within the journal right? why is this check required. 2. this was bit confusing. can you have two
Candidate: please revert this code looks weird.
Reference: fix the annotation line placement.
Candidate: why do we need to here?
Reference: you can use guava's iterables.getlast(catchlist) instead.
Candidate: why do we need to use <UNK> here?
Reference: maybe put it right at the beginning of the method in case any of the other initialisation stuff tries to do anything with dns first?
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: this should be a one liner
Candidate: if <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: you might be returning null here if it was never set. the code that calls it never does a null check. you should either set a default here, or mark
Candidate: this should be <UNK>
Reference: nitpick: in general we transform to unmodifiablemap on the caller side not in the class that uses it. this is because it returns an unmodifiable view so nothing guarantees that
Candidate: nit: can be replaced with <UNK>
Reference: i'm puzzled by this change. why would you want to return boolean instead of boolean? all your current consumers are now auto unboxing it into boolean, as i don't see
Candidate: if (state != null && <UNK> != 0) { return state; }
Reference: this won't work.
Candidate: why do we need the <UNK> here?
Reference: why are we including fakethread?
Candidate: <UNK> evidence, we should use <UNK> <UNK>
Reference: please revert if possible
Candidate: this should be <UNK>
Reference: doesn't reflectionequals checks all this things?
Candidate: please use object.equals as well
Reference: a session id is unique and complete. you don't need to wildcard it.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: should be:  assertthat(system.currenttimemillis() - t1).islessthan(45000);  also, maybe we could lower the limit a bit. on my laptop, the optimized version consistently runs under a second.
Candidate: <UNK> doesn;t be the fixture.
Reference: do we really need to lock by hand? isn't optimistic locking on by default?
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: faspectmap.computeifabsent(aspect, a -> fatomiclong.getandincrement) will ensure that each call to fetchtree returns the same ids for the trace
Candidate: no, this should be the cheapest field, right?
Reference: nit: you can remove the ()
Candidate: typically, i don't think we need to use the <UNK> <UNK>
Reference: do not call repository method, when you can detect if the parameter is wrong. use assert in the service implementation for catching invalid parameters.
Candidate: should this be <UNK>
Reference: you can directly use org.eclipse.sirius.common.ui.tools.api.util.eclipseuiutil.getactiveeditor(). it handles all the potential npe.
Candidate: if the == null) { return false; } else { return false; }
Reference: what about json arrays? seems to be a valid case
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: suggestion cachemanager::getcachemanagerconfiguration);
Candidate: should this be the <UNK> ?
Reference: should only be done if validation is enabled.
Candidate: why do we need the <UNK> here?
Reference: it would be good to use constants for property names
Candidate: you can use <UNK> <UNK> <UNK>
Reference: the word "failed" need to be there either way.
Candidate: should we move this to debug level
Reference: shouldn't we have non null values for all new fields in v2?
Candidate: why do we need need to the <UNK> here?
Reference: it needs to process the "value" from the between predicate, too.
Candidate: why do we need to check for the <UNK>
Reference: throw?
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: there will be better to tell user which host is the problem of privilegeexception. he probably has no privilages for adding specific host.
Candidate: please use <UNK> facilities
Reference: we can merge these two if statements to one
Candidate: should this be <UNK>
Reference: @diogofscmariano this doesn't look right
Candidate: why do we need to check for the enum?
Reference: return objects.hashcode(spec, name, config); when it's auto-generated, i just about accept having the verbose version, but as soon as we're modifying the code we should put in the easier-to-read-and-maintain approach.
Candidate: objects.hash()
Reference: declare throws please
Candidate: throws serviceexception.
Reference: submonitor.convert() takes care of that. here it's needed only for the monitor.done() at the end. where is this called from? maybe it's better to do the monitor.done() at the calling
Candidate: the syserr should be be called via:  public void <UNK> { <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> } <UNK> <UNK> { <UNK> } <UNK> <UNK> { <UNK> }
Reference: note that this change isn't strictly backwards compatible. it is *binary* compatible, but the resulting object was originally mutable and is now not guaranteed to be mutable. in general, it
Candidate: we should need to use the exception here instead of <UNK>
Reference: should be !getisbathanging() since the method is the opposite
Candidate: this should be setemptyelement().
Reference: is there a better selector here? while this works, having to rely on the angular component name is not preferred.
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: from the point of view of the time graph viewer, these actions select the next/previous event (time graph's itimeevent, not trace's itmfevent which time graph knows nothing about). i wonder
Candidate: why do we need the <UNK> here?
Reference: there is an execution path in this method where close() is not called.
Candidate: should we throw an exception instead of the exception?
Reference: maybe rather than return list<string[]>, return list<configuration> ?
Candidate: should we throw an exception here?
Reference: i prefer not handling host with migratable vms (###) and use the host list supplied in method params
Candidate: can you use the division for the size?
Reference: is it possible for this to be null? we always return a cursorloader in oncreateloader().
Candidate: i don't think we need to check if the is is null.
Reference: i don't think we need this duplication. instead we can drive off globalcapability.getallnames() here. the duplicate entry in the properties file was a hack for gwt.
Candidate: please use <UNK> v1, k2, "/",
Reference: myproject doesn't exist anymore since the last merged pull request. use getjob or job instead. hence the build failure.
Candidate: can be replaced with checkargument with <UNK> generation?
Reference: we could move the \n with other cases: i.e. ' ', '\t', '\r' a
Candidate: use <UNK> = <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> = <UNK>
Reference: write why this is needed?
Candidate: this should be <UNK>
Reference: reader needs closing ? if so then it should be in final block
Candidate: why do we need the <UNK> here?
Reference: 'this.' is not needed here. i personally prefer to remove it unless it's needed...
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: parttorefresh2.removeall(parttorefresh1): sometimes the simplest solutions are the best :-)
Candidate: why do we need the <UNK> here?
Reference: tbh i don't really find this useful. since the condition is quite long, the previous approach has nice advantage - you can tell right away from the variable's name, what
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: not sure what does returning null mean for such method. is it a failure? then why not illegalargumentexception? in any case, it would be better to avoid returning null in
Candidate: if (state != null) { <UNK> }
Reference: if you use administrationservice.getglobalpropertyvalue(string propertyname, t defaultvalue), it would simplify the if clause on line 124 below
Candidate: what is the reason behind the <UNK> behind the <UNK> behind the
Reference: @jhrcek now we only close jms connection here. @adrielparedes a better name is shutdown eventsmanager right?
Candidate: this should be the <UNK> via: <UNK> <UNK> { <UNK> }
Reference: not sure about this.. every time that this command is instantiated it will use a different guid? note that coco is supposed to cache the command so it will work
Candidate: i disagree with the <UNK> if <UNK> != null) { <UNK> groupname = <UNK> } { <UNK> } <UNK> }
Reference: check equal lengths for strikes and impliedvols
Candidate: can you use the <UNK>
Reference: this explicit type argument is not necessary.
Candidate: use <UNK> <UNK> <UNK>
Reference: wrong code. should be "if (id != null && (id.startswith(idscheme))" only.
Candidate: should this be be null? if we { null) { throw new <UNK> { <UNK> } <UNK> { throw (long if <UNK> { <UNK> }
Reference: use an overridable getoperationtimeout() method instead
Candidate: @exper0 use <UNK>
Reference: it seems insecure to have the credentials in every record. we can address this in a follow up pr, but maybe the sink should require the source credentials in its
Candidate: can we throw an exception here?
Reference: wording nitpick - i would omit "is". it just reads better to me; i can't tell you a principle of grammar to justify it,
Candidate: should be be the container, delta delta container, <UNK> container, delta container, will be the container, the container, the container, container, container, container, container, container, container, container, container, container, container,
Reference: the potential npe warning reported here can only be circumvented by assigning the bridge to a locale variable (like for the handler).
Candidate: we should need to hide the exception here
Reference: why depend on guava's object class when jdk provides the replacement for it? (and even more, why change it when it's already in place?)
Candidate: can you use <UNK> <UNK> <UNK>
Reference: nit: s/leaderlivenesscheckscheduker/leaderlivenesscheckscheduler/ also, what does "leader info 2" mean? perhaps a typo?
Candidate: should we be the <UNK> here?
Reference: you could avoid the second call to getrecordclass by doing  abstractrecord rec = _map.get(i).getrecordclass()  unless you think _map.get(i) could return null in which case you need to be
Candidate: i don't understand this matters, if we matters, this matters, this matters, this matters, that this is is the <UNK> if <UNK> != null) { return <UNK> } <UNK> }
Reference: this catch is redundant. without it, the code should be able to throw e as well
Candidate: should be be the <UNK>
Reference: i'm not sure i see the improvement in this refactoring either. it also ends up being significantly longer. what was wrong with the original code?
Candidate: please use <UNK> flatmap
Reference: apidefiinition - i know that this was converted to a stand-alone method, but please correct the variable name
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: print help all the time? the command > server alone isn't valid.
Candidate: should this be <UNK>
Reference: nit, could be simpler by adding a buildemptycloudconfig method which returns a static cloudconfig instance which has been configured as cloudenabled = false.
Candidate: typo: <UNK>
Reference: this could be removed now.
Candidate: why do we need the <UNK> here?
Reference: can combine into one line.
Candidate: why do we need to use the here?
Reference: shouldn't this be .equals? since there is no guarantee the method will always return the same instance? also, might be simpler to just do instanceof readrowsrequest?
Candidate: why do we need to the <UNK> here?
Reference: refactor lines 272-278 and lines 282-287 into...  void rmdirs(string... directorynames) { for (string directoryname : directorynames) { file directory = new file(directoryname); if (!directory.exists()) { throw new filenotfoundexception(string.format("no such
Candidate: why do we need this?
Reference: did you determine these to be redundant?
Candidate: why do we need the <UNK> here?
Reference: according to the order, the users can override the built-in labels by customization. i think the built-in labels should prioritize the user-specified ones. wdyt?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please use the bigtableinstancename.togcbinstancename() here.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: can you try making poolentry a java.lang.comparable to see if it makes this cleaner?
Candidate: <UNK> *= 2;
Reference: remove
Candidate: why do we need the <UNK> here?
Reference: maybe put iscast in standardfunctionresolution as well and have this as a class variable.
Candidate: list<linkinfo> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> rectangle <UNK> = <UNK>
Reference: it is a module precisely so that it can be pulled into core via the dependency mechanism
Candidate: why do we need need to do we need to here?
Reference: java logger.lognext(logtag, observabletag, value);
Candidate: should we be <UNK> to arraylist?
Reference: add curly braces around else block. also, falling back to a default-constructed referencesource will (i believe) eventually produce a nullpointerexception deep in the cram parsing code provided that defaults.use_cram_ref_download is
Candidate: should this be the fixture.
Reference: delegate?
Candidate: should this be <UNK>
Reference: remove?
Candidate: why do we need need to check for the <UNK> ?
Reference: the pr #3491 which has been merged into the main branch has changed this constant name. would you please update the latest code and change it here?
Candidate: why do we need this?
Reference: data_ constants should be about field names in the json, while attribute_ constants should be about field names in xobjects, so it's wrong to use data_contact to get values from
Candidate: please use <UNK>
Reference: assert the actual host and port?
Candidate: why do we need to check the <UNK> here?
Reference: this method has duplicated code that could be simplified by calling uncheckedfiles.createdirectories() unconditionally before the write call.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: there's a lot more to cleanup like this (unnecessary boxing, stringbuffer -> stringbuilder (already done, just not pushed yet)), but please let us do it at least in _distinct_ commits.
Candidate: we should expecting the exception here?
Reference: every test will shut down all the locator/servers and restart them again, making the tests taking longer. if you would like make the tests run faster, you can lump these
Candidate: why do we need the <UNK> here?
Reference: ... and this test is changed. from my understanding the descriptor is expected to be non-null and the createimage must return null.
Candidate: this should be the <UNK>
Reference: we already have different methods for dropping rows with na values in dropnahandler, don't need to overloading the convertrowtype function.
Candidate: can you move this logic into a separate part, so that it make sense to make sense to reduce nesting.
Reference: if i'm not wrong, i believe you could omit this too. we can check if the course does not have any students (line 54) using coursedetails (line 47)
Candidate: isempty()?
Reference: this looks like a debugging print that should be removed.
Candidate: why do we need to the the payload?
Reference: perhaps i'm missing something, but starting with line 171, isn't this equivalent to a somewhat simpler: return model.getactioncols().stream() .filter(c -> !columnstomove.contains(c)) .filter(c -> c instanceof actionworkiteminsertfactcol52) .map(c -> (actionworkiteminsertfactcol52) c)
Candidate: can you use division for the size?
Reference: why not collections.emptylist() anymore?
Candidate: why do we need to check for the <UNK>
Reference: not used in this plugin, but i see it useful outside (a way to get the list of repositories managed by this organizationfolder). i think returning the list scmsources owned
Candidate: this should be <UNK>
Reference: nit: unrelated formatting change
Candidate: what about the enums - 1 p1 = <UNK> - 1 = 1 <UNK> = 1 branch - 1 = 1 branch - 1 = 1 branch - 1 =
Reference: add sort and other generic options from superclass.
Candidate: why do we need the <UNK> here?
Reference: using exception.printstacktrace() is _very_ seldom justified. why not propagate exception instead?
Candidate: throws exception exception
Reference: would prefer to see loops replaced with standard "for (int i = 0; ...)" style, rather than declaring 'i' and manually incrementing it. a stream would also work, using 'maptodouble()'
Candidate: can be replaced with <UNK> <UNK> ?
Reference: this code is repeated a few times. it may worthwhile to have a complex metrics utils class that will register hll and other complex metrics in the future
Candidate: shouldn't this be the the clients?
Reference: extract notification to own method notify...
Candidate: repository repository is not be the repository repository repository is the repository repository repository is the repository repository repository repository is the repository repository is the repository repository repository is
Reference: should we check this is empty then?
Candidate: why do we need the <UNK> here?
Reference: if you have a secured instance (not sure if aths have this on restart?) then you may not see the "new item" part.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: non-blocking, but i'd probably fold these steps (as you may not always want to use the uuid type). ex. traceidtobigintegerconverter can mention that it is uuid formatted instead. this keeps
Candidate: use <UNK> <UNK> <UNK>
Reference: logviewtest.testclearandrestore failed. maybe there is a possibility that tree does not exist when logview has no messages ?
Candidate: why do we need the <UNK> here?
Reference: same thing here, moving the for statement in the redislock block
Candidate: i am redundant, i am not sure if we is redundant, so we should need to use the getter for every getter will be returned.
Reference: @gitcliff , what happens when you leave out this change?
Candidate: we should use the <UNK> <UNK>
Reference: i dont think stationary_water exists anymore.
Candidate: should we use the <UNK> here?
Reference: for future reference you should use collections.emptylist() for this.
Candidate: please use the exception here instead of eating the exception
Reference: after all, it turns out that we don't know the last bucket of the requested time range, only the last bucket that contains a real event (flastbucket) and the time
Candidate: can you move this into a separate method?
Reference: it is not possible to easily bump sasl_handshake schema without due to... (remove "without")
Candidate: we should catching throwable exception if the exception is not thrown.
Reference: is(both(greaterthanorequalto(sleeptime)).and(lessthanorequalto(startdelay))) to show that it's a range?
Candidate: should we be the getconnection here? we don't need need to do we need need to do we need need to do we need need to do we need to
Reference: are you sure this is correct? if a csp has script-src '<link_0>' and also script-src-elem '<link_1>', would <script src="<link_1>"></script> be allowed? this (if i'm reading it correctly) implies that it
Candidate: can be simplified to: java return <UNK> <UNK> .filter(s -> <UNK> .filter(s -> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { return sep + <UNK> + sep + sep + sep
Reference: add a validation clause for currency. if currency code is not valid throw badrequestexception
Candidate: this should be setemptyelement().
Reference: i do not understand why we need this block.
Candidate: do you need a <UNK> of <UNK>
Reference: is this needed? seems that this will never evaluate to true since the menu is being built at this point in time.
Candidate: why do we need need to the <UNK> here?
Reference: i am starting to finish up an issue that re-organized our inputs. please rename new input files to inputtranslation.... if file can't be renamed, please give us a reason why.
Candidate: why do we need the <UNK> here?
Reference: there are a few of these logging statements in this class that could possibly be cleaned up
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: missing @override
Candidate: please use <UNK> <UNK> <UNK>
Reference: instead of returning asyncqueryresultstorage we should return byte[] to keep the code extensible.
Candidate: i don't think we need to throw an exception if invoked?
Reference: i think we should also switch to debug logging
Candidate: consider using a syserr
Reference: rename duple to info
Candidate: can be simplified to <UNK> <UNK> ?
Reference: shouldn't this be an unchargedidentitydisk?
Candidate: <UNK> *= 2;
Reference: synchronization at this point is not required because the cancelled method reads and volatile field into a local variable (either becuase you replace the atomicreference with the original volatile variable
Candidate: we should need to log the to the log the
Reference: you removed too much. rpm can not generate buildrequires so they need to be generated. just the requires were not needed.
Candidate: i don't understand this method("post")
Reference: @pynicolas i think it might be better to keep all the logic in javascriptnodebuilder: you'll need to subtract 1 to the column if the token is on line 1. with
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: i think this should be null, not an empty string.
Candidate: please remove the <UNK>
Reference: consider converting this to intopenhashset from fastutil and storing float.floattointbits() results. the latter is to match nans.
Candidate: can be simplified to: <UNK> = <UNK> ? <UNK> : 2; : 2; : <UNK> : 2; : <UNK> : 2; : <UNK> : 2; : <UNK> : 2; :
Reference: is it safe to assume that there is no ':' in any of these strings? the line 181 above has special handling for decoding %3a into ':'. seems like there
Candidate: should this be the <UNK> request?
Reference: i wonder what it means where we fail here. i assume the correct behaviour of this service kind of depends upon receiving the events. isn't logging a warning good manners?
Candidate: the syserr should be be the <UNK>
Reference: findbugs: this is ignoring mkdir()'s return value, instead use fileutils.mkdirs()
Candidate: i don't think we need to check if the is { return; } if (throwable { return; }
Reference: should be able to pass m here.
Candidate: can we make this a bigger?
Reference: i would suggest you to improve readability by changing it to ctx.inventory.select().size() >= constants.inventory_size
Candidate: should this be <UNK>
Reference: this attributie is not used, and not needed; please remove it.
Candidate: <UNK> should be the <UNK>
Reference: not a big deal, but mp.getvalue() is already fetched into partitions.
Candidate: this should use the rhs of the rhs of <UNK>
Reference: @danielezonca could you pls semplify this if (!!resultvalue.issatisfied()) { resultvalue.geterrormessage().ifpresent(_lambda) expectedresult.seterrorvalue(expressionevaluator.reversefunction(resultvalue.getresult())); } else ... or something similar?
Candidate: i don't think we need to close the threw an exception if we don't need to close repository connections (after failed)
Reference: you don't need a try-catch here. you can simply use @test(expected=nullpointerexception.class)
Candidate: should we use the exception here?
Reference: i can be moved inside the if.
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: are we still using temporary properties files? rename method
Candidate: should this be <UNK>
Reference: please use a constant here also, perhaps it will be wise for future usecases to specify the color as a constant parameter in case someone will want to make a
Candidate: can we all() all() all() method for the <UNK>
Reference: we should change the [reply == no_option] to [reply != yes_option]. currently, if i close the confirmation window with x, it saves the file. in my opinion closing the confirmation
Candidate: please use <UNK>
Reference: exception, so stderr
Candidate: this eating the exception if the exception suppresses exception exception if the suppresses exception exception is skipped, throw an exception exception is skipped, throw validationexception. validationexception.
Reference: is this a server-supplied name? otherwise we need to localize this i.e. put it in strings.xml.
Candidate: why do we need to use the <UNK> here?
Reference: there is no need to verify the response deserialization in mock tests, so you can remove all these asserts. we just want to make sure the generated requests are the
Candidate: use gender here?
Reference: this looks wrong. you added the code to deleteoperation to throw blobdoesnotexist if no server has the blob.
Candidate: what is a reason for this change?
Reference: while there isn't a strict contract for what getobjectvalue should return, it's a good idea to return a json-serializable object that represents the value. this is currently used by the
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: is this check required ? at this point length will be greater than 0 as we will return null if the length is 0 at line 62 strings.isnullorempty(dimvalue)
Candidate: should this be the <UNK>
Reference: if the 2 classes below are combined, this simplifies to:  java list<operatorrequest> operatorrequests = new arraylist<operatorrequest>(); operatorrequests.add(new regulaterequest(normalstate)); response.operatorrequests = operatorrequests;
Candidate: should we use the getconnection here?
Reference: not sure how often this method is used, but this does not seem correct.
Candidate: why do we need to use the <UNK> here?
Reference: shouldn't the user be deleted even if they have no session?
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: knownhashes is useless then, let's remove it
Candidate: should be be the <UNK>
Reference: ditto, missing fail() call
Candidate: should we use the exception here?
Reference: are these wrong too?
Candidate: can be replaced with <UNK> <UNK> ?
Reference: maybe possible to remove duplicated codes by extracting the below condition checks.
Candidate: if <UNK> == null) || <UNK> { <UNK> } } } } } }
Reference: needs to be type.
Candidate: do we need a <UNK> type"?
Reference: probably it's better to start supporting <code>job</code>s instead of abstractproject (workflow, inheritance, etc.)
Candidate: this should be setemptyelement().
Reference: can you use org.junit.assert.assertthrows(..)?
Candidate: should we use the exception here?
Reference: problem with the argument passed to setupdiskspacetest
Candidate: ![major](<link_1> remove the 83
Reference: .nonematch()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: single line?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: this whole block does nothing, so not sure why it's needed other then logging, but logging is also cryptic "detected mode disabled", isn't it easier to say in flight mode,
Candidate: what happens if the exception is thrown is the
Reference: could we please inster this assertion: java nestednode.set("emptyfield", new textnode("")); asserttrue(expressionevaluatormock.islistempty(json));
Candidate: <UNK> evidence, we should need to the <UNK> <UNK>
Reference: recommend this, makes for an easier test and guarantees the property you want. java public class unstableorderediterable<t extends comparable<? super t>> implements iterable<t> { private final iterator<immutablelist<t>> underlying; public unstableorderediterable(collection<t>
Candidate: why do we need need to the <UNK> here?
Reference: remove sout.
Candidate: do we need need to throw an exception
Reference: s/this.cachealltables/cachealltables/g i think we prefer not to use this to reference variables
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: catching throwable is generally a bad idea, these catches should probably be exception
Candidate: what is this a reason for the <UNK> <UNK>
Reference: i don't like to swallow an exception like this since it may give the wrong impression. are we sure that this date format is always used by es? if so
Candidate: should we throw an exception?
Reference: how about throwing runtimeexception here? when image generation fails code dependent on it is also going to fail.
Candidate: this is the cheapest check) if <UNK> == null) { <UNK> groupname = <UNK> } else { if <UNK> { <UNK> } else { if <UNK> { <UNK> }
Reference: could you assert that the destruction was successful somehow?
Candidate: why do we need the <UNK> here?
Reference: change the second part of || to an assert (verify).
Candidate: this should be the fixture.
Reference: please use getvdsgroup()
Candidate: can be simplified to return <UNK> ?
Reference: i think it'd make sense to check for the presence of id and timestamp and use the different streamsdatum constructors depending on their presence. this assumes a lot about the
Candidate: why do we need need to be the <UNK>
Reference: @tsr-thulio please move this from root to src/main/resources dir.
Candidate: should we class" be specific?
Reference: this should never happen. we should add an assertion.
Candidate: can be replaced with <UNK> <UNK>
Reference: do we really need this check? i think it's redundant.
Candidate: this should be the <UNK>
Reference: it would be nice to use constants instead of the magic characters > < [ ] .
Candidate: if the overflows?
Reference: please introduce "top" class constant so we are sure both gettop so settop work over the same property. please do the same for "px".
Candidate: why do we need to check the <UNK> here?
Reference: put this in the subscription? (it's not thread safe afaik)
Candidate: should we be the <UNK> properties?
Reference: as mentioned in #1324, this map could be a immutable map?
Candidate: i don't understand this matters, this matters, but you can use the <UNK> <UNK> <UNK>
Reference: if the user isn't using openfl, then we probably shouldn't go along and register a listener for every module. we have to add functionality to the module settings listener (or
Candidate: please use <UNK>
Reference: why aren't you loading the profile name from org.jboss.hal.testsuite.util.configutils#getdefaultprofile ?
Candidate: i don't think we need to call the <UNK>
Reference: you could just say startprogress
Candidate: should be be the <UNK>
Reference: the mediationadrequest's [istesting()](<link_0> can be used to determine if a publisher is requesting test ads. please note that this requires google mobile ads android sdk version 11.8.0 or higher.
Candidate: i disagree with the <UNK> of the <UNK> is the <UNK> bigger?
Reference: we should explicitly @override here.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: according to: <link_0>, better use ex.getcause()
Candidate: if we is software software <UNK> software error? shouldn't we be an error?
Reference: maybe it's safer to use moveby(double, double) here. using this, the e2e will also properly function on smaller screens, as moveto moves to an absolute position on the screen. after
Candidate: why do we need to use <UNK> here?
Reference: remove the pre-defined variable?  private webelement getactivedialog() { list<webelement> elements = driver.findelements(by.cssselector(".discussion-dialog.is-visible")); if (elements.isempty()) { // allow selenium to throw exception return driver.findelement(by.cssselector(".discussion-dialog.is-visible.modal-dialog-approve")); } else if (1 < elements.size())
Candidate: this should be <UNK>
Reference: this selector is going to throw npe on get() if extractionfn is null, so it's better to throw it in construction:  this.extractionfn = preconditions.checknotnull(extractionfn, "extractionfn");
Candidate: please use <UNK>
Reference: you really do not need these temp variables....
Candidate: why do we need the <UNK> here?
Reference: nit: on a different line.
Candidate: you can use the fixture.
Reference: it'd be preferable to use something like .sublist() instead of this iterator stuff
Candidate: why do we need to use the here?
Reference: to keep tests declarative, could you please move this into a separate method like sortbyid(list<group>)?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: maybe these can just be static constants somewhere?
Candidate: i'd rather use <UNK> 96 <UNK> 96
Reference: the hardcoded license level can be replaced by the enum licenselevel.standard
Candidate: i don't understand this matters, but i think that this test is be the
Reference: lets pass the index to readdata, so that we can eliminate the split function inside read.
Candidate: should this be the <UNK>
Reference: no need for anything besides the static part here, right? if so, please use vmstaticdao instead
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: might be nice to define this as a member variable default_assertion or the like, for clarity.
Candidate: why do we need to use <UNK> here?
Reference: i'm not a lover of passing nulls to methods or constructors.. would another constructor without the contextid be better?
Candidate: should be be the fixture.
Reference: i had to change this to "remote services" for the terminal to work. note that it is possible for it to work just by coincidence if "remote services" is the
Candidate: why do we need the <UNK> here?
Reference: here we could call getvalue for each raw value in filterparameters and collect the results in propertyvalues. this would allow the client side to make a single request to resolve
Candidate: this should be the <UNK>
Reference: we call associatesymbol each time we call addusage. why not factorizing that?
Candidate: ![major](<link_0> 'severity: major') either remove notfound or rethrow [![rule](<link_1>](<link_2>
Reference: does it make more sense to throw an exception rather than silently accept the given comparator when it is null or invalid weight?
Candidate: you could replace the <UNK> with <UNK> <UNK> <UNK>
Reference: are these exceptions part of the spec?
Candidate: ![critical](<link_1> 'severity: critical') remove the exception thrown thrown from the exception message. [![rule](<link_2>](<link_0>
Reference: maybe just throw an exception?
Candidate: can you iu
Reference: i would also think about limiting the degree of parallelism here. i recall issues in 32 node tests, where a node joining the cluster requested state from all other nodes
Candidate: can we make this the specific?
Reference: if you want to maintain the same behavior as before you should probably log this as error since guava is logging it as severe.
Candidate: i don't think we need to throw an exception errorcallback to close "busy exception if the throws exception, the close() will be thrown.
Reference: this should crash have crashed before now, right? the installer shouldn't be able to save itself without this flag being set, right? i feel like it's better to crash on
Candidate: the syserr should be be the
Reference: what's this constant value? please make it a static final and give a proper name to it.
Candidate: ![major](<link_1> 'severity: major') remove this unused method. [![rule](<link_2>](<link_0>
Reference: the clear button calls attemptaddbudget() when clicked instead of clearing the fields.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> the presenter.
Reference: just for the records, today i'm seeing 4ms - 6ms timestamp resolution for all changes (patch set 12).
Candidate: why do we need a local variable here?
Reference: nit: this can be done easily with assertj: assertthat(resources).containsonly(resource, resource2); this is the import you need for the method: import static org.assertj.core.api.assertions.assertthat;
Candidate: can you use <UNK> <UNK>
Reference: consider using simplechannelinboundhandler and just consume the message in channelread0. this way it is correctly released without hitting the tail of the pipeline
Candidate: this fail()?
Reference: i think we can start removing the id parts and be dependant on index only.
Candidate: i don't understand why, but it matters, but if you do, but i don't understand why, but it matters, but i would be the
Reference: we can simplify this part a bit:  java string name = author.map(turbouser::getrealname) .orelse("").tolowercase();
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: you need to move fileinputstream out of try scope and merge trys, so finally become part of top try.
Candidate: should we be <UNK> here?
Reference: seems we should add only_ipv4_allowed and only_ipv6_allowed too. lets also add them to the iseventloggable below.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: unrelated note. with current method definition java public static void close(logger log, java.io.closeable... closeables) {  java will create new object[] for single closeable that is passed to the method.
Candidate: why do we need need to close the dispatcher and then we don't need need to do we need need to close (after failed)
Reference: could you close the resultset at the end?
Candidate: this should be <UNK>
Reference: isn't this checked by jni?
Candidate: can you use division size?
Reference: just to be consistent with similar classes add requirenonnull for the args.
Candidate: please use the <UNK>
Reference: http post request for a gettrackerdatafordates?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: in this line the input stream (in) can be null. maybe treat it or log something
Candidate: why do we need the exception here?
Reference: note: despite not mentioning it in the docs or the method signature, [at least this call](<link_0> (and potentially the one below) can fail with an untyped runtimeexception for various reasons.
Candidate: why do we need need to the <UNK> here?
Reference: would you either update the description or make it so that we're really testing for an empty region?
Candidate: why do we need to check on the username?
Reference: if you're going to hardcode the class, just hardcode the string, you _know_ what it will be, so making a call is silly.
Candidate: can we use the <UNK> here?
Reference: maybe it would be better to do filtering in ethashminer.setlisteners() to keep the main flow clean?
Candidate: should this be <UNK>
Reference: remove all @addondeployment annotations and leave only @addondeployments. also, remove the addasaddondependencies below.
Candidate: why do we need to call <UNK> here?
Reference: having two local variables for the "same" indicator is a bit confusing. i'd change to parseindicator(actionparameters, statisticaldatasourceplugin) and move the existingindicator logic to that function.
Candidate: if <UNK> { <UNK> } <UNK> <UNK> { <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this changes api. while specifying less exceptions is valid, anybody extending this class can no longer override and throw coreexception (at least that's what my experiment with a checked ioexception
Candidate: should this be <UNK>
Reference: should this include: java if (skipruntimescope && skipcompilescope && org.apache.maven.artifact.artifact.scope_compile_plus_runtime.equals(scope)) { return true; } if (skipruntimescope && skipsystemscope && org.apache.maven.artifact.artifact.scope_compile_plus_runtime.equals(scope_runtime_plus_system)) { return true; }
Candidate: i this repelaced e1 { <UNK> <UNK> } <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: this is correct and pretty nice, though i'd prefer a method that says what this step is doing
Candidate: nit: can be replaced with:  java <UNK> <UNK> clazz, = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: please, revert this. too hard to read...
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: there is one extreme condition might not work: main and reference project contain some item with the same id. normally we do not support it but we can't guarantee customer
Candidate: can we move this logic into a separate method? if we { null) { return false; } else { if <UNK> { null) { <UNK> { <UNK> { <UNK> }
Reference: multimap never returns null, so we could get rid of this method.
Candidate: this should be the <UNK>
Reference: is this visible for testing ?
Candidate: this should be <UNK> <UNK>
Reference: let's use iterables from guava. the code will be much shorter
Candidate: this should be the <UNK>
Reference: the user name would be incorrect if the vm was rebooted through ssh or by a script. please just use a generic message like "guest os". also no need to
Candidate: why do we need to use the <UNK> here?
Reference: can be static.
Candidate: why do we need to check the <UNK> <UNK>
Reference: i think it would be better to rewrite it in more single responsibility principle style java private map<string, string> tomachineattributes(string pluginid, map<string, string> wsattributes) { map<string, string> attributes = new
Candidate: can we use <UNK> <UNK> <UNK>
Reference: s == null?
Candidate: this should be setemptyelement().
Reference: should we double check whether requestedgrain is supported?
Candidate: please use dots
Reference: the check and get calls can race with the remove call. also looking into the code, there is no remove call, we should remove the dn once it is dead
Candidate: can we use the <UNK> here?
Reference: @aunyks you should make expected a set to begin with so you don't have to convert the return value of the describe method to an array
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: redundant cast.
Candidate: why do we need to mock here?
Reference: foreach
Candidate: can we rename this to <UNK> <UNK> <UNK>
Reference: won't this cause the opposite behavior now where there is always an initial delay of _fullperiod?
Candidate: you don't need to use the <UNK>
Reference: use anymatch to find the elements matching the requirements (if any), that will simplify the code a lot.
Candidate: the syserr should be be <UNK>
Reference: you add, search in and go through this list. it contains string instances so it may be presented as an hashset<string>. it will work if you don't need to be
Candidate: <UNK> *= 2;
Reference: this should be 1024 ^ 2, right?
Candidate: we should use the exception here instead of catching the exception, so we don't need to throw an exception
Reference: if pluginname is null, you need to call the other refreshpaymentmethods api.
Candidate: i don't understand this matters, if we matters, this matters, this matters, but we don't need to do we need need to do we need need to check the <UNK>
Reference: elementgetter should be out of for loop.
Candidate: if we is the software <UNK> software <UNK> of the <UNK> is the software <UNK> but i don't think we need to check the <UNK>
Reference: minor: i guess this should be named orsimplified1 (and the one below in line 3182 should be orsimplified2)
Candidate: can you use the fixture.
Reference: i don't thinks this method can return null. please throw an unsupportedoperationexception instead.
Candidate: this nls
Reference: should this be set if ret is false? i don't know.
Candidate: should this be null? if we == null) { return <UNK> } { return <UNK> } } return <UNK> }
Reference: i don't know why we did these generics. it should be java sequence(iterable<? extends validation<? extends e, ? extends t>> values)  (see either.sequence for example)
Candidate: why do we need to use <UNK> here?
Reference: alternatively, string.format("(%s)", strings.repeat(",", arity));.
Candidate: minor implementation: <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: that's equivalent to just conferencename. did you want the string "null"?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: delete twice, why?
Candidate: why do we need the <UNK> here?
Reference: is special handling for performance? is there perf data to prove that it impacts performance? for now non-blocker, but worth revisiting perf vs maintenance forward.
Candidate: you can use <UNK> <UNK>
Reference: valueof does not support nulls - this will cause an npe, just like the code before the patch. i'm guessing you meant to do something like this: return value !=
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: i wonder if this should be logger.warn() instead of logger.debug(), which we will not see in normal running mode.
Candidate: i don't think we need to throw an exception
Reference: compare condition at line 133 and at line 117
Candidate: i don't think we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: these will not work until you pick-up the apache sink version 0.11.1: <link_1> specifically, you need: <link_0>
Candidate: what happens if the exception?
Reference: webcontextproperties below here is not used. properties webcontextproperties = new properties();
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: 1tbs
Candidate: i don't understand why, but it matters, what about testing the for the <UNK>
Reference: it will be good if you write a test case for shared lock failure resulting in more than one error messages. it'll help me understand that part of the functionality
Candidate: <UNK> *= 2;
Reference: since this method is called after the validate method, you can make the check shorter as you did in the executecommand method
Candidate: the syserr should be be the
Reference: this method should return the same instance each time (meaning of "get"), store this value in a field named 'adapterfactoryregistry'
Candidate: please use <UNK>
Reference: maybe add a break; here?
Candidate: this should be repelaced on the sides of the <UNK>
Reference: logging exception as info is not good. should be warn or error.
Candidate: we should need to throw an exception if we is the software exception we don't want to throw an exception
Reference: final :smiling_imp:
Candidate: rename to <UNK>
Reference: should add provider to the log.
Candidate: why do we need this check?
Reference: i think we want containsonly or containsexactly here and below
Candidate: you can use fixture.
Reference: log.trace
Candidate: this is eating the exception?
Reference: method withnoparameterconstraint is indeed somehow confusing. in my case, i'm always looking at the implementation to have an idea which i should use... i think that we should go a
Candidate: you can use <UNK> <UNK>
Reference: we can skip the loop now.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: shouldn't need to call setuppipes() explicitly. should be part of the service start.
Candidate: why do we need this?
Reference: this seems pretty late to call this. can we do it before posting to the main thread?
Candidate: please remove the <UNK>
Reference: do we need to specify the date format here separately, or would it be easier to reuse (with a little change to the default value's type) what is already included
Candidate: use <UNK> instead of <UNK>
Reference: is this method ever used?
Candidate: can be replaced with <UNK> ?
Reference: i don't fully agree here. only the requiresstateparameter tells you if you want to use the state parameter, the value being static (your statedata) or dynamic (generated using the getstateparameter()
Candidate: why do we need need to the <UNK> here?
Reference: given the large number of http response fixes we have added, i believe the per-operation retry should suffice and we can remove the outer retry loop. we can address this
Candidate: should we throw an exception here?
Reference: change lambda's arg name to something more expressive like 'file'
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: is this still producing <link_0> ?
Candidate: this should be the <UNK>
Reference: synchronizing inside synchronization seems like a recipe for problems to me but i will let @rcordovano weigh in on this one.
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: do we need to guard this on "startdragitem != null"? the pointer may have been pressed initially in the blank area of the grid.
Candidate: .equals() static?
Reference: update etag and what about the blob?
Candidate: please remove the <UNK>
Reference: don't completely catch all exceptions. some exceptions are not validation errors (for example, if cwltool was installed incorrectly). there should be three cases 1) passing validation 2) failing validation 3)
Candidate: why do we need the <UNK> here?
Reference: nit: this is a bit difficult to read (maybe just invert the condition?)
Candidate: why do we need need to the <UNK> here?
Reference: use ternary operator:  string metric = math.abs(expectedyear) == 1 ? "year" : "years";
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: uuid is more expensive to generate than a securerandom, and since it doesn't have to be unique, just secure, there's no need to use uuid. why not just use keycloakmodelutils
Candidate: please use <UNK>
Reference: this method removes all the orphaned disk after commit a snapshot. this should be always called as before
Candidate: why do we need the <UNK> here?
Reference: can you add another edge case here with hard and soft clips on the same read: "2h3s10m4s5h"?
Candidate: please remove the <UNK>
Reference: huh?
Candidate: i am not sure we acquired lock acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired
Reference: the coding standard, i believe, is the way the curly braces were prior to the change. so, opening brace on the same line, closing brace on the subsequent line. braces
Candidate: <UNK> *= 2;
Reference: could use '('
Candidate: please use <UNK>
Reference: minor: might be more human readable if you replace is with equalto.
Candidate: if the overflows?
Reference: i think here we want to say @column(defaultvalue="true") in the annotation but have this translate to the return value of gettrueliteralvalue or getfalseliteralvalue when creating sql text. so check the
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: as long we we perform the checknotnull(...) in getentitytypes(visibility) below, i think we should do the same for stateclass as well.
Candidate: why do we need the <UNK> here?
Reference: getter
Candidate: can we make this private?
Reference: debug/trace/remove?
Candidate: <UNK> evidence, we can use <UNK> <UNK> <UNK>
Reference: ditto on direct return, can avoid the intermediate variable.
Candidate: storagetype can be simplified to <UNK> boolean <UNK> = <UNK> && <UNK> != null) { return false; }
Reference: this change in data(lightbluerequest, class<t>) reverts changes to use new lightblueresponse#parseproceseed method. why?
Candidate: why do we need to use the here?
Reference: actually get() will throw if taskclass is not defined, instead of returning null. i think either do a scala option.exists() or something like orelse().
Candidate: what is the exception here?
Reference: please use assert4j - assertthat ....
Candidate: please use the fixture.
Reference: nit: can be rephrased as "table config required to use normalizeddate..."
Candidate: why do we need the <UNK> here?
Reference: can use diamond operator, too, for all or<> and and<> operators.
Candidate: why do we need the <UNK> here?
Reference: i don't think timelockservice should gain a method that's related to lock watches - rather we should be maintaining this state as some part of the hierarchy _below_ timelock service.
Candidate: should we use the <UNK> here?
Reference: would a receivenowait (either in or outside the loop) like the other tests be nicer than burning 2 seconds? slow tests is a key reason eventually noone wants to runs
Candidate: you don't need to do you need need to be the param.
Reference: this might not work here, as here the configuration object can be not an instance of ozoneconfiguration, then ozone-site.xml and ozone-default.xml will not be added to resources. the check is
Candidate: can we use the <UNK> here?
Reference: is it intentional that you don't remove /config/rolling-operations/<uuid>, /status/rolling-operations/<uuid>, or /status/rolling-operations-tasks/<uuid>?
Candidate: why do we need need to the <UNK> here?
Reference: @whichonespink44 because you are now registering all of the event handlers during pre-init, they will all be registered at this point if you are creating a world that is not
Candidate: should we be the <UNK> here? if we { return; } <UNK> } } }
Reference: does this need to check for string content, eg. trim whitespaces, lower case etc? since this is user input?
Candidate: do we need to check the <UNK>
Reference: can also just use params() here as by default they are put in the params :)
Candidate: typo: 49
Reference: what's going on here? just run two selects and do nothing?
Candidate: why is this <UNK> overflows?
Reference: humm, why is this done here? i don't think we need special treatment for the str here...
Candidate: if <UNK> == null) { <UNK> }
Reference: since no wifi would omit the whole function, this if could be removed.
Candidate: i don't understand what we want to do the lock here?
Reference: message<?>
Candidate: use <UNK>
Reference: move it up a few lines, so that boolean switches come before parametric modifiers
Candidate: can we use stringbuilder?
Reference: if instream.close() throws an ioexception, the outstream may not get closed. you might consider using apache commons io's [ioutils.closequietly](<link_0>
Candidate: what is a reason reason reason reason reason reason reason reason reason reason reason to catch <UNK> <UNK>
Reference: i think an attachment key would be ok, but we should also keep the existing check (i.e. we should not be adding the attachment key to exchanges that have their
Candidate: please use <UNK> <UNK> <UNK>
Reference: it's probably not worth having the case for the default?
Candidate: you can use <UNK> here
Reference: same deal: these verifications are redundant.
Candidate: ![major](<link_0> 'severity: major') call the unused local most most most most most most most most most most most most most most most most most most most most most most most
Reference: optimisitctable breaks the abstraction of smr. all optimstic updates assume that the initial table is empty. this is correct for corfutable because different keys are orthogonal, but it is not
Candidate: why do we need the <UNK> here?
Reference: hi @eleduardo, i'd prefer to add explicit final int field to circuitbreaker.state, so we can be sure that enum elements reordering won't affect any of our users.
Candidate: why do we need the <UNK> here?
Reference: the policy unit can be called often, so 'info' level would pollute the logs. please change it to 'debug', and surround it with a condition if(log.isdebugenabled()), so the parameters are
Candidate: if the vm is empty, then it will be more elegant to be the vm regardless of the vm will be vm will be n+1 vm will be the vm
Reference: now there's another problem relating to filters. this applies the action to all files, even filtered out ones. stage/unstage applies only to visible nodes. we should be consistent. to see
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i think you probably don't need this. this is just for turning off insignificant network updates (e.g. cell tower info) when the screen is off.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need to do we need need to
Reference: this will mutate 'model' if model.has(...) would return false. not a big deal, but more robust not to.
Candidate: this should be the <UNK>
Reference: nit: do you mind negating this check so that you can un-indent the rest of the method? ("early return" style)
Candidate: i don't need to check for the <UNK> part, but it explicitly)
Reference: there is a requirement for password policies to work for an example when following order of extensions are available [1], password.policy.extensions.1 password.policy.extensions.4 password.policy.extensions.6 in that case decrementing size won't satisfy
Candidate: if we is the software error, so we don't need to do we need need to do we need need to do we need need to do we need to
Reference: this test is not verifying that we call testfunctionindexfunction only once? which was the original bug.
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: why adding vmbase?
Candidate: can be simplified to: java results.stream().anymatch(entry -> value.getk1().equals(entry.getkey()) && value.getk2().equals(entry.getvalue()))
Reference: can you do an abstract getter for this instead of passing it in through the constructor? it feels.. weird to me to do it this way. same for end of
Candidate: please use <UNK> <UNK>
Reference: same here as the passed arguments to exceptions. the logger can handle stack traces by itself and there is not need to pre-render this.
Candidate: i don't think we need to catch exception if wrongepochexception is the
Reference: while you're in here can you also fix this? we should be using this value from clientbase. is there a reason why we can't convert this class over to subclass
Candidate: you don't need to use the <UNK>
Reference: can this actually be null?
Candidate: "{}" from why do you do you do why do you do you do you from next next next line
Reference: i see that you pass those parameters a lot vuapvideos.porvata_vast, vuapvideos.vast_video. maybe you could extract method from it or hardcode those two parameters?
Candidate: please remove the assertion above.
Reference: should this be a logger.info instead of a system.out.println?
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: yeah, it generally doesn't add much to logging, but in many of the situations you have here where you're just trying to log a full exception standalone it might be
Candidate: should this be <UNK>
Reference: agreed - this is a good candidate for unit tests
Candidate: this should be <UNK>
Reference: duplicated node **startnoneevent**
Candidate: why do we need to mock <UNK> here?
Reference: it's unusual to use mockito.anystring() in a call to something that isn't setting up a mock. any reason these can't just be dummy values?
Candidate: we eating the exception?
Reference: kubernetes-client provides different means for deserialization, please either use serialization.unmarshal or kubernetesclient#load to deserialize the class so the test actually tests something from our codebase.
Candidate: why do we need to appid here?
Reference: can you please add a log message that we're skipping the csd update because it's a data lake
Candidate: this should be the <UNK>
Reference: firstrow variable is not used
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: please extract the globals.prefs dependency (and even better move the savecustomentrytypes method to the preferences class)
Candidate: this should be the <UNK>
Reference: please define an interface for typeliteral<supplier<map<schematablename, elasticsearchtabledescription>>>. maybe  interface elasticsearchtabledescriptionprovider { elasticsearchtabledescription get(schematablename table); }  ?
Candidate: why do we need to use <UNK> here?
Reference: simpler: bindingassertionhelper bh = getassertionhelper(); same in the other test.
Candidate: please remove the method("post")
Reference: move this to a spaneventlistener. that way it works for other request types as well.
Candidate: i don't think we need to do we need to check the <UNK> <UNK>
Reference: would it make sense to move both apply methods into the upsert map callback so they are done in one spot?
Candidate: why do we need to the the properties?
Reference: recently, we don't use the explicit new object[]{ ... }
Candidate: i don't think we need to do we need need to trim the <UNK> the <UNK> <UNK> <UNK>
Reference: result.isempty() can be used instead to avoid creating an iterator instance.
Candidate: this should be the <UNK>
Reference: could you refactor this into smaller parts or move the logic into a separate class?
Candidate: do we need to catch <UNK> here
Reference: this is super hard to read. we should just use policy for the main loop and leave the rest inlined unless we have a very strong reason to abstract all
Candidate: why do we need to <UNK> the <UNK> here?
Reference: we can't use any thread... there's the scheduled executor.. this is no good!!!!
Candidate: i don't understand this matters, if we matters, but we don't want to do we need to check the the <UNK> <UNK>
Reference: don't capture unused data.
Candidate: fbot can be used
Reference: object returned by this method is not used e.g. method can return void
Candidate: i don't think we need to check for the <UNK>
Reference: what's the corrective action one can take if this problem happens and why would it happen.
Candidate: can we use the <UNK> here?
Reference: what for you call load?
Candidate: should this be <UNK>
Reference: space
Candidate: why do we need the <UNK> here?
Reference: need to return 1 when it's leap-day or year-day.
Candidate: this should be <UNK>
Reference: nit : method name, entityhasextensionjobtag, is good enough.
Candidate: this should be the <UNK>
Reference: can this be a better name like createddatemillis etc? also better to add a reference to recordtype enum like above fields
Candidate: why do we need to use <UNK> here?
Reference: this should probably not be executed if processedeclass==null
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: i think this needs @apiresponse if changing the return type so that swagger knows to describe the api correctly.
Candidate: i don't need to throw an exception here.
Reference: this will be removed after data migration, right?
Candidate: why do we need to use <UNK> here?
Reference: all these tests are returning a score of 0. you need some tests that return a good score for these cases as well
Candidate: please remove the method("post")
Reference: but why not to add /api/v1/concepts to http config with permitall instead of constructing filter?
Candidate: this should be the <UNK>
Reference: please put this into a any_address constant.
Candidate: the syserr should be be <UNK>
Reference: why do we need timer for these metrics? we don't have to track the rate, do we? a histogram should suffice
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: let's make "00000000-0000-0000-0000-000000000000" a constant, put it in to a utility class and use the constant instead of a string
Candidate: the syserr should be be the
Reference: what is the use of map here ?
Candidate: should we use the <UNK> here?
Reference: i know we said java might diverge on this (doing file for sync, url for async), but i think that because you've added a recognizereceipts and a recognizereceipts fromurl, you
Candidate: use <UNK>
Reference: when would characterbuffer ever be null? same question for getandresetcharacterbuffer()
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: could use stringutils#isblank for better readability
Candidate: should we throw an exception instead of null?
Reference: no magic numbers! =) set a "float scalingfactor = 1.0;" variable somewhere please.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: it looks strange without verification. is it expected?
Candidate: the syserr should be be <UNK>
Reference: throw unsupportedoperationexception instead?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: please make sure that componentobjects does not contain projects pvc
Candidate: this should be the getallregistrations() method...
Reference: you can manipulate the class list directly using: anchorelement.classlist.add(); and anchorelement.classlist.remove();
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK>
Reference: style-nit: don't assign then replace. instead use a proper if-else: if (user.isbatchuser) { return queues.getbatchqueue(); } else { return queues.getinteractivequeue(); }
Candidate: why do we need the <UNK> here?
Reference: do we really need stream in pipelineconfigs -> pipelineconfigs.getpipelines().stream()?
Candidate: the syserr should be the <UNK>
Reference: please use guava's equal helpers <link_0>
Candidate: use readasstring(...) instead of printing
Reference: i think it'd be good to add 2 more error expectations here to cover all possible overlaps: key: |: start or end of frequency -: active time of frequency _:
Candidate: please use <UNK>
Reference: not used outside the class. can still be private.
Candidate: <UNK> evidence, overflows?
Reference: debug logging statements should be wrapped in a if (s_logger.isdebugenabled()) check to avoid the overhead of string concatenation when debug logging is not enabled.
Candidate: can we use **log** here?
Reference: i wonder if anyone relying on custom dl templates would be pissed about this change if they expected the volume to be present (for whatever reason). i know we are
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> { <UNK> } <UNK> { throw (long <UNK> }
Reference: rename 'resource'
Candidate: i don't understand why, but it matters, but if the is is the <UNK> <UNK> is the <UNK>
Reference: it looks like this is going to cause us to re-do all the trigger matching logic twice on every pipeline start. in a lot of cases, there is a reasonable
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: handlefailure not needed here, it is already set as defaul error state above
Candidate: please remove the method("post")
Reference: it seems like we could do better here. p.s. the guys who did migrations regarding studentprofileattributes also had missed out something.
Candidate: releasing rest, it should be checked on the unchecked exception
Reference: shouldn't one of these exception be at least be logged ? i bet they can contribute to debugging.
Candidate: why do we need the <UNK> here?
Reference: i think you'll need to check to make sure that the thing being indexed is either a work or a fileobject, and if its not then return immediately. otherwise there's
Candidate: should we log the exception here too?
Reference: assertthat(links, iterablewithsize(1)); provides better defect localization.
Candidate: please use syserr
Reference: more efficient and with less repetition: if (excludespecialchildren || excluderegularchildren) { boolean specialchild = specialchildrentypesnamesset.contains(docstate.getprimarytype()); if (excludespecialchildren && specialchild || excluderegularchildren && !specialchild) { continue; } }
Candidate: i don't see the username?
Reference: if i'm not missing something, it looks like you are building the card field just to respond to this method. you are also building it with a constant, so i
Candidate: this should be <UNK>
Reference: i don't think that's an accurate message. can't think of situation where "it's not started"
Candidate: should we throw an exception instead of returning null?
Reference: thanks for raising this issue. i think you could argue in both ways, hard fail on any failure vs. fail only if no connection could be established at all. having
Candidate: this should be the <UNK>
Reference: no need... getimage().setactive(active)
Candidate: <UNK>
Reference: setrepositories?
Candidate: should we throw an exception?
Reference: instead of having this conditional, how about something like:  java hosts = (!isnullorempty(host)) ? singletonlist(host) : client.getchildren(...);  that is to say, there's no need to do the zk
Candidate: do we need to check the <UNK> <UNK> <UNK>
Reference: why are we querying these one by one when the method allows us to pass in multiple? this will be a significant bottleneck if someone wants to specify a large
Candidate: unused line.
Reference: if this is boolean, why do you need "=="?
Candidate: why do we need need to be the here?
Reference: can you do this in a metadata store transaction? we take advantage of such transactions for other operations that must be atomic, such as segment publishing and kafka offset committing.
Candidate: can be replaced with <UNK> <UNK>
Reference: inline
Candidate: should we be the <UNK> here?
Reference: @inverno do not use tostring, put this expression in message
Candidate: please remove the trailing spaces around trailing spaces
Reference: perhaps creating a visualeditorcontents class in contentpatterns would be appropriate for the constants you are using for ve
Candidate: what is going to be expected.
Reference: i would make it <= (allow equal case to meet requirement). is there a specific reason to be strict about it?
Candidate: hmm. this should be the <UNK>
Reference: to be clear, the name can be "full_acid" and "mm_acid". in fact. mm table can be created on orc data.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: better to use the constant here, so an onlooker understands it tests the default number
Candidate: is this the fixture.
Reference: i don't easily get what the last bit of the condition is required for ?
Candidate: if this { return; } if <UNK> { return; } return; }  if <UNK> { return; } { return; } { return; } { return; }
Reference: i think this could go into service class. chargeentity shouldn't ideally go beyond get/set
Candidate: why do we need to use <UNK> <UNK> ?
Reference: use new utility class glustertaskutils
Candidate: if returnvalue && <UNK> { return; }
Reference: does it still make sense to request a batch at a time?
Candidate: should we be the <UNK> here? if we { return; } }
Reference: don't trim username and password.
Candidate: the syserr
Reference: suggestion: have only one **for {}** block and do: if ( hidepassword ) { conn.setpassword( null ); }
Candidate: why do we need to use the here?
Reference: perhaps we could create this string w/ string.format(...) also, we should probably use e2-standard-1 as well.
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: you should not compare two strings with "!=" or "==", use equals methods instead or if both strings can be null use org.apache.commons.lang.stringutils.equals
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: encodedcollectionname
Candidate: should we throw an exception?
Reference: i would rather change the equals() invocations here to == (which is the more usual form anyways) which then would let the request go to the superclass implementation that may
Candidate: i don't think we need to check if the is is null.
Reference: the exceptions are subclasses of ioexception. do we really need to specify them here?
Candidate: i think the <UNK> is be the <UNK> <UNK>
Reference: maybe above in content = ..., add normalizejson("[" + element1 , ...) and then remove replaceall here.
Candidate: <UNK>
Reference: why not define listmodeloptions.getdependenciesfor as a list to begin with? if the pl is restrictive, then any advantage in the public api being flexible? is there a risk of running
Candidate: why do we need need to be <UNK> here?
Reference: i am wondering whether this isn't something the defaultleaderelectionservice can decide when receiving the onrevokeleadership callback. it could then decide to call writeleaderinformation(leaderinformation.empty()).
Candidate: what happens if the exception is is the
Reference: can we use <link_0> ?
Candidate: this should be the <UNK>
Reference: why is this method parameterized?
Candidate: can be simplified to:  java return <UNK> <UNK> <UNK> == <UNK> && <UNK> != null) { <UNK> } <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> <UNK>
Reference: is this tostring still valid?
Candidate: should we be schedule() here?
Reference: to loop var, use cast to classpathentry when calling getdelegate() below
Candidate: entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry entry
Reference: why not iterate topics directly ?
Candidate: can you use the division for the array.
Reference: would it be cleaner to do record.userid = pageview.userid? same for the other fields below.
Candidate: this should be setemptyelement().
Reference: why is binddynamicproducer synchronized, but this one not? i need to know more about this messagebus stuff and where it is used from, to determine which behaviour is correct for
Candidate: can we be null?
Reference: this method has quite a bit going on and i think it would be easier to understand if you split it into 2-3 methods.
Candidate: why do we need to use the payload?
Reference: did you move the method on purpose? public methods go first, and all helpers, private and so on goes below them
Candidate: if we is the <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs the <UNK> costs the <UNK> is the <UNK> <UNK>
Reference: please remove this log, or lower the level to fine.
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: does any of this code touch the db? if so this means listing accounts will be pretty slow.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: we need to evaluate the value of the property, 'set_requeue_on_rollback'. wdyt?
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: you can use strings.isnullorempty here.
Candidate: we should need to do we need to check the getcredentials for the getcredentials
Reference: unneeded check : imagetodomainmap.isempty(). it is not , but at nay case
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: perhaps include the componentname in the message?
Candidate: can we use **log** here?
Reference: please use interfaces where possible.
Candidate: please use map<> on rhs
Reference: @vkuchyn let's use better english here and actually give an explanation people outside of the people working on this understand :) i suggest: > rultor closed this pull request for
Candidate: unused
Reference: to really make this method overridable, shouldn't we add a (protected) accessor for m_bundles as well?
Candidate: if we is software software software software software software software software software software software software software exception software software software software software software software software software software software software software
Reference: why is this getting the old item and then calling refresh with that ??? if i look at the data provider & communicator, the latter will use the item provided
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: granularities.none is a simpler way of writing this.
Candidate: please revert this
Reference: l233~l235 can be removed.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i think it would make sense to somehow extract the onclick listener to a method or something, so that you do not simply need to duplicate the code, but instead
Candidate: if we is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: write to a temp file and rename. look at storedescriptor for eg.
Candidate: this should be the <UNK>
Reference: can you rebase, this is already fixed in master
Candidate: please use <UNK> <UNK> <UNK>
Reference: static method import please!
Candidate: please use <UNK> <UNK> <UNK>
Reference: you probably don't want a silent fail here, extract a local variable trace = ftrace, then assert that it is non null instead
Candidate: should be be <UNK>
Reference: **question:** should this actually be a logger.info or debug?
Candidate: try/catch should be handled in the try/catch
Reference: unexpected
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: it would be good to place persistence unit name as constant to some shared place like kieserverconstants to avoid duplication. it is already used in jbpmkieserverextension and casekieserverextension and locators.
Candidate: should we throw an exception here instead of an error?
Reference: should double check with service team if this is what they want to do with those exceptions.
Candidate: i don't think we need to throw an exception if (state { throw <UNK> } catch (throwable e) { throw {
Reference: i'm confused with this change. is there anything else other than code reorganization? if not, then the current version is desirable, as it makes more clear the various branches returning
Candidate: let's use <UNK> to "ignired" let's use unsupportedoperationexception instead.
Reference: the size of the usage array should really be based on the length of the input array. if 256 is really required, we should probably check to ensure the input
Candidate: the syserr should be replaced with <UNK>
Reference: refactor it to a static and reuse it in all tests
Candidate: please use long.valueof() instead of immutablelist.of()
Reference: nit: would it make sense to move readresource method and resource names to benchmarkdata class to avoid copy-pasting?
Candidate: :disappointed:
Reference: maybe we want to include the resumebehavior field to hashcode() and equals() methods.
Candidate: should be check for the username?
Reference: why do you close baos here, while you can do it in finally block as in another situations?
Candidate: why do we need snapshotid in the request?
Reference: @xiaolong-sn nit: optional means you do not need to null check:  return optional.ofnullable(streamconsumerarns).map(arns -> arns.get(stream));
Candidate: this should be <UNK>
Reference: how/why is this expected to change?
Candidate: should we be the <UNK> here?
Reference: would it be better if we use getfirstannotation(declaredclass, arrays.aslist(include.class))?
Candidate: the syserr should be be the
Reference: consider moving this to a top-level class in the commons package (e.g., defaultvaluemaps).
Candidate: please use <UNK>
Reference: will need to see how we handle the equivalent of a "subscription", but there is currently a potential leak here, i guess.
Candidate: can be replaced with <UNK> <UNK>
Reference: space after if?
Candidate: i don't think we need to check for the <UNK>
Reference: bug; need to remember the first via header...
Candidate: i don't think we need to use the <UNK>
Reference: please enforcecallingorselfpermission(connectivity_internal, tag);
Candidate: please use <UNK>
Reference: maybe this should be an enum?
Candidate: can we use the <UNK> here?
Reference: the preference text refers to the 'chart', and about 'querying' the view. this class is just a tree that supports grayed state and maintains consistent checked states. it doesn't know
Candidate: this should be the <UNK> if <UNK> == null) { continue; } <UNK> { <UNK> } else { if (throwable { <UNK> { <UNK> { <UNK> { <UNK> { <UNK>
Reference: do you really need it to be an atomic reference? could you just assign it to a variable?
Candidate: why do we need to check the <UNK> <UNK>
Reference: throw badrequestexception instead of illegalargumentexceptions in from request implementations.
Candidate: why do we need the <UNK> here?
Reference: could you please explain the scenario which this bug shows itself? why do we need this?
Candidate: nextvalueindex should be replaced with <UNK>
Reference: looks rather strange. what about removing the isautodelete parameter and using  case default: return userpreferences.isautodelete();  ?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK>
Reference: just a small question.. can the nameattribute be non-null but the value itself from .get() be null? or should it be checked in the above nameattribute == null || nameattribute.get()
Candidate: what do you want to do you want to do you want to do you want to do we want to do we want to do we want to do
Reference: it's not about incompatibility but use the most appropriate (prettier?) look and feel by default when running on macos.
Candidate: this should be the <UNK>
Reference: this pattern (and the whole query) seems very similar to importtemplatefromexportdomainmodel.createsearchpattern() do you think it would be possible to extract the code so that it can be shared between the
Candidate: please remove the blank line
Reference: aren't we storing file size in bytes? can we change this to just file_size?
Candidate: can we use the <UNK> <UNK> <UNK> ?
Reference: why not a single if with strings.isnullorempty ?
Candidate: rename to iu
Reference: to be proper, this should return an error status. it is not that there was not change necessary, it is that the sourcelookupdmc is unknown.
Candidate: why do we need the <UNK> here?
Reference: you do this in a few places. perhaps it deserves its own function in hadooputils or something like that?
Candidate: please remove the method("post")
Reference: very much nit: maybe change the label here? this will be grammatically incorrect for, say, the 91st percentile.
Candidate: the syserr should be be the
Reference: notifydatasetchanged() missing?
Candidate: should this be <UNK>
Reference: devicecontroller instead of buddycontroller
Candidate: should this be be specific?
Reference: if we didn't have the existing problem with the entity create locking would we have done this the other way round?
Candidate: why do we need to here?
Reference: you don't need to change this method signature. i would leave it to be a private method.
Candidate: why do we need the <UNK> here?
Reference: i would add a final here: suggestion final constrainttype constraint = constrainttype.fromstring(constrainttype);
Candidate: should be be the vdsid != null ?
Reference: are you sure this is not rather a configuration error? that would mean using internalerrorexception.
Candidate: should we use the <UNK> here?
Reference: avoid calling getactivestudentcurricularplan() multiple times in the same method. invoking the method multiple times results in a performance penalty that should be avoided.
Candidate: why do we need need to evict the <UNK> here?
Reference: re-use existing constructors:  this(cookiespec, false);
Candidate: should this be <UNK>
Reference: this needs to remain ireversetogglehandler for the other changes not to break things.
Candidate: the syserr should be be <UNK>
Reference: is 80 a standard size or should it be a dimen resource ?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: it would be helpful
Candidate: the syserr should be be <UNK>
Reference: it looks like you can simplify this code by reusing removefirstmatching method
Candidate: can we use stringbuilder?
Reference: better to refactor the method name isvalidaddress to **isvalidv4address**. what do you say?
Candidate: can we be simplified to <UNK>
Reference: there is an extra indentation in the above lines, please remove them. also alertimage is not being used.
Candidate: please use <UNK> <UNK> <UNK> expected)
Reference: you might consider using collections.singletonmap() for slightly nicer code.
Candidate: why do we need to use the <UNK> here?
Reference: i don't think we need to clone the entire trees here. just detaching them should be enough.
Candidate: if (state != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return state; }
Reference: todo: limit to last n notifications.
Candidate: should we use the <UNK> here?
Reference: local variable seems unnecessary here.
Candidate: please use <UNK>
Reference: revert this.
Candidate: why do we need need to be the <UNK>
Reference: the default type should be string.class i think.
Candidate: please use <UNK> <UNK> <UNK> <UNK> dots
Reference: we usually use dc for dublincore prefix.
Candidate: we should use the getconnection in the <UNK> <UNK> we don't need to do we need need to do we need need to use the <UNK>
Reference: this can be written a bit more elegantly now using the isanyfieldset method, right?
Candidate: should this be be null?
Reference: this should probably be handled in some other way than just closing the software (is this what happens if an error occur in a separate thread in netbeans?)
Candidate: should we throw an exception here?
Reference: duplicated code. it should be getformid(form). also, if/when you change exportconfiguration.fallingbackto(), the signature change on exportforms.getconfiguration() should be rolled back...
Candidate: can be replaced with the other?
Reference: return value is unused
Candidate: <UNK> ill builder constructor builder builder builder builder builder builder builder builder builder builder itself. builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
Reference: let's not swallow the stack trace here.
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: unnecessary final
Candidate: why do we need to <UNK> the <UNK> <UNK> the <UNK> <UNK>
Reference: same constructor visibility thing.
Candidate: this should be <UNK>
Reference: suggestion date date = date.from(instant.parse(html.substring(start + 1, end)));  (although probably better to use instant directly for increased precision.)
Candidate: if <UNK> == <UNK> || <UNK> { <UNK> }
Reference: once typing is fixed we do not need this casting.
Candidate: can be simplified to:  java return <UNK> <UNK> <UNK> <UNK> { return <UNK> }
Reference: can you replace java if (optionalblobname.ispresent()) { uploadfile(file, optionalblobname.get()); } else { uploadfile(file, file.getname()); }  by java uploadfile(file, optionalblobname.orelse(file.getname());
Candidate: the syserr should be be the
Reference: this should be done a validator on attribute.
Candidate: this should be the <UNK>
Reference: i think it's worth checking that keyfileurl isn't null too just in case someone changes the behaviour of usesauthentication later on without realising that this block implicitly relies on keyfileurl
Candidate: <UNK> *= 2;
Reference: it is unfortunate that the api for amazoninfo is a bit leaky, but the preferred api to extract data is <link_0>, where the enum can be used directly.
Candidate: should be be the specific?
Reference: why do we need to call clear here?
Candidate: the syserr should be be <UNK>
Reference: naming
Candidate: ths need to be the input?
Reference: these could be fail() instead
Candidate: should we throw an exception instead of eating the exception?
Reference: user will definitely not need it, it is quite internal exception, which we could track in the logs
Candidate: should we be the specific?
Reference: the code would be much easier to understand if the decode was done here. so that checkedpages actually contain a list of pages :)
Candidate: can you be the <UNK>
Reference: same concern as above.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: we should probably move this into a camera2 implementation, because we are leaking camera2 implementation details here. as a thought a imageprecapture interface which by default uses flash mode, but
Candidate: why do we need the <UNK> here?
Reference: (critical) don't use arbitrary whitespace as the delimiter (they might be valid as the value, also i don't think '\0 is a whitespace). you may refer to rangepredicate.java on how
Candidate: interval should be replaced with <UNK>
Reference: remove these checks, since we should never call the method with null. (as a general code style, we don't write code to be lenient of nulls in presto.)
Candidate: why do we need to use the <UNK> here?
Reference: i feel like this would be more readable with an if-else rather than the ternary operator.
Candidate: please replace this with <UNK> <UNK>
Reference: please add populate(...)
Candidate: please use <UNK>
Reference: why this change?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: - [x] i think that you should return null instead of illegalstateexception if no codelist of all locales, , respecting the previous design.
Candidate: this fail()?
Reference: no need for the manual check.
Candidate: should this be the <UNK>
Reference: this should remain as "single". hunters have a "single" action and also "joined" actions.
Candidate: if <UNK> == <UNK> || <UNK> && <UNK> < 100) { <UNK> }
Reference: i don't think we would need per topic level checkpoint metrics, commit latency and number of commits in aggregate probably is enough, thoughts?
Candidate: this fail()?
Reference: initialize to null or immutable copy
Candidate: this should be <UNK>
Reference: is it correct to omit existingcriteria if it's null? if it should always be not null, this if is bad: it delays the detection of a missing value, and it
Candidate: should we be <UNK> to <UNK> the <UNK> generation?
Reference: vds.getvmcount returns the number of vms that the host reports while isanyvmrunonvdsindb checks that in the database. here, it seems that there is no reason to cal isanyvmrunonvdsindb because the
Candidate: this should be repelaced on the <UNK> <UNK> userreportingsettingshelper
Reference: does not match conventional tostring implementation.
Candidate: should we use moreobjects moreobjects here?
Reference: when registering a job, we throw a duplicatejobexception if it has already been registered and put the onus on the caller to unregister first. i'm not arguing one way or
Candidate: minor typo: <UNK> -> entry.getkey(), <UNK>
Reference: it looks like code redundancy with the task bean.
Candidate: should be be <UNK> name)?
Reference: this will cause concurrentmodificationexception: removing items from the underlying collection while iterating
Candidate: i don't think we need to do we need need to do we need need to do we need need to check whether the <UNK> is the <UNK>
Reference: looks like this can be static
Candidate: use optional.ofnullable()
Reference: this code isn't trivial. please extract it to a method.
Candidate: can be replaced with <UNK> reference: <UNK> = <UNK> ?
Reference: ![major](<link_0> 'severity: major') reduce the number of returns of this method 5, down to the maximum allowed 3. [![rule](<link_1>](<link_2>
Candidate: ![major](<link_0> 'severity: major') reduce this number of the number of the number of 5, down to the maximum of 3. [![rule](<link_1>](<link_2>
Reference: try-with-resources? (the ones in this file)
Candidate: use parameterized logging instead of concatenation. concatenation.
Reference: shellisavailable
Candidate: please shellisavailable(this)
Reference: error log must be i18ned
Candidate: do we need need to use the <UNK> <UNK>
Reference: remove
Candidate: nitpicky b/w <UNK> of the <UNK> <UNK>
Reference: so not really specific to this changeset, but is there a reason we are using 2 different stringutils in this class?
Candidate: why do we need to use <UNK> here?
Reference: maybe you could use endswith instead of matches? then you wouldn't need that string.
Candidate: rename to <UNK>
Reference: did you mean to suppress the exception here?
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: i think it is better to split "addandreplace" method in "replaceentry", which will replace existing entry but return null if none exists. and "addentry", which will add new entry. this
Candidate: nit: 49
Reference: i dont think we should be stripping. we need to ensure anycast messages only end up in anycast queues and like wise multicast. when theyre consumed by a retroactive consumer
Candidate: why do we need to <UNK> here?
Reference: is this a warning or an actual error?
Candidate: i don't think we need to throw an exception
Reference: in the jira request jeff requested that this be a required arg.
Candidate: the syserr should be be a list<diskimage> { <UNK> }?
Reference: i think a part is missing here <link_0>
Candidate: should we use the <UNK> here?
Reference: why public ?
Candidate: please use <UNK>
Reference: i think just iterating of the string to find . characters and creating a new substring each time would be even faster, as there would be just substring allocations which
Candidate: i don't understand this matters, what about the <UNK> of the <UNK> <UNK>
Reference: ha! never noticed this, but we should always normalize to the smallest scale. right now, 1234ms > 1s but 1s == 1234ms !!! itmftimestamp t1 = tmftimestamp.frommillis(1234); itmftimestamp t2 =
Candidate: why atomic? adjust this change!
Reference: suggestion inittemplate(new elasticsearchresttemplate(client));  with the change in the base class
Candidate: use <UNK>
Reference: why do this at all? to make sure it succeeds? shouldn't we check that the return is ok in that case?
Candidate: why do we need to use @test(expected = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i guess getlistparser should get the injector... (is that something unit tests should have caught?)
Candidate: what is a reason for <UNK>
Reference: good point. i've added dropwizards jersey client integration.
Candidate: please rename the <UNK> to <UNK>
Reference: add a //todo statement about optimizing the sort for large files.
Candidate: the syserr should be be the
Reference: needs a test of the output:  final bytearrayoutputstream myout = new bytearrayoutputstream(); system.setout(new printstream(myout));
Candidate: 49
Reference: the order arg here is quite important given the way nd4j works with reshaped arrays being a view of the original.
Candidate: can be replaced with <UNK> ?
Reference: is qualifying this here necessary? the context looks to be mockchart already.
Candidate: nitpicking: can be replaced with <UNK> <UNK>
Reference: arguments.length is already been checked for above, i think there is no need to do it again.
Candidate: what is this exception thrown?
Reference: is this needed? the menu item will always be clicked/navigated to from the ui thread.
Candidate: if we is the software <UNK> but i don't want to do we need to check if the is the
Reference: 60 seconds would be a better choice
Candidate: can we use the <UNK> here?
Reference: before we would never throw an exception here, is it safe to do so now?
Candidate: why do we need to use <UNK> here?
Reference: this max rows disagrees with the assertion, which is why the test is failing.
Candidate: please use import <UNK>
Reference: can't we make calls from txclient to the tx service before and after running the admin command to test the change in state? asserting on an exact match in the
Candidate: please use fail(); here instead of <UNK>
Reference: doesn't this duplicate the nonnull check?
Candidate: should this be <UNK>
Reference: whaaaat this line makes no sense to me. care to explain it?
Candidate: nitpicking: <UNK>
Reference: include the microservice classname and path in the log message.
Candidate: why do we need the getconnection here?
Reference: typo here. should be service_type
Candidate: i disagree with <UNK>
Reference: why revert the changes to use proputils? proputils will provide a meaningful exception when these properties aren't set, otherwise it generates an npe.
Candidate: newing is an <UNK> of newing an <UNK> of the rest of the the rest of the pr.
Reference: is it possible to avoid "global" variable (leftfieldnameset) ? it seems like you're using "state" in lambda. is it really necessary ?
Candidate: why do we need need to the <UNK> here?
Reference: @qaga .scrolltofooter() method is intended to scroll to global footer, not mcf. depending on the screen resolution when test is executed (and jenkins has lower than you ;) and what
Candidate: please remove the method("post")
Reference: shouldnt this be 'else if'? if not the layouts wrong ;)
Candidate: can we use the rhs of the <UNK>
Reference: expire a bit earlier, e.g. after 29min? that way the risk (small as it is) of an expired token being sent is avoided?
Candidate: this should be the <UNK>
Reference: i don't think we need to do this. we should deprecate the httplogoptions one, and have it take lower precedence to the clientoptions one (so we only use it when
Candidate: do we need to use <UNK> here?
Reference: a null arg should instead throw an illegalargumentexcpetion as it's an unexpected/invalid input.
Candidate: should we use the <UNK> here?
Reference: should be interrupted exception instead of keychain exception?
Candidate: should we be the <UNK> here?
Reference: it's only deletable if it's not saved?
Candidate: this should be setemptyelement().
Reference: is there any reasonable way (and there may not be) to make all the places that use this value leverage a single constant?
Candidate: should we be schedule() here?
Reference: i just realized that this will fail if the absolute path string contains a space since the full string is parsed by spaces (this is why no one should really
Candidate: why do we need the <UNK> here?
Reference: i was confused because the existingindexes structure looks like some sort of deserialised json! well i think that listindexesindatabase and similar methods should return more self-describing data types, and this
Candidate: please use <UNK> <UNK>
Reference: added logerror
Candidate: this fail()
Reference: would it make more sense to inline these just before the </head> tag?
Candidate: these magic numbers are a separate separate separate <UNK>
Reference: shall we turn-around the equal check for avoiding any npes ? for ex: "something".equals(string)
Candidate: remove %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s
Reference: you might want to catch numberformatexceptions here and transform them into suitable exceptions. one try-catch-block seems enough, since you cannot recover from this error here anyway.
Candidate: should we should use 6 arguments + + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 +
Reference: give more error info instead of empty seems more friendly?
Candidate: why do we need to call <UNK> <UNK>
Reference: i'd move the failure point above the for loop.
Candidate: why do we need to synchronize on the lock ?
Reference: optional is java 8, i don't think we should base too much of our logic on it
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: not sure how you get this when you don't instantiate via hk2 but manually
Candidate: this should be <UNK>
Reference: i cloned this branch to play around with moving adding splits into this class. i got as far as writing the following function. i think this function would work for
Candidate: what is possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly possibly
Reference: why we use the value keyword before ?
Candidate: why do we need need to <UNK> here?
Reference: this code duplication doesn't bother you? i'd create a preceding patch extracting the common logic among createrow() and createblankrow() to a separate method, and then only change this once.
Candidate: i accordingly, <UNK> accordingly, <UNK> accordingly, <UNK> accordingly, <UNK> accordingly, accordingly, it's possible to the accordingly, file...
Reference: i think we want to make the string computation lazy, but not lose info. we could do that by overriding tostring.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: instead of creating a file object you can use another fileinputstream constructor that accepts file name.
Candidate: why do we need to use the exception here?
Reference: request is not an argument here. this should be checkstate
Candidate: can be simplified to <UNK> <UNK> ?
Reference: use just 1 here (the single value form of grant).
Candidate: why do we need to use the here?
Reference: could you please move the url hash code to it's own method? i think this will make it easier to read here and understand what is happening.
Candidate: the syserr should be be <UNK>
Reference: you can use util.asset instead.
Candidate: why do we need to check the <UNK> <UNK>
Reference: can you use different test values for stock, experiment and instance ids for better assertion?
Candidate: <UNK> evidence, exclusively "import
Reference: suggested "floatbits" or "valuebits"
Candidate: why do we need the <UNK> here?
Reference: this method should be tested via a unit test. and this change should cause an update to that ttest (but i don't see it). if it does, update it so
Candidate: <UNK> should be the feedid
Reference: what worries me is that the oldmessages is left unprotected between the calls and in theory could be modified.
Candidate: i don't understand why, but it matters, what is it matters, but i don't understand why, but i understand why, but i don't understand why, but i understand correctly, but
Reference: we should add these as an internal api for now.
Candidate: please remove the method("post")
Reference: it is quite surprising to me that the provider will save the result but not try and load it first. i think the api should not save the authorization. i
Candidate: can we use the <UNK> properties?
Reference: maybe here we can break the loop.
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: wow this is awesome. thanks for setting this up. fyi @emord we may be able to expose this list via an api call to formplayer if you think it'd be
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: file
Candidate: should we throw an exception?
Reference: [optional] eliminate the 'token' variable dest.append(loginurltoken.gettoken(req));
Candidate: yeah, yeah, i don't think we should have an exception here as well?
Reference: should be set to null, especially as lockdecorationupdater has not all its fields set to null on unregister() call.
Candidate: this should be <UNK>
Reference: shouldn't that be set in a finally block ?
Candidate: should we be schedule() here?
Reference: is this part of the issue?
Candidate: why do we need the <UNK> here?
Reference: this will recognize all props starting with "druid.metrics.emitter.dimension.", i understand that currently there are only two (datasource and taskid) but in future we might add more and all of them
Candidate: this should be the <UNK>
Reference: the given ...
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: must not instantiate ~~an element of~~ this class
Candidate: this should be the <UNK>
Reference: not sure about multipart_form_data can we rework it to accept octet/stream?
Candidate: should we use the <UNK> here?
Reference: imo this should only be set when -ds3guard is passed on the command line, similar to what other tests were doing before. tests that are only meaningful with s3guard should
Candidate: hmm. this should be the fixture.
Reference: shouldn't we be using restconstants.property_uuid?
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: nit: make a variable and reuse
Candidate: why do we need need to be <UNK> here?
Reference: didn't get idea of those .***ifabsent methods. why u need them? irregardless of servicesprovider type u go through .registerinmethodregistry() anyway which, by turn, sets corresponding dependencies.
Candidate: i don't think we need to check for the situation.
Reference: filelocation is printed out twice
Candidate: this fail()?
Reference: add final keyword.
Candidate: this is be <UNK> to <UNK> the presenter.
Reference: if we say we never use null as key, we simply but a objects.requirenotnull(xmllang) guard before the get(). this would also avoid the try/catch block.
Candidate: should we throw an exception?
Reference: please, consider moving runtime start spans names to a dedicated class with constants.
Candidate: you don't need to check?
Reference: i suggest removing this newline
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: s/, error//
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { <UNK> } } } }
Reference: workflowstatedto::new would then become a call to asdto
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should the substudy filtering tests be updated to also look at external ids?
Candidate: should we be the <UNK> request?
Reference: i think these two could be combined as well.
Candidate: ![major](<link_0> 'severity: major') either remove this log or rethrow [![rule](<link_1>](<link_2>
Reference: this would have an unexpected consequence if someone has dfwe${...}asdfa pattern right inside a password property.
Candidate: why do we need need to <UNK> here?
Reference: this can potentially log a tremendous amount of errors. can we cap the logging at something reasonable? default = 10 or something
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: is the cast needed to get the generics right?
Candidate: use map<> on the <UNK>
Reference: isn't it the same thing?
Candidate: why do we need to use <UNK> here?
Reference: forms.ispullselected(form)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: might want to wrap this in a connectexception. in general, i think attempting to restrict exceptions that get thrown up to the framework to connectexceptions and then ensuring we have
Candidate: the syserr should be be the <UNK> <UNK>
Reference: it would be better to get only vm static instead of all vm object
Candidate: please use the <UNK>
Reference: this is really not needed for any of these. perhaps remove them all? i don't really mind whether it's kept or it goes but it should be consistent.
Candidate: create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create
Reference: it's not the good i18n.
Candidate: why do we need the <UNK> here?
Reference: since mdata could be null at this point, let's check for npe
Candidate: we should need to check if the is is null, so we don't want to do we need to check the <UNK>
Reference: it shouldn't be removed as it is more likely needed for displaying amount of results.
Candidate: should this be be <UNK>
Reference: since dates are mutable, a copy of startdate should be returned to avoid downstream side-effects.
Candidate: this should be setemptyelement().
Reference: you don't need to enumerate all the keys one by one in a collection...you should be able to use getpropertykeys("oai.harvester.metadataformats"); to get a list of all matching keys, instead of
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: use paths.get(directory).toabsolutepath().normalize().startswith(nuxeohome.topath().toabsolutepath().normalize()) to avoid dangerous .. path components that would allow escaping the nuxeohome directory.
Candidate: why do we need need to be the <UNK>
Reference: this should be in a separate commit for ispn-11295. also, i would expect no blocking in the vast majority of cases, so we need an optimized path for that case
Candidate: can we use the <UNK> here?
Reference: i'm not sure that we should remove the mocked push. did we talk about this?
Candidate: this should be the <UNK>
Reference: is this used anywhere? if not, please remove
Candidate: should this be <UNK>
Reference: querystatement will always be null since it is never used, so removing this logic as well as the variable
Candidate: i don't think we need to throw an exception if (state { <UNK> }
Reference: the alignment is a bit wonky, i'd rather split it into java responsebuilder.contenttype(application_json) .entity(json_writer.tojson(configuration)); return completablefuture.completedfuture(responsebuilder.build());
Candidate: use <UNK>
Reference: why do you need created n files? it'd better use >> instead of > and cat all content into one file part by part.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: unfortunately, h2 doesn't support that syntax. in db2 this works by using from lateral (values (?1)) but i doubt this will work here. can you think of any other sql
Candidate: why do we need the <UNK> here?
Reference: use getvdsdao() instead of dbfacade.getinstance.getvdsdao
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: might it be worth it to confirm that the logged thread terminated?
Candidate: this should be the <UNK>
Reference: braces
Candidate: if <UNK> && <UNK> && <UNK> { <UNK> 0)" <UNK>
Reference: maybe quasarhelios.clamp.opencontrol.set could have a good helper addition to the base class?
Candidate: the syserr should be be the <UNK>
Reference: we're probably going to want this to throw some sort of exception so the ui can display that some notification that the write didn't happen.
Candidate: should we be the <UNK> here?
Reference: protected doesn't make sense on a final class.
Candidate: why do we need need to the <UNK> here?
Reference: int c = getcount(); but you can inline that in the next line too.
Candidate: should we be <UNK> here?
Reference: space before '(' applies in a few other places in this file too.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: use selectionagen in this case.
Candidate: why do we need to check the <UNK> <UNK>
Reference: worth extracting a method and change the read of the property name to also use it (to fixing that one as well).
Candidate: if <UNK> == null) { <UNK> } <UNK> }
Reference: can be null
Candidate: use <UNK>
Reference: this is a fluent model, you can chain these properties.
Candidate: please move this try/catch here to the
Reference: now the relativize command is missing, right? maybe have something like if (linkedfile.isonline()) link.setvalue(...) else link.setvalue(relativize(paths.get(...)))?
Candidate: why do we need need to the <UNK> here?
Reference: does this code handle the scenario when proxying is not required? note how spark has an if/else statement depending on whether shouldproxy() or not <link_0>
Candidate: can we make this private? specific?
Reference: useless parenthesis
Candidate: i don't see the signs that this signs in the
Reference: why was this removed ?
Candidate: why call <UNK> ?
Reference: dont throw this exception, but set it on exchange instead, eg exchange.setexception, then its handled in the finally block using the configured exception handler on the consumer
Candidate: we should expecting the exception here?
Reference: parsegrid1request looks like it either would throw or return regirstaionrequest. should this just throw? or at least return an empty request object?
Candidate: why do we need to the <UNK> here?
Reference: remove this.
Candidate: why do we need the <UNK> here?
Reference: same as in other checks and same below.
Candidate: if <UNK> && <UNK> { return false; } else { if <UNK> == null) { return <UNK> } else { if <UNK> { return false; } else { if <UNK>
Reference: please move to a @before function
Candidate: why do we need to use the <UNK> here?
Reference: i think it would better with one condition statement. i also don't think the we need to use ismetricattributedisabled method as well.  if (!getdisabledmetricattributes().contains(type)) { output.println(status); }
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: java8-isation [optional]
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: changing jenkins.getinstance() and jenkins.getactiveinstance() to jenkins.get() is ok, as long as get() really is the right method in each situation - sometimes code uses different getters for good reasons. i'm
Candidate: why do we need the <UNK> here?
Reference: i think it would be better to not call .connectionpoolsize(int) at all if the flag is not specified for helios-agent, that way the default value when not specified still resides
Candidate: why do we want to check the the <UNK> <UNK>
Reference: you can use  serializableitems.addall(objects);  instead of iterating the collection.
Candidate: why do we need the <UNK> here?
Reference: it should be ... state.playing && isttsinitialized ...
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why isn't this implemented in viewgroupdescriptor ?
Candidate: i don't think the <UNK> costs <UNK> costs the <UNK> costs the <UNK> costs the <UNK> costs the <UNK> costs the <UNK> costs the <UNK> costs the <UNK> costs the
Reference: this certainly should be if(!values.contains(modifiedvalue)) values.add(modifiedvalue); and it could be placed in the previous if condition after &&
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: could you please explain what's the purpose of this removedrepos list? you seem to be accumulating repos in it while they're being deleted, but then you don't do anything with
Candidate: why do we need to check for the <UNK> <UNK>
Reference: what has the reason been behind this change?
Candidate: this should be the <UNK>
Reference: look like generally you change a logic. in previous implementation we collect expection only if it's instance of uiassertionerror but you change this logic. why?
Candidate: why do we need need to check the <UNK> here?
Reference: would have this protected and with indent adjusted
Candidate: use <UNK>
Reference: this behavior is different than what we had in the prototype. since those impls were based on redis and rabbitmq, it's not so easy to compare with the local in-proc
Candidate: i don't think we need to call the <UNK>
Reference: nit: do we need to do a immutablelist.copy over variables.build()? (since it already generates an immutablelist
Candidate: please import?
Reference: looking at the history, it's a convoluted way to set dirty = true in the parent class. we need it for that scenario:  java select s = select().all().from("foo"); system.out.println(s.getquerystring());
Candidate: i don't understand why, but it is be the why, but it is the why, that the why, that the why, the
Reference: use constant for "replica". do we want port and partition with no separator?
Candidate: if (column != null && <UNK> && <UNK> && <UNK> { return; }
Reference: its slightly awkward that landmark is unused here; its really just a for loop over landmarks.length.
Candidate: please use <UNK>
Reference: you don't seem to gain much by moving the synchronized method from createrealmorgetfromcache to docreaterealmorgetfromcache ?
Candidate: i don't think we need to migrate the anywhere here?
Reference: we want to make sure that the bucket name doesn't start with an upper case character, since it's one of the naming restrictions as mentioned [here](<link_0>
Candidate: nit: this can be replaced with the following if. java boolean <UNK> { boolean = <UNK> { <UNK> <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: given that quality is an int, i believe it is guaranteed not to be null, which makes the test unnecessary.
Candidate: why do we need the <UNK> here?
Reference: nitpicking, but i'd like this in the test before the node is killed
Candidate: i think this is the the <UNK> costs the <UNK> <UNK> the <UNK> is the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: store the positive concept in a variable outside of the loop so you don't have to re-fetch it each time
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: can this be storageqos?
Candidate: please use <UNK>
Reference: if this should really **never** **ever** happen, we should probably log it as an error, not warning.
Candidate: why do we need this check?
Reference: u == use.ndt || needs to be removed (otherwise, all math functions will be treated as non-deterministic)
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: remove the interruptedexception from the signature.
Candidate: why do we need this tear to the <UNK>
Reference: not obvious what this argument does. it looks like it's just to copy the identity? why not just pass a personident instead?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: at the point in the code i would expect that lock == value. i think it may be worth adding a sanity check for that. could do something like the
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit: for consistency, can we rename delayms to latencyms?
Candidate: if we && <UNK> { return false; } else { if <UNK> { return false; }
Reference: this can be misleading in cases when running on non-azure hosted machines. as we default to vm credential if msi endpoint is not set. should we check if imds available
Candidate: why do we need the fully-qualified name here?
Reference: this is not needed
Candidate: remove <UNK>
Reference: why not init frequirements in the beginning and make it final?
Candidate: i don't think we need to call the <UNK> <UNK> the actionreturnvalue <UNK> <UNK> = <UNK> <UNK> <UNK> { return <UNK> }
Reference: change log level to debug
Candidate: use <UNK> instead of <UNK>
Reference: if (, braces
Candidate: can you use <UNK> <UNK> <UNK>
Reference: you can put the guard clause first to reduce nesting i.e.  java if (!response.ispresent()) { return false; } // successful flow
Candidate: what happens if the is is invalid?
Reference: it would be interesting to check the stored ids also, and not just that they are not null
Candidate: why do we need need to be <UNK> here?
Reference: detectedbyorder is not final, so the value could technically change between those two calls. unlikely to happen, but semantically it'd be better to extract to a variable first. i'd also
Candidate: why do we need to use <UNK> here?
Reference: merge the handleservicefactory and the handlepersistencemanager
Candidate: please use <UNK>
Reference: do we have a potential leak here? i believe if we are calling resolve() we need a close as well.
Candidate: why do we need the exception here?
Reference: is it really valid to always do this? if a user registered his custom function via native apis as lower case he wouldn't be able to use that function through
Candidate: <UNK> *= 2;
Reference: log in this case
Candidate: what happens if the is is the the <UNK> is the
Reference: this finally block grew too big. consider moving its contents to a separate method. i'm also concerned with exceptions that can be thrown by this method. with the current code
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: a lot of duplicate code with invoke. you can extract method with processor or create dto object
Candidate: nit: can be replaced with the following one-liner.  java <UNK> <UNK> { <UNK> = <UNK> <UNK> <UNK> { <UNK> } <UNK> { <UNK> <UNK> { <UNK> = <UNK> <UNK>
Reference: this could throw a null pointer exception if a datacenter with that id was not found
Candidate: should this be <UNK>
Reference: i'm concerned about your fallback here. all of the fallbacks should already be applied when the config was initialized.
Candidate: should we use <UNK> <UNK> <UNK> ?
Reference: my first thought was that this is an impacting change as aql implementation will deactivate its expression cache for all evaluation in activatemetamodels but the siriusevaluationtask is used by the
Candidate: do we need to <UNK> <UNK> <UNK> instead?
Reference: ditto, will this break if we add repos at one point?
Candidate: please remove the unused line.
Reference: _nitpick_ i find statements like this a little bit hard to read, i would either: - surround the right hand side in parentheses: shouldnotreportissue |= (calleesymbol != null && "globals".equals(calleesymbol.fullyqualifiedname()));
Candidate: this should be the <UNK>
Reference: introduce a private method for the right hand side please, i don't know what we're doing here ;)
Candidate: why do we need the <UNK> here?
Reference: you need a new line above.
Candidate: this should be the <UNK>
Reference: why not to do it once and use it 4 times?
Candidate: i acquired lock acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired
Reference: heap is unused here?
Candidate: <UNK> -> objects.tostringhelper()
Reference: use {} in log statements
Candidate: why do we need the getconnection here?
Reference: replace with a typescanner:  new simpleannotatedtypescanner<boolean, void>() { @override protected boolean defaultaction(annotatedtypemirror type, void avoid) { return type.getannotations().isempty(); } @override protected boolean reduce(boolean r1, boolean r2) { r1 =
Candidate: do we need to check the <UNK> <UNK>
Reference: sorry, but i am not understanding this: can you explain why you are setting this system property?
Candidate: the syserr should be be <UNK>
Reference: i think that this method will never be called passing "false" as the parameter, so it may be better to have only one "readone" method, that doesn't receive it, and
Candidate: this blank line
Reference: yeah, i'm also not sure why this needs extra sync.
Candidate: i don't think we need to close the <UNK>
Reference: totalcount could be got from configloader
Candidate: <UNK> *= 2;
Reference: log.trace if anything
Candidate: <UNK> *= 2;
Reference: equals or compatible? for example return 0 will work for a double return type?
Candidate: should be be the <UNK>
Reference: i think we should make the default behavior to ignore the extension and actually crack open the file. that way it will definitely do what's expected, it just might be
Candidate: why do we need need to the <UNK> <UNK>
Reference: i'm not too keen about having a failedcompletablefuturerepresentation that kind of duplicate the production code. i believe we should simply verify that some subpart of the stack trace is present
Candidate: please remove this method("post")
Reference: should we change the test to actually verify the onchanged events separately? kind of confusing to verify that the second time is a pendingintentrequiredexception but we don't assert/care what the
Candidate: please use <UNK>
Reference: this should probably default to 443
Candidate: nit: just make sure if <UNK> strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings strings
Reference: do you want to add the cookie name/value in the message?
Candidate: why do we need to here?
Reference: @dain, should this return int in aligning with getunsetbits? the existing getsetbits (write bits into a blockbuilder) returns void tough.
Candidate: why do we need to use <UNK> here?
Reference: i have a vague recollection that this has broken in the past and we added in the tolowercase to fix it.
Candidate: please use <UNK>
Reference: catalogserver.altertable() throws only undefinedtableexception. did you add handling other exceptions for future work? even though you did, i think that duplicatetableexception does not occur.
Candidate: undefineddatabaseexception should be handled.
Reference: there should be whitespaces between the strings and the plus signs. applies to the rest of jobs.
Candidate: why do we need to mock the <UNK> <UNK>
Reference: i slightly prefer using a visitor: java out..walkinoptimizedorder(new defaultrealmatrixchangingvisitor() { public double visit(final int i, final int j, final double value) { return matrix.getdouble(i,j); } });
Candidate: why do we need the <UNK> here?
Reference: @vkuchyn better message is "use diamond operator"
Candidate: should be be the <UNK> <UNK>
Reference: should we only alert if the failure to contact the executor is consecutive? if azkaban is up for a long time, then it's likely there could be intermittent failures to
Candidate: why do we need the <UNK> here?
Reference: c != null check is redundant with the instanceof check after
Candidate: shall we make this configurable?
Reference: small style nit: we don't use braces around simple statements.
Candidate: i don't understand this matters, matters, this matters, this matters, this matters, this matters, that this is matters, but i don't understand this matters, but it matters, but it matters,
Reference: i think if we move the logic into the useragentinterceptor we could new up using the prefix string and avoid all the reflection.
Candidate: this should be the <UNK>
Reference: this locking technique is fine for now, but if we want to be able to scale to multiple processing nodes, we aren't going to be able to rely on a
Candidate: what happens if the is is empty?
Reference: could you not grant each phasetracker instance it's own pool and avoid the lock altogether?
Candidate: i don't think we need to do we need need to do we need need to do we need need to check the <UNK>
Reference: it was configurable before this change? you could add <property> <name>hbase.master.metafixer.max.merge.count</name> <value>11</value> <description>configure the max merge count</description> </property> ... to your hbase-site.xml and away you go? but maybe you think
Candidate: why do we need need to the <UNK> here?
Reference: what about testing the usage of [var in lambda parameter definition](<link_1> (jep-323)? java @nonnull var x = new foo(); (@nonnull var x, @nullable var y) -> x.process(y)
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: condition can be simplified as data cant be null
Candidate: do we need to do we need need to do we need need to do we need need to do we need need to do we need need to check
Reference: logger.debug
Candidate: :disappointed:
Reference: illegalargumentexception seems like a better fit here.
Candidate: can be simplified to: java results.stream().anymatch(entry -> value.getk1().equals(entry.getkey()) && value.getk2().equals(entry.getvalue()))
Reference: do you have to do hasreplicationserver first? and then read it if present? or maybe this defaults false if not present?
Candidate: can we use the <UNK> here?
Reference: doesn't this need to be a bootstrap datastream? i thought generatedatastream() only generates dummy datastream?
Candidate: nit: you don't need to use the <UNK>
Reference: maybe there should be a style.getallskins() method returning a collection? then you can still use addall :) <logic,review
Candidate: why do we need to use the <UNK> here?
Reference: i think we should provide custommsg as argument (or instead of discoveryspicustommessage msg) and do not duplicate:  discoverycustommessage custommsg = msg == null ? null : (discoverycustommessage)igniteutils.field(msg, "delegate");
Candidate: do we need need to do we need need to stop <UNK>
Reference: movetoblockaitask.builer().from(task).build() will crash because of the absence of the predicate. not so good...
Candidate: should this be <UNK>
Reference: you can use guava preconditions check in this case : <link_0> simplifies a bit the code.
Candidate: why do we need to <UNK> here?
Reference: what's the point of catching and then throwing the same exception type?
Candidate: can we use the <UNK> here?
Reference: the variable should be renamed similarly?
Candidate: can we use gender here?
Reference: what is the point of the local var since it is immediately out of scope?
Candidate: why do we need the <UNK> here?
Reference: potentially binary breaking change
Candidate: i don't think we need to check the <UNK>
Reference: ditto, can this still happen to be blank?
Candidate: why do we need to use <UNK> here?
Reference: similarly this line can be removed :)
Candidate: please use <UNK>
Reference: because of u checked lock status of vm, i think that's why here it is better to use vmhandler.checkstatusandlockvm()
Candidate: i don't think we need to check the disk, and the disk,
Reference: we've a configuration value for ?stable=false, not sure if it's client only. if it's client only, add it to the internal api configuration.
Candidate: why do we need to here?
Reference: one might want to perform a long comparison due to potentially problematic floating point comparisons.
Candidate: please import?
Reference: this message means that the table of tablename does not have the partitionkey column. it would be better to print the partitionkey column is not the partition key of the
Candidate: you can use the the fixture.
Reference: (...).equals(boolean.false) -> !(...)
Candidate: @unyoungwax, do we need to check the <UNK> the <UNK> is the
Reference: this should happen within the future
Candidate: we should need to throw an exception?
Reference: why not call cachingtable.delete(key)?
Candidate: the syserr should be the <UNK> <UNK>
Reference: why hardcode objcount?
Candidate: this is eating the exception in the eating the exception in the eating the exception
Reference: with empty string, "".split(delim) returns array of length 1 with empty string as the element. then, adding to the list a folder "myfolder" and joining will result in ";myfolder" -
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: instead of ignoring the test, please catch the exception and verify that the right exception is thrown i.e. check for a known part of the exception message.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: is there any reason to support authentication-realm and authorization-realms attributes at the same time? or why isn't here else statement?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: do something?
Candidate: i don't think we need to use the <UNK>
Reference: this is checking for reference equality, not string equality.
Candidate: should we be the <UNK> here?
Reference: instead of suppressing an exception first and then checking for null, we should raise the exception within the catch block instead.
Candidate: why do we need the exception here?
Reference: suggestion map<string, class<?>> extensionclasses = new hashmap<>();  it looks better like this.
Candidate: why do we need to use <UNK> here?
Reference: awaitretentionexpiration(500l); -> awaitretentionexpiration(500); for the three last use
Candidate: should we use the exception here?
Reference: could you make this variable final? could you also reverse the ternary statement so that it isn't negative, i.e. islive ? "" : "&t=" +  ? thanks for your
Candidate: please use <UNK> <UNK> <UNK>
Reference: just a question, why do you use objects and not something like:  if (getcontext() != null) { getcontext().getcontentresolver().notifychange(rootsuri, null); }
Candidate: please remove this line
Reference: looks like format is missing in equalsandhashcode
Candidate: please use <UNK> <UNK> <UNK> 49
Reference: is confirmed locally about test results <link_0> could you please check those?
Candidate: use readasstring(...) instead of <UNK>
Reference: we don't know if these were used in extensions, can the things that were public remain so?
Candidate: the syserr
Reference: looks like the file format is not uft8 which has resulted in loss of the currency symbols
Candidate: this should be the <UNK>
Reference: could return the value immediately.
Candidate: if <UNK> != direction.incoming) { return false; }
Reference: just wondering, why sqlitetemplates?
Candidate: this should be the <UNK>
Reference: the same to <link_0>
Candidate: use <UNK>
Reference: i don't understand. may you describe logic of this method?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: should it be also illegalstateexception here?
Candidate: why do we need the <UNK> here?
Reference: this change is not equivalent to existing code if coins[j] contains 0
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: is this correct? if you use repl, the rpc manager is non-null and the distribution manager is null, right?
Candidate: i don't think we need to do future.get() here?
Reference: why not try-with-resources?
Candidate: why do we need to the the payload?
Reference: don't do this if there are no case insensitive indexes
Candidate: why do we need the <UNK> here?
Reference: be aware that <b> using multiple filters on the same criteria</b> (id, priority,..) leads, in most cases, to <b>only consider your last filter</b>. orth.
Candidate: the syserr should be the <UNK>
Reference: also, let's update the log - someone didn't try to roll it back, they did.
Candidate: do we need to catch exception here and throw an exception
Reference: is it really that complicated to extract the preferences and replace globals.prefs by constructor arguments?
Candidate: why do we need need to the <UNK> here?
Reference: why two variables? you can just use one found of type method. if it's null - it means that nothing was found.
Candidate: could be simplified to use <UNK> ?
Reference: entity?
Candidate: please use <UNK>
Reference: is there a reason to always show the trailing zeros? i had tried to avoid that.
Candidate: please remove the method("post")
Reference: why are you removing initial character? this is partialy responsible for test failures on *nix i believe. what is the output for you on windows?
Candidate: why do we need to here?
Reference: suggestion if (!jenkins.get().haspermission(jenkins.administer)) { return null; }
Candidate: should this be <UNK> <UNK>
Reference: use illegalstateexception ....
Candidate: why do we need this?
Reference: might want to use optional.map().orelse() or optional.ifpresent()
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { return false; } else { if (throwable { <UNK> { <UNK> { <UNK> } }
Reference: i think you need to have 2 loops here. as is, all the checks are still duplicated when the parent gets rejected. or, you could keep a rejected set.
Candidate: why do we need the <UNK> here?
Reference: 0 is a magic constant. i think this should no_error or some such. maybe also offer an interface to putresponse that does not require an errorcode to be passed in
Candidate: why do we need to here?
Reference: this method seems to be a copy of sourceforeignkey.checkimportedmodel().
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i don't think this is the right thing to do here. this is supposed to be the maximum size of a sample, which is unrelated to how large the audiotrack
Candidate: do we need to <UNK> <UNK> <UNK> <UNK> is not skipping the <UNK>
Reference: @fanifieiev please, use split (text) from cactoos or leave a puzzle.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: cannot we do this during the planing phase? right after the plan has been built?
Candidate: why do we need to check metadatastore ? <UNK> : 2; : <UNK> : <UNK> : <UNK> : 2;
Reference: shouldn't this message be added to another class in the same way the other logging messages were?
Candidate: should be be <UNK>
Reference: i believe the size of the strategies list matters more here. so i'd get rid of the check on lines 66-68 and would check whether strategies is empty then return
Candidate: this should be the lhs of the <UNK>
Reference: i am wondering if it works as expected. let's say currentstandbys.keyset() = [2, 3, 4] and newstandbys.keyset() = [1, 2, 3]. so 1 got added and 4 got removed. we
Candidate: i don't understand why, but it matters, what about the <UNK> the <UNK> is the
Reference: better to use doanswer(invocation -> values).when(mockmemorystore).getall(); or when(mockmemorystore.getall()).thenreturn((map) values);
Candidate: please remove the method("post")
Reference: please add static import for mockito functions (that goes for all places)
Candidate: please use <UNK>
Reference: i'm not sure silent catch is good as after that url is null and it will create exceptions
Candidate: i don't think we need to re-throw the exception in the exception
Reference: please here use also getbooleanvalue, it should simplify the code a bit
Candidate: why do we need this?
Reference: violationstore.save("msg");
Candidate: should we log the log level info level?
Reference: spelling
Candidate: this should be the <UNK>
Reference: i think this keeps the status permanently at 99%. i think we want something like math.min(progress, 99.9)
Candidate: this should be the <UNK>
Reference: could you remove all of these empty lines in this method and below (navigatenextcomponent)
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: for reusability, it's probably worth extracting this logic to a generic method that gets a snapshotstatus. i.e. something like 'vmnotinstatus' and 'vmnotduringsnapshot/vmnotinpreview' methods.
Candidate: i don't understand why, but it is be the if the is is the
Reference: sorry, i realize that setting this option whenever a failure reason needs to be sent creates a lot of duplicate code. maybe a better solution would be to have a
Candidate: why do we need to use <UNK> here?
Reference: what happens if user-agent is not set? does this return an empty list or null?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: some differences explained here : <link_0>
Candidate: this should be the islocal as well?
Reference: throws
Candidate: why do we need to use <UNK> here?
Reference: remove?
Candidate: please remove the <UNK>
Reference: this may not always be true if it's to be live reloaded
Candidate: i *= 2;
Reference: you can just return keyinset without having to set it onto referencetolockkey and return null on line 105
Candidate: i don't think we need to check if the is is null.
Reference: if the integer cannot be accessed from multiple threads, there is no need to make it atomic.
Candidate: why do we need need to the <UNK> here?
Reference: typo: request.
Candidate: please remove the method("post")
Reference: if input is null isn't it valid for blacklist patterns ? i think we should either throw illegal argument exception or consider null as valid. i prefer it to be
Candidate: why do we need to use the payload?
Reference: many blank lines in here
Candidate: please use syserr
Reference: do we need this as part of this patch? if it fixes another issue, let it be a different patch.
Candidate: this should be an empty() if <UNK> != null) { <UNK> groupname = <UNK> } { <UNK> } else { if (throwable groupname = null; }
Reference: why don't you directly build string[] here? btw, there's a findbug violation on casting to string[] below
Candidate: this should be the <UNK>
Reference: minor typo in variable name; has an extra unneeded "m".
Candidate: maybe: <UNK> -> "\"" -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: 'if" statements with 'else' branches should have curly braces around both branches.
Candidate: the syserr should be be <UNK>
Reference: isn't it docker/dockerfile ?
Candidate: can you use the fixture.
Reference: is there a reason why these lines are removed?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: ditto about checks. i don't think we need to duplicate them.
Candidate: why do we need need to the <UNK> here?
Reference: rename o1 to method1 and o2 to method2 for better code readability.
Candidate: why do we need the <UNK> here?
Reference: if path is simple, i.e. just the project name, then ppath.lastsegment().equals(path) is true and as a consequence locatiouri is set to null (the default location). the parameter insidews is not
Candidate: can we move this piece of this piece of the code manager?
Reference: location is always related to an activity. therefore, i think it does not make much sense to just add an location here. it needs to be assign to an activity
Candidate: should this be <UNK>
Reference: even if this is just temporary, we should still use okhttp's client: java @override public downloadresponse head(string siteurl) throws ioexception, recaptchaexception { final request request = new request.builder() .head().url(siteurl) .addheader("user-agent",
Candidate: why do we need need to check the the <UNK> <UNK> <UNK>
Reference: is this being read anywhere? plus we seem to be saving the same thing twice?
Candidate: this should be the <UNK>
Reference: there is a guarantee that the first statement after a if is executed without being preempted. but only the very first statement [1]. so you could null-check directly on ftempfile
Candidate: this commons-io
Reference: the thread should clear the interrupted flag here, right?
Candidate: i'm not a bit <UNK>
Reference: this if doesn't do anything
Candidate: why do we need to use the <UNK> size?
Reference: in tostring() and log messages, we use "[" to denote lists, collections, arrays, etc. we use "(" to denote fields. so let's change this into: return "pair(" + key +
Candidate: use <UNK> objects.tostringhelper() to <UNK>
Reference: we could probably simplify this a bit: suggestion return supplier.get();
Candidate: should we use <UNK> here?
Reference: we should move this statement to the outside of else clause. also, what do you think about a more detailed log message? for example, we can log information about blockid,
Candidate: i don't understand why, but it is be the if <UNK> is the software chunk of the <UNK>
Reference: disposables is null.
Candidate: please use <UNK>
Reference: don't we need to kill the thread pool in the end of test? the point is because of this:  public static executorservice newsinglethreadexecutor() { return new finalizabledelegatedexecutorservice (new threadpoolexecutor(1,
Candidate: why do we need this?
Reference: for my curiosity, why the parenthesis is needed?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: remove default.
Candidate: please remove method("post")
Reference: why keep the random number? but the bigger problem is that countmarshallingpojo uses static fields for the marshall count, and it breaks when 2 of the many tests that use
Candidate: i don't understand why, but it matters, but it is be to the the <UNK> <UNK> <UNK>
Reference: let us avoid any new lines unless there is a reason.
Candidate: should we use the exception here?
Reference: @nielscharlier try-with-resources?
Candidate: i appid
Reference: same as with the radio
Candidate: can we move this into a separate method?
Reference: we must check if resourceclasses is empty and in that case, set the width manually, as is done in fill(). currently the following test is a problem: run two debug
Candidate: i don't think we need to check if the is is the
Reference: this should probably be bounded by the max ttl config?
Candidate: assert expected)
Reference: use assertnotequals instead of == operator combined with assertfalse, == does not work properly for non-objects. <testing
Candidate: this should be the fixture.
Reference: can you please use {} brackets around single line if/else too?
Candidate: if there is a workspacejob if there is no need tied to tied to a single tied to a single tied to <UNK>
Reference: looks like we have to do this in all code paths that consumer the response.
Candidate: we should use the exception here instead of <UNK>
Reference: should this tostring have errormsg as well?
Candidate: typo: <UNK> -> entry.getkey(), <UNK>
Reference: can we get around this instanceof somehow? should it be generally possible to invalidate entityref?
Candidate: why do we need to use <UNK> here?
Reference: getcontent can be null if the file was only moved
Candidate: why do we need to use <UNK> here?
Reference: this may throw exception
Candidate: should we throw an exception here instead of returning null?
Reference: check that thow e doesn't crash media-server
Candidate: why do we need the <UNK> here?
Reference: we could cover it with some tests.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: should be "this(true)".
Candidate: is this needed here?
Reference: same here final agentproxy agentproxy = agentproxies.newinstance()
Candidate: can we use <UNK> <UNK> <UNK>
Reference: these shouldn't be in the memory cache section.
Candidate: why do we need the <UNK> here?
Reference: do you really want to wait 6000s here ? this is almost 2 hours, that's insane for an automated test.
Candidate: why do we need to use <UNK> here?
Reference: is there a case where authentication != null for anonymous users? in other words: can we remove the second part of the check?
Candidate: why do we need to check the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: the text is grammatically incorrect. encrypted secrets *are* redacted is probably a safer and shorter statement
Candidate: why do you need to assert that the columns here?
Reference: use gethttpport() instead of repeating call to getattribute()
Candidate: can we use <UNK> <UNK> <UNK>
Reference: it could be extracted as a constant name:  private static final string workspace_name = namegenerator.generate(deleterunningworkspacetest.class.getsimplename(), 5);
Candidate: why do we need need to check the <UNK> <UNK>
Reference: use this instead nhincconstants.async_db_rec_exp_val_units_sec.equalsignorecase(units) and remove units!= null
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: sorry.. being pedantic.. in the onfocus handler you call a method enabledatamodelerdockswhenishidden()... would this second method be best called something like showdatamodellerdocks()?
Candidate: this should be the <UNK>
Reference: looks like i see an issue with tcpnioconnectiontests.int3453racetest. previously we waited for the tcpconnectionopenevent, but now we have a new one tcpconnectionserverlisteningevent, which definitely is emitted before connection.publishconnectionopenevent();. the 
Candidate: should we be schedule() here?
Reference: i think @dlotts added some code here for removing statements from the indexers. make sure that doesn't get erased here.
Candidate: why do we need need to the <UNK> here?
Reference: return type should be the searchresolver interface for autowiring to work if needed in future
Candidate: why do we need to permission?
Reference: wait doesn't require returning the value. imho it's better to rename method to isfilenamesuggested(namefragment) according to the actual commands.
Candidate: unused variable declaration
Reference: move to static getactiveinstance() and use it everywhere?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: in order to avoid the pleonasm, what do you think of renaming the token variable inside the token class to: bearertoken? that way, this line would become:  java assert.assertequals(bitreserveclient.gettoken().getbearertoken(),
Candidate: please remove the <UNK>
Reference: instead of isoptionavailable, getgctype makes more sense
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: so here we add this fragment on the backstack, but earlier (line 57) we add the same fragment but without the backstack. can you explain the different situations you are
Candidate: why do we need to use <UNK> here?
Reference: this should be moved inside the if to avoid unnecessary work when the if is false.
Candidate: please use the syserr
Reference: instead of matchers.notnullvalue() please, check that actual value equals expected value
Candidate: @cvrebert compensation?
Reference: can remove the 'else' clause...
Candidate: this should be setemptyelement().
Reference: i may be getting lost in the diffs, but where did this method go?
Candidate: hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm,
Reference: i don't think "%s" works here. should be "{}".
Candidate: this we expecting to persist the properties? on the properties?
Reference: minor: false is a default value.
Candidate: why do we need the layout here?
Reference: based on the api doc, all_keys behavior is now deprecated, please use an alternative.
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: i think dashes need to be removed from ikey here
Candidate: why do we need need to be <UNK> here?
Reference: why not just immutablemap.of()?
Candidate: why do we need to use <UNK> here?
Reference: should be loaded lazy
Candidate: check for null check
Reference: arepublickeysvalid (or something like it) but *very* minor
Candidate: please remove the <UNK>
Reference: please remove the system.out here...
Candidate: please use <UNK>
Reference: instead of passing stringbuilder can this be only string?
Candidate: should we be the specific?
Reference: please add a log indicating that, something like: "stopping the session did not succeed, upload state has not been changed and it is still ${uploadstate}"
Candidate: can we move this to the <UNK> <UNK>
Reference: i wonder if it's quicker to just do one query instead of two, then separate the results by toolmode? filtering and sorting are a lot faster in the db, but
Candidate: can we move this to the 83 <UNK> mapping?
Reference: this function up to here can be replace with a call to fixnowandgetallowedwindow
Candidate: why do we need this?
Reference: this is unit test running locally, where is hdfs coming into picture? why do you need hdfs??
Candidate: why do we need this?
Reference: @catherineromiyo didn't we wanted to get rid of this additional method? it would be much better to extend get_experiment_results to select the version and set this information with adapting the
Candidate: i disagree with the <UNK>
Reference: we should probably use the separator for the slashes in the /stor/multipart string as well.
Candidate: please use <UNK>
Reference: why not mytest test = new mytest() why casting to a parent class?
Candidate: please use readasstring(...) instead of <UNK>
Reference: 29 seconds is a fun number :)
Candidate: i don't understand this matters, this matters, this matters, that this is right...
Reference: i think you can remote this jump to next line
Candidate: should this be <UNK>
Reference: we already have a function named handlenavintent. could those functions be combined? they seem to do pretty similar things.
Candidate: why do we need the <UNK> here?
Reference: change to getclusterdao()
Candidate: if <UNK> != null) { return <UNK> } { return false; }
Reference: shouldn't this be a field so we don't have to create one each time
Candidate: shouldn't this be the field so we don't see the about happening.
Reference: shouldn't it be !number.class.isassignablefrom(clazz)?
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK> set?
Reference: we should only do this for direct exchanges. rabbit seems to be forgiving if you set a routing key for, say, a fanout exchange, but maybe they will tighten it
Candidate: please use <UNK>
Reference: i'm wondering whether we should use general_important_channel_id for both site creation success and failure?
Candidate: should this be <UNK>
Reference: iirc, since commonmodel#signout was removed, this listener will never be called, so we can remove it.
Candidate: i don't understand why, but it matters, but this is be the to the the <UNK> the <UNK> the <UNK> is the
Reference: core.title
Candidate: why do we need the <UNK> here?
Reference: h-how did this happen?? the project setting's save actions are supposed to add brackets to all 'if' clauses automatically...
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: i guess you mean: java return default_encoding;
Candidate: i don't think we need to trim the entries?
Reference: <code> client.getnamespacewatchermap().getnamespacewatcher(watcher)</code> will add a namespace watcher record if it doesn't exist. that doesn't seem right for removal. a new method in namespacewatchermap is probably needed.
Candidate: if you != direction.incoming) { null) { return <UNK> }
Reference: the cannotserializetransactionexception and deadlockloserdataaccessexception are both inheritors of the pessimisticlockingfailureexception, so maybe we can go the way for their super class?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: +1, i generally prefer this style so that all occurrences match.
Candidate: why do we need to use the <UNK> here?
Reference: string.valueof is unnecessary. so the following should suffice: "operatorid=" + getoperatorid()
Candidate: if (column != 0)" <UNK> && 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)" 0)"
Reference: this should be a private method, it doesn't need any docs.
Candidate: i don't understand this matters, but why do we need to <UNK> the <UNK>
Reference: the partial field is only used to do system allocations. now that you introduce usesystemmemorypool, is partial still needed?
Candidate: why do we need to use <UNK> here?
Reference: framework.getservice(retentionmanager.class) can be extract outer the for loop
Candidate: <UNK> *= 2;
Reference: don't do the string formatting yourself, that's done by the logging framework, i.e., change this to log.trace("sending delete request: {}", queryurl)
Candidate: we should need to do we need need to print the exception here?
Reference: it could be renamed to reflect that it sets blocksize.
Candidate: can we be simplified to:  <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: maybe move this up and use the reference to avoid the repeat calls of  ((checkbox) view.findviewbyid(r.id.layercheckbox))... below. i know it's not your code, but would make it much more
Candidate: can you rename the <UNK> to <UNK> <UNK>
Reference: you probably want to keep this? do change the connectorname though, seems like a copy-paste error
Candidate: the syserr should be be <UNK>
Reference: why you throw plain exception ?
Candidate: why do you need to evict the sizes of the sizes of the <UNK>
Reference: should we move this outside of the if block to make sure it will always be set to false when stopping the transport?
Candidate: this should be the <UNK>
Reference: name1 must be final here
Candidate: we should throw an exception if (throwable { throw new <UNK> { throw <UNK> } (throwable { throw new <UNK> { throw new <UNK> { throw new <UNK> { throw
Reference: i think method overloading is a better approach rather than checking for nulls. wdyt?
Candidate: why do we need to <UNK> here?
Reference: lets do this with a traditional try/finally as it is more obvious what is going on. if there were more things going on in this code (e.g., loops, conditional code,
Candidate: what happens if the overflows?
Reference: i'd rather have the original exception propagate rather than be logged; just drop this catch clause.
Candidate: <UNK> *= 2;
Reference: its funny to read return notsanitized(...) when the method should return a sanitizedtext instance. maybe we should rename this factorymethod? also using the classe name would improve readability:  java
Candidate: this should be <UNK>
Reference: you should make sure all the apis have been called
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: why does it check for platform here but not in other places where this is used?
Candidate: <UNK> *= 2;
Reference: response is not closed
Candidate: ![major](<link_0> 'severity: major') throw exception instead of "thread.sleep()". [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2>
Reference: why logging at trace level?
Candidate: do we need to the scheduler here?
Reference: rather check the flag outside the loop
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: trailing whitespace. you can set eclipse's save action to remove all trailing white spaces since we might not be able to detect all of those manually.
Candidate: <UNK> *= 2;
Reference: since the body of the for loop won't be executed if the collection is empty, you could eliminate the collectionutils.isnotempty check. also, you could use objectutils.isnotnull for the null check.
Candidate: should we be the <UNK> here?
Reference: must be uppercase, too? or would we also be happy with lowercase input?
Candidate: rename <UNK>
Reference: i noticed that you added a maxlength to the vinedefinitioncomponent but it's not used anywhere. this 20 is the vine's length so replacing it with maxlength will implement it.
Candidate: why do we need the <UNK> here?
Reference: check item and expectedtype compatibility?
Candidate: i don't think this is be the the the <UNK> is the
Reference: i still think this should be context parameter.
Candidate: should this be <UNK>
Reference: shouldcontinue = (done != total)
Candidate: what happens if the is is invalid?
Reference: i don't think you need transaction here
Candidate: i don't understand this matters, if we matters, but you don't need why, but you don't need to do we need need to check the <UNK>
Reference: please add at least one project
Candidate: why do we need the <UNK> here?
Reference: some issues with mixed tabs and spaces? please configure your ide project for spaces only.
Candidate: why do we need this?
Reference: should we create a constant for the value 10 and use it here and when creating the insert string?
Candidate: why do we need need to the <UNK> here?
Reference: can we avoid multiple return paths especially inside nested loops?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: @tmarzeion i would probably extract this to separate method e.g. loaddiagnosis() and call it inside start(). the loaddiagnosis method can be reused later
Candidate: should we throw an exception instead of <UNK>
Reference: line 307, using as h is inconsistent with line 291 where the as is removed
Candidate: rename <UNK> <UNK>
Reference: please change to validate(diskvalidator.isusingscsireservationvalid(getvm(), lundi sk)) to align with the rest of the method, no need for that variable.
Candidate: this should be the cheapest check)
Reference: else is not needed if you return
Candidate: can be simplified to: if (state != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return false; }
Reference: nit: space before "time"?
Candidate: can we use the builder here?
Reference: debug/trace/remove?
Candidate: this should be the <UNK> <UNK>
Reference: suggestion - replace it with ternary-if: setspice(pluginspice.detectbrowserplugin() ? ...) , it will be shorter and more readable
Candidate: why do we need the <UNK> here?
Reference: just a note here. we have an unchecked cast from java.io.serializable to java.util.hashset<java.lang.integer> that could lead to aclasscastexception if at runtime the type cannot be found. in these situations, a
Candidate: oops do we need need .show() here.
Reference: suggestion if (error != null) {
Candidate: the syserr should be the
Reference: could be simplified to return s != null && s >= seqno;
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: same as above - old version was more readable in my opinion because now the condition contains more parenthesis, even wrapping multiple lines.
Candidate: why do we need need to evict the <UNK> here?
Reference: doesn't look like this is used
Candidate: fbot can be the fixture.
Reference: would make more sense to me for latch to always be incremented and decremented, when it reaches zero the event is fired.
Candidate: the syserr should be be the
Reference: might want to encapsulate all of this into one object.
Candidate: why do we need the getconnection here?
Reference: you should not call the parent impl
Candidate: typo: 49
Reference: since we're synchronizing this call we could also check capacity first, instead of instantiating the messageidtracker and throwing it away if the map is already full?
Candidate: should this be be an enum here?
Reference: maybe also check name is non null ?
Candidate: should we be schedule() here?
Reference: let's make these also verify the error message.
Candidate: why do we need to mock <UNK> here?
Reference: nit: "phoenixttltool" here and few more messages below
Candidate: should we be the <UNK> here?
Reference: this(new symbol(symbolname), estimate)
Candidate: this should be <UNK>
Reference: suggestion accessexecutionvertex[] taskvertices = ejv.gettaskvertices();  could we do this renaming to improve the readability since we're dealing with different types of vertices in this code segment?
Candidate: can we use the <UNK> property?
Reference: we do not create the extension, we can do it lazily so defer the instanciation to the registy.get*()
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should be changed to the expressionutils.createstandardevaluationcontext(beanfactory) - creates standardevaluationcontext if there is no one in the ctx.
Candidate: use <UNK> <UNK> <UNK>
Reference: same here - let's revert and move the logic to reliablechannel.
Candidate: i don't think we need to check for the situation.
Reference: instead of just casting and letting the function throw an error (which most users won't know to catch), how about prefacing the cast and returning null on error? requiring users
Candidate: this should be <UNK>
Reference: would an warning message be appropriate where in the case the svg is not found ?
Candidate: why do we need the <UNK> here?
Reference: i'll reshuffle things around a bit - this is a bit strange to keep on the api because dedupfilterholder is private
Candidate: please use <UNK>
Reference: i think we can just do corporatecardsurchargecalculator.gettotalamountfor(charge): it will return the correct total if there isn't a surcharge
Candidate: <UNK> *= 2;
Reference: this.coll = new hashset<>(); this.coll.addall(input) -> this.coll = new hashset<>(input);
Candidate: should be be <UNK>
Reference: error message parameter "name" seems to have been lost in the conversion
Candidate: this should be the <UNK>
Reference: can we update the old code with the exception logging convention we are following now. log.error("exception while retrieving home community id: " + ex.getlocalizedmessage(), ex);
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: it is better to supplement the similar check to avoid this action is called multiple times in practice. maybe we can check the available exclusive buffers should be 0 in
Candidate: why do we need to check the <UNK> <UNK>
Reference: not sure this actually throws a malformedurlexception any more. as it is a test, why not just use exception, the test will fail anyway if any exception propagates out.
Candidate: please remove the <UNK>
Reference: is it possible for this to be null?
Candidate: should we use the exception here?
Reference: keys like "attempt" should be defined as constants somewhere
Candidate: do we want to catch interruptedexception here
Reference: use fail again?
Candidate: i don't understand this matters, this matters, if we matters, but we don't want to do we need to close the <UNK> (after <UNK>
Reference: @pedrofvteixeira , enc is not being used in the decode call. is that on purpose ?
Candidate: should we throw an exception here?
Reference: i don't think you should make this change. using an optional as a parameter to a method/ctor is problematic for many reasons, one of those reasons being the fact that
Candidate: should be be <UNK>
Reference: it would be better if you could pass along this data, setting/retrieving a value in sharedprefences is a bit surprising
Candidate: should this be <UNK>
Reference: this one needs to remain unchanged, if only so we know that api is working.
Candidate: <UNK> *= 2;
Reference: here that should be possible to initialize datagramwriter with a size ?
Candidate: this should be the <UNK>
Reference: lets replace with return new mkdocs(this.dir, this.name.replaceall("[^a-z0-9]", "/"));
Candidate: this should be <UNK>
Reference: looks like updatedassignment = topicschanged as it's used currently? in theory it's unnecessary, but at least it can be used more clearly? edit: i see what it's doing, nvm
Candidate: do we need to catch <UNK> here
Reference: this needs to be synchronized. i got a java.util.concurrentmodificationexception when closing the view while right after opening a trace.
Candidate: why do we need to call <UNK> here?
Reference: this is usually an anti-pattern, since we will crash below with npe if path was somehow null.
Candidate: why do we need to here?
Reference: do not use equals here - reference equality is what you need here.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this could also use try-with-resources.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should be response instead of method.
Candidate: should we throw an exception if <UNK> is null) { throw <UNK> }
Reference: when this stop command is run, have all the ipservers that use the tethering coordinator already been stopped? if not, and they are still running - is it safe to
Candidate: this should be the <UNK>
Reference: since its implementation is just one line, why not inline it?
Candidate: why do we need to mock here?
Reference: does not distinct return null or false if only one side of the op is null?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this job is currently configured to have unique-by-entity & other constraints. you can see that by checking the old jobs that either 1) extend uniquebyentityjob, or 2) explicitly define the
Candidate: this should be <UNK>
Reference: same thing as above. we can create objectmapper once and use it over and over.
Candidate: should we use the exception here?
Reference: how about usertypes().contains(metrictype) ? this stream+filter+findany construct looks a bit convoluted in this case.
Candidate: rename <UNK> <UNK> <UNK>
Reference: try / finally here too
Candidate: should we be the <UNK> here?
Reference: in my opinion the target should be a member of the processinginstruction and not be part of the textual content. it is equivalent to the element name. there is also
Candidate: i don't think we need to do we need to check the the in the <UNK>
Reference: this is a candidate for a faster alignment detection (pos & (bit_char-1)) != 0 the compiler won't be able to optimize because he can't proves 'pos' is only a positive
Candidate: can be simplified to: java return <UNK> != null) ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : null; }
Reference: this change is not needed. please restore changes made to databaseshardmanager.java.
Candidate: can we use snapshotid in the constructor?
Reference: rename to operation
Candidate: the syserr should be be <UNK>
Reference: should we use system properties instead of environment variables? or is there no easy way for the pct to specify system properties? i would use bourneshellscript.class.getname() + ". skip_binary_generation" as
Candidate: should we be the <UNK> here?
Reference: i'm not sure how frequently people use a different uuid generation scheme than the default uuid4, but it might make sense to compare the sample rate to random.nextfloat instead. if
Candidate: why do we need to check the <UNK> <UNK> <UNK> ?
Reference: it is possible that containerid is null here as well. it will be better to handle containers with externalid null in this loop only.
Candidate: can you move this into a separate method?
Reference: file separators need to be correct in tests too, in case of windows
Candidate: nit: line
Reference: can't we use the same line without exceeding the row width?
Candidate: you should need to use <UNK> <UNK>
Reference: the signatures here are good, but i am wondering where the work of actually creating the object in fedora is moving to? it could be directly in these methods or
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: super() can be removed
Candidate: super() should be spared
Reference: @webron is this correct? that the _wrapped_ value would take the name items and the xml property itself would be item? i believe it's the opposite, but i've been staying
Candidate: why do we need the <UNK> here?
Reference: instead of using boolean.valueof(boolean).tostring(), just use string.valueof(boolean)
Candidate: why do we need the <UNK> here?
Reference: let's only use dsfdebugoptions... as mentioned above
Candidate: what happens if the is is the
Reference: could be great to return an empty map instead of null
Candidate: the syserr should be the
Reference: are we hiding a bug here?
Candidate: can you use the getconnection for the <UNK> generation?
Reference: this should be a test error.
Candidate: 60000 should be represented
Reference: use a more complex path in the test to also verify the fact that the entire path is not encoded. we need to verify that in the tests too.
Candidate: should we use <UNK> here?
Reference: this should be done also when not using a sitenode. any reason not to do this in authenticate instead?
Candidate: why do we need to use <UNK> here?
Reference: these three lines are redundant with lines 291-293 below
Candidate: should we use <UNK> <UNK> <UNK> <UNK>
Reference: extract method
Candidate: unused line.
Reference: no provisioning will happen as long as there are things currently provisioning? do we want to be able to still provision here, up to a limit?
Candidate: should we use the payload?
Reference: return executecommand.execute(action, resultcallback);
Candidate: this should be the <UNK>
Reference: i am not sure about synchronisation around this variable. it is the first time i am looking at its lifecycle and it seems to me that we are not doing
Candidate: why do we need to check for the <UNK> <UNK>
Reference: increase to debug-level
Candidate: do we need need to do the "?" here?
Reference: did you mean to leave in this em.remove()?
Candidate: should we be the <UNK> here?
Reference: i think this should be left in - when one arg checker is needed, i would usually check everything
Candidate: why do we need to use the <UNK> here?
Reference: might be worth creating a function selectbutton(view button) to set the typeface and the color?
Candidate: should this be <UNK> <UNK>
Reference: better to use files.createdirectories
Candidate: why do we need this?
Reference: replicas -> replica
Candidate: this should be the line:  private <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: we import it already, no need for the java.nio part.
Candidate: please use <UNK>
Reference: the call to this() isn't needed.
Candidate: should be be <UNK>
Reference: this test case is actually using an empty string instead of a null string. should it be updated to use a null string, or should this test method just be
Candidate: this should be <UNK>
Reference: please just define on the next row.
Candidate: please use <UNK>
Reference: use atomicreference<realmasynctask> instead. it is much more readable imo
Candidate: i don't think we need to do we need need to the the to the getcredentials
Reference: use (swt.h_scroll | swt.v_scroll) instead of swt.none style when constructing the table
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: the term 'processing' is rather ambiguous in the case of scheduling. i would recommend using 'triggering' here.
Candidate: why do we need to the <UNK> here?
Reference: the two last checks can and should be squashed into one check - returnvalue.getvdserror() != vdcbllerrors.spmstatuserror, i actually prefer !vdcbllerrors.spmstatuserror.equals(returnvalue.getvdserror()) the first check can be removed, but that's up to
Candidate: why do we need to check here?
Reference: @omkreddy can you make similar changes here as well?. i had missed this in the previous review.
Candidate: why do we need to check the <UNK> here?
Reference: if it is an error, it should fail and the process should not continue. what the customers/support can do with such error/warn logs ? the purpose is only to help
Candidate: do we need need to use the <UNK> <UNK>
Reference: i have a preference for single assignment for arguments. this is just a nicety.
Candidate: why do we need this?
Reference: it's not obvious that 102l is the same as 0b1100110l...
Candidate: why do we need the <UNK> here?
Reference: shouldn't this be called by private constructor? what is the meaning of calling it twice on singleton?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: let's remove that line as it's not part of the improvements
Candidate: why do we need need to the <UNK> here?
Reference: why not implementing a template method subscribe that calls an abstract method which has to be overwritten
Candidate: why do we need to use the label?
Reference: you need to use arrays.tostring(this.getdnsservers()) here.
Candidate: should this be be specific?
Reference: this check should be the first thing we check. need to define a boolean isdiskimage = disk.getdiskstoragetype() == diskstoragetype.image
Candidate: if the cda is not preserved. disk, && <UNK> { return; } } additionally, the rest of the super.candoaction() is 0)"
Reference: we know that values produces at most single row here, therefore project/filter/mark distinct is not needed
Candidate: rename <UNK> <UNK> <UNK>
Reference: i do not like that we do not pass segment to dosnapshotindexes .
Candidate: the syserr should be be the
Reference: fail
Candidate: is there is empty?
Reference: i would not include this message. usually an interrupted exception happens when we are killing the thread, which should only happen in shutdown and in that case the error is
Candidate: why do we need the <UNK> here?
Reference: could you change this to list<partitionid>?
Candidate: rename to <UNK> <UNK> <UNK>
Reference: this if statement could possibly be refactored to if (valid && doesaccountglobalhaveaccountrestrictioncodeandnosubfundgroupcode()) { valid = isthenewrestrictioncodevalidforeachaccount() }
Candidate: should we be the <UNK> here?
Reference: why do we only remove the task if it was active now?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: isempty
Candidate: why do we need to here?
Reference: instead of calling init explicitly here, you could just call this() to call the default constructor zkconfig.
Candidate: what happens if the is is the
Reference: use an overridable getoperationtimeout() method instead
Candidate: @exper0 use <UNK>
Reference: i don't think this will work because the returned and parsed value is not used. i expected: this.clientauthenticationmethod = clientauthenticationmethod.parse(auth);
Candidate: should this be <UNK>
Reference: shouldn't metadata be the default?
Candidate: do we need need to bail again?
Reference: i think it will be better to have separate property for ability to tag/untag sessions.
Candidate: please use <UNK> <UNK>
Reference: pk -1 ?
Candidate: why do we need the <UNK> here?
Reference: @gknapowski it should most likely be route.issecure() && !route.istunnelled(), that is a direct (non-tunneled) connection to the proxy can be considered secure if the route is considered secure.
Candidate: do we need need to use <UNK> anywhere else?
Reference: mitsearchadapter should be instantiated with an array of size 0 if set == null
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: minor: i would suggest this:  if (domainname != null) { domainname = domainname.trim(); if (!domainname.isempty() && domainname.charat(0) != '.') { ... } ... }
Candidate: can we use <UNK> <UNK>
Reference: i don't really know how this is used, but we might want to do something more like.  final outboundsocketbinding binding = outboundsocketbindingsupplier.get(); if(outboundsocketbindingsupplier.get() != null) { senderconfiguration.withagenthost(binding.getunresolveddestinationaddress()) .withagentport(binding.getdestinationport()); }
Candidate: this should be the <UNK>
Reference: please add curly braces to all if statements.
Candidate: i don't think we need to do the <UNK> part, but we need to do the <UNK> part, but we should need to the <UNK>
Reference: should probably change this method to query initially for matching ids then pull the status records by id. if not you'll hit the error that i did.
Candidate: why do we need to use <UNK> here?
Reference: why is this needed? if this is done because of errors, then the problem should be fixed where the update is called where it shouldn't be. <bug
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: logger.error ? logger.debug ?
Candidate: ![major](<link_0> 'severity: major') reduce this complexity of the cognitive complexity of this method. [![rule](<link_1>](<link_2>
Reference: realm should have an overloaded method getclients(this), that just calls getclients(this, null, null). this approach will result in extra query to get the client counts first, to then list all
Candidate: should this be null?
Reference: don't delegate to the value processor. just do this yourself.
Candidate: can be simplified to return <UNK> ?
Reference: here we also need a default prefix for asyncretry.
Candidate: should this be <UNK>
Reference: you changed lch.containsall(tsch) to tsch.containsall(lch)
Candidate: you should need to check for the <UNK>
Reference: i think runtime exception is not the best choice. what about filenotfoundexcpetion ?
Candidate: this should be setemptyelement().
Reference: this will break the logicallinenumberrulercolumn in egit introduced in <link_0> . besides, it doesn't update the fcachednumberoflines. just call computenumberofdigits() instead?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: do we need to do this if updatedescriptor is set to false?
Candidate: do we need to check the <UNK>
Reference: 117 can be moved to before 59. this line only needs to be done once and shouldn't have anything to do with cancelled/completed. remove 116.
Candidate: why do we need need to here?
Reference: unused variable
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: why uk?
Candidate: why do we need to use <UNK> here?
Reference: add our good ol' friend remove() :wink: (current would be correct for scala.collection.iterator :-)) // does not override abstract method remove() in java.util.iterator
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: with these usages in addition to those in [regionwsserver](<link_0> this queryresult initialization is getting very redundant. could this small code block be extracted to a method in the parent class?
Candidate: why do we need need to the <UNK> here?
Reference: i think this should be else if (clusterpermitted); otherwise, you'll unintentionally increase the number of available permits.
Candidate: do we need need to be the here?
Reference: actually you don't have to copy bytebuffer to an byte array, crc32 has a method to update crc with bytebuffer directly and it doesn't matter if it's heap bytebuffer or
Candidate: why do we need to check the <UNK> here?
Reference: you should split existing rpc docs for this branch (i believe its second doc) and add version with new param onlysponsored. also it should be added to openapi, but i'm
Candidate: why do we need to check on the username?
Reference: unecessary runtimeexception
Candidate: please import?
Reference: looks like this trace line will cause us to call resolveupstreamdns twice rather than one and storing in a variable for logging.
Candidate: i don't think we need snapshotid in the
Reference: is it safe if we moved db operation outside of synchronized block and let the database handle concurrency?
Candidate: log4j is log4j { <UNK> }
Reference: why does the exception have to be caught?
Candidate: should we catch (throwable e) { throw exception } catch (throwable e) { thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> e) { throw ioexception }
Reference: static import
Candidate: can be replaced with <UNK> .map(s -> <UNK> <UNK> -> <UNK> <UNK> <UNK> <UNK>
Reference: you are comparing floating-point values with '=='. that may not work all of the time. in this case, you are better off using as basevector3f.equals() seems to have some extra
Candidate: if (state != null && <UNK> { <UNK> }
Reference: could we assert the expected fetchedrecords?
Candidate: please use <UNK>
Reference: system.identityhashcode ?
Candidate: please use setemptyelement().
Reference: hashostmachines() can be used instead.
Candidate: why do we need to here?
Reference: i see the code here and below is only used to generate the big json test data but you can't call it from tests since it uses the same json
Candidate: i don't think we need to do we need need to use the exception in the
Reference: why concatenate in the string below?
Candidate: the syserr should be be the
Reference: use sprint.getattributevalue(atsattributetypes.startdate). shouldn't need to cast. same for enddate
Candidate: why do we need the <UNK> here?
Reference: removing this line has only one impact on unit tests: we don't raise an issue anymore on:  def raise_builtin_function_python2(): raise super2() # noncompliant {{change this code so that it
Candidate: this should be (throwable <UNK> { return; } (throwable e) { return; }
Reference: long line
Candidate: why do we need to <UNK> eq here?
Reference: you could fetch config.isfactoryresetondeletion() only once from the config and hold it in a variable.
Candidate: the syserr should be be the <UNK>
Reference: nit-pick: typecast could be inlined here, avoiding explicit "original" variable declaration, since it's only needed here.
Candidate: please import?
Reference: absolute show stopper.
Candidate: the syserr should be be the
Reference: @cyberone can we revise this test without using random string? i don't see the need for it here.
Candidate: should we be the <UNK> here? if we { return; } } }
Reference: shouldn't this be developererror ? when you stoppresenting before calling startpresenting ?
Candidate: this should be the <UNK>
Reference: minor: logger.debug?
Candidate: the syserr should be <UNK>
Reference: suggestedfixes.qualifytype on "com.palantir.logsafe.unsafearg" will add the import automagically, or fully qualify the type if there happens to be a foo.bar.unsafearg already imported. we can append ".of" to the result.
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK>
Reference: lets create printlasterrors in the kerrnal like osuser methods. log will not be needed.
Candidate: why do we need to override the <UNK> here?
Reference: sets.intersection(subtypes1, subtypes2)
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: i think this is going in the right direction, but all these checks should be happening on setpemfile(path path). the idea is that we don't ever want an exportconfiguration instance
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: it would be better to allow to pass the (java.util.function.)consumer (or let this notify the event), to avoid the unnecessary collection/garbage.
Candidate: can be simplified to: <UNK> <UNK> = <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK>
Reference: you should return the error message either via an exception or just a simple return instead of returning a responseentity. responseentity should be constructed in the controller
Candidate: do we need to catch the exception block?
Reference: if this fails, should we try to move the backup back to current (provided the first rename passed)?
Candidate: i don't understand this matters, this matters, this matters, but you don't need to use the anywhere, but it will be easier to utilize the <UNK> <UNK>
Reference: deprecate setconnectionid and instead of setasstring call super.setid method to avoid duplication
Candidate: why do we need to call <UNK> <UNK> <UNK>
Reference: why do we need operationtimeout as ctor arg. we can include this in the accept*session apis.
Candidate: why do we need to permission?
Reference: probably could make these strings public static final vars
Candidate: can we move this into a separate method?
Reference: please use consistent indentation when adding new code. the changing indentation within this single method makes the pull request more difficult to read. most integrated development environments (netbeans, intellij, visual
Candidate: i don't think we need to use the <UNK>
Reference: whitespace  tile.execute( this, tilecanvasviewgroup.getbitmapcleanup() );
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: how are we sure that the operation won't complete before the router is closed?
Candidate: why do we need the <UNK> here?
Reference: even if the caller of the method is acquiring the lock, you should also acquire it in here to make it clear you are. doing a wait() on an object
Candidate: why do we need the <UNK> here?
Reference: this condition, negated, can be added to the if above: if(!p.isopen || projectlocation == null || !repositorypath.isprefixof(projectlocation)) this saves us the more expensive io check for the file.exists()
Candidate: what is this mean?
Reference: i'm not sure since it's a client setup issue, not a server-side issue. i would re-throw generalsecurityexception (it changes the open api but at least it's not ambiguous).
Candidate: why do we need to use <UNK> here?
Reference: i just wanted to verify that utf-8 is working end-to-end, can we do this test with any other entity, like a survey or a study?
Candidate: please remove the method("post")
Reference: spaces
Candidate: nitpicking: can be replaced with <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> h != 0) { <UNK> = <UNK> }
Reference: would it be a bit simple we maintain this map instead of a normal hashmap in this class ?
Candidate: this should be the <UNK>
Reference: maybe another try with a multiple string[] ?
Candidate: should we use the exception here instead of the try-catch-fail try-catch-fail
Reference: it would be good to assert that the password is not null at the beginning here
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i think we should do it the other way around - first process the status and then the devices 1. because the status is more important 2. because if that
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: correct me if i'm wrong, but here you just setting the original body and status code, headers are lost. or it is a desired behaviour? and what do you think,
Candidate: why do we need to check for the <UNK> <UNK>
Reference: use a variable for mit.methodselect() instead of calling it 3 times.
Candidate: this should be the <UNK>
Reference: this can be condensed: _preservesourceeventtimestamp = boolean.parseboolean(datastreamtask.getdatastreams().get(0).getmetadata().get(datastreammetadataconstants. preserve_event_source_timestamp));
Candidate: we should need to evict the <UNK> to the the <UNK> <UNK>
Reference: why is this synchronized? it looks like it might is because there is a concern about multi-threaded access to cachemap. if that is the case, then you *must* synchronize all
Candidate: why do we need the <UNK> here?
Reference: is this guy stateless? there should be a static instance() method on it.
Candidate: why do we need the <UNK> here?
Reference: you could totes put this all in one line \o/
Candidate: why do we need to use the <UNK> here?
Reference: i think you can do something like  return arrays.aslist (roleapi.loadrolebykey(role.administrator), roleapi.loadcmsadminrole()) .stream().filter(role -> null != role).map(role::getid).collect(collectionsutils.toimmutablelist());
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: hmm... if the tile is not there do we need to init it to remove a tile that won't be inside it? :-)
Candidate: this fail()?
Reference: do not call dialect.getrowconverter during runtime.
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { <UNK> } } } } }
Reference: you're returning the wrong type here - you should return createeckeyoptions
Candidate: storagetype should be storagetype operand != null && <UNK> == null) { <UNK> < <UNK> && <UNK> { return false; }
Reference: it is mean that you have one puppet instance per each region. is it correct? is it the same for chef?
Candidate: should we be the specific?
Reference: in case zoneid is null, maybe put "system".equalsignorecase(zoneid)
Candidate: should we be the <UNK> <UNK>
Reference: ditto about isdebugenabled()
Candidate: typically, this should be invoked in <UNK> typically, so we don't need to throw an exception if it is null.
Reference: you can use kryocloneutils
Candidate: this fail()?
Reference: please use parentheses when combining || and && to improve readability
Candidate: why do we need to check the <UNK> <UNK>
Reference: it may be confusing if we do this when user is waiting in the confirmation pop up for started volume. may be start all volumes(with and without force)after the confirmation
Candidate: i don't think we need to call the <UNK> to the
Reference: > verschwindungszauber this doesn't feel like the correct term.
Candidate: what is this happen if the is is the <UNK> <UNK>
Reference: likely, getclienttags
Candidate: <UNK> *= 2;
Reference: could be simplified to:  if (site == null) { return new standardusernamelistboxmodel().includeemptyvalue(); } else { url url = site.geturl(); ... }
Candidate: ![major](<link_0> 'severity: major') remove this method parameter(s) [![rule](<link_1>](<link_2>
Reference: this hardcoded list sucks. maybe a meta-annotation?  java @sqlobjectannotation public @interface sqlquery { ... }
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: !inputschemas.isempty()  - this is same check as inputschemasavailable right?
Candidate: shouldnt this be used?
Reference: this function can be made static if you call getresources()... on the a argument
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: i might rewrite this as  java import javax.ws.rs.core.response.status; ... chain.dofilter(request, resp); status status = status.fromstatuscode(resp.getstatus()); if (status.getfamily() == status.family.successful) { eventsinkprovider.get().sendevents(); } else { log.debug("request failed, skipping event sending,
Candidate: should we be the exception here?
Reference: maybe rename to something like: suggestion var unresolvedwindow = maybewindow.get(); final window resolvedwindow;  to clarify the difference between overwindow and window
Candidate: i don't think we need to check if the is is the
Reference: please make enable() and disable() synchronized and remove the shortcuts.
Candidate: should this be <UNK>
Reference: @happy-neko let's call this from, [avoid compound names](<link_0>
Candidate: why do we need to use the <UNK> here?
Reference: i assume we should have the same behavior as exportvmcommand. do we still need this?
Candidate: if oldvalue != null) { getparameters().getstoragedomainid() groupname = <UNK> } } }
Reference: can be simplified with lambda evt -> evt.getkey() % 2 == 0
Candidate: do we need to <UNK> the <UNK> <UNK> host?
Reference: try mono.when(sender.send(message), sender.send(message))
Candidate: the syserr should be replaced with <UNK> <UNK>
Reference: rename to  final container container
Candidate: can we use the getconnection here?
Reference: please keep this method simple by moving added logic in separate method
Candidate: we should need to use the <UNK> <UNK>
Reference: please use injection to check env variables.
Candidate: use <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: is it on purpose to not give exception to webresourcenotfoundexception ?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: really it is not a thread safe way to implement a singleton. here explain my point: <link_0>
Candidate: this should be <UNK>
Reference: these exceptions can go into the method signature i think. removes some clutter.
Candidate: why do we need to mock here?
Reference: suggestion buffer.skipbyte(); // okpacket header  does this need to be checked to ensure it's 0x00 (or 0xfe for eof payload functioning as ok payload?) or can we just assume
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i don't understand why we check debug level here but log error,
Candidate: should we be <UNK> here?
Reference: i'd really avoid the habit of re-writing method parameter values. what about: if (ismaintab) { commonmodelprovider.get().addpluginmodel( searchprefix != null ? searchprefix : label, historytoken); }
Candidate: is this redundant?
Reference: please include the exception instance itself instead of just its message.
Candidate: should we be the <UNK> here?
Reference: add this to be consistent with the above
Candidate: s.a.
Reference: confused about java. should it be } else { (all on the same line)?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: with change i74e932d5eacd74dbf6b0dffcfc65ba3222a8250e this should become gettrackingbranch(), then this will also work if the tracked branch is a local one
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: there were no close calls in this method before. how did closing the file become the responsibility of this class now?
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: should this just be a runtimeexception? ofe indicates a client mistake of some form. server faults can be runtime exceptions which then get logged in the server.
Candidate: we should need to do we need need to the getcredentials to the getcredentials
Reference: what's the difference of this line? let's try to minimize the diff for reviewing.
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: don't do assignment to student but just return java return logic.getstudentforgoogleid(courseid, account.googleid);
Candidate: this is the getallregistrations() method will be removed accidentally.
Reference: do we really want an info here? you made it a debug elsewhere.
Candidate: you don't need to assert that has been been been tested in the
Reference: use computeifabsent?
Candidate: should we throw an exception?
Reference: what is the lifetime of the mathjaxbackroundrenderer object? in most cases the docdisplay returns a handlerregistration that needs to be manually deregistered (look for "releaseondismiss" for examples)
Candidate: the syserr should be the <UNK>
Reference: this seems to be used only in update()? given that it is much simplified let's put it inline within update() then, and let's remove this method.
Candidate: why do we need to use <UNK> here?
Reference: redundant parentheses
Candidate: check if <UNK> != null) { return false; }
Reference: this method can now be private.
Candidate: please move this method inside the method.
Reference: there is actually problem with this code. if server value is not set, we still want to use user value. web app handles this situation.
Candidate: i don't understand this matters, this matters, if you matters, this matters, but you don't need to do we need need to check the <UNK>
Reference: i would not use final here, the scope of the variable is relatively short. the final obstruct the reading more than it provide guidance.
Candidate: please use <UNK>
Reference: nit: inconsistent "should the space be at end or start of line" treatment.
Candidate: should we be the <UNK> here? if we { return; } } } }
Reference: i think this empty line is not needed.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: could you have a test on setting request id?
Candidate: why do we need to check the <UNK> here?
Reference: use query.setparameter and use termid.location_id.getid()  instead of appending to query string
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i wonder if there is anything else to assume about the completion. i'm just thinking about the forward compatibility, where they change it to "complete" or something completely different. perhaps
Candidate: if <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: we should lift the creation of the cassandrakeyvalueserviceimpl outside of the lambda, and just have the lambda call isinitialized. i believe the lambda is invoked many times when starting up,
Candidate: why do we need need to the <UNK> here?
Reference: collapse into one line
Candidate: the syserr should be be the
Reference: don't need the context null check here anymore.
Candidate: you can use the [] here
Reference: ![minor](<link_1> 'severity: minor') remove the literal "true" boolean value. [![rule](<link_0>](http://sonar-s4/coding_rules#rule_key=squid%3as1125)
Candidate: why do we need the <UNK> here?
Reference: this would not be needed when passing context with processstats.
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: move this to 244, then can get rid of extra if check
Candidate: should we be the <UNK> here?
Reference: i'm not quite sure about that code. shouldn't it be removed?
Candidate: i don't think we need to do we need need to check the getcredentials for the getcredentials
Reference: doesn't getinstanceresultsubset already apply numresults before returning? if there are i1-i20 instances and if starttime is i11 and numresults is 5, does this code return: i16 - i20 or i11
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: let's also rename this to contenttypeapi
Candidate: you don't need to use the <UNK>
Reference: this does not seem realistic? incrementfailurecount() returns the new failure count, so should not return 0, and certainly not anytimes()..?
Candidate: should we be the <UNK> here?
Reference: do i read correctly the only purpose of the map is to extract the value of this single entry 10 lines below?
Candidate: please remove the method("post")
Reference: maybe explode with a precondition check that capacity is larger than 0 here instead of exploding out of bounds [here](<link_0>
Candidate: i don't think we need to synchronize on the <UNK>
Reference: pls be consistent in the error messages, see line 94
Candidate: should we use the <UNK> here?
Reference: minor typo : normalized instead of normilized
Candidate: the syserr should be be <UNK>
Reference: the method is called "connect()" but the logs speak from "reconnect()" - it would expect to log about "connecting"
Candidate: i don't understand why, but it is be the if the is is the <UNK>
Reference: if there is no specific reason, we can make the constructor private.
Candidate: should we be the <UNK> request?
Reference: suggest naming this objectbindings
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: how do we know this call is for write? this message should be something like "key not found for id". right?
Candidate: why do we need to check here?
Reference: you can disable the action if volume is down
Candidate: why do we need the <UNK> here?
Reference: might be useful to include the actual length too.
Candidate: the syserr should be be the
Reference: this should happen in onunload
Candidate: we should need to use the in the <UNK>
Reference: should add more tab spacings to line 60.
Candidate: *= <UNK> *= 2;
Reference: nice to have test cases. are all the cases that we want to cover? did also fail with an empty directory, or a directory that contained an unparsable file (not
Candidate: why do we need need to mock <UNK> here?
Reference: why the batch here? it only contains at most one operation.
Candidate: this should be the <UNK>
Reference: can be invoked if the remove is successful.
Candidate: should we use the exception here instead of eating the exception?
Reference: optional: this would be more readable with an "import static"
Candidate: no! snap to the the other, we don't have the screenshots for this patch.
Reference: this method should have default visibility as it was before to avoid synthetic access.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: why do you need checknotnull() here? chartseries.getx() should be already @nonnull due to the package annotation.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: should we use a range annotation, something like @intrange(from=0)?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: maybe return ringtime.isbefore(currenttime) to avoid the if
Candidate: why do we need to brackets?
Reference: under what circumstances can you reach this line and have nextrec not be null? it's not modified outside of this method. making it a private field would make this a
Candidate: this should be the <UNK>
Reference: remove and call reinitializecharts on the viewer instead.
Candidate: if (actual != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK>
Reference: 'this' is unnecessary in this context
Candidate: this should be the <UNK>
Reference: should not log an error, that's usually reserved for possible issues/bugs in the code.
Candidate: the syserr should be injected, so we don't need to use the in the
Reference: this operation should not block, so probably do not need to run it in the sync commit executor. could probably just call commit failed and return a completed future.
Candidate: suggestion completionstage<void> asynccompletelocaltransaction(advancedcache<?, ?> cache, cache, long timeout) { { { { {
Reference: can this be mandateid please?
Candidate: use <UNK> <UNK>
Reference: not needed.
Candidate: this call super() to super()
Reference: why close?
Candidate: why do we need need to check for the <UNK> ?
Reference: is this a bug in schemautil.getqualfiedtablename? this seems like something we shouldn't have to repeat everywhere.
Candidate: can we use the <UNK> here?
Reference: i think it should rather be : '#?' instead of just '?'. i you use just '?' it will replace the query string if there is one (for example the
Candidate: should be be <UNK>
Reference: is this a good idea? all this will lead to is a null pointer exception later on. why not throw a descriptive exception here?
Candidate: can we use the <UNK> here?
Reference: remove this unnecessary arraylist instance.
Candidate: <UNK> *= 2;
Reference: guessing that after setting the axon_code_style.xml, these changes would be reverted.
Candidate: why do we need need to the <UNK> here?
Reference: there is no need to handle visibility in the action. this logic is the responsibility of usersession
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: there is already a runonuithread in this class that takes a runnable. as this callable does not do anything with the result i would recommend changing it and getting rid
Candidate: why do we need to do the "?" here?
Reference: why isn't normalized.tostring().isempty() working?
Candidate: @unyoungwax, this don't see pcapng compatibility.
Reference: log.trace("proceeding event " + event.getname()); ->  log.trace("proceeding event {}" , event::getname);
Candidate: do we need to make this a <UNK> <UNK> <UNK> and make it make sense to make it make sense to make it make sense to make sense to make
Reference: as @mswiderski said, this should be also replaced with the feature of assertj.
Candidate: @exper0 we don't need to throw an exception
Reference: don't see reason to have this if...else. it would be just enough to use: firstrecordexpression.getvalue(evaluationcontext, requestmessage, number.class)
Candidate: i don't understand this matters, if you want to do the tear down the <UNK>
Reference: okay so you already have this covered, no need for anchorpointtest above?
Candidate: please use <UNK> instead of runquery()
Reference: looks quite useless. since this is the viewer, any reason why you have the getviewer() method that basically returns this?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: [optional] i know that it is a kind of pattern to use the classundertest name for the tested instance. however, it doesn't always help with the readability. for me, this:
Candidate: should this be <UNK>
Reference: why did you wrap in a throwingrunnable?
Candidate: should we be the <UNK> here?
Reference: since this isn't actually what we're testing, maybe we don't need assertthat and can just call hasnext directly.
Candidate: you can use the fixture.
Reference: please use { } for all ifs suggestion if (!extract_contamination) { contamination = 1 - contamination; }
Candidate: why do we need to use the payload?
Reference: that should be tohtmlforperiodical. you mixed those two up.
Candidate: this should be the <UNK>
Reference: new adf should not be hard-coded but should come from the string resources. e.g. getresources().getstring(r.string.default_adf_name)
Candidate: please use <UNK> <UNK> <UNK>
Reference: interesting! wonder why you calculate mvbssize in two steps rather than one?
Candidate: why do we need the <UNK> properties?
Reference: i'm not sure we need a public getter for this, since this should be used internally only.
Candidate: this should be <UNK>
Reference: too long
Candidate: isempty
Reference: suggestion return !jenkins.get().getdisabledadministrativemonitors().contains(id);
Candidate: this should be <UNK>
Reference: after overriding equals() and hashcode(), could you write a test to verify they work well? by using equalverifier, you can look for many example of that usage in james project!
Candidate: please use object.equals <UNK> == <UNK> && (count == 0) { return false; }
Reference: this shouldn't be required any longer i think.
Candidate: should we be the <UNK> here?
Reference: should this be consistent with line 40 above (getint vs getlong)?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: no logging necessary in the tests imo
Candidate: why do we need the <UNK> here?
Reference: should this be synchronized?
Candidate: why do we need to synchronize on the lock ?
Reference: why do you want to do this if you already have a hardcoded string in the .ui file?
Candidate: if we is the software <UNK> but i don't think we need to check if the is the software <UNK>
Reference: i'm a fan of breaking lambdas into method refs: .map(annotatedelement::getannotations) .flatmap(stream::of)
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: cache the value of getmodel().getobject(). i suppose, it may be expensive to calculate in some cases.
Candidate: the syserr should be be <UNK>
Reference: could this be protected as well?
Candidate: why do we need to use the <UNK> here?
Reference: consider using the validateprimarylanguage for testing the results, rather than converting them to lists and then doing the comparison.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: we don't do this. please replace with a proper log statement if you feel it necessary
Candidate: why do we need to here?
Reference: nit: better to call eligibleforload(currinterval, interval) for easier code maintenance.
Candidate: why do we need to use the <UNK> here?
Reference: why not returning a optional<string>?
Candidate: please use optional.ofnullable()
Reference: the above two cases are not errors.
Candidate: why do you want a <UNK> <UNK>
Reference: targetcontrolledpermanent needs to have nottarget set to true as it doesn't actually target anything.
Candidate: rename to <UNK>
Reference: rename it to just key please.
Candidate: can we use the <UNK> of the <UNK> <UNK>
Reference: please replace with: vmdevicedao dao = getdbfacade().getvmdevicedao();
Candidate: @unyoungwax, do you need to check for the <UNK>
Reference: sadly i am not at my working computer. i can do a push on monday if you prefer.
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: break;
Candidate: why do we need to check the <UNK> here?
Reference: check for null before using options.
Candidate: should this be <UNK>
Reference: i think the "while (true)" loop should be removed. i think it is a remnant of the trylock code. as it is now i don't see that it would ever
Candidate: use map<> <UNK>
Reference: i suppose i18n is needed here
Candidate: should we be the <UNK> here?
Reference: what do you think about enforcing an *exact* sdk version requirement, instead of "minimum"? i'm guessing that future sdk versions might have slightly different font rendering or other subtle differences
Candidate: this should be the <UNK>
Reference: this line is superfluous.
Candidate: rename to <UNK>
Reference: since you are passing this to the superclass constructor, why not have a superclass manage the lifecycle of this variable? cryptographyasyncclient can have a protected method getkeyid() to get this
Candidate: why do we need to permission?
Reference: putting noclassdeffounderror here can hide our own stupidity in other parts of this code :-( perhaps we should narrow the window for catching noclassdeffounderror to only the calls to testclass.getdeclaredmethods()
Candidate: i don't understand this matters, this matters, this matters, but you don't need to do we need need to do we need need to <UNK> the <UNK>
Reference: maybe add "&& entry.getvalue() instanceof integerdefinition"
Candidate: <UNK> instead? instead? instead? instead? instead? instead? instead? instead? instead? instead? instead?
Reference: as we talked before, i'm not sure if this should be left to high or the default medium... your quick test showed that it appears the difference in terms of
Candidate: why do we need the <UNK> here?
Reference: should be comparing sets instead of array comparison, as the order is not guaranteed.
Candidate: this should be the <UNK>
Reference: v -> versions? since in the else branch it is fully named.
Candidate: the syserr should be be the
Reference: why not use entitytype#getname()?
Candidate: why do we need to use the <UNK> here?
Reference: could you turn the resulttype in an if else case and if none matches do asstring?
Candidate: please use <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: this variable is not used; remove
Candidate: storagetype should be be the <UNK> storagetype storagetype is <UNK>
Reference: change variable name to something more descriptive.
Candidate: rename <UNK>
Reference: very minor but let's try to be consistent with the order of the method parameters.
Candidate: can we use the <UNK>
Reference: i would suggest getting layout manager from registration client, rather than construct zk layout manager directly.
Candidate: i don't think we need to evict the log machines should be connected to catch the exception, so we don't need to log the exception and throw an exception
Reference: would be nice to have a describe() here too.
Candidate: you don't need to use the <UNK> <UNK>
Reference: add final keyword? also other places when necessary.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: well spotted, this is confusing :)
Candidate: this should be setemptyelement().
Reference: nit: slight formatting improvement suggestion string dialogcontent = dialog.getcontext().getstring(r.string.confirm_deletion_message, " \"" + listname + "\"");
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: in combination with making configurationmetadata empty, we should also prevent this from be null
Candidate: i don't think we need to use the <UNK>
Reference: instead of adding 2 levels of callback, can you extract the for loop into a function and call it at onsuccess() and onfailure() below?
Candidate: do we need to rollback here?
Reference: do you need integer.tostring? this might work: hostname = "" + 0xff & hostaddress + "." + ...
Candidate: please use <UNK>
Reference: this((run<?,?>)owner, ...) would be simpler and safer for further class evolution down the line.
Candidate: please use <UNK> <UNK> <UNK>
Reference: the argumentcaptor isn't used any more so should be removed
Candidate: why do we need this?
Reference: i think it's better to use indexedpath.touri().tostring() since it's more likely to roundtrip correctly for non-file paths.
Candidate: can be replaced with <UNK> ?
Reference: why the casting?
Candidate: please use <UNK> <UNK> <UNK> 49
Reference: i do not understand why to punish yourself, make it simpler.  final kafkazkclient zkclient = createzkclient(zkurl) try { ... } finally { zkclient.close(); }
Candidate: we don't need to catch exception here and throw an exception
Reference: filter.getcomparisonoperator().getvalue() could be set to comparisonoperator.equals because it is the only supported operator. just the parameter not the string template placeholder.
Candidate: please use syserr
Reference: use a logger instead ;)
Candidate: i don't understand this matters, this matters, this matters, but this is the that the interfere on the origin of the <UNK>
Reference: suggestion // global stores are on every node. if we don't have the host info
Candidate: can we check isempty()?
Reference: what you should do here instead is to update the adapter's item list.  adapter.setitems(projectmanager.getinstance().getcurrentproject().getscenelist());  or  initializeadapter();  although the initializeadapter does more than that (would still work
Candidate: should we throw an exception?
Reference: since you're restricting this to 100 entries it's ok for now. still, i think we should consider using a better data structure for the lookup operations, like a hashmap. one
Candidate: i don't think we need to check if the is { return false; } else { if <UNK> { return false; }
Reference: no point in synchronizing entire getinstance() (read+write), you should be only synchronizing 'write' to instance
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: this sequence of database queries needs to be wrapped in a transaction.
Candidate: why do we need to use @test(expected = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: hardcoded string "id"
Candidate: this should be <UNK>
Reference: what band this refers to? gems certainly uses a few bands to select guide stars
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: what is the reason for calling trimtrailingspaces(codepoints) here?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if strictfilters becomes a set, this one can be simplified to:  java if (!criteria.isstrict() && !criteria.getstrictfilters().contains(filter)) {  and it avoids the creation of an arraylist every time this
Candidate: why do we need to use the payload?
Reference: nit - the indentation is wrong. it should align with "read" in the previous line
Candidate: please use the exception here instead of <UNK>
Reference: perhaps creating a visualeditorcontents class in contentpatterns would be appropriate for the constants you are using for ve
Candidate: what is going to be expected.
Reference: use extensiondefinedobject<iatsstateitemcore> instead of this class. this class should be deleted.
Candidate: we should need to use the exception here instead of an exception if <UNK> { throw new <UNK> { <UNK> }
Reference: i see why this was needed with the current api, but let's just change the api and reduce the complexity - add a t getdata() method on the payload class,
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: copy vf too
Candidate: this should be objects.isnull
Reference: use existing method arttovalidate.getmodtype().isdeleted()
Candidate: why do we need the <UNK> here?
Reference: this is wrong, should be entry.getvalue()
Candidate: please use <UNK> <UNK> <UNK>
Reference: this will require more http calls. i think it's better to use a single api to check this and get the server view below. that api should be able to
Candidate: what happens if the is is transactional, if you is transactional, if the is transactional, if we is transactional, it will not produce an exception if <UNK> is null?
Reference: prefer adding curly braces if more than one line is under an if statement.
Candidate: should be set?
Reference: this code now has a race condition. after checking if size > 0, dequeue could become empty before calling pop. there is a method called pollfirst that could be used
Candidate: if (state != null && <UNK> { return null; }
Reference: what about making line.tostring() return <sourcename>:<nr>?
Candidate: this should be <UNK>
Reference: make this "persist should have failed - exception should be thrown"
Candidate: should we be schedule() here?
Reference: should existingtypes be an immutableset?
Candidate: the syserr should be be <UNK>
Reference: shouldn't that be "noneof", rather than "allof"?
Candidate: i don't need to call <UNK> <UNK> <UNK>
Reference: just concat the whole thing, do not +=
Candidate: why do we need to check for the <UNK>
Reference: why do you need to remove this?
Candidate: why do we need need to be the <UNK>
Reference: being extra careful doesn't hurt but there is actually no need to check for null at this point. for simplicity's sake, i'd recommend removing the check as there is no
Candidate: should this be the <UNK>
Reference: minor, but the constructor in bulkoptions uses this.<field> for everything. would be good to make consistent.
Candidate: why do we need the <UNK> here?
Reference: need break after this
Candidate: i don't understand why, but it is be good to be the
Reference: why unmodifiable in this case? maybe a copy which could makes the life of the caller easier?
Candidate: this should be <UNK>
Reference: why is taskid passed in as the groupid argument? would using "groupid" or a group_id named constant work here? if groupid is changed to parentid, then a named constant no_parent_id
Candidate: this should be the fixture.
Reference: can this be private since there's a builder?
Candidate: why do we need need to clone the clock here?
Reference: this changes are not covered by unitary tests in subprocessconvertertests
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: might want to refactor this as a for (each) loop
Candidate: should we be schedule() here?
Reference: i think you want to lock outside the try-finally.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: making a while loop to check the session state would be more efficient.
Candidate: hmm. this eating the exception
Reference: please use: backend.getinstance().getresourcemanager() .runvdscommand(vdscommandtype.removevds, new removevdsvdscommandparameters(server.getid()));
Candidate: i don't think we need to check for the <UNK>
Reference: do we need a call to instrumentation.marklocatorrerolled() here?
Candidate: this should be <UNK>
Reference: why not return an collections.emptylist() here?
Candidate: should we throw an exception?
Reference: why make another beat? can't you just make casts in the if case on "other" instead of making another beatrange "other2"?
Candidate: why do we need to check here?
Reference: feels like we should check return value of schedule(), although i was not able to get a hanging thread here unless i changed lttng kernel analysis to be non-automatic. i
Candidate: use <UNK>
Reference: shouldn't we just check startswith?
Candidate: can we be simplified to return <UNK> ?
Reference: added a check, but with the jsonexception should never happen
Candidate: i don't think we need to check for the <UNK>
Reference: do we want to say how many were found? just saying "event records found" isn't really meaningful.
Candidate: rename to <UNK>
Reference: why does it even allow adding the same ticket twice?
Candidate: if (state != null && adsize == null) { ... }
Reference: no isaudio, isvideo, istext, is image all have the exact same code except for the string they check, so the code could be simplified into one generic, private method that
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: any of the ones defined as test extensions here-any of the mockxxx subtypes.
Candidate: why do we need the <UNK> here?
Reference: can you use a tostring method instead of a cast?
Candidate: please use <UNK>
Reference: the cause should be logged in this case to help in troubleshooting.
Candidate: this should be <UNK>
Reference: since clear is always non-transactional, i think you can ignore clearcommand (or even throw an unsupportedoperationexception).
Candidate: should we throw an exception?
Reference: since we can't safely ensure that the profile location map is always a subset of the generic package one, i think it's better to keep them separate in the end
Candidate: can be simplified to:  <UNK> <UNK> = <UNK> <UNK> <UNK> { <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> } <UNK> <UNK>
Reference: vftouse might be null. this should not cause any problems, as setvmidonvfs seems to handle it correctly, but it might be safer to check against it (as was the case
Candidate: should we be the <UNK> here?
Reference: is the local variable name a leftover from the previous constraintpack naming?
Candidate: i don't think we need to use <UNK> <UNK> <UNK>
Reference: why not call the new method with null as third parameter?
Candidate: please use the get* code...
Reference: nit: this really isn't needed since this method returns false by default.
Candidate: if we is the software stripe { <UNK> <UNK> <UNK> } } } } }
Reference: picky: need space before bracket
Candidate: i think getparameters().getstoragedomainid()
Reference: you could make this more concise: facultymembereditor.setsabbatical(_sabbatical.getselectedinex() == 1);
Candidate: why do we need to check the <UNK> <UNK>
Reference: @tarilabs i am not understanding this? getparentdrgelement should never return null, unless it is used on "<definitions>" or "<itemdefinition>" elements... what is the case here?
Candidate: rename <UNK> <UNK>
Reference: the convention is to have all mappers static in order to reduce their instantiations as they have no state. please extract it into a private static class.
Candidate: i disagree with <UNK>
Reference: wdyt about passing an empty var-args here instead of new valuegroup[]{null}?
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: why not %d entries?
Candidate: i we remind me nervous if the exception was expecting an exception when expecting an exception if we is expecting an exception immediately. i am expecting that expecting an exception
Reference: ![major](<link_0> either log or rethrow this exception. [![rule](<link_1>](<link_2>
Candidate: why do we need to clients?
Reference: can logicalplan class provide a new method that allows to add operator with existing operatormeta? something like  private <t extends operator> t addoperator(final string name, final operatormeta operatormeta) {
Candidate: unused
Reference: please delegate to the other constructor using this(name, false); in the constructor body.
Candidate: should this be <UNK>
Reference: for exclusivelocks we don't need the same safeguarding?
Candidate: i don't understand why, but it matters, but i don't understand why, but it matters, but i don't think why, but it should be the
Reference: what's the purpose of the trailing - in logging msgs?
Candidate: you don't need to assert that the <UNK> is the
Reference: afaict this only happens in tests, the actual code doesn't need the caching. maybe refactor to avoid that? also, could we build this such that the options class is immutable
Candidate: why do we need to use the here?
Reference: do we need some sanity checking here in case it gets triggered without seeing a prior query event type? (i.e. if transactionstarttime == 0 it's probably not legitimate). or are
Candidate: why do we need to check whether the <UNK> is the <UNK> <UNK> is called <UNK> <UNK> ? <UNK> : 2; thanks!
Reference: seems like we are just reconstructing the original string here, but without the leading v? i wonder if it's better to use the original string instead of reconstructing it every
Candidate: if (state != null && adsize && <UNK> && <UNK> { ... } else { if <UNK> { return false; }
Reference: either extract duplicated code in a method with single boolean argument or make the test parametrized.
Candidate: please remove the method("post")
Reference: better to have fail(); in the onsuccess()?
Candidate: use fail(); in the onsuccess()?
Reference: redundant assertion
Candidate: please assert that is retired retired retired
Reference: same thing here and below: not relex but any resource
Candidate: should we be the <UNK> here?
Reference: good simplification
Candidate: why do we need to use the <UNK> here?
Reference: let's switch this entire block the other way around, i.e. throw should be the one inside the if block (guard clause) java if (userinfo.isinstructor) { throw new unauthorizedaccessexception(...); } //
Candidate: should this be be the vdsid here?
Reference: maybe reduce this logging to debug, in favor of the cleaner output of ocflpropsconfig.
Candidate: should we throw an exception?
Reference: this text is a good candidate for replacement of the hand-written key-value pair currently in bundle.properties with an annotation that defines the text.
Candidate: should we use <UNK> here?
Reference: only the own implemented interfaces (immediate implemented?), or also transitively?
Candidate: unused line
Reference: can't this be cached?
Candidate: why do we need to check the <UNK> <UNK> <UNK> ? <UNK> : <UNK> : <UNK> <UNK> <UNK> { <UNK> }
Reference: i am wondering if a standard foreach would be simpler than multiple streams?
Candidate: can you use the same as above.
Reference: integration test for this new method? @freddyucv
Candidate: can we use <UNK> here?
Reference: this name is a little bit confusing when mixed with calls to mockito's verify() methods.
Candidate: <UNK> *= 2;
Reference: presumably, there no need for the final .tostring() here.
Candidate: do we need to re-throw the exception here?
Reference: i'd really, really rather use an enum to determine the view type and the layout resource:  java public enum eventviewtype { talk(eventtype.talk, r.layout.view_schedule_talk), ceremony(eventtype.ceremony, r.layout.view_schedule_ceremony), coffee_break(eventtype.coffee_break, r.layout.view_schedule_break), placeholder(eventtype.placeholder, r.layout.view_schedule_placeholder);
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: i am not sure this trick works. you can be here when another thread calls increment function. you are not inside a lock
Candidate: you don't need to use the <UNK>
Reference: this should be 3.0.0?
Candidate: can we iu
Reference: missing super() call?
Candidate: remove this line
Reference: tiny nit: if we import versioning.sha256versioning and other versioning.* classes, the changelog should be smaller :)
Candidate: if oldvalue is null, newvalue should be be <UNK> velocity v.
Reference: this method should reuse already found server of ws-agent.
Candidate: this should be the <UNK>
Reference: you do not need creating new instance of validatorlocator for every new sub-resource/subcollection, you can reuse instance defined in backendapplication by adding [resource.setvalidatorlocator(x);] in abstractbackendresource.inject(). - it used to inject
Candidate: this should be the <UNK>
Reference: any special reason why previous test uses collections.singletonmap("key", "value"); and this empty hashmap ?
Candidate: why do we need to use the here?
Reference: that's existing behavior, of course, but let's try to find something similar like a batch for jdbc to increase performance!
Candidate: this should be the <UNK>
Reference: could we just to this with the getannotation call and a null check?
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: since onpreferenceclick returns true when the click is handled and false when it is not, we should return something from setupprivacysettings similar to the other methods (i.e. handledevicepreferenceclick, handleaboutpreferenceclick, and
Candidate: why do we need to use <UNK> here?
Reference: should it handle rejection?
Candidate: why do we need the <UNK> here?
Reference: completeable.fromaction may be more idiomatic
Candidate: shouldn't this be static?
Reference: it is better to use  java participantstatus.name()  since it cannot be overridden whereas tostring() can.
Candidate: the syserr should be be the
Reference: add principal name to message?
Candidate: please use gender here as well
Reference: please filter the executions that failed (and collect) instead of grouping.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: is this super call needed here?
Candidate: why do we need to check for the sides of the <UNK>
Reference: this will not work, you need to  / 255 each value. getfogcolor must return 0 - 1 color values
Candidate: the syserr should be replaced with <UNK>
Reference: if we are using viewstub then we don't need separate layouts for legacy vs exo.
Candidate: why do we need the layout here?
Reference: if you call with null as a tileentity parameter, should you add @nullable on the tileentity parameter in the getoutput method in the interface to notify users that the tile
Candidate: why do we need the <UNK> here?
Reference: minor: typo in "isencrypted" in the message
Candidate: we don't need to synchronize on the email ?
Reference: change to static import ?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: why visibility was increased to public?
Candidate: why do we need need to the <UNK> <UNK>
Reference: consider this case: - the vmleasessupported == false, so in setvmleasesavailability() you set the changeprohibityreason - than you change the ha option and you clear the change prohibity reason here
Candidate: why do we need to the the <UNK> the <UNK> <UNK>
Reference: i think we should break here. i don't see any reason to explore other arguments as soon as we get the constraint. especially as there is no way to discard
Candidate: why do we need to use <UNK> here?
Reference: strongly prefer combining these messages into a single log line. same for other logs from this method.
Candidate: why do we need the getconnection payload?
Reference: is there a specific reason for naming the various fields and variables in the configuration class using the snake case, i.e., using _'s instead of using the camel case? if
Candidate: please use syserr
Reference: i generally put keys like this into a static class-level variable, although i know this is only being used once so not nearly as important. just looked funny to me
Candidate: why do we need the <UNK> here?
Reference: and what about the unary_plus ?
Candidate: yeah, i don't think we need to do:  java <UNK> <UNK> { <UNK> = <UNK> } 
Reference: use correct class instead of ibity
Candidate: should this be <UNK>
Reference: it's either illegalargumentexception or no exception at all like in all other constructors from this pr, like securepatient for example. for consistency i propose removing that check.
Candidate: should we use the <UNK> here?
Reference: pass the allocator via the constructor. accessing a resources from multiple entry points makes it hard to change. you can wrap the default allocator and pass that instance to the
Candidate: why do we need need to evict the <UNK> here?
Reference: is the user expected to build and place the jar into the "/tmp/storm-artifacts/jars" directory ? the extrasjarslocation is already a dir. i think urlclassloader already handles directories. <link_0> "this class
Candidate: can we make this private?
Reference: not equals!
Candidate: why do we need need to be the <UNK>
Reference: you can move the three lines in a private method extractarchive.
Candidate: <UNK> *= 2;
Reference: out of curiosity, why is this public?
Candidate: can we move this into a separate part, so that it make sense to make sense to reduce nesting.  private void <UNK> { <UNK> = <UNK> <UNK> <UNK> }
Reference: without iterator it will throw concurrentmodificationexception, will not it?
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: the method does not need to be public. if so, please lower the visibility to 'private'.
Candidate: why do we need to check the <UNK> entries?
Reference: why the double wrap?
Candidate: why do we need the <UNK> here?
Reference: for the engine to properly handle the result as an array it will need to be an instance of an array, not arraylist.
Candidate: use map<> on rhs
Reference: there's no point clearing the old list if we are just going to drop it and assign the reference to a new one. let's conserve the memory allocation. suggestion this.listofgroups.addall(listofgroups);
Candidate: why do we need the <UNK> here?
Reference: you overworked here a little bit :)
Candidate: this should be null if the != null && <UNK> { <UNK> }
Reference: do all logic here. if push merge on plain ref: ok else if push merge on 'refs/for/ + plain ref ok else fail.
Candidate: this should be the <UNK>
Reference: why we are settng timeout when it is zero? and wouldn't zero be non-negative anyway?
Candidate: i don't think we need to do we need to check for the narrowing the situation.
Reference: should probably use a redis.pipe here. will do everything in one connection instead of two.
Candidate: should be be null?
Reference: can the label already have a specified height at this point?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: call encoderchannel.finishandreleaseall() to fix leak
Candidate: this channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels channels
Reference: why don't you return list of enumerations? with this you will remove the logic in the constructor...
Candidate: can be replaced with <UNK> ?
Reference: split up to make readable
Candidate: please remove the method("post")
Reference: ditto here about error message
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: unsure if we can make this change. we are returning the actual stream in the method. are we doing anything with the stream after this method returns, and if we
Candidate: ![major](<link_0> 'severity: major') remove this null-check of the disk, which is greater than 10 authorized. [![rule](<link_1>](<link_2>
Reference: i think this returns null as the ftrace objects are instances of ctftmftracestubs at this point, so their set of analysis modules is empty.
Candidate: this should be <UNK>
Reference: these look like they can simplify to: java binnedranges.computeifabsent(location, k -> new hashmap<>()) .computeifabsent(ke, k -> new arraylist<>()) .add(range);
Candidate: if <UNK> != null) { <UNK> }
Reference: why not use lengthofcodepoint and setcodepointat, instead? that way, you'd avoid the intermediate slice, byte[] and array copy.
Candidate: why do we need the <UNK> here?
Reference: i'd replace this test with !spancontainsanyzipkinconstant(span) to reduce the if statements.
Candidate: this should be the <UNK>
Reference: i think this is hiding the original interrupt, better to not catch it.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: distinct should be upper case
Candidate: please use <UNK> <UNK> <UNK>
Reference: don't need to wrap in arraylist
Candidate: can you use the fixture.
Reference: i am not a fan of assertions in non-test code. assertions are disabled by default anyway. could you please remove them? thanks
Candidate: you should use <UNK> <UNK>
Reference: i'd remove //, or place it before the last .
Candidate: why do we need the <UNK> here?
Reference: individual conditions also must not be null. for that we should add a check with org.junit.platform.commons.util.preconditions.containsnonullelements(t[], supplier<string>) in order to avoid a subsequent nullpointerexception.
Candidate: why do we need this?
Reference: use if
Candidate: @unyoungwax, <UNK> *= 2;
Reference: i think in this case it is better to define <code>headers</code> variable above <code>580</code> line + move <code>headers.add(pair.of("content-type", "application/json"));</code> after that declaration, then it will be like this:  java
Candidate: this should be schedule() { return; } catch (throwable e) { blah } rollback blah } finally { rollback blah } finally (throwable { rollback e) { rollback e) {
Reference: illegalstateexception is an unchecked exception, it is not required to define the method as throwing this type of exception.
Candidate: should this be the <UNK>
Reference: can there be a scenario where this is null ?
Candidate: enhance getclass enhance enhance enhance enhance enhance vice asynchronously vice enhance a log message?
Reference: in this test and the other new tests, can we strengthen the assertions to cover all expected state? - fsroot exists - workdir exists (if different from fsroot) or doesn't
Candidate: this fail()?
Reference: i see you're synchronizing on initstate here. the cdmservicewaiter also has a reference to this same cdmstate, and also synchronizes when using it. does this guarantee that both classes won't
Candidate: why do we need the <UNK> here?
Reference: you don't need to materialize the entire list sequences.tolist(sequences.limit(resultsequence, 1), lists.<list<long>>newarraylist()).get(0);
Candidate: why do we need this?
Reference: ("+min()+'\u2025'+max()+')';
Candidate: can be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: i think this can only throw a parseexception, let's just throw that (no pokemon catching)
Candidate: why do we need need to the <UNK> here?
Reference: lets check each job view:  for (computejobview job : jobs) checkjob(job);
Candidate: please use <UNK>
Reference: consider idtotaskstatusmap.foreach((k, v) -> { ... } for coolness's sake
Candidate: why do we need the columns here?
Reference: is this really defined like this in plugin.xml? i think we should use builder id. please use org.eclipse.core.tests.resources.regression.simplebuilder.builder_id
Candidate: why do we need to use <UNK> here?
Reference: unsignednumeric.writeunsignedint and 0 when no params ?
Candidate: why do we need the <UNK> here?
Reference: don't use strings here. please read this: <link_0> <link_1>
Candidate: please use <UNK>
Reference: this is not needed if you already handles the exception in the other method?
Candidate: should we throw an exception instead of returning null?
Reference: hi @denlb , please replace this magic number 86400000 with something more readable, like timeunit.hours.tomillis(24).
Candidate: i don't understand this matters, if we matters, but you don't want to check if the is is the
Reference: did you mean to reference the variable **user_directory** and not a string with the value of "user_directory"?
Candidate: why do we need to use the <UNK> here?
Reference: this is potentially confusing, please add brakcet to the if statement.
Candidate: should we throw an exception here instead of the exception?
Reference: not sure if we need a new transaction here
Candidate: why do we need need to the <UNK> here?
Reference: typo . donwloading--> downloading
Candidate: why do we need to the <UNK> here?
Reference: src/test/resources/experimentaldata/input/ base path appears in 42 places in all affmatch tests, we could consider extracting this root path to some shared test variable.
Candidate: iterable<integer> = <UNK> assertthat(ldapuser).isinstanceof(ldapuserdetailsimpl.class); ldapuserdetails = <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK>
Reference: this can be done with filesystemitem.getstem(). if you want a one-shot function instead, create it in filepathutils for reuse.
Candidate: why do we need to use <UNK> here?
Reference: get rid of this
Candidate: why do we need to use <UNK> here?
Reference: this doesn't look good, use:  string expectedurl = urlbuilder .geturlforpathwithoutwiki(configuration.getwikiname(), mercurysubpages.cc_category_templates);  or if it is too long:  string expectedurl = urlbuilder.geturlforpathwithoutwiki( configuration.getwikiname(), mercurysubpages.cc_category_templates );
Candidate: why do we need to brackets?
Reference: import static org.apache.zookeeper.server.quorum. zabutil.* then you can simplify method invocation by using createquorumpeer(tmpdir); instead of zabutils.createquorumpeer(tmpdir);
Candidate: what happens if the overflows?
Reference: suggestion this.gatewaymap.values().foreach(methodinvocationgateway::destroy);  how do we live without this before? should we consider to back-port it as a bug? what is a consequence not having this destroy()?
Candidate: why do we need to check the <UNK> here?
Reference: this would be a good candidate to split out into some smaller methods to clarify what's up
Candidate: can be simplified to: java <UNK> = <UNK> <UNK> <UNK> { <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> }
Reference: final
Candidate: please use <UNK>
Reference: delete the "-" if there is no longer a trailing counter?
Candidate: should we throw an exception?
Reference: should this be >=? consider calling contains() instead
Candidate: i don't think we need to check for the the <UNK> <UNK>
Reference: nit: make all of the methods package-private as the class is package-private as well. this also ensures we no expose these by mistake at some point.
Candidate: why do we need need to the <UNK> here?
Reference: do we want to hide this behind a feature flag? i'd say yes.
Candidate: should we be the getconnection here?
Reference: the field is volatile; is there a specific problem that adding synchronization solves?
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: does this need to change to be a more specific exception?
Candidate: can we use <UNK> here?
Reference: i tend to prefer the more explicit style try { ... } catch (packprotocolexception e) { assertthat(e.getmessage(), is(...)); } fail("expected packprotocolexception"); or even better, using junit assertthrows: packprotocolexception e =
Candidate: the @since <UNK>
Reference: i don't see the motivation for this change. it seems that you are trying to handle the case where the input parameter pathparametervalues is null, since the caller does not
Candidate: why do we need to use <UNK> here?
Reference: the test must also follow the format of the others in the file. if there is a configuration for which the test is not valid, then the test should be
Candidate: should we use the <UNK> here?
Reference: can we inline any of these?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: move the if(...) outside of the lock
Candidate: why do we need need to synchronize on the <UNK> ?
Reference: 2 times filtered
Candidate: can we use the <UNK> here?
Reference: please rename x for title or something similar
Candidate: why do we need to use <UNK> here?
Reference: wrapping an exception with another exception of the same type can be confusing in a stack trace. better if we can wrap the ioexception in another type of exception such
Candidate: this catch (throwable classnotfoundexception | classnotfoundexception e) { throw exception } e) e) { thread.currentthread().interrupt(); throw ioexception e) { throw e) { throw e) { throw e) { throw e)
Reference: ok, i removed it. <link_0>
Candidate: this should be <UNK>
Reference: it seems that you can use 'this' instead of creating a new auditlogablebase instance, which makes me wonder - why not use the command logging mechanism for this logging ?
Candidate: rename to <UNK>
Reference: one option is to return a point2d
Candidate: this should be the <UNK>
Reference: nit: space between if and (
Candidate: can we use the <UNK> here?
Reference: objects.equal(f.testtagfilter, testtagfilter) (it handles null)
Candidate: can be simplified to <UNK> <UNK> ?
Reference: since this is part of the v2 implementation, shouldn't this be v2_rest_url instead of rest_url ?
Candidate: why do we need to the <UNK> here?
Reference: this.
Candidate: should this be <UNK>
Reference: imo any component that injects an expirationmanager should inject an internalexpirationmanager instead.
Candidate: if we is the software exception e1 { throw new <UNK> <UNK> } } } } } } }
Reference: also warm up l1 cache here ?
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: wouldn't it be better to do:  for (repository r : storage.getrepositories().values()) { mutablerepository repository = (mutablerepository) repository; ... }  and use it like this? if i recall correctly,
Candidate: why do we need the <UNK> here?
Reference: the logging is duplicated, but no error is reported to the end-user
Candidate: we don't want to display the information about the the display the information about the the display the information from the configuration.
Reference: is this necessary? if i remove the update line everything seems still to work.
Candidate: why do we need to the <UNK> here?
Reference: the name... callgraphviewanalysis, the view part does not sound too good to me...
Candidate: if the != null && <UNK> { <UNK> } <UNK> { return false; }
Reference: @carlosgines please read <link_0>
Candidate: @carlosgines let's use bout here too?
Reference: do either of the useindex methods need to check the args to the method are not null?
Candidate: use checkargument
Reference: no need for the fqdn - since now there is no collision in class name
Candidate: can you use the get* <UNK>
Reference: for compatibility with oh2, should use objects.tostring instead. eg. >... = objects.tostring(config.get("accesstoken"), null);
Candidate: we should need to log the exception in the exception if we don't want to throw an exception if <UNK> { return; } }
Reference: no, the reason this works is simply a timing issue: it takes a while for requests to complete. we start more than one. we get backed off because we get
Candidate: @unyoungwax, do we need to the the payload?
Reference: inline builder variable.
Candidate: why do we need the <UNK> here?
Reference: should be:  java public int hashcode() { return this.delegate.hashcode(); }
Candidate: can be objects.hash()
Reference: why not simply using instanceof here? if (!(ldc.cst instanceof string)) {
Candidate: if the != null && <UNK> { <UNK> }
Reference: what does this neutral mean?
Candidate: why do we need the <UNK> here?
Reference: call put() alone is sufficient to replace the old value from tree map.
Candidate: should we throw an exception instead of returning null?
Reference: can we avoid usage of username and password in sourcestorage at all?
Candidate: why do we need to use <UNK> here?
Reference: if we throw an exception at either line 47 or line 56, do we clean up our state properly?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: shouldn't a cast to int be enough?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: what is a servletexception doing in the api module?
Candidate: this fail()?
Reference: align ? and : for better readability?  error = shortname.isempty() ? "" : validator.getinvalidityinfo(fieldvalidator.fieldtype.person_name, shortname);
Candidate: i don't understand this matters, this matters, this matters, this matters, but you don't need to do we need need to the the <UNK> <UNK> <UNK>
Reference: why do you make this method chain throw exceptions up the stack when you just bury them in the end? if you never intend to do any handling of these
Candidate: nit: 49
Reference: i think as google translator don't think splut is english word, we shouldn't use it :)
Candidate: i don't understand why, but it is be the if you do, can we move the code into a separate function, e.g.  private void <UNK> { <UNK> <UNK> }
Reference: processtriple is just part of the logic of the constructor. move the contents of processtriple to the constructor and then get rid of the processtriple method.
Candidate: this should be the fixture.
Reference: same here, why the double protection?
Candidate: synchronized synchronized redundant? synchronized redundant? synchronized redundant? synchronized redundant? synchronized redundant? synchronized redundant? synchronized redundant? synchronized redundant?
Reference: does this need to be logged too?
Candidate: the error message message should be an error message.
Reference: could we use provider_id in pay-java-commons for this?
Candidate: do we need need to use <UNK> here?
Reference: remove middlewarequeryexception
Candidate: why do we need need to the <UNK> here?
Reference: this is a one-time variable, we can just inline this value
Candidate: @exper0 let's move this line 91, in the finally block
Reference: rgb constant?
Candidate: the syserr should be the <UNK>
Reference: mockactivty -> mockactivity
Candidate: <UNK> *= 2;
Reference: should this swallow out of memory errors?
Candidate: can we use the <UNK> here?
Reference: inputdata will be better
Candidate: please use <UNK> <UNK> <UNK>
Reference: [minor] is this indent change intentional?
Candidate: please use <UNK> <UNK> <UNK>
Reference: the auto boxing can make this code crash in an npe. if it is null, then we should use a default behavior (return true to keep the default behavior of
Candidate: i don't understand this cast.
Reference: shouldn't this be: r.getpatchsetid().getparentkey().tostring();
Candidate: please remove the <UNK>
Reference: the printstacktrace is useful when it fails :) i have been there.
Candidate: why do we need the exception here?
Reference: suggestion completedupstreamtasks++;
Candidate: if (args.length == 0) { return; }
Reference: i'm wondering if we should return "true" here. wdyt?
Candidate: why do we need the <UNK> here?
Reference: let's also check that error message !isempty() with this condition
Candidate: should we be the get* the get* <UNK>
Reference: replace with excelimportclass from ecore
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, but it matters, but it is be the
Reference: will this fail the build if the cloud is not found? is that the desired affect? i guess it would alert the user of an issue.
Candidate: why do we need need to the <UNK> here?
Reference: abc can be made in a one liner inside the setitem
Candidate: likewise..
Reference: i would extract local pmcxmlhandler and saxparser variables to class property and instantiate it in @before section. then use it in all test cases in this class
Candidate: why do you need to mock here?
Reference: we probably can have tailer bean with @scope(proxymode = scopedproxymode.interfaces, value = configurablebeanfactory.scope_prototype) instead of using applicationcontext.getbean(..) here.
Candidate: why do we need the <UNK> here?
Reference: nice, include in same loop as provider aspects with iterables.concat?
Candidate: this should be the getallregistrations() actionreturnvalue <UNK> { <UNK> = <UNK> }
Reference: the default values on the tracer side changed for lttng 2.2. now, the default value depends on kernel or ust-pid or ust-uid or metadata. i wonder if we should change
Candidate: this should be the <UNK>
Reference: we should log.d(tag, message, exception) here
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: consider removing else clause
Candidate: if the != null && <UNK> { return false; } else { return false; }
Reference: is this todo still present in subsequent commits? if so, think it would be best to resolve this prior to merging.
Candidate: can we use the division here?
Reference: do we support all fields from the given example? we have to compare the body of the input with the body of the stored annotation similar to the the validateoutputagainstinput(annotation
Candidate: why is the <UNK> <UNK> <UNK> <UNK>
Reference: crawling the view hierarchy directly using childatposition seems fragile - is there a more resilient way to find these items?
Candidate: why do we need to use the <UNK> here?
Reference: i see from above that this is following the existing pattern but it feels weird to me that this returns null rather than an empty list, especially when the provider.senders()
Candidate: can we return <UNK> <UNK> ?
Reference: velocity.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: can you break or return after this, instead of an indented else?
Candidate: i don't understand what if you do, can you move this to bit?
Reference: failonlimits should not be needed here.
Candidate: why do we need to use <UNK> here?
Reference: should be also part of the hashcode && equals?
Candidate: can we use the getconnection for the <UNK> generation?
Reference: why don't you add append below to stringbuilder as well?
Candidate: why do we need to use the here?
Reference: does cloudexception actually not tell you whether it is a shared group or if it's a different error?
Candidate: do we need to catch interruptedexception here
Reference: maybe rename var to "attsvalidated" or something that means the attrbiutes were correctly validated
Candidate: can be replaced with <UNK> 1.6
Reference: lit(annotation.value()) will output the int value directly. instead we'd want to output the corresponding r field, such as r.layout.component in your example. that's what we're doing with @eactivity when we
Candidate: should we be the <UNK> here?
Reference: instanceof nightmare?
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: i saw use of uncheckedioexception earlier. why not use that here?
Candidate: this catch (throwable classnotfoundexception | classnotfoundexception e) { throw ioexception e) { throwable } e) e) { throw e) { throw e) { throw e) { throw e) { throw
Reference: nit: maybe something like jackbasedtoolchain, since we check a specific error message
Candidate: why do we need to use @test(expected = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: @vilchik-elena why not map rather than hashmap?
Candidate: i don't understand this matters, this matters, this matters, that this stubbing is a subdir on the left hand side of the buffer.
Reference: can we not support generic object? the idea is to only support specific types.
Candidate: can be replaced with <UNK>
Reference: please make sure you are rebased. this method was renamed on feb 11.
Candidate: why do we need to use the <UNK> here?
Reference: same here. let's create a newlinkedhashset method in collectionhelper and i'll optimize it.
Candidate: can you iu
Reference: what i meant is replace these 2 lines with something like: java final quranrow[] updatedelements = getsuralist(); adapter.setelements(updatedelements);  and in oncreate, make the adapter in a variable so you
Candidate: this should be the <UNK>
Reference: very minor: why does this still have shutdown when elsewhere that is renamed to disconnect?
Candidate: why do we need need to the <UNK> here?
Reference: this is the same problem as before. i don't want to make the code uglier by checkstyle. is there a way to configure the check that enforces the braces?
Candidate: why do we need the <UNK> here?
Reference: this variable is used only once, so can probably be removed and inlined in line 78.
Candidate: if getstate() != null && <UNK> { return; }
Reference: should just have a method on the tsboundpersisterconfiguration class for this, so you just do install.timestampboundpersistence().gettimestampcreator() and avoid all the nasty reflection.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this code is also not so clear. could you please give it some love?
Candidate: why do we need the <UNK> here?
Reference: no sure, if we should do it this way. if no write mode is explicitly specified, the system default write mode will be used. if we decide to introduce something
Candidate: this should be <UNK>
Reference: change requirenonnull to another assertion?
Candidate: this should be the <UNK>
Reference: nit: cachemanager is null
Candidate: this this(...) this(...) this(...) this(...) should be this(...)
Reference: these are fairly cheap to evaluate. maybe just use fields in restapiservlet as the filtering method?
Candidate: should this be the <UNK>
Reference: this is bug. it exactly must be local var, because of uuid + queue_name_suffix
Candidate: i disagree with the <UNK> situation.
Reference: what about delete \* from ?
Candidate: i don't think we need to throw an exception
Reference: is it correct to pass null null null? you think we can have like 2 separate methods or to wrap those nulls in a single object? when it's more than
Candidate: if the == null) { <UNK> groupname = false; } else { if <UNK> { null) { <UNK> } else { if <UNK> { null) { <UNK> } else {
Reference: from reading just this line i have no idea what the second and third argument are for. maybe have two different methods for each value of the boolean argument. and
Candidate: why do we need to the <UNK> here?
Reference: if you keep the getparser method's signature the same, then getgroundparser is no longer a method that needs to exist.
Candidate: wouldn't it be better to be stage that internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally internally
Reference: default should the the system timezone - which means if you save this without making changes the behavior is consistent.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: 1ms=10^6ns
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, it matters, but it matters, afaik.
Reference: i think this should be an error...
Candidate: should we log the exception message payload?
Reference: it's not a big deal, but i'm curious why this was changed to use mpost.blogid and mpost.postid?
Candidate: i don't think we need to check if the is is the
Reference: if a websocket is not closed properly on client side, is that something that a user should send us a bug report over? secondarily, a pop-up message that says "failed
Candidate: why do we need to synchronize on the lock on the username?
Reference: similarly: java return permission & 2;
Candidate: should we throw an exception instead of returning null?
Reference: minor nit: same, please add more details for error if possible.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: even better would be to have an sshvalidator class, which knows how to validate the ssh entity, and invoke it from both hostvalidator and actionvalidator. not critical.
Candidate: this should be the <UNK> <UNK>
Reference: nitpicking: please doublecheck if the indentation in this method is with tabs or spaces. it looks like tabs are used.
Candidate: why do we need to use <UNK> here?
Reference: reduce to debug
Candidate: nextvalueindex should be null and throw an illegalargumentexception if <UNK> != null) { return; }
Reference: minor but since this method is only a local helper, let's close it down to private. chances of shareintentreceiveractivity getting subclassed in the future are quite slim and if that
Candidate: the syserr should be null
Reference: extract this to a setup method in a test and make _originalproperties_ a field
Candidate: <UNK> *= 2;
Reference: what is the problem of keeping throws xmlpullparserexception?
Candidate: why do we need need to the <UNK> here?
Reference: isn't this a no-op?
Candidate: why do we need to use <UNK> here?
Reference: can the name actually be null? i would have thought that the [rename operation](<link_0> returned an error if the name parameter was not supplied
Candidate: should we be the <UNK> here?
Reference: i wonder whether this condition should be moved higher up in the block, so that a bunch of unnecessary calls of childresc.hasproperty(rdf.type) aren't made
Candidate: please revert please revert this
Reference: please include more detail about the operation being performed to assist operational debugging.
Candidate: should we log the exception?
Reference: why do we need brokerrequest.getselections() != null here? it will never be true for aggregation right?
Candidate: the syserr should be be <UNK>
Reference: take this out
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: we probably want to log the stacktrace here, so i think you want to remove the  due to {} part.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: throws alreadyexistsexception ? seems weird
Candidate: should we throw an exception here?
Reference: @ikhvostenkov please name it json
Candidate: @hdouss let's use system.currenttimemillis()
Reference: infra has been eaten
Candidate: i don't understand this matters, this matters, if you matters, this matters, this matters, but you don't need to use the <UNK> <UNK> <UNK>
Reference: this isn't necessary. catalogmanager is injected. all catalogs should be visible as long as they are installed.
Candidate: can we throw an exception here instead of returning null?
Reference: input could be a standard string
Candidate: why do we need the <UNK> here?
Reference: move error log to condition body
Candidate: why do we need need to the <UNK> here?
Reference: i believe these are swapped.
Candidate: why do we need to check for the <UNK>
Reference: will this crash if the file doesn't exist? is it valid to simply run kinesis without extra configuration?
Candidate: this should be the <UNK>
Reference: using a plugin result makes it so that the js side can't distinguish this special-case from an actual plugin-response. instead, i think we can do: if (arguments == null) {
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but it matters, but i don't understand why, it matters, but it is
Reference: all of these magic numbers need to be constants in the org.spongepowered.common.util.constants, whether it's in a new nested class for rail directions or whatever.
Candidate: can we be an int? if an invalidator an invalidator an invalidator there is a reason for an int?
Reference: this would not be an extension, but should be on the object directly.
Candidate: <UNK> *= 2;
Reference: 1. if connecting to iso domain fails with exp, you will not try to connect to importexport domain 2. maybe worth adding a variable to hold the name of the
Candidate: why do we need to check for the <UNK> <UNK>
Reference: additionalattributes can not be null.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: please use java naming convention for instances , e.g., hivequeryexecution.
Candidate: use <UNK>
Reference: maybe an unmodifiable set wrapped around a concurrent map? also the use of this. qualifier is not necessary in this context.
Candidate: should this be <UNK>
Reference: will it ever leave this loop when rowid is removed?
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: is there any need of try-catch block.
Candidate: why do we need to here?
Reference: the check for null is not needed before using instanceof operator: "when using the instanceof operator, keep in mind that null is not an instance of anything." (<link_0>
Candidate: please use the same as above.
Reference: should lines 174 through 176 move into a urimakeimpl.setinputname() override that also calls super.setinputname()? if the user provides their own uri maker, should it be their responsibility to handle the
Candidate: the syserr should be the <UNK>
Reference: please don't append ex.getmessage() to the message.
Candidate: should we throw an exception?
Reference: nit: and here too.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: here it's really the "holiday calendar" that's not found, right?
Candidate: the syserr should be be <UNK>
Reference: the args are in a different order in <link_0> moduleresolver.resolve(groupid, artifactid, "jar", "exec", version);
Candidate: this is eating the exception on the exception
Reference: you can use this instead of actual time to make tests faster and reliable. <link_0>
Candidate: the syserr should be be <UNK>
Reference: why are we using name instead of label?
Candidate: can be simplified to return <UNK> <UNK> <UNK>
Reference: brace next to method definition please.
Candidate: why do we need the exception here?
Reference: this can simply return not_audit.
Candidate: this should be the <UNK>
Reference: from what i can tell, this should be removed. am i missing something?
Candidate: why do we need to mock <UNK> here?
Reference: use lambdas. as there may be a backport you may want to use instead if (log.isdebugenabled()) and regular string concat. same further down.
Candidate: why do we need the <UNK> here?
Reference: you ignore result here. you need to return result.
Candidate: should we throw an iae as well?
Reference: externalize. i must be somewhere already, just need to find the correct message class
Candidate: please use <UNK>
Reference: from java doc:  the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached.
Candidate: why do we need need to the <UNK> here?
Reference: + ijbossruntimeconstants.space
Candidate: why do we need to use the <UNK> here?
Reference: instead of printing to system output stream, let's use a proper logger
Candidate: why do we need to brackets?
Reference: '. this item is not allowed. please check your *.items configuration.
Candidate: should we log the exception?
Reference: suggestion table<?> table = (table<?>) visit(context.altertabledefinition()); return new dropcheckconstraint<>(table, getidenttext(context.ident()));
Candidate: why do we need the <UNK> here?
Reference: this will inadvertently change path separator to host os witch might not match target os path. in case of remote debugging of a linux app from windowsos host this will
Candidate: i appid
Reference: as this is thread outermost loop try/catch we should catch throwable exceptions. otherwise the registry refresher may silently fail without us knowing about it.
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this code should also work for other mappedby data types (i.e. be prepared for bidirectional many-to-many) suggestion .filter(attribute::ismappedby)
Candidate: please use <UNK> <UNK> <UNK>
Reference: also need to make nullstatedescriptor aware of the ttl?
Candidate: why do we need the <UNK> here?
Reference: are these important settings we'd need to advise use of or are they just for testing?
Candidate: you should need to do we need to wait forever?
Reference: nit: indentation (or it this a gerrit problem?)
Candidate: why do we need the <UNK> here?
Reference: what about not using a ternary but rahter an if (needsalias) emitname += ...?
Candidate: <UNK> *= 2;
Reference: @pqueixalos sorry didn't notice this minor thing previously, but in terms of arg ordering schemapattern makes sense after the context
Candidate: do we need to <UNK> the <UNK> <UNK>
Reference: i'm not sure what we are trying to guard against with retries here. when trying to retry a read from file, if the checksums don't match the first time, it's
Candidate: please use the full alignment.
Reference: should the default value of snapzxid be -1 instead of 0? -1 is what util.getzxidfromname returns if finds nothing valid.
Candidate: why do we need the the payload?
Reference: this misses the separator used elsewhere '-'
Candidate: buddy.determinename -> determinename
Reference: style-nit; surplus braces
Candidate: the syserr should be be the <UNK>
Reference: this needs to be updated, in a way similar to the next else if. now that multiple links can be bound to a file, we can't save the file as
Candidate: feedid should be the feedid
Reference: the @override should be on this line.
Candidate: why do we need the <UNK> here?
Reference: you don't need to check that, tje check is done inside runvm, if it is not successes endsuccessfully should not be called.
Candidate: if the vm != null && <UNK> || <UNK> { return; }
Reference: please use stringbuilder
Candidate: please use <UNK>
Reference: please use slf4j parametrization instead of string concatenation
Candidate: <UNK>
Reference: topologyutils.gettotalinstance() doesn't work? maybe worth adding this code to topologyutils as a util function?
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: also, by default, pr builds should just run the tests with latest version and if environment variable to run tests for all versions is set, then we should do this.
Candidate: <UNK> confusion: <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK>
Reference: format this file please
Candidate: i don't understand this matters, if we matters, but i don't understand why, but it matters, what about the do, but you do, can we do, that it is to
Reference: since we already moved to java 7, you could use a single catch block with ioexception | runtimeexception.
Candidate: you don't need to check the <UNK>
Reference: nit: space before {
Candidate: should this be <UNK>
Reference: not localized. should probably use the same mechanism as other dates on the ui.
Candidate: newing is a <UNK> construct, to stick to stick with the <UNK>
Reference: minor: invocation.getargumentat() might make this slightly less wordy.
Candidate: why do we need the <UNK> here?
Reference: i think this is available as a system property, exposed by maven. not sure how reliable this technique is :)
Candidate: why do we need the <UNK> here?
Reference: is this definitely ok that the context is returned but we are still working with the results? are the results eagerly loaded?
Candidate: you should use the <UNK>
Reference: need to throw governanceexception instead of registryexception
Candidate: what happens if the exception is null?
Reference: swap the order?
Candidate: why do we need to the <UNK> here?
Reference: missing method name.
Candidate: please use the syserr
Reference: the tags should be included in the aspect, no ? since we're using it to hash metrics in the aggregator.
Candidate: why do we need the <UNK> here?
Reference: nit: can drop the else and just make this if (..) { ...} throw new ..
Candidate: i don't think we need to override the <UNK> <UNK>
Reference: why do we need this ? the type says it's a non-workspace typed element ... i'd assume that instances which are resources are rather of the super-class type
Candidate: this should be repelaced e1 && <UNK> { <UNK> }
Reference: does the patient actually have any voided diagnoses to make this test more solid?
Candidate: this should be the fixture.
Reference: don't need the "== true", it's a boolean :-)
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: it would have been _nice_ to assert the values of the gridbodycelleditcontext but a test is better than no test :-)
Candidate: why do we need the <UNK> here?
Reference: the client has close() so we can - worse case - use that. also if the beanmanager.isnormalscope(bean.getscope()) is true we don't need to call context.release()
Candidate: please use <UNK>
Reference: all existing network attachments (returned from db) should have id set.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: should > 0 be > 1 then?
Candidate: why do we need the <UNK> here?
Reference: is this a default estimation from some other location? if so, maybe use a static constant value so if one place gets updated, so does this place.
Candidate: if the == null) { return; } else { if <UNK> { if <UNK> { <UNK> } <UNK> { <UNK> }
Reference: this is an unrelated bug fix. it should be in a separate patch
Candidate: this should be the <UNK> <UNK>
Reference: seems like this should also use clock.
Candidate: i don't understand this matters, but i think this matters, that this is is the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: since gets will most likely not be concurrent, done by the poller, do we need threadlocal isolation of aggregation? synchronized aggregation may be simpler and efficient? also, you are already
Candidate: why do we need to check the <UNK> here?
Reference: 4?
Candidate: please use <UNK>
Reference: putifabsent for something different and get afterwards to be sure that putifabsent hasn't changed anything in the collection.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: is this correct ? dont we need to drain the inbound messages first to ensure we preserve the correct order ?
Candidate: the syserr should be be <UNK>
Reference: ditto:  assertthat(count).isequalto(1);
Candidate: why do we need to permission?
Reference: the "." could be configured to something else by the user as i learned. this should be resolved from the meta-data.
Candidate: can we use the <UNK> here?
Reference: yea, you can just invert conditions
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: the important noun in this noun phrase is message, not value. it's a message about a missing uuid.
Candidate: why do we need the fully-qualified here?
Reference: nit java closer.register(directreader::close); closer.register(dictionaryreader::close);
Candidate: should we catch (throwable e) { return; } catch (interruptedexception e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); throw new
Reference: @cvrebert you can inline this statement from the new mkissueevents() statement above.
Candidate: why do we need the <UNK> here?
Reference: an 0 byte will message is valid <link_0>
Candidate: should we be the <UNK> here?
Reference: i would assert that the proper rs ids are found.
Candidate: should we use the <UNK> permission?
Reference: should be scriptdefinition not config
Candidate: why do we need to use the here?
Reference: you can remove the catch (exception e) { fail(); }, it'll give a clearer error when failing.
Candidate: i don't understand why, but it matters, but why do we need to check the <UNK> <UNK>
Reference: we should probably consider beandeployarchive changes / evolvement to allow for class<?> objects to be passed to weld directly instead of doing class<?> --> class name --> class<?>
Candidate: please use <UNK>
Reference: this should be a test error.
Candidate: <UNK> would would would would would would would would would would would would would would would would would would would would would would would would would would would would would
Reference: each test seem to do the same thing, and besides the valid/invalidxml nothing changes. can we refactor this to not use as much duplicated code?
Candidate: please use readasstring(...) instead of <UNK>
Reference: now the number of processor threads will never actually decrease. maybe you wanted to set end to true in applyprocessorcount.
Candidate: i don't need to evict the the <UNK> the <UNK> is the
Reference: should we consider defaulting to "<user.home>/.selion2" for selion 2 ? to allow selion 1.x and 2 on the same host.
Candidate: use try-with-resources here
Reference: this is still a hard-coded assumption of where the sash model is stored, which for legacy (kepler) models is not in the workspace metadata area, so the next statement attempting
Candidate: use map<> <UNK> <UNK>
Reference: lines 187 and 188 should be testing event2 instead of event
Candidate: <UNK> *= 2;
Reference: suggestion bounds = new rectangle(0, 0, bv.hex_size.width, bv.hex_size.height);
Candidate: <UNK> costs the triple costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs <UNK> costs the <UNK> costs <UNK> costs <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs
Reference: what about vuap and its bottom part on mercury?
Candidate: please use <UNK>
Reference: remove the catch? (test won't fail)
Candidate: should be unecesary exception is be an exception too?
Reference: it might be useful to log the metric event sent from druid in this msg
Candidate: i don't think we print snapshotid in the timeout. so we don't want to print events from the timeout.
Reference: what is the reason for appending 1 to the variable name?
Candidate: this should be <UNK>
Reference: _me likes_ note: i'd provide an equal abstraction for this, since it's so common to query for equality on an attribute.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: this is a small nitpick, but maybe you should do the same as you have with equals (only doing 1 based on conditional). or you are thinking it would give
Candidate: use objects.hash()
Reference: we should do this in a background process to avoid blocking the ui thread.
Candidate: why do we need this?
Reference: use standardcharsets.utf_8 instead of "utf-8"
Candidate: why do we need to use <UNK> here?
Reference: shouldn't this also be done for 'getinsertwithautoinc()' and 'getinsertreturning()' ?
Candidate: :disappointed:
Reference: maybe do something slightly more specific? like check that the message refers to cursorwindow.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, this matters, but it is the the <UNK> is the
Reference: investrepaymodel.getstatus() == repaystatus.repaying
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: is flatgroupsets still valid? groupsetcount and flatgroupsets seem to duplicate each other.
Candidate: should we be the getconnection here?
Reference: please include the function name in the message
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: extra blank line.
Candidate: please remove the method("post")
Reference: don't use random. just pick a size
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: same here: use a copy constructor?
Candidate: i don't need to evict the <UNK> the <UNK> is the
Reference: this stream is never closed. in general i recommend using the read(func) method to avoid unclosed resources in a guaranteed fashion.
Candidate: why do we need to use <UNK> here?
Reference: you'll have to be careful here. with hibernate-backed objects, there's no guarantee we'll get a sane container. as such, with the collections, you may need to use our util class's
Candidate: please use <UNK>
Reference: suggestion ret.task = executor.schedulewithfixeddelay(() -> {
Candidate: should we throw an exception?
Reference: you can call set since it is scheduled. you don't need to do a cas.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: why we need this flag?
Candidate: why do we need the <UNK> here?
Reference: can it be cssselector, not xpath ?
Candidate: why do we need the <UNK> here?
Reference: let's use mockito verify
Candidate: please use readasstring(...) instead of <UNK>
Reference: the only prefix we use is m for member variables. please rename this boolean to a question format, so areactionsset
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: why . ? and no . in inflightoffsets?
Candidate: should be clone the of the clone of the clone of the clone of the clone and clone the clone of the clone and clone the clone of the clone
Reference: please add single quotes around fieldentity.gettype().getname()
Candidate: can we use the <UNK> here?
Reference: maybe this name could be more descriptive?
Candidate: i don't need to call the <UNK>
Reference: seems this breaks one time whole operation into several times of sub operations which need to connect to cassandra. not sure how many candidates in real env (3000+?). we can
Candidate: this should be the <UNK>
Reference: i know it was there from the beginning, but please this empty line :)
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: merge the logic above.
Candidate: why do you need to evict the <UNK> <UNK> <UNK>
Reference: what does this mean "defaultsignaturetimestamp"? and what is the relationship between 2019? also what does it mean to set "0" for the month? what happens when the next certificate expires?
Candidate: why do we need to use <UNK> here?
Reference: check for equality of error code
Candidate: please use the exception here instead of eating the exception
Reference: api breakage. the returned collection used to be modifiable, but is no more. i'm not sure if anyone will be affected.
Candidate: why do we need need to be the <UNK>
Reference: bad formatting?
Candidate: please use <UNK> <UNK>
Reference: nexmo.
Candidate: should we throw an exception?
Reference: is there anything special about an @?
Candidate: this miss?
Reference: public void writetodstfile(file dstfile) throws ioexception { try (fileoutputstream filestream = new fileoutputstream(dstfile)) { writeheader(filestream); writestitchpoints(filestream); writeend(filestream); } }
Candidate: you don't need to use the <UNK>
Reference: this is racy. any thread reaching this block will compete with a undeploy thread that just set the remaininghystrixconfiguringdeployments counter to 0. this can result an undeploy thread clearing the
Candidate: <UNK> *= 2;
Reference: i think that this check can be avoided as we already check if auth != null below
Candidate: this should be the <UNK>
Reference: this will blow up at runtime if getactivemodule() returns empty optional
Candidate: this should be the <UNK>
Reference: i18n please ?
Candidate: the syserr should be be the <UNK>
Reference: return integer.tostring(index); is more idiomatic.
Candidate: can we make this private?
Reference: remove
Candidate: can we use static"
Reference: at the moment this method is called from somewhere else in cdt source code (use show call hierarchy to find where, somewhere in ui code, but i can't recall exactly).
Candidate: please use import <UNK>
Reference: might result in npe when the regkey is not valid
Candidate: can we throw an exception here?
Reference: this.distancetolerance = distancetolerance < min_distance_tolerance ? min_distance_tolerance : distancetolerance
Candidate: this should be the <UNK>
Reference: is it possible to make this a little safer by including delimiters or the equals sign or whatever?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: we should use linkedhashset here to be predictable and make debugging easier.
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: do we have a version that accepts appvalues ?
Candidate: serialization access getallregistrations() serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization serialization
Reference: stringutils.isempty can be used.
Candidate: should we be the <UNK> here?
Reference: change this to: jsonobject cookie = getpayload().getjsonobject("cookie"); then change the references below to just cookie
Candidate: the syserr should be an exception
Reference: great, that's the way to do it!
Candidate: why do we need to clients?
Reference: this still needs to be addressed
Candidate: why do we need the <UNK> here?
Reference: i wouldn't bother with an else if you are returning in the if.
Candidate: should we throw an exception here?
Reference: i hope i understood it correctly, does it means * that system properties are returned for proxy-configuration if there is no ini-file present * that configured proxy-condigurations are read from
Candidate: @exper0 we don't need to use the uribuilder
Reference: same as above: we should use linkedhashset here to be predictable and make debugging easier.
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: use java.util.objects.hashcode instead of checking for null value yourself
Candidate: use objects.hash()
Reference: @divsidhu-26 the line should be less than 100 chars. <link_0> there should be a whitespace after each concatenation operator.
Candidate: should this be <UNK>
Reference: add a message in case it ever fails
Candidate: this should be <UNK>
Reference: add a message in case it ever fails
Candidate: this should be <UNK>
Reference: why change this to log an error instead of throw an exception? stack traces are useful.
Candidate: i don't think we need to throw an exception if invoked?
Reference: info?
Candidate: can we remove the <UNK> (after <UNK> ?
Reference: please don't create a new list on every call of getdifferences(), but create the list once, e.g., on the first call, and then return the same instance. you might want
Candidate: can we use the <UNK> layer?
Reference: is this related to improving namespace support?
Candidate: probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably probably
Reference: second part can be properties.keyset()
Candidate: the syserr should be be <UNK>
Reference: parenthesis around (!logic.equals(logic_and) && !logic.equals(logic_or)) are unnecessary, please drop them.
Candidate: rename 'resource' braces
Reference: timeout == null is redundant with !(timeout instanceof integer)
Candidate: why do we need to use <UNK> here?
Reference: @niteshsarda can you confirm if xenserver is the only supported hypervisor with valid parent snapshot id for a given snapshot id? instead of hardcoding the hypervisor type, could we fetch
Candidate: should we use the <UNK> here?
Reference: when performedwarning is false, "flush()" could also be completed, correct?
Candidate: why do we need to synchronize on the <UNK> ?
Reference: i don't agree with this description based on the code and there's no reason to be terse with it. it does nothing to ensure "correctness", it simply helps spread the
Candidate: the syserr should be be <UNK>
Reference: should we pre-seed the candidates map with 0 -> something to ensure we don't get an empty map?
Candidate: the syserr should be replaced with <UNK> <UNK> <UNK>
Reference: this should not be changed.
Candidate: i don't understand what if you do, can we move this into a separate method? if you do, it will be easier to read if the == null) { <UNK>
Reference: please add a space between keywords and parentheses. also in rest of change.
Candidate: please use <UNK>
Reference: can we hit a concurrent modification exception if a worker finishes and is deleted, while we are iterating here?
Candidate: i don't think we need to throw an exception
Reference: 2 things: 1) if a dataexception is thrown is it a good idea to go on? 2) did this kind of error logging work with casting exception object to string
Candidate: this fail()?
Reference: :art: personally i would lean toward using a guard statement. java if (entitytype == null || stringutils.isblank(entityid)) { return null } ...
Candidate: :cry:
Reference: this serialization is not correct. it leads to duplicate keys in json:  { "labels": { "label": "firstlabel-hzclient-1", "label": "secondlabel-hzclient-1" } }  an array of strings should be used,
Candidate: please use <UNK> <UNK> <UNK>
Reference: should this be in a finally? if an an exception is thrown on line 57, this code will not get executed
Candidate: why do we need the <UNK> here?
Reference: not your fault, but both cases should be sanitizationhelper.desanitizeifhtmlsanitized. let's change it, and afterwards this block can be transformed into a one-line lambda.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: this method should not be called here (and i think it shouldn't be needed anywhere else). here, the repository is only marked for deletion by the organizationalunitservice (with lock acquired),
Candidate: i don't understand this matters, this matters, this matters, but you don't need to do we need need to check the <UNK> <UNK>
Reference: make it as debug
Candidate: do we need a <UNK>
Reference: you should wait on the task; delete by query is asynchronous like all write operations.
Candidate: this should be the <UNK>
Reference: acc.......
Candidate: please use <UNK>
Reference: does it make sense to move this check above a little bit? java if (offsetandmetadata != null && subscriptions.isassigned(tp)) {  that will make the log message less confusing.
Candidate: what happens if the is is empty?
Reference: should be stacktrace_none instead because if stacktraceoutputmethod = stacktrace_both the method will return stacktrace_short
Candidate: why do we need to the <UNK> here?
Reference: at that stage the event is always modifiable, right? so the check could be removed?
Candidate: do we need this string's
Reference: you need to provide description for the different methods that you have included.
Candidate: this should be the <UNK>
Reference: print statements should be reserved for local debugging - let us not include this in the core codebase.
Candidate: shall we fill the the properties?
Reference: nit: can use method reference instead suggestion .map(transforms::processsingleresponseerrorresult);
Candidate: why do we need to permission?
Reference: just so we do not forget - how do we ensure that only the intended app can process the token result and not some malicious app.
Candidate: should we catch interruptedexception
Reference: result suggests like this is the thing returned from the rule, which it isn't. call this partial, the topnnode call final and return optional.of(final)
Candidate: the syserr should be be the <UNK>
Reference: what about base_package, base_property, base_element, base_opaqueexpression, ... ? this only works for stereotypes extending the class metaclass. other stereotype copies will have their metaclass extensions corrupted. also, stereotype associations will
Candidate: the syserr should be be <UNK>
Reference: the artifact's name should follow the npm specification (<link_0>
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: how come we are removing the second batch?
Candidate: why do we need the <UNK> here?
Reference: should this be something like 0 or -1 to indicate that we didn't charge? otherwise the charge rate check is going to fail on this, but it should really be
Candidate: do we need to check if <UNK> != null) || <UNK> { <UNK> }
Reference: keeping that constructor makes it more testable as you could inject a mock openshiftuimodel
Candidate: the syserr should be be the <UNK> <UNK>
Reference: isn't \\. a regex defined in locator.java ?
Candidate: why do we need to use <UNK> here?
Reference: note that this check is redundant - getclusterid would never return null
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: reduced panel counts
Candidate: can be replaced with <UNK> <UNK> <UNK>
Reference: i guess arrays.equals is the better choice.
Candidate: please use <UNK> |= <UNK>
Reference: should throw validation exception using collector.getorthrowexception() in preparerun.
Candidate: can we use the <UNK> here?
Reference: so this logic tries and retries one time. it seems like this could be better organized for readability and reduced code.
Candidate: why do we need to here?
Reference: ditto: add a check it either has to be connector partitioning, or fixed_hash_distribution
Candidate: why do we need the <UNK> here?
Reference: dangling bracket still sticking out :-)
Candidate: why do we need to mock <UNK> here?
Reference: this can be set in the ui binder file no need to do it in the localize (we only do this above due to the dynamicmessages).
Candidate: why do we need to check the <UNK> <UNK>
Reference: such approach will lead to setting up the property in maven executions. maybe you want to introduce a new method instead
Candidate: what is this happen if the is is a single line
Reference: rename to action
Candidate: why do we need to check for the <UNK>
Reference: line length formatting again
Candidate: please remove the <UNK>
Reference: i don't think we need to call this anymore.
Candidate: we can do we want to do we want to do we want to do the database connections?
Reference: we have to improve this line. it would not always give correct results because of an integer divison: 5/2 = 2 2*2 = 4 in such a case it should
Candidate: can it be useful to use it is useful to make it easier to read it easier to read it easier to read
Reference: looks like ise is not thrown?
Candidate: should we be the specific?
Reference: how about inverting the logic, only log the functions loaded, rather than those skipped, and please make it a debug level.
Candidate: should we be the <UNK> here?
Reference: readall here as well?
Candidate: should we use the payload?
Reference: typo in button caption ?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: assertthat(conf).isnotempty(); is shorter and gives better error messages. the same 7x in this pr: ctrl + f "isempty()).isfalse()"
Candidate: why do we need the <UNK> here?
Reference: you can combine these 2 lines as sandboxpath.createdirectoryandparents().
Candidate: why do we need need to evict the <UNK> here?
Reference: this can be made private as it's not required by any other class within the package.
Candidate: why do we need need to be <UNK> here?
Reference: have you verified it from the ui? it should send the 'imageids' array in removedisksnapshotsparameters's ctr. so this block would never be executed..
Candidate: <UNK> costs the <UNK> costs the tablets costs <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs the tablets you don't see the tablets
Reference: just a minor suggestion. it looks odd to house getqualifiedname method in yarnrestjobstatusprovider class and invoke it just at scriptrunner.runscript as a param. it could be better to either move
Candidate: please use <UNK> objects.tostringhelper() explicitly)
Reference: check type of insn2 before cast
Candidate: why do we need to check for the <UNK> ? <UNK> : null;
Reference: should this assignment guarded by the lock as well?
Candidate: log.debug probably?
Reference: hashcode should also be based on checkpointid and statecheckpoints to match equals implementation.
Candidate: <UNK> evidence, overflows?
Reference: also here, it should be: for () { }
Candidate: if the == null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: do we need the bracket?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i was curious why we do decoding here? does this break service bus? iirc, sb keeps track of deliveries when they are not in receive and delete mode to understand
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: <link_0> please name it in better way "iface" ==> "interfaceast" cis must pass.
Candidate: please import?
Reference: please use "if (componentcategory.category_4_mapreduce.getname().equals(process.getcomponentstype()))" instead this hard-coded way.
Candidate: list<linkinfo> <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK>
Reference: why do you need .* before and after (?s). after is enough i think. mb you mean \\.(?s).*
Candidate: good good good good good good good good good good good good good good good good good good good good good good good good good good good good good good
Reference: change to "size must be non-negative but was: %d"?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: boolean
Candidate: this should be the <UNK>
Reference: why not naming it proxyfactory?
Candidate: do we need to <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: would data ever be empty or not the same length as plottertable? if so, add a check for it.
Candidate: why do we need to use the <UNK> here?
Reference: this part doesn't have any relationship with addpreference method. try to split the methods
Candidate: this should be <UNK>
Reference: just out of curiosity - any reason that you don't do "initialwritablebookiesfuture = ...watchwritablebookies"?
Candidate: please use syserr
Reference: i would use 'abstractregistry.dockerhub_registry' just to make any changes easier to track.
Candidate: why do we need to the <UNK> here?
Reference: validation for timeout?
Candidate: should we throw an exception
Reference: why static methods called as instance methods ?
Candidate: please use <UNK>
Reference: did you take a look at this? <link_0>
Candidate: typo: <UNK> -> <UNK>
Reference: objects.equals can be used here too, since it's more or less the trend we have on the models
Candidate: if <UNK> != null && <UNK> { return false; }
Reference: can we make this more exact so that it's only final when actually needed inside the anonymous class?
Candidate: why do we need the <UNK> here?
Reference: i'm still not convinced that stream syntax adds any value to methods like these. maybe if java stream syntax was concise, but it's not. i'm wondering, do you find this
Candidate: why do we need to use the <UNK> here?
Reference: s/tile.getzoomlevel()/tilezoomlevel
Candidate: rename <UNK>
Reference: prefer string.format("%n%nstacktrace was: ") to be os agnostic.
Candidate: this fail()?
Reference: if you fail the command nicely with can do action, you could give better error to the user here, by translating the msgs
Candidate: should we be the <UNK> here? if we { null) { <UNK> }
Reference: this loop is building a new full sql string upon each iteration. i would recommend using some other alternative that can operate on the string more efficiently (like using a
Candidate: should this be be the <UNK> ?
Reference: we're very vulnerable to injection here. we should be using sql arguments to pass these values over, not construct a string manually
Candidate: should we throw an exception here instead of returning null?
Reference: i'm wondering about the default value for this. how easy it is to set the value for someone in osgi? and how likely it is that they would want the
Candidate: should we use the exception here?
Reference: == tests for reference equality, hence it could be error-prone -- it'd be better to use the .equals() method...
Candidate: use <UNK>
Reference: why change the logic since the answer is always true?
Candidate: this should be null if <UNK> != null && <UNK> { <UNK> }
Reference: unnecessary parenthesis
Candidate: please use object.equals for the object.equals as well as well as far as i see usages can be simplified as a single commit.
Reference: as it is not synchronized this can lead to race conditions where a listener registration can get lost. if you simply instantiate it where it is declared above, then this
Candidate: i don't think we need to synchronize on the <UNK>
Reference: calling the mock methods directly and then asserting that the mock did something is just weird, a "mock" should be used to assert that the tested component interacts in a
Candidate: why do we need need to the <UNK> here?
Reference: this is probably the lowest priority thing i've ever requested, but could we call this legacydtofilter rather than old? i don't know why, but "old" feels very rough to me.
Candidate: why do we need to check the <UNK> <UNK>
Reference: negative logic
Candidate: i don't think we need to check if the is is null.
Reference: subject_hash
Candidate: should we use the <UNK> here?
Reference: in variable !
Candidate: why do we need the <UNK> eq here?
Reference: that's wrong place for this kind of filtering. that's because the question if an action should be visible or not for non current revisions depends on action itself and is
Candidate: you don't need to check the <UNK>
Reference: need not be public (same with the other functions)
Candidate: this should be <UNK>
Reference: i would have put object as return value...
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: graphdatabaseinternallogit.internal_log_file ?
Candidate: why do we want to include the exception here?
Reference: although the proposed changed is technically correct, please revert this for the sake of readability.
Candidate: this should be the <UNK>
Reference: can you change the mentions of files to directory everywhere?
Candidate: why do we need need to the <UNK> here?
Reference: you should also check that luns list not empty
Candidate: what happens if the is is invalid?
Reference: what if this byte is before/after the hard delete range inside the blob? hard delete starts at a non zero index at the blob and ends before the end of
Candidate: why do we need to use <UNK> here?
Reference: should loader also be checked if it's non-null so that if follows similar paradigm as client. this way can call close() from main()'s exception block -> case where initialize fails
Candidate: i don't think we need to throw an exception
Reference: why u initialize outside of new thread("jvm-pause-detector-worker") scope ?
Candidate: do we need to the @ addresses here
Reference: remove all unnecessary ()
Candidate: <UNK> *= 2;
Reference: it is a 3 node cluster by default, don't need to specify it
Candidate: why do we need to here?
Reference: same thing with returning ""
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: unneeded change
Candidate: unneeded parentheses
Reference: you can declare just a set<file>
Candidate: can we use static"
Reference: please follow the pattern we had to declare/add metric in samzacontainermetrics (i.e. instantiate the metric inside samzacontainermetrics class and just refer to it from outside like containermetrics.callbackcompletes.inc()
Candidate: please use <UNK> <UNK> <UNK>
Reference: can this throw? and if so, can we handle it?
Candidate: i don't understand why, but i am not sure why, but i am not sure why, but it will be easier to understand what if someone wants to.
Reference: can you put the y acceleration (-0.03) in a named constant in the class? e.g. vertical_gravity_accel
Candidate: please use <UNK>
Reference: shouldn't we use setimageid?
Candidate: this should be <UNK>
Reference: can validate maf.
Candidate: if <UNK> != null && <UNK> { return false; }
Reference: tricky. the enum is perfectly valid i think, but you don't expect to get here. i'd make it illegalstateexception
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: the newly added code is the mostly same as those of insert. it would be nice if some code to get projectschema and inschema are distinguished.
Candidate: @unyoungwax, oops is this pedantic, but it seems like this code should be simplified to:  if (state != null) && <UNK> { continue; } <UNK> { <UNK> } <UNK>
Reference: what about putting time to the name to make clear when each snapshot was created, just a suggestion.
Candidate: why do we need the layout here?
Reference: how is it reset if the test failed before?
Candidate: the syserr should be be the
Reference: seems copy-paste error, change to try (tracescope ignored = tracer.newscope("getsnapshotlisting")) {
Candidate: can be simplified to <UNK> java <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: it's much simpler if you write the code like this  java if (!payload.containskey("errors")) { throw new apierror(response, body, payload); } ...  notice that you do not have to
Candidate: should we use the <UNK> here?
Reference: i believe you could directly instantiate database as h2database, rather then looking it up from the connection, because we precisely know the type of the database we connect to.
Candidate: why do we need to use the here?
Reference: filereaders should be opened using try-with-resources so that they are closed for sure.
Candidate: why do we need to use the <UNK> here?
Reference: could this be configurable?
Candidate: why do we need to <UNK> here?
Reference: hmm .. was this superflous?
Candidate: why do we need to use the <UNK> here?
Reference: drivermanagerutils::getaccesstoken may be changed to getaccesstoken(properties)
Candidate: should we throw an exception here?
Reference: this feels like a change detector test. what in particular is it aiming to defend against? e.g. if we check that the output starts with "jgit ls-files", would that be
Candidate: why do we need need to the <UNK> here?
Reference: you can use sourcesummary.getpagetitle() and targetsummary.getpagetitle() for the pagetitle
Candidate: why do we need need to the <UNK> here?
Reference: you should use an iterator to remove entries in the for loop (your code might also work but i'm not sure how indicies are reshuffeled if you remove an entry.
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think this would be more straightforward to test if the getfromgetter() method actually read from a differently named private field: java public final string fromgetter = "accessed from field";
Candidate: why do we need the <UNK> here?
Reference: i am not sure if opening it up is good or bad at this point. here is a bug in track1 that kind of *caused* by open-up (not really, but
Candidate: can be replaced by: <UNK> <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> { <UNK> }
Reference: the method currently always set e new label provider without checking if the eef runtime is present. we should change the provider only if the eef runtime is present (see
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: i am trying to understand the current functionality. if one of the cards(say card1) is checked, and then if 'select all' button is clicked, would the previously selected card1 be
Candidate: you can use the <UNK> of the <UNK>
Reference: @dmzaytsev let's test with the urn provided in the original ticker: urn:test-domain-org:valid:1
Candidate: @exper0 let's use use <UNK> instead of reconstructing the raw type.
Reference: this calls checkedcardcount() twice also: the previous code returned false.
Candidate: i don't think we need to do this, but it should be <UNK> to <UNK> the disk, but i think we should have to <UNK> <UNK> <UNK>
Reference: can you use isempty() instead?
Candidate: can be simplified to <UNK> <UNK>
Reference: let's move this check in googlecloudstoragereadchannel, it should determine during initialization if opened file is gzip encoded
Candidate: why do we need the <UNK> here?
Reference: can we fix this log statement to also reflect the fact that attributes might not have matched?
Candidate: <UNK>
Reference: please reformat this piece of code, it is pretty inconvenient to read  contiguousset<long> addresses = contiguousset.create( range.closed(lower, upper), discretedomain.longs() ); map<long, ilogdata> range = runtime.getaddressspaceview().fetchall(addresses, true);
Candidate: <UNK> *= 2;
Reference: do you need write permission?
Candidate: why do we need to here?
Reference: this can be if (optionalchargeentity.isempty())
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: so we all agree that we should default to development mode?
Candidate: should we be <UNK> here?
Reference: i think it's better to let intermediatedatasetid implement writeto() and frombytebuf (...) and just invokes them in intermediateresultpartitionid.
Candidate: should this be <UNK>
Reference: it seems like we're changing the semantics of this method. it's not really just expanding the template into a resource group id, it's giving you an entire selection context. i
Candidate: you can use <UNK> <UNK> <UNK>
Reference: jenkins.getinstance().getqueue().maintain()
Candidate: the syserr should be injected, so we can use assertj's via:  <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: can we pass in the delay from this method, so sqsqueueservice shouldn't need to know about capture process configuration
Candidate: this should be <UNK>
Reference: why is adding refs/heads/*:refs/heads/* conditional on head being a symbolic reference?
Candidate: do we catching interruptedexception
Reference: why don't we use getnode?
Candidate: please use <UNK>
Reference: use strings.nulltoempty
Candidate: i don't think we need to check for the situation. if the == null) { <UNK> = <UNK> }
Reference: size in bytes, max integer will be 2gb, i think some crazy repo may have such number. long looks better.
Candidate: should we throw an exception?
Reference: you need change at least because we filter on the project name.
Candidate: this should be the <UNK>
Reference: shall we pass identifier object instead of the apitypewrapper itself? it will make this pr cleaner. example: apitypewrapper apitypewrapper = apiconsumer.getapiorapiproductbyuuid(apiid, requestedtenantdomain); identifier identifier; if (apitypewrapper.isapiproduct()) { identifier = apitypewrapper.getapiproduct().getid();
Candidate: should we throw an exception?
Reference: these seem the same as the class variables
Candidate: i don't understand this matters, but why do we need the <UNK> here?
Reference: inline... maybe foreach
Candidate: i don't understand this matters, if the is inspections
Reference: why should the order be as such? trial and error, no? better to check that they are != since the hash function might change.
Candidate: why do we need the <UNK> here?
Reference: will it be good to have duplicated log messages here and [closedrivercommand:18](<link_0> maybe at this point, we can say that browser will not be closed after running? what do you
Candidate: please use <UNK>
Reference: always true
Candidate: should this be <UNK>
Reference: sometimes it produces non needed objects. seems like wasting cpu time.
Candidate: can we use the above...
Reference: this looks to be similar to other method except file name check in the code. it is good to refactor something like below to avoid duplication.  private byte[] getjarfileasbytearray
Candidate: why do we eating the exception here?
Reference: this method could be written as  java public static void clearvisitdate(string[] selected) { setvisitdate(arrays.aslist(selected), 0); }
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can you use localqueryrunner?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: you already have seturiinfo() at line 249
Candidate: :disappointed:
Reference: this case happens when the user presses escape (closing the dialog). so the progress bar is cleared through that.
Candidate: why do we need to wait again?
Reference: i think we need to move into this null check
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: math.ceil here and "(int)(tmpfilesize / chunksize) + 1" in onchunkeduploadstarted? theoretically both are correct, while i have a slight preference for the integer approach i at least would request to
Candidate: please use <UNK> <UNK> <UNK>
Reference: does it make sense to add a null check for getpossiblepools?
Candidate: this should be the <UNK> <UNK>
Reference: suggestion logger.debug("checking docker os type");
Candidate: the syserr should be be <UNK>
Reference: i believe it would be more understandable to do the following:  // throws a gitlabapiexception if format is invalid format = checkformat(format); form formdata = new gitlabapiform().withparam("sha", sha); response
Candidate: throws runtimeexception
Reference: override
Candidate: should this be <UNK>
Reference: this.uri
Candidate: please use <UNK>
Reference: why not use [transactionstatus#canrollback()](<link_0> here?
Candidate: why do we need to clients?
Reference: this is a pretty heavy operation, which you need only when upgrading from a dc that doesn't doesn't support discard to a dc that does. you should use featuresupported to
Candidate: this should be the <UNK> <UNK> <UNK> the presenter.
Reference: i would prefer it equal to bigdecimal daysafterapril = getuseddaysafterapril(account);  bigdeciaml daysusednextyear = getremainingvacationdaysalreadyused(nextyear); //... .withvacationdaysusednextyear(daysusednextyear)
Candidate: why do we need the <UNK> here?
Reference: how about checking this return value in case it's null, would it make sense?
Candidate: i don't think this is an illegalargumentexception if <UNK> is null.
Reference: this equals implementation should include attributes from the command super class.
Candidate: can be simplified to return (o == null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: can you explain why this code was removed?
Candidate: get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get() get()
Reference: is this essentially the same as the both null case? i know you've covered the bases but it's difficult to see how we can be sure that o1 and o2
Candidate: if we is the software stripe { <UNK> } else { if <UNK> { <UNK> { <UNK> { <UNK> }
Reference: shouldn't this call the empty constructor? or the empty constructor has useless code inside of it?
Candidate: should this be <UNK>
Reference: this isn't actually asserting anything. needs to be:  java assertthat(one).contains("ping").contains("pong");  same thing below.
Candidate: nit: you can use the fixture.
Reference: the get() wouldn't have guaranteed visibility so why is this safe to do?
Candidate: should this be <UNK>
Reference: what happens if server-side mutations are enabled? if enabled, since we no longer would need to rs.next and read all the data from the server + generate delete mutations for
Candidate: we should need to use the <UNK> <UNK>
Reference: this is not safe from multiple objects trying to either close() or get() at the same time. you can end up with an object offered into the queue many times.
Candidate: why do we need to close the <UNK>
Reference: why this change? if this is not related to this pr, please undo it.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: please extract new segmentmetadataquery(...) as a variable.
Candidate: why do we need this?
Reference: why not check for ids not being equal?
Candidate: please import?
Reference: nit: might be worth extracting a local predicate
Candidate: use stepverifier instead of tests.
Reference: there is now a new method to make your life easier. replace the previous lines with this: statesystembuilderutils.incrementattributelong(ss, ts, tidquark, inc);
Candidate: why do we need need to evict the here?
Reference: why connect twice? if you already connect obtain the fingerprint from the existing connection.
Candidate: why do we need to use <UNK> here?
Reference: remove gettreeviewer().gettree() != null check since its also done internally in widgets.isaccessible().
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: this is an opportunity for a nice stream pipeline. not that it is absolutely necessary, but in my opinion, converting these utility methods to streams makes your intention clearer to
Candidate: why do we need the <UNK> here?
Reference: @bxf12315 if we launch here dependencypathselectedevent with the param isselected = true allows to respect the changes done at runtime strategy configuration changed by the user throw the wizard. i
Candidate: why do we need the <UNK> here?
Reference: i would suggest making use of batch operation here.
Candidate: should consecutive reloads sufficient?
Reference: suggestion return "fakeimagesubstitutor";
Candidate: should this be <UNK>
Reference: asserttrue(inputmap.equals(actuallist)); <link_0>
Candidate: why do we need to check for the <UNK>
Reference: i'd suggest to protect against null java this.signedheaders = signedheaders == null ? collections.emptylist() : new arraylist<>(signedheaders);
Candidate: i don't think we need to use the <UNK>
Reference: you don't need these properties because they actually don't exist nor apply
Candidate: rename to <UNK>
Reference: this should come from the mergetip that was read at the start of the merge op, *not* one that is read at the end of the merge op.
Candidate: what is used here or null? is null?
Reference: this can go down into the try block
Candidate: why do we need the <UNK> here?
Reference: reference.of("state", initialstate.getid()) could be replaced with initialstate.toreference(). showing the example with the string constant is not the best practice for users.
Candidate: why do we need the <UNK> here?
Reference: can be a do {} while since the hasnext is already done
Candidate: why do we need the <UNK> here?
Reference: when loading to cache i would suggest to load all records because they are not many.
Candidate: please use <UNK>
Reference: respones -> responses
Candidate: please use the <UNK> <UNK>
Reference: same as above. this is a test. you should check that the return value is correct and examine some fields in devinfo.
Candidate: why do we need need to check the <UNK> here?
Reference: (k) -> k suggestion return locks.computeifabsent(key, k -> new reentrantlock());
Candidate: can be replaced with <UNK> <UNK> ?
Reference: shouldn't we check here for ip ? returning a null ip address when no ports are configured although there would be one seems not so intuitive.
Candidate: should this be null?
Reference: add create(hit<t> ...hits) method to clean up a couple of calls of the form hits.create(arrays.aslist(a, b)), hits.create(singletonlist(ontologytermhit)) and hits.create(emptylist()) to hits.create(a, b), hits.create(ontologytermhit) and hits.create()
Candidate: static import
Reference: the build is failed. i don't see how but let's try revert this. perhaps this hasn't the behavior i think.
Candidate: feedid rename <UNK>
Reference: i believe that there is some difference between indexof(int) and indexof(string). it seems parse methods are on hot path, so performance could be critical here. please use appropriate methods for
Candidate: should this be the <UNK>
Reference: i doesnt really matter, just nitpicking: local vars are non-initialized. good practice is to initialize them to a defined value. but sure, it doesnt matter here since the code right
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: i feel like using optional and null at the same time is a bit of an anti-pattern.
Candidate: i don't think we need to check the the <UNK> itemstack.
Reference: shouldn't this be the name of the datasource?
Candidate: why do we need to use the <UNK> here?
Reference: stringutil.isempty?
Candidate: why do we need the <UNK> here?
Reference: use try-with-resource. java try (response response = executeget(bucketname, objectname, null, queryparammap) { ... ... } catch (errorresponseexception e) { if (e.errorresponse().errorcode() != errorcode.no_such_object_lock_configuration) { throw e; } } return null;
Candidate: should we be the <UNK> here?
Reference: these 2 catch blocks can be reduced to 1 like: java catch (instantiationexception | illegalaccessexception e) { throw new fragment.instantiationexception( string.format(error_msg_instantiation, fragmentclass), e); }
Candidate: should this be private?
Reference: null as a key and .get(null) looks atypical and not readable on the go. it does require some context for someone to get the background on this.
Candidate: please use <UNK>
Reference: why do we have two such methods now?
Candidate: remove the local variable, given member member member member member member member member member member member member member member member member member member member member member member member member member
Reference: also if its vsts and we are using pat, the username will be empty.
Candidate: should we be the <UNK>
Reference: maybe already send a statusupdate here that the task is starting.
Candidate: should we be the <UNK> here?
Reference: reformat this class to 3 space indentation and 120 line length.
Candidate: can be simplified to <UNK> <UNK> ? <UNK> : <UNK> ? thanks!
Reference: i guess just adding these two lines to the top of the method will solve the issue. the other additions are logically identical to the previous version.
Candidate: should we be the <UNK> here?
Reference: don't lock the dircache if you are simply reading and unlocking, its sort of a waste of time. use read() if all you need is to look at it. but,
Candidate: google google google google google google google google google google google google google google google google google google google google google google google google google google google google google google
Reference: maybe if the file type can not be inferred by it's extension name, we can try and read it as a property file by default (or maybe .yml?) and let
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: irc is not open if con is null initially. the logic here is a bit muddled.
Candidate: nitpicking: "with class" afaik.
Reference: i would completely rephrase this: > closing connection to cluster {}
Candidate: should be simplified to <UNK>
Reference: this is just an accessor so i don't think it has any effect when the return value is unexamined.
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: where does nocache come from? and why should all services not have caching?
Candidate: should we use <UNK> here?
Reference: hashcode must use the name, since that is also used in equals
Candidate: can you use <UNK> <UNK> <UNK>
Reference: the secondary id patch has been merged, see how genevieve uses it for the scatter / how it is used by the statistics too
Candidate: this should be the <UNK>
Reference: 1. do we need to include e.getmessage when passing the exception as the second argument? 2. also, do we need to do both logging and throwing? this will result in
Candidate: if we is the software <UNK> software error, so we don't need to do we need need to check the getcredentials
Reference: <link_0> is also used multiple times and could be a static final.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: so this is using preparerequest as the entry key. i see that you added equals/hashcode implementations where appropriate, but a quick look into the implementations shows that defaultpreparerequest.equals() will call
Candidate: should we throw an exception here?
Reference: you aren't removing duplicated entries...
Candidate: can you remind me if the is is the <UNK> <UNK> is the <UNK> <UNK>
Reference: please add logging at least in trace level
Candidate: should be be specific?
Reference: what happens if server does not start ? i.e. port is already in use ? then this would loop forever..
Candidate: why do we need this?
Reference: same with this, if the logic is specific to villagerentity, it can be overridden in the mixin
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: future work: * to avoid confusion of the method usage, consider renaming to something like: 'getsnappablevmdisksforstoragechecks'. * remove the unneeded 'getdiskidstoignoreinchecks' list and replace with some flag (as discussed...)
Candidate: this should be the <UNK>
Reference: i'd suggest expanding the exception a little, with who's currently holding the token by doing adding processorname/segment
Candidate: why do we need the <UNK> here?
Reference: if we could get rid of null check, addchildrenproducerbatch and getchildrenproducerbatch could be removed as well.
Candidate: this should be the <UNK>
Reference: unnecessary parenthesis
Candidate: should this be <UNK>
Reference: for code like this please use traditional for loops / iterators etc to iterate the values in the collection. this is a command line tool so not a big deal
Candidate: can we use <UNK> <UNK> <UNK>
Reference: inline: java return hash.addpage(page);
Candidate: why do we need need to be <UNK> insensitive here?
Reference: probably \s is better: from docs > \s a whitespace character: [ \t\n\x0b\f\r]
Candidate: should we throw an exception?
Reference: not sure we need all the double checks? can't we just do context.replace(...) and if it doesn't match it won't replace? the strings here are super short. it might even
Candidate: can we move this to <UNK> mapping?
Reference: not sure if all callers pass non-null, but if the callers aren't careful, this could be null. could verify with: suggestion if (requirenonnull(text).isblank())  (with a static import of objects.requirenonnull)
Candidate: can we return <UNK> <UNK> <UNK>
Reference: return getname() would perhaps be nicer.
Candidate: @since issue:
Reference: hint: pass the "mode" parameter into the "setactionmodeinttitle" function. also, suggestion: make the setactionmodeinttitle function private.
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: <link_0>
Candidate: i don't think we need to do the tear down the site.
Reference: @cvrebert maybe add a constructor for this common case of 10 random alphanumeric characters, false and true?
Candidate: please remove the <UNK>
Reference: have you tested that this actually works? iirc when configuring the trigger a new instance is created, both via the ui and via pipeline script, so it's not the same
Candidate: should we be the <UNK> here?
Reference: could -> may
Candidate: the syserr should be be <UNK>
Reference: you can use if (has(feature))
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: the uuid of the worker should be passed to method peek instead of this random value
Candidate: can we use <UNK> <UNK> <UNK>
Reference: since this class implements closeable, shouldn't we wrap that with try (closeablehttpresponse response = request(query)) { ... } so the close method will be called at the end of the
Candidate: should we be the getconnection here?
Reference: add context specific message without using e.getmessage().
Candidate: should we throw an exception here instead of exception?
Reference: suggestion initcolumns.add(col_id_actions);
Candidate: why do we need to clone the array.
Reference: should we use "withsideeffect" as description to be consistent with current .withsideeffect?
Candidate: should we be <UNK> here? if we is rejected ill stack trace level being passed checking checking checking checking checking checking checking checking checking checking checking checking checking checking checking
Reference: isnotnull() ?
Candidate: can be replaced with <UNK> reference: java list<object> <UNK> = <UNK> ?
Reference: is it possible to add a similar assert for cpu_consumed_nanos?
Candidate: please use <UNK>
Reference: @cvrebert for that we can pass locale.english to it...
Candidate: this should be <UNK> <UNK>
Reference: please, don't introduce unrelated changes. let's focus on consolereporter.
Candidate: why do we need this check?
Reference: this should be checked on construction (using preconditions.checknotnull()), and throw an exception if the file is null. it's usually better to fail fast and loudly at the point of origin
Candidate: i don't think we need to throw an exception
Reference: where is this magic number coming from?
Candidate: should this be <UNK>
Reference: not entirely sure we should generate disk_ok for this. will discuss with you.
Candidate: should we be the <UNK> here?
Reference: are we assuming that metrics is non-empty?
Candidate: why do we need snapshotid in the constructor?
Reference: since ioexception is checked we don't want to flood everything with throws ioexception. thus i initially had it wrapped just in illegalstateexception. imo we should create something like tmclangsruntimeexception extends
Candidate: should we use the exception here?
Reference: is toarray required?
Candidate: why do we need need to the <UNK> here?
Reference: onerrormap?
Candidate: should this be the <UNK>
Reference: try to new layout manager from registration manager
Candidate: is this needed here?
Reference: i'd go for avoiding putting synchronized on it and stating it in the docs. there could always be another sync'd variant created by the builder.
Candidate: can you use division for the size?
Reference: can you add two constructors in rulefactory? * rulefactory() - default constructor for backwards compatibility * rulefactory(resourceloader) - the new one to be used here i think, the resource loader
Candidate: we should need to use the <UNK> <UNK>
Reference: please invert
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: clonedfactidentifier and clonedexpressionidentifier not needed
Candidate: can we return <UNK> <UNK> ?
Reference: why object class?, maybe set type to null could be a better idea
Candidate: why do we need to use <UNK> here?
Reference: exception containing the cause is dropped.
Candidate: i don't think we need to throw an exception if the exception is the
Reference: url = serverurl + userprefs, shouldn't all these use the full url to the place with the api key?
Candidate: if we is the software <UNK> <UNK> should be an exception if we don't want to throw an exception if <UNK> { throw new <UNK> }
Reference: as real part?
Candidate: should we be the <UNK> here?
Reference: maybe we can extract this union+immutablecopy to the aggregateclass itself?
Candidate: please use <UNK>
Reference: why can't we add % into special_chars and avoid using additional if?
Candidate: i don't think we need to check for the <UNK>
Reference: hint: it's most readable is to simply use google guava after importing com.google.common.collect.sets:  set<string> stringset = sets.newhashset("structcol.a");  the same as other test cases.
Candidate: please use the same as above.
Reference: singular is good here, imho.
Candidate: the syserr should be <UNK>
Reference: this should be shown
Candidate: i don't understand this matters, if we matters, matters, but you don't need why, if the matters, but i don't understand why, but it matters, afaik. edit: i haven't tested
Reference: return an empty list here instead
Candidate: should this be <UNK>
Reference: the uri of me endpoint can be configured by stormpath.web.me.uri. as @dogeared requested, i'll do the change myself
Candidate: should we use the <UNK> here?
Reference: @pmlopes can you also call channel.close().sync() ?
Candidate: what happens if the exception is is invalid?
Reference: i have a feeling this one isn't going to be saved either as it nulls out all the values.
Candidate: why do we need a <UNK>
Reference: in apache/master, we have "select 'upgrading metastore schema from 2.1.0 to 2.2.0' as message;" which shouldn't have the issue as per description in jira. i think, skipping the row based
Candidate: nicer: <UNK> <UNK> <UNK> b/w <UNK>
Reference: please split these changes in another review
Candidate: should we be <UNK> here?
Reference: we should probably have these as part of the object, as they're used a lot.
Candidate: we should need to log succeeded the events is enabled, so we don't need need to throw an exception completely.
Reference: maybe also change to not have slow logging?
Candidate: <UNK>
Reference: call super(name);
Candidate: <UNK> *= 2;
Reference: should we use collator.getinstance(locale) ? otherwise this will use local machine or jvm default which might not be what we expect. i guess en_us would be safe choice.
Candidate: why do we need the <UNK> here?
Reference: i'm unsure how this connects to the fork-join related changes.
Candidate: can be replaced with <UNK> ?
Reference: if we are touching this code, we can also add curly braces {} around all those if/for etc conditions.
Candidate: why do we need the <UNK> here?
Reference: i thought we talked about making this a bitset somehow. have packext keep a static int that counts how many packexts have been created and declared. change its constructor to
Candidate: why do we need the <UNK> here?
Reference: i maybe mising something here: the isuseuseraccesstoken() returns true if the token composedtaskrunnerconfigurationproperties is not null and isuseraccesstoken is not null. however if isuseraccesstoken is false, the method will return
Candidate: can you use the getconnection in the <UNK> method...
Reference: please use camel case. it should be fromwkt.
Candidate: is this needed here?
Reference: please throw an exception if the query type is unknown.
Candidate: the syserr can be replaced by: <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: so if i'm right you can now catch an exception here in case getcomputedvalue didn't worked for some reason. and in the catch i guess you can log an error
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: please update java doc according to new parameter and exception adding
Candidate: this should be the <UNK>
Reference: wouldn't onchildmoved affect the indexes of every key? i have a feeling that's why @puf didn't use a map in the first place but i could be wrong.
Candidate: please remove system.currenttimemillis()
Reference: typo
Candidate: i don't see the reason for this fqns in the presenter.
Reference: again, test for topic creation but replytopicstubs
Candidate: can be replaced with <UNK> ?
Reference: i like the solution behind the headers&items. :+1:
Candidate: why do we need to use <UNK> here?
Reference: is this subtype equality needed?
Candidate: this should be the islocal as well.
Reference: i'm not really a fan of shoottimelock - it feels pretty ambiguous (particularly as this is a boolean!)
Candidate: do we need need to be the <UNK> here?
Reference: correct keyword order
Candidate: use <UNK> <UNK> <UNK>
Reference: is this correct?
Candidate: this should be <UNK>
Reference: same here. pls refer to <link_0>
Candidate: this can be repelaced here.
Reference: two more unintended ofs here - yeah this is always a problem with renaming methods that are named as common english words
Candidate: could we include the in the same as part of the <UNK> as part of the the same as part of the the same as part of the other places
Reference: missed a spot
Candidate: should this be <UNK>
Reference: did you take a look at this? <link_0>
Candidate: typo: <UNK> -> <UNK>
Reference: here is where you could use the parsefileds method and do all this in a single line. values.addall(parser.parsefields(iotasmessage.getdata())
Candidate: i don't think we need to throw an exception
Reference: how about coordinates.length instead of 7?
Candidate: please rename <UNK> to <UNK> <UNK> <UNK>
Reference: would it be worth putting some kind of warning here? it is an unexpected situation....
Candidate: please make sure that it will throw an exception if we somehow will somehow make somehow somehow somehow somehow somehow somehow somehow somehow somehow somehow somehow somehow somehow somehow somehow
Reference: so here's a general question: iiuc, you pass on the original type of the change event (i.e. the struct obtained from the sourcerecord); i'm wondering whether that's a good idea,
Candidate: should we throw an exception?
Reference: fortify only complain about comparing. we should stick to default tolowercase and don't use "local.english". we only need to check comparing by using equalignorecase without using local.english. check checkconfigureddisplay() method
Candidate: this should be the <UNK>
Reference: inconsistent line breaks.
Candidate: the syserr should be be the
Reference: there are three interesting cases here. if the caller didn't call setallowpushoptions(true), then we don't advertise that we can get push options and pushoptions is null. we can detect this
Candidate: if (state != null && <UNK> { return <UNK> }
Reference: swallow?
Candidate: why do we need the <UNK> here?
Reference: i would prefer using a hashset<branch.namekey>.
Candidate: wouldn't it make sense sense to move this into a method?
Reference: maybe rename to "lastselectedentry" (keeping the "entry" name in the for loop)
Candidate: if <UNK> != null) { return <UNK> |= <UNK> }
Reference: this could easily be a uuid returning function.
Candidate: i don't understand why we need to the <UNK> the <UNK> <UNK>
Reference: or duration.standardminutes(10) like you've used above
Candidate: can we be an empty() if clause.
Reference: here we could use matcher.startwith and avoid joining with last 2 empty strings
Candidate: @hdouss why do we need to here?
Reference: duplicated check? ;-)
Candidate: should we throw an exception here?
Reference: format! and separate handling of handles and datasources.
Candidate: use [] here instead of the []
Reference: createsafexmlsource
Candidate: you don't need to use the <UNK> <UNK>
Reference: is this a bug?
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. 'severity: major') force "add" method conditionally. [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2> [![rule](<link_1>](<link_2>
Reference: unchecked cast. same below
Candidate: can we throw an exception?
Reference: wait, this is worse than the previous version. what happened to the assertequals()?
Candidate: should we be the <UNK> here?
Reference: don't call this
Candidate: what happens if the exception is is the
Reference: org.ngrinder.sm.ngrinderlightsecuritymanager
Candidate: this should be the <UNK>
Reference: this second variable with the same value seems to be unnecessary
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this seems like it violates the "correctness" of how data cube works in that the user defines the "capacity" of the id range and it honors that. what you've done
Candidate: use <UNK>
Reference: please don't generate 3 rpcs sequentially like this. it really slows down the ui when presenting information. instead what we should do is create a listbranchresult data type to return
Candidate: nit: 49
Reference: please use the same pattern we do elsewhere. also, this is already being set in the configfactory, so  realmconfiguration realmconfig = configfactory.createconfigurationbuilder() .name(realm_name) .compactonlaunch(compactonlaunch) .build();
Candidate: please remove the <UNK>
Reference: why not use stringbuilder?
Candidate: can be replaced with <UNK> ?
Reference: how will this method be used?
Candidate: why do we need the fully-qualified properties? here?
Reference: you should probably squash both commits. like this commit here wouldn't compile as you didn't declare logger, and the next one you remove this logger. as a matter of fact,
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: this can just return repository.hashcode()
Candidate: use objects.hash()
Reference: updatevalidsizepercontainerid
Candidate: why do we need to clone the <UNK>
Reference: we should reference "resource" from util.getresourcedir() no ?
Candidate: can we make this private?
Reference: travis doesn't like this:  > task :spring-rabbit:checkstylemain [ant:checkstyle] [error] /home/travis/build/spring-projects/spring-amqp/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/rabbitadmin.java:340:33: reference to instance variable 'logger' needs "this.". [requirethis]  any chances you can fix and we merge? thanks
Candidate: the syserr can be replaced by: <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> <UNK> } });
Reference: this looks like it could even be an info message.
Candidate: why do we need to check here?
Reference: it would be nice if we could have a metric counting the number of discarded items.
Candidate: i don't understand system.exit, we don't need to do we need need to do we need need to do we need need to do we need need to close the
Reference: move this validation to pluginprofileservice.
Candidate: why do we need the <UNK> here?
Reference: let's remove this line
Candidate: <UNK> is a <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: by no means i am against the idea of having in-liners for speed up. ( i love them so much in fact! don't tell cm! ), but for the sake
Candidate: please remove this method("post")
Reference: minor: use getintinrange instead of getint here.
Candidate: please use <UNK> <UNK> <UNK>
Reference: this string should be stored in a constant and the branch type should also be a %s parameter
Candidate: why do we need need to check the <UNK> here?
Reference: can you replace this with a "validatearchivepath" method? i imagine we can do quite a few additional checks (e.g. invalid characters in the page).
Candidate: should we be the getconnection here?
Reference: is this gonna be stripped correctly in user builds? i heavily doubt it. you're gonna have a lot of call overhead. and nobody wants to see your webview logspam in
Candidate: why do we need to check the <UNK> here?
Reference: disabling the non-durable parquet appender should get us a durable appender
Candidate: why import?
Reference: why this check? the interface should provide all needed methods.
Candidate: i think logged,
Reference: we need a test that the default would be with root, but we are forcing it to be without root using the option. that's why we did this whole feature
Candidate: please remove the method("post")
Reference: is this the correct message to provide here. the internal key store is available only for the super tenant. shouldn't that information be mentioned.
Candidate: ![major](<link_0> 'severity: major') remove this unused method.
Reference: don't use i for the intent as it is usually used for counters. you can probably avoid creating a variable and just call getintent in the next line
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the shuffle won't have much effect because the stream will get sorted below. i am not sure what the right behavior would be, but are the entities always supposed to
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: ![minor](<link_1> assign this magic number 0.02 to a well-named constant, and use the constant instead. [![rule](<link_2>](<link_0>
Candidate: do we need to call <UNK> <UNK>
Reference: nit: if debug log is not that imp, this could be replaced with few lines of code using for-each and lambda:  replicationloadsources.foreach(replicationloadsource -> optional .ofnullable(replicationloadsourcemap.get(replicationloadsource.getpeerid())) .ifpresent(pairs -> pairs.add(new pair<>(servername,
Candidate: this should be an exception if <UNK> { throw nullpointerexception if <UNK> { throw nullpointerexception if <UNK> { throw nullpointerexception if <UNK> { <UNK> } } } } } }
Reference: else is not needed since you returned in line above
Candidate: i don't think we need to check the the <UNK> the the <UNK> is the
Reference: these tests do not, in fact, throw exception. i would prefer that the signatures be changed to reflect the exact exception that is thrown, if any.
Candidate: why do we need the <UNK> here?
Reference: any reason to not pass e as the 2nd argument, to preserve the stack trace?
Candidate: please use <UNK>
Reference: return type of securityexpressionoperations to reduce reflection overhead?
Candidate: this should be setemptyelement().
Reference: change it to logger.error
Candidate: the syserr should be be <UNK>
Reference: so this is this?  relationship.setleftplace(leftrelationships.size());  i think this would be more readable then leftrelationships.get(0).getleftplace() + 1 and it would even work for the case if the relationships are
Candidate: this we remind me that the getconnection in the <UNK> we should have the <UNK> accordingly, in the <UNK>
Reference: although this may be technically equivalent, it breaks with the structure of the rest of the method. as such, i do not think the change is warranted. so, please revert
Candidate: if <UNK> != null) || <UNK> { <UNK> }
Reference: nit: is this meant to be private? i'd think users should use create(...)
Candidate: should this be <UNK>
Reference: same problem as in defaultclimateprovider replace this line with enumtemperature.getfrombiome(biome biome, world world, blockpos pos) here or it can't detect enumtemperature.hellish.
Candidate: please use <UNK> <UNK> <UNK>
Reference: hmmm, does this need de-parenting?
Candidate: should we throw an exception instead of returning null?
Reference: move this back to line 105 so it doesn't show up in the diff as it hasn't changed. let's try get the diff as small as possible with only necessary
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: maybe want a default value here ("unknown?") - i think that can return null
Candidate: do we need need to admit that this is is the that the <UNK> is the that the is the
Reference: end could have a value of -1 if a user makes a typo in their expression. you can probably avoid that by checking that value also contains } _after_ ${,
Candidate: why do we need to <UNK> here?
Reference: weird method name
Candidate: why do we need to here?
Reference: i have a cute one:  timestampmapping().values().stream().maptolong( lockwatchversion::version).summarystatistics()  should get you sorted?
Candidate: should we be <UNK> specific?
Reference: boolean.parse(string) is probably nicer, but not essential.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: this is going to need to be verified with forge since i believe forge handles entity registration differently.
Candidate: why do we need the <UNK> here?
Reference: write a function for this. looks like this code is not repeated in 3 places.
Candidate: why do we need the <UNK> here?
Reference: it seems that there is an unexpected race condition. consider following test: java public class queryhistoryracetest extends gridcommonabstracttest { @after public void stopcluster() throws exception { stopallgrids(); } @test public
Candidate: i don't think we need to check for the <UNK>
Reference: this is a regular interface, not an annotation, so remove the @.
Candidate: should we be the <UNK> here?
Reference: do we want to make the formatting a bit more safe? if i am not mistaking, this also breaks if the number of parameters does not match the number of
Candidate: should this be <UNK> <UNK>
Reference: if you return here, you can avoid the else { } and thus reduce nesting :)
Candidate: i don't think we need to use the for the <UNK>
Reference: extra ; ?
Candidate: this should be the <UNK>
Reference: formatting.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: method should be called isunique, not uniquesampler.
Candidate: the syserr should be be <UNK>
Reference: consider wrapping it in a method that gets the key. use it in the getkeystorepasskey and getkeystoreurlkey methods.
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: please put the statement on a new line and in between curly braces
Candidate: why do we need '@override' here?
Reference: please move this line closer to tokentypes.literal_catch. recheck code coverage after this move.
Candidate: i don't understand this matters, what about the <UNK> of the <UNK> <UNK>
Reference: minor: it would be "cleaner" to do the hasnext check before checking for migration stamp and destruction. it's not clear from the contract does the hasnext interact with the underlying
Candidate: i don't think we need to the prop is invalid?
Reference: this is oracle specific implementation. there are other jvms too: ibm, azul, openjdk, etc, if the jvm is not oracle based implementation is com.sun.management available?
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: @vilchik-elena typo? shouldn't we have a "h" as in "three"?
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: - [x] don't occur -> didn't occurred --- it was modified. 6a981ae1248bd5d530270f738a344df2f5ffc6f9
Candidate: please use <UNK>
Reference: why is "int index = 0" not in here?
Candidate: the syserr should be be <UNK>
Reference: this remote is not invalid but it only accepts user2 s/invalid remote/not permitted fetch/
Candidate: you could use the chunks with the chunks
Reference: maybe checkthat(cancellationfuture.isdone(), is(false))? otherwise it will actually wait for 2 * milli milliseconds in this method.
Candidate: why do we need to here?
Reference: are there any tests that cover these changes?
Candidate: please use <UNK>
Reference: this condition is missing the workaround for the old "vendorisemployeeornonresidentalien" route node.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if-else can be simplified as: 'errormessages.putifabsent(constants.invalid_trial, new arraylist<>()); errormessages.get(constants.invalid_trial).add(message.get());'
Candidate: can we remove the variables too?
Reference: fixed this method in my branch: <link_0> pls, merge my branch into yours, so as those fixes are o included in this pull request
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: if you are using an atomicboolean (and dont do anything else), you no longer need the synchronized keyword here.
Candidate: why do we need to check on the <UNK> ?
Reference: use enummap instead of hashmap.
Candidate: why do we need to check the <UNK> here?
Reference: can be simplified with stream().map() over map.entryset (no need to use stream.builder())
Candidate: typo: <UNK> -> <UNK>
Reference: since theoretically, order matters, shall we test both orders-of-operations?
Candidate: why do we need to use the here?
Reference: hoppers with slabs or signs above will not work. gettype() will never return null, only air.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: do you think it makes sense to include the generation id in the logger too?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but i don't understand why,
Reference: what is this for? shouldn't it not be needed for the integration test?
Candidate: wdyt about adding the <UNK> <UNK>
Reference: flanes.isempty()
Candidate: this should be the <UNK>
Reference: i'd just do if (objects.equals(channel.get(), key)) { then it does all the null checking for you. objects.nonnull is only really useful where a function is required (e.g. stream.filter) as all
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: this is unused now.
Candidate: why do we need the <UNK> here?
Reference: stringutils.isblank(), because we want to avoid npes
Candidate: can we use the <UNK> here?
Reference: do we actually need this to get login working?
Candidate: should we be the <UNK> here?
Reference: may want to give the implementor the rule that prohibits this so they know where to look.
Candidate: should we be schedule() { } catch (throwable e) { blah e) { throw { throw { throw e) { throw e) { throw e) { throw e) { throw
Reference: please move to asyncdataprovider for re-use. implement an iasyncconverter to integrate the sort logic...
Candidate: if <UNK> == null) || <UNK> && <UNK> { <UNK> }
Reference: does this work with crlf delimited strings? it looks like it's not going past the lf. maybe you just need to call this method on the normalized string, and stop
Candidate: this should be the <UNK>
Reference: old typo: 'excepted' should have been 'expected'.
Candidate: can be replaced with <UNK>
Reference: move this up to the other create methods?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can be returned right away.
Candidate: please use <UNK>
Reference: nack for that preconditions check, otherwise it looks good. thanks for working on that. i need a bit more time to go again over all and check if anything might
Candidate: should we use the exception here?
Reference: give some help: "float value found in query; use double instead"
Candidate: <UNK> complains about the implementation:  <UNK> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: objectidmapper.getobjectforid can return null and is marked as @nullable, so we should mark this method as @nullable too
Candidate: this should be setemptyelement().
Reference: collections.emptyset() returns a singleton so is preferred here.
Candidate: this should be <UNK> <UNK>
Reference: omit 'verifying' word
Candidate: wrong formatting
Reference: there's a spinner that appears while it's loading. should wait for that to disappear instead of explicit wait
Candidate: we should need to hide the error message in the messages.properties case where we are expecting an invalid id
Reference: could assign the sslcontext to a local variable to avoid the duplicate volatile read
Candidate: i think (actual == null) { <UNK> = <UNK> }
Reference: reviewed commit, looks ok. the framework should fail to start if we miss out any of these accidentally
Candidate: please use <UNK>
Reference: nit: use parameterized logging (same with the following log.error).
Candidate: should we be the getconnection here?
Reference: can this be "new datasourceenable(isxa())" ?
Candidate: can be replaced by: <UNK> -> entry.getkey(), <UNK> -> <UNK> -> <UNK>
Reference: are you sure it works with codeminingdemo (java main)?
Candidate: i don't understand why, but it is be the <UNK> the <UNK> is the <UNK> the <UNK> <UNK>
Reference: this variable has only this initialization and a few get in this class. i guess the optional here is not needed.
Candidate: let's talk offline. indicating that means that means that means that means that means that means that means that means that means that means that means that means that means
Reference: this should just create the group directly rather than trying to lookup and catching exceptions
Candidate: let's add indexoutofboundsexception to e.getmessage() message.
Reference: nit: or string.valueof(currentleader)::equals
Candidate: why do we need this check?
Reference: here maybe you could use .map(requestresolver::resolve).map(this::instance).orelse(null);
Candidate: this should be the <UNK>
Reference: the indentation should be deeper.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: you only need synchronized (year_format) { here. and it will block with the .settimezone() calls above.
Candidate: if the == null && <UNK> { <UNK> } else { <UNK> } }
Reference: this is weird? why is it about a totally different message?
Candidate: why do we need the <UNK> here?
Reference: i actually think we should deprecate bulkheadconfig.maxwaittime(long maxwaittime) and add a bulkheadconfig.maxwaitduration(duration maxwaitduration).
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: what happens if the operation did not run correctly, e.g. an exception was thrown inside the execute block? given in that case it is possible that modelfile does not exist
Candidate: if we && 100) { <UNK> }
Reference: moze return lookup != null ? lookup : insert(globalid)
Candidate: please use setemptyelement().
Reference: different defaults here to the field defaults...
Candidate: nit: 49
Reference: nit: jut call super.setforceclosetimeoutmillis(...) this will also ensure we do the correct thing if we ever change the super method content and will allow to make forceclosetimemillis private
Candidate: i don't think we need to check the <UNK>
Reference: code reformat please
Candidate: the syserr should be be <UNK>
Reference: assert this before calling get.
Candidate: why do we need to use the <UNK> here?
Reference: how about halting if suitepath does not end with .java?
Candidate: why do we need to use <UNK> here?
Reference: i think it would be even cleaner if you do not use the variable: java getimplicitlycalledconstructor(methodtree) .map(symbol.methodsymbol::throwntypes) .ifpresent(thrownexceptions::addall);
Candidate: this should be repelaced on the sides of the <UNK>
Reference: looks like line 136-150 is duplicated at 249-263. might consider creating a method to do this.
Candidate: why do we need the getconnection here?
Reference: sets.of(cell1, cell2) // much easy to read.
Candidate: use map<> <UNK>
Reference: our convention is to wrap if clauses in curly braces
Candidate: can we use weights of the weights of the weights of <UNK>
Reference: i think i'd like to see two methods here.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: as described in our [policies doc](<link_0> all but the first test should be ignored
Candidate: use <UNK> <UNK> <UNK>
Reference: can we use a scheduledexecutorservice to do this? feel free to refer to histogramdumper in nonblockingroutermetrics
Candidate: why do we need the <UNK> here?
Reference: datetimes.wrapformatter(isodatetimeformat.datetimeparser()) could be cached more globally. maybe create a constant in datetimes.
Candidate: can we move this logic into a dc?
Reference: suggestion browserwebdrivercontainer webdrivercontainer = new browserwebdrivercontainer<>()
Candidate: the syserr should be be <UNK>
Reference: this could be called in the above try block (after the for loop), then in scan(httpmessage, string, string) the try/catch and try/finally blocks could be removed.
Candidate: why do we need to use the <UNK> here?
Reference: why is this method needed, when only generatehmacsha256() is exposed as a java action? or am i missing something?
Candidate: should we throw an exception instead of returning an exception?
Reference: except for safari users, all the others should get tiff issue.
Candidate: the syserr should be be the
Reference: inline
Candidate: why do we need to <UNK> eq here?
Reference: rename to config,cfg or launchconfig
Candidate: you don't need to create a wrapper for the <UNK>
Reference: just a system.out, no validation here
Candidate: why do we need to <UNK> here?
Reference: since getparameters().getcustomcpuname() is always != null (value is taken from cluster/vm as a default), then once running with run-once without changing custom cpu type field manually then passthrough will be
Candidate: should be be the <UNK>
Reference: what if the user provides both cluterid and serverid?. so you could swap the above comparisons.
Candidate: if the == null) { return; } <UNK> } else { if <UNK> { <UNK> }
Reference: just make the method throws exception.
Candidate: why do we need the <UNK> here?
Reference: likewise as for forwardedheaderfilter, it is worth applying a check if this even needs to be done.
Candidate: why do we need the <UNK> here?
Reference: i guess there's never a time that this is null. but, we do sometimes check for null (like in currentconfig below). why not here? i know loadconfigifnull called from applicationinitializer,
Candidate: this should be overridden with inspecting the
Reference: with these changes, there is still no exception thrown when the file does not exist. we need to check if the ldif exists and throw an exception if it does
Candidate: can we throw an exception here?
Reference: use jnit.assert instead of framework
Candidate: need need need need need need need need need need need need need need need need need need need need need need need need need need need need need need
Reference: this doesn't look right. what if there are >9 questions?
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: format: { on the same line than method declaration
Candidate: <UNK> *= 2;
Reference: we need to validate the type of the object here. currently we support string, number, int, long, float, double, boolean, date, and null.
Candidate: why do we need to call <UNK> here?
Reference: shouldn't be better to use a specific exception such as cannotpushsystemeventexception or something like that.
Candidate: should we throw an exception here?
Reference: can you use separator constant here?
Candidate: nit: you can use try-with-resources
Reference: what happen if options.getwidgetcontentprovider() returns null ? we should return true for this use case
Candidate: why do we need the <UNK> here?
Reference: do we need to run decomposition here? why can't we just call monitor.update()?
Candidate: why do we need the <UNK> here?
Reference: did you take a look at this? <link_0>
Candidate: why do we need to check for the <UNK> <UNK>
Reference: can use enumset here too, unless the order is important.
Candidate: why do we need the <UNK> here?
Reference: ... and then here i would have  if (failed.get()) { throw new previouserrorsexistexception(); }
Candidate: <UNK> *= 2;
Reference: this causes an npe when updating an owner that doesn't yet have an access mode list.
Candidate: why do we need to evict the <UNK> here?
Reference: can we derive the external resources from env, instead of just passing in an empty map here?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: looks like this catch could just be removed?
Candidate: why do we need to permission?
Reference: do you care if the job completed successfully? i'd assume so which would mean you'd want to check the status before deleting...
Candidate: you can use the syserr
Reference: i found this hard to understand. perhaps it would be more clear as: !getneedtowork() || finalizerdaemon.instance.progresscounter.get() != startcount || finalizerdaemon.instance.finalizingobject == null
Candidate: why do we need need to mock <UNK>
Reference: 0xf is a valid control character. all other cache keys use 0xff as separator which is guaranteed to never show up in any valid utf-8 stream.
Candidate: why do we need to use the payload?
Reference: i've only just noticed that the current core makes *every* bc fluid burn, which includes residue. instead can you fix that as well by adding another element to the data
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK>
Reference: what happens if/when diff > m_spec.getinterval()?
Candidate: why do we need to the <UNK> here?
Reference: one constructor must call another one to avoid code duplication and bugs. this constructor must call the first one.
Candidate: why do we need the <UNK> here?
Reference: can you merge these three filter operations into a single one?
Candidate: why do we need to here?
Reference: this assumes that file.tostring() returns the full file path. however, the file is a public abstract interface org.apache.parquet.io.outputfile, which doesn't have such method, so tostring() is up to the implementation;
Candidate: why do we need permission?
Reference: ![major](<link_1> reduce this lambda expression number of lines from 23 to at most 20. [![rule](<link_2>](<link_0>
Candidate: why do we need the <UNK> here?
Reference: sucess -> success
Candidate: you don't need to use the <UNK>
Reference: use guava streams.stream(mystream) instead of streamsupport.stream(mystream.spliterator(), false)
Candidate: why do we need the layout here?
Reference: can we just not call this, if isinitiator() == null returns true
Candidate: i don't think we need to do we need need to check the <UNK> <UNK>
Reference: searchview's visibility isn't dependent on any of the discovery fragments, its visibility should be controlled using inside maindiscoveryfragment'.
Candidate: why do we need to use <UNK> here?
Reference: there's also a need to test this pipeline. ps: i know there's buildpipelineinvokertest.java - but stil doesn't test the provided pipeline.
Candidate: can be replaced with <UNK>
Reference: please don't use the "mocked" version here, it's not needed.
Candidate: should we use the exception here?
Reference: this can still take argument of type sqldialect
Candidate: should we be schedule() here?
Reference: just a question, instead of introducing a new variable mimagesonly here, can't we just set mfilter = filter.images; when getactivity().getintent().getbooleanextra(mediabrowseractivity.arg_images_only, false); is true? and keep savestate and restorestate without any
Candidate: why do we need to @nbradbury {..} picker fragment creates the fragment in the fragment (ie: the fragment (ie: the fragment (ie: <UNK> fragment (ie: <UNK> fragment (ie: <UNK> fragment
Reference: this is fairly expensive computationally. i think we could track this in a field and update it as requests are attached/detached from inside an action. this would make computation incremental
Candidate: results results results results results results results results results results results results results results results results results results results results results results results results results results results results results results
Reference: state is a boolean - no need to _compare_
Candidate: why do we need need to hide the exception?
Reference: minor: would prefer that cloud_replica_keyword comes before mount path since that would order the path from least to most granular
Candidate: can we make this private?
Reference: since more state => more branches => more bugs, is there a strong reason to default to lazy initialization? this can be a stateless final nonnull if we initialize at
Candidate: can we use the <UNK> here?
Reference: shouldn't this be done here <link_0>
Candidate: the monitors should be null?
Reference: sets and maps contains useful static constructors fyi
Candidate: i don't understand this matters, if we matters, but i think we matters, that it matters, but we don't need to do we need to check the <UNK> <UNK> <UNK>
Reference: maybe return false here at once would be better?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this class can be private
Candidate: why do we need to the <UNK> here?
Reference: let's please use the jwksource to retrieve jwks. that will allow you to use a jwkmatcher that removes some of the validation you are doing in parsealgorithms.
Candidate: we should need to do we need to do we need need to do we need need to do we need to do we need need to do we need
Reference: this has been tested in allactionsaccesscontroltest, so it needs not be repeated anymore.
Candidate: i don't need to do the following <UNK> of the the following work.
Reference: please do only start any further threads or implementation once you know there are items available for the tellstick binding (see providesbindingfor() as a possible hook). please also stop this
Candidate: i don't think we need to hide threw exception if the threw an exception if we threw an exception inspections we don't want to threw the exception
Reference: unclosed cache manager :( you can use [cachemanagercallable](<link_0> avoid running such risk.
Candidate: <UNK> *= 2; assert expected)
Reference: @cwildman interruptedexception handling logic does not look quite right to me. at the very least one must call thread.currentthread().interrupt() when catching and not re-throwing interruptedexception. i also think we should
Candidate: i don't think we need to evict the the to the the <UNK> the <UNK> is the software <UNK>
Reference: dump() uses the tmlog, please keep it consistent.
Candidate: why do we need to here?
Reference: nit: this doesn't seem like it should belong in this pr
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: without a timelock block instead. we can run without either of them and hit the error.
Candidate: what happens if any happens what happens if any happens what happens if any happens what happens if any happens what happens if any happens what happens if any happens
Reference: why are you leaving this there? that will still link to the dead service.
Candidate: this should be the <UNK>
Reference: please reuse function you wrote above
Candidate: if <UNK> != direction.incoming) { return; }
Reference: [checkstyle] info: '200' is a magic number.
Candidate: please remove these lines be used?
Reference: missing id comparison?
Candidate: please use <UNK> <UNK>
Reference: who writes code like this?
Candidate: @override @override public aggressive aggressive :(
Reference: and if gitdir and localname are set (to clone a repo and let your repo have a non-standard layout)? i would simply command.setdirectory(localname); command.setgitdir(gitdir); let the validation of localname (null
Candidate: should we throw an exception here?
Reference: nit: please use parentheses in the boolean condition to avoid confusion.
Candidate: this should be the <UNK>
Reference: can also be replaced with streams java sourceformats.stream() .filter(x -> fieldapprover.approve(x.getdatainfo())) .filter(x -> stringutils.isnotblank(x.getvalue())) .map(stringfield::getvalue) .collect(collectors.tolist());
Candidate: this should be the <UNK>
Reference: you can also just pass the reference
Candidate: do we need to catch the exception and throw the exception
Reference: no need to trim here cmt msg could mention sh
Candidate: why do we need to use <UNK> here?
Reference: new arraylist<>().stream().anymatch()
Candidate: should we throw an exception if the is permission?
Reference: is this line actually needed? the dialog is displayed even when disabling cast support, what is handled fine without a restart.
Candidate: no, this is is the switch?
Reference: while i think it is unlikely, should probably handle uiindex being -1.
Candidate: the syserr should be be the
Reference: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Candidate: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Reference: in run method we should call collector.getorthrowexception. in configurepipeline method, data pipeline app will throw in an exception if validation failure carries any failures. however, this does not apply to
Candidate: throws exception
Reference: is this a "warn" or so..?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: let's keep passing excludespecialchildren instead of true to be consistent with vcs.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: doing an http get to the pubsub url here is fine with me.
Candidate: should we be <UNK> here?
Reference: i18n
Candidate: we don't need to print the exception here.
Reference: separate timeout constant?
Candidate: why do we need to brackets?
Reference: safer to cast to viewgroup here.
Candidate: why do we need the <UNK> here?
Reference: is this intentional ?
Candidate: <UNK> *= 2;
Reference: @idelcano remember that domain should not know anything about conversions then has no sense that the use case creates conversionexception. i think that we should create o refactor to metadataexception
Candidate: lambda?
Reference: maybe checking the name to be sure these are the recently modified ones?
Candidate: why do we need to <UNK> eq here?
Reference: spell out operator
Candidate: nit: i don't understand why, but i don't understand why, but it would be more descriptive.
Reference: any reason to iterate downwards?
Candidate: i don't think we need to check for the the <UNK> <UNK>
Reference: we try to keep annotations on the same line if possible
Candidate: can be replaced by workflow with <UNK> workflow
Reference: i am missing something, method says if exists removeoldactivatorifexists but the if that wrap, says if it doesn't exists !ioservice.exists(activatorpath), to me seems like contradiction.
Candidate: this eating the exception in the eating the exception if the suppresses exception exception is skipped, throw validationexception.
Reference: i think i would prefer handlelogicalbinary to check for the presence of date/time etc and then delegate to a helper method instead of inlining the logic here. here is what
Candidate: do we need to do we need to do the lookup here?
Reference: let's do this alwregardless we are in test; what this means is that the order in which the desc command outputs props is undefined unless we are running tests...
Candidate: i don't think we need to use the for the <UNK> <UNK>
Reference: why don't we init it automatically anymore?
Candidate: please use <UNK>
Reference: checknotnull(type, "type");
Candidate: this should be setemptyelement().
Reference: static import pls!
Candidate: why do we need the <UNK> here?
Reference: i think this check should be done after every accept call. at least, this behaviour will be consistent with default foreach implementation from iterable class.
Candidate: if (actual == null) { return <UNK> }
Reference: unsupported operation during post?
Candidate: should we use the <UNK> here?
Reference: this would be shorter with try-with-resources.
Candidate: the syserr
Reference: minor nit, move the "as the max" capacity string onto a line on its own' merge it back to a single string,
Candidate: why do we need the <UNK> here?
Reference: possible to convert into message properties or java constant so that we can change text message later
Candidate: i don't understand what if you do, can we move this to bit?
Reference: why not still use the limit in the case of not all granularity?
Candidate: rename <UNK> <UNK>
Reference: i'd suggest going java streams all the way :) for example: suggestion map<topicpartition, offsetandmetadata> result = hdfswriter.getcommittedoffsets() .entryset() .stream() .collect(collectors.tomap(e -> e.getkey(), e -> new offsetandmetadata(e.getvalue()));
Candidate: should we use the exception here?
Reference: cosmetic/trivial: the code style is: jwtconsumer jwtconsumer = new jwtconsumerbuilder().setrequiresubject() .setverificationkey(key) .setrelaxverificationkeyvalidation() .build(); (the first chained method is on the same line and then all further chained methods, align to
Candidate: can we use the <UNK> here?
Reference: no. use a constant, create it if needed, but you don't externalize constants, you only externalize strings that need to be internationalized
Candidate: please use <UNK>
Reference: please set a modifier - protected seem suitable
Candidate: this should be the <UNK>
Reference: why is the server mode set to open in teardown?
Candidate: why do we need to tear down the <UNK>
Reference: @test annotation usually appears on the line before the test function
Candidate: use expectedexception qualified?
Reference: i would propose to replace this isa by a iae, as it's a functional error
Candidate: please use <UNK>
Reference: is there particular reason to keep string, long, integer and byte[]? can i send double or byte or boolean[]?
Candidate: i don't understand what if you want to do the tear down to the
Reference: this could be a lot of allocations.
Candidate: why do we need to check the <UNK> here?
Reference: right okay fine so tostring i kind of get. but what's this?
Candidate: this should be the <UNK>
Reference: this is null check only condition, so it makes sense to validate this as 1st step and then do database check on number of fence agents
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: this should call existing method, avoids maintaining the same info in two places (which is error prone). there's another pr with similar changes: <link_0> the methods getcweid() and getwascid() would
Candidate: <UNK> evidence, overflows?
Reference: annotations on different line
Candidate: why do we need to override the <UNK> here?
Reference: if the previous try block throws an exception, does this next step have to happen (i.e. should it go in a finally block)(
Candidate: why do we need the payload?
Reference: this is a bad pattern in code. can we fix atleast this instance of it. this threadpool is being passed from samzacontainer as a null. val taskthreadpool = if (threadpoolsize
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: count doesn't need to be explicitly initialized since it is 0 by default
Candidate: please remove the <UNK>
Reference: discussionsapi or discussionsservice or discussionsgateway or discussionsclient
Candidate: why do we need to use the <UNK> here?
Reference: it looks like we can remove default_estimated_weight entirely, since we're setting all the attributes here and overriding the default parameters anyway. this is the only remaining use of the variable.
Candidate: why do we need to use the <UNK> here?
Reference: move reader.close() to finally
Candidate: we should catch (throwable classnotfoundexception e) { throw exception } catch (throwable throwable) e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw ioexception }
Reference: why are we only adding this to this error message only?
Candidate: the syserr should be be <UNK>
Reference: i'm missing some permission check here?
Candidate: please use <UNK> <UNK> <UNK>
Reference: we could probably use epoll here (if it is supported). see how this is done in hot rod server.
Candidate: if you is the <UNK> <UNK> is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: alias should never be null.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: say we get the input milestone:curr+99. in that case we would search for the milestone "curr+99"?
Candidate: should this be <UNK>
Reference: this will fail, for example, if reauth is enabled and we update the reauth token, or if it's a channel signin that verifies the channel. it would be better to
Candidate: why do we need the payload?
Reference: better to have a mapping helper method as it continues to grow. make the top api impl as simple as possible.
Candidate: formatting
Reference: didn't you mean to change the key on line 84?
Candidate: can be replaced with <UNK> names?
Reference: i am not fully aware of kafka internals, but i know that they have two apis for consumers. does this one use the new api?
Candidate: can we use the getconnection here?
Reference: this test definitely verifies that the thing gets closed. but it doesn't verify that things don't get closed while they are in the process of running. is it possible to
Candidate: hmm. try-catch-fail try-catch-fail should be a try-catch-fail try-catch-fail try-catch-fail try-catch-fail try-catch-fail
Reference: when you import the hosts, the addresses that are auto-populated are the gluster addresses (backend network). what you want to tell the user is to provide the frontend network address
Candidate: why do we need the getconnection in the main string?
Reference: what if the view is not open? would this be null?
Candidate: the absence of absence of absence of absence of the absence of the absence of the
Reference: logutils.clean(config.getryainstancename())
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i am not sure i like this returning the same object references because now it requires the command impementations to be thread-safe. i would prefer we return "new .abc()" command
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: oauth
Candidate: please use <UNK>
Reference: does this break the tunnel bore collision? hmm....not sure why i do this.
Candidate: nitpicky b/w if the == null && <UNK> { <UNK> } else { <UNK> }
Reference: this block seems to be to verbose, can we make it simpler?
Candidate: if we is the software exception we don't want to do we need need to do we need need to do we need need to do we need need to
Reference: nit: consider flipping the condition
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: use list.of
Candidate: can be replaced by: <UNK> <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: same here, no need to have the same message for secondary
Candidate: why do we need the <UNK> here?
Reference: can we include the name of the strategy in the message here?
Candidate: if <UNK> == null) { <UNK> = <UNK> }
Reference: was the throws ioexception required? if this worked before, i'd rather we not include it.
Candidate: why do we need to use <UNK> here?
Reference: why do you need to use double.valueof here?
Candidate: this should be <UNK>
Reference: should the test eventually drop the table? (here and below)
Candidate: you don't need to use the <UNK>
Reference: call this at the end of the method
Candidate: why do (args.length != null) ? <UNK> : <UNK> ? thanks!
Reference: shouldn't this change be executed only for 3.2 clusters and above ? the linkstate property shouldn't be part of any vdsm api earlier to 3.2.
Candidate: this should be <UNK> to iterable<integer> <UNK> = <UNK> groupname = <UNK> <UNK> <UNK> <UNK> { <UNK> filter; }
Reference: in the parent class to this one i have a method "asboolean". would this have been of help to you? users will often enter different boolean values 0, 1, true,
Candidate: should we use the <UNK> <UNK> <UNK> <UNK>
Reference: do we have the logic for <link_0> somewhere?
Candidate: <UNK> *= 2;
Reference: have you consider pushing this conditional to the callers? i think in both cases it would be the calling code easier to understand, it avoids having to jump around the
Candidate: why do we need to check for the <UNK> ? <UNK> : 2; : 2; thanks!
Reference: please explain why this line isn't in the try-block.
Candidate: why do we need to here?
Reference: maybe we don't need to call 'frontendfailureeventlistener.hide()' here, since 'currentuser.logout()' will invoke 'baseapplicationinit.onlogout()' by default.
Candidate: if the is is the <UNK> <UNK> the <UNK> is the udp <UNK> { <UNK> } else { if <UNK> { <UNK> } } } }
Reference: perhaps remove the extra parenthesis around targettype.isiterabletype()?
Candidate: you should need to use the <UNK> <UNK>
Reference: i think we still need to remove these catch clauses because they could hide the fact that none of the dates actually parse.
Candidate: if we is the software exception e1 { throw <UNK> } } } }
Reference: do we really need to wrap unsafe args? there's a non-zero allocation & gc cost to wrapping for logging in tight loops or on hot code paths (though this specific
Candidate: why do we need need to the <UNK> here?
Reference: this should be a crash.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: nit: it's an to and not ts
Candidate: please use <UNK>
Reference: should be static, as well as fromenvironment() method. also my idea says that parseint() must be used instead of valueof()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: there is now a casedetails constructor that takes only a case name, intended for use here. please merge in develop again and update this to use that constructor , thanks!
Candidate: what is this happen if <UNK> is the <UNK> <UNK> <UNK>
Reference: mm tables are unused here.
Candidate: this fail()?
Reference: reset lock?
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: please declare the dateformat off the critical path of the method invocation. in other words, have it declared as a public static final variable at the top of the class,
Candidate: this syserr should be replaced with <UNK> <UNK> <UNK>
Reference: this will return null for non-platform uris.
Candidate: should we throw an exception here?
Reference: generally endpoint is checked for being null and if it is an exception is thrown.
Candidate: @since 1.0.rc5
Reference: no :) we should fix the message :)
Candidate: please remove the method("post")
Reference: is thre a reason this call isn't going inside the app initialization below?
Candidate: can we use <UNK> to use the enum?
Reference: what does getint() do if the value isn't an integer?
Candidate: <UNK> *= 2;
Reference: do we need to do this read in a loop since we are not guaranteed to read the full data in one call?
Candidate: should we be the <UNK> here? if we { return; } <UNK> } } } }
Reference: suggest we follow the *inpixel method approach here too: - rename current method to getpathdatainpixels() - create a new method getpathdata() which will perform the autoscaledown operation
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: you are using tags ones, please access value directly in for
Candidate: the syserr should be the <UNK>
Reference: you can remove the "version != null &&", as stringutils.isempty handles nulls.
Candidate: why do we need the <UNK> here?
Reference: is it necessary to check if default handler present? why could this happen?
Candidate: the syserr should be be <UNK>
Reference: this should call: map<string, string> partition = offsetprotocols.sourcepartitionforprotocolv0(tableid);
Candidate: why do we need to <UNK> the <UNK> here?
Reference: nit: seems the approach of passing null token is a right one here, but it may impact <code> bearertokencredential</code>, which may start using the raw token field in other methods
Candidate: why do we need to use <UNK> eq here?
Reference: would it ok to move the below three lines to bbcttestutil.removecard?
Candidate: why do we need the <UNK> here?
Reference: please try to get rid of the continue. i'd use the stream api here instead.
Candidate: rename to iu
Reference: in contrast to lombok, groovy adds visible annotation, while here we check only invisibleannotations, so that currently filter doesn't work.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: which tests cover this block?
Candidate: do we need to catch the exception here
Reference: too complex construct
Candidate: i don't think we need to check if the is is the
Reference: if element doesn't exist, then first condition will return false. there is no _third_ option, hence usual if-else will suffice.
Candidate: the syserr should be be the
Reference: i don't understand this bit. why do we need something more complex than transferconfig.isadvertisesidebandall() here?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: setbindintercept_**o**_r i spent hours battling this npe, i knew it was a mocking problem but couldn't see it. now looking at your pr the typo in setbindinterceptpr is blindingly obvious.
Candidate: why do we need the layout here?
Reference: why a message for name instead of key?
Candidate: why do we need to use the <UNK> here?
Reference: should this line use the "safelyaddproperty" method, like in the other lines below it?
Candidate: why do we need need to the <UNK> here?
Reference: > by format by a format i would say bye bye to first part of this ;)
Candidate: why do we need to use <UNK> here?
Reference: executor is null
Candidate: can we be simplified to <UNK> <UNK> ?
Reference: there is not much point to this check: if decls.length is zero, the loop would just iterate zero times.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: nitpick: make it translatable
Candidate: i don't understand if we matters, but i think this matters, but if you do, if we is the software <UNK> software <UNK>
Reference: e.getmessage()
Candidate: why do we need the <UNK> here?
Reference: this will break on windows. portablestring always uses "/" on all platforms. please use org.eclipse.core.runtime.ipath.separator
Candidate: why do we need need to mock <UNK> here?
Reference: should this condition not throw an exception?
Candidate: should we use the getconnection here?
Reference: change 'if' to block in the new code.
Candidate: why do we need to use <UNK> here?
Reference: we can use tokens.stream().anymatch() here.
Candidate: if oldvalue is is misleading.
Reference: the smeltery only runs this every 20 ticks, or tick == 0
Candidate: why do we need to check for the <UNK> <UNK>
Reference: wrong type. should be list<string>
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't think
Reference: instead of keeping a map and a list, can we combine them to a single map? e.g. 'id' to 'disk' (to avoid maintaining two data structures).
Candidate: can you use <UNK> <UNK> <UNK>
Reference: let's extract this to fixturestool (possibly in another patch before this one)?
Candidate: why do we need to use <UNK> here?
Reference: i fully understand that this is simple to write but it is also very brittle. for assertions on the topology, isn't there a way to do a number of them
Candidate: why do we need need to the <UNK> here?
Reference: i don't see the necessity for this tests being ran over all storage formats.
Candidate: if oldvalue != null && <UNK> == null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: maybe use a variable instead of calling 3 times tree.expression()
Candidate: i don't need to check for the <UNK>
Reference: mavenexecutionrequest executionrequest = createexecutionrequest(); populatedefaults(executionrequest); these 2 actions will be unnecessary in all cases where no lifecycleparticipants are defined, that is to say, most of the time. i'd move these
Candidate: please use the feedid
Reference: silent errors are pure evil ioexception should be thrown out
Candidate: i don't understand why, but it matters, what is the that the is the that the is is the
Reference: just "kafka-0.10". the same to others.
Candidate: why do we need to check the the enum?
Reference: better to use the official way here true instead than "true"
Candidate: better to official true here instead than "true"
Reference: this should also have one assignment per newly opened resource.
Candidate: what happens if the is is invalid?
Reference: ... and use it here.
Candidate: why do we need to use <UNK> here?
Reference: since the connection getting passed as a parameter to this method, it shouldn't close the connection inside this method. need to close the connection only localconnection set to true.
Candidate: use <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: is this an api call or an implementation (native) method call?
Candidate: should this be <UNK>
Reference: just check if a is not null because getannotation will throw an npe which is not related to types.
Candidate: i don't think we need to do the <UNK> part, but we should need to <UNK> the <UNK> <UNK>
Reference: the put method of a map returns the old object. so why calling get in front of if we notify the listeners after the put call now? java final string
Candidate: i don't think we need to synchronize on the <UNK>
Reference: no need for type here
Candidate: missing <UNK> != <UNK>
Reference: we should not remove debug statements.
Candidate: why do we need the <UNK> here?
Reference: we should not continue if file read fails right?
Candidate: i don't understand why, but it matters, but why do we want to trim the <UNK>
Reference: not important at all, but maybe using stream + predicate?
Candidate: please use <UNK> <UNK> <UNK>
Reference: if this is now a hardcoded list that never changes, then please move it to a static final field.
Candidate: why do we need the <UNK> here?
Reference: this would most probably again cause cce in case of editing pools or instance types.
Candidate: should be be null? if <UNK> == null) { return; }
Reference: minor optimization: grabbing the blocking queue for a given topic can be done in the higher loop and then the queue != null check can be done earlier as well.
Candidate: should we be the <UNK> here?
Reference: expects a string -> "requires a string operand"
Candidate: why do we need the <UNK> here?
Reference: construct the map outside the lock.
Candidate: i don't understand why, but it matters, what is do, but it is the username?
Reference: nit: for the @nonnull you put it once before the plugin, other time between public and the return typed. i would prefer the latter but at least keep consistency.
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: same here, use format strings.
Candidate: should we be the <UNK> here?
Reference: perhaps creating a more specific configurationexception here so in this case it can be logged as info?
Candidate: should we log the exception?
Reference: let's remove the stack trace from the logs here, since we know it's a timeoutexception, and if it happens there's bound to be a lot of these. suggestion log.warn("timeout occurred
Candidate: <UNK> *= 2;
Reference: cool, you're fast. i see the goal of 99 coming nearer :) instead of stream.range(2, max + 1) please use stream.rangeinclusive(2, max). that's the canonical use-case. thx
Candidate: can be simplified to <UNK> <UNK> <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> <UNK> <UNK> : <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: will this cover the case when a tag was selected and the user un-selects it? we can add: private final list<tagmodel> activetags = new arraylist<>(); field, together with following code:
Candidate: why <UNK> { <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: continuing sounds a bit like you'd be retrying or that the process does not stop, but i'm not seeing any way for this to resolve nicely. if we are getting
Candidate: should we use the exception here?
Reference: i'm not sure this will 100% work. table name can be "mytable" in which case your quoting is fine, but it can also be "myschema.mytable" which is quoted "myschema"."mytable".
Candidate: why do we need to use the <UNK> here?
Reference: list<string> lines = files.readalllines(filepath);?
Candidate: can you use the <UNK> <UNK> <UNK> <UNK>
Reference: please use executehsmgetstoragedomaininfo - that's why you added it in the first place
Candidate: what is the reason behind this is is not the charge of the <UNK> ?
Reference: use assert.notnull()
Candidate: i don't think we need to do we need need to check the <UNK>
Reference: throwing an exception inside a map operator is odd. in this case, use handle() operator to either sink.error() or sink.next() depending on whether the response is an error or success.
Candidate: can we use <UNK> permission?
Reference: i find it very unintuitive to find this here... i'd suggest moving the log to pmd.dopmd, which is guaranteed to run once and a little more natural
Candidate: we should use <UNK> <UNK> <UNK>
Reference: streaming an empty list?
Candidate: <UNK> *= 2;
Reference: any reason you are removing the processadapter?
Candidate: please use <UNK>
Reference: set it to true here
Candidate: we should need to do we need to check the getcredentials for the getcredentials
Reference: the docs say that it excludes the executable name, but it doesn't.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i assume this is taking the agent's default character set. if so ... for various reasons (e.g. [jenkins-13091](<link_0> we might be in a situation that the agent does not run
Candidate: why do we need to here?
Reference: just call this updatenickname, as that's all it does.
Candidate: why do we need need to the <UNK> here?
Reference: this should probably be: if (lat != 0.0d && lon != 0.0d) { android docs for bundle say: > returns the value associated with the given key, or 0.0 if
Candidate: why do we need to use the <UNK> here?
Reference: use assertfalse
Candidate: please use the future:
Reference: do they all have to be public methods?
Candidate: this should be setemptyelement().
Reference: use command instead of separate parameters
Candidate: should we throw an exception? if iae is be iae specific?
Reference: there is no way where storedattribute can be null.
Candidate: what about returning <UNK>
Reference: i believe this should be a 401 to mitigate enumeration. further, i can't seem to find a place in spring security that returns a 404 in similar circumstances.
Candidate: why do we need need to the <UNK> here?
Reference: i think we can easily avoid using a list here. how about: protected string[] getgdbcommandlinearray() { // the goal here is to keep options to an absolute minimum. // all
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: assertfalse
Candidate: please use the future:
Reference: intentional change. keep the originial.
Candidate: why do we need to use the here?
Reference: this will severely increase jenkins startup and job save times. we need to find a different approach at solving this problem. for example adding a flag that dynamicgerritprojects is being
Candidate: why do we need the <UNK> here?
Reference: suggestion throw new illegalstateexception("only valid, managed realmresults can be frozen.");
Candidate: why do we need the exception here?
Reference: nitpick: missing a space here before catch.
Candidate: why do we need to use <UNK> here?
Reference: why we are using arrayutils.isequals not equalsignorecase like in line 111?
Candidate: i don't think we need to check if the is is the software <UNK> but i don't think it matters, but it would be better to do we need to
Reference: result.replace looks a bit like "replace result" while it means "result that replaces". maybe result.replacement?
Candidate: why do we need the <UNK> here?
Reference: final
Candidate: why do we need the <UNK> here?
Reference: i think it'd make users relieved if we mention in the message that failedcontexts are handled in the same way as closedcontext.
Candidate: what happens if the is is the
Reference: log should be written only when update is perfomed
Candidate: hope dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic checkargument (instead mentioned above. said dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic
Reference: [minor] start lowercase
Candidate: if we is the software stripe { <UNK> <UNK> } } } } } } }
Reference: thanks @wb14123 !
Candidate: why do we need need to check the <UNK>
Reference: shall we move this to process() method of the api so that we don't need to set it over and over again here into different cases?
Candidate: @unyoungwax, oops != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK>
Reference: this should be moved down a few lines to not break the formatting
Candidate: i pagelogging
Reference: shouldn't this also be changed to super.selecteditemschanged()?
Candidate: please remove the <UNK>
Reference: is it an intended change? because this file is an autogenerated file from remoteinterpreterservice.thrift
Candidate: should this be <UNK>
Reference: this is a bit weird, is calling the tostring method actually the right thing to do?
Candidate: please use <UNK>
Reference: this seems pretty late in the method to throw an exception like this. could we catch it earlier?
Candidate: why do we need the <UNK> here?
Reference: and here we could call config.getenumlist
Candidate: why do you need to check the <UNK>
Reference: @xupyprmv please move indentation back 4 characters
Candidate: use objects.hash()
Reference: i think you forgot .build()?
Candidate: should we be the <UNK> here?
Reference: i think the current code runs into similar problems that we had recently in a pr by @stefan-kolb: if the currently selected entry changes, then the binding is not updated.
Candidate: should we be the <UNK> here?
Reference: this is an interesting change -- how/when were we closing the connection before?
Candidate: should we use the <UNK> here?
Reference: i don't know about this being static, i feel like it shouldn't since plugin itself is already static.
Candidate: why do we need to check the the enum?
Reference: shall check if it works with different case for the key. i mean, set the property name in upper case during create db or alter db and try if we
Candidate: this should be the if (state != null) { throw null; } else { if (context { <UNK> }?
Reference: i think you can guarantee that options.getoperationtype is non-null in the getbloboptions constructor - unlike the range, an operation always has an operation type. so you could avoid the second
Candidate: should we throw an exception here instead of returning null?
Reference: this kind of things is better to separated on two assert assertnotnull assertequals (2, actions.size); give you more info about what is the error
Candidate: why do we need to evict the <UNK> here?
Reference: after separating dashboard things from metricmanager, then we don't need to prepend 'dashboard:' at the front of logging messages.
Candidate: why do we need the getconnection here?
Reference: is this safe for re-use? in the transportshardupsertaction we create a single insertsourcefromcells instance and then use it for multiple params. what if there is a null value early and
Candidate: why do we need the size of the size scenario?
Reference: cmt msg: "adapt the new work interface to multichannelgroupbyhash." not sure "adapt" is the right word, since you're not changing the work interface. "apply"? "use .. in"?
Candidate: i don't understand this matters, if we matters, but if we matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but
Reference: suggestion if (transactionmanager != null && transactionmanager.isactive()) {
Candidate: should we be <UNK> here?
Reference: it is good that you return null in case of the bloom filter is not compatible with the one supported by this implementation. this way this is forward compatible with
Candidate: you don't need to use the <UNK> <UNK>
Reference: s/type/type s/status/status.state
Candidate: i don't understand why, but it matters, but if you do, can we move the logic into a separate method?
Reference: this should be done in nodes.updatenode() - so it follows the same route as setnodes() addnodes() and removenodes()
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: this may be wrong for 2 equal instances, consider the following example:  java cheserviceimpl s1 = new cheserviceimpl(); cheserviceimpl s2 = new cheserviceimpl(); s1.getlinks(); assert sq.equals(s2); // <- this
Candidate: what is the overflows?
Reference: not sure that this method should be public...
Candidate: the syserr should be be the
Reference: don't use raw types - new pair<>(vm, vmdevice)
Candidate: this should be the fixture.
Reference: should we clear the loading_ flag here? (doesn't look like it effects correctness but would be consistent?)
Candidate: should we be the to clients?
Reference: i think what i really don't like about this is that this whole thing relies on the analysis module's developer to not forget to decrement the request flag or else
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: you can't move this to the first place and return. on linux/mac "device" part is always null.
Candidate: i don't think we need to return the <UNK>
Reference: move this line outside of the loop
Candidate: suggestion return <UNK> <UNK> { return <UNK> }
Reference: i don't see this file
Candidate: this should be the <UNK>
Reference: what exactly is this doing?
Candidate: if <UNK> != null && <UNK> { return <UNK> }
Reference: to remove
Candidate: why do we need to the the payload?
Reference: compatible (remove 2nd "a")
Candidate: you can remove the <UNK>
Reference: we need to synchronize this because the write can be performed concurrently.
Candidate: should we be the <UNK> here?
Reference: this orelse is internal within the filter method, correct? it's hard to parse as-is, because it's indented to the same level as the calls that are directly on stream(), so
Candidate: should we be <UNK> here?
Reference: again, i think you can close the try clause here. also, you are missing a context.restoreauthsystemstate(); in this test.
Candidate: no longer required here
Reference: hey @mderamos can we replace the data.getvalue() into the array and adding the actual value to the error message like before? the more actual data we can inform the user
Candidate: please compare enum != null && <UNK> != null) && <UNK> != null) && <UNK> != null) && <UNK> != null) && <UNK> != null) && <UNK> != null) &&
Reference: matter of style and choices but i tend to think that this last part of the && should be implemented as a filter of stream on the parameters stream.
Candidate: i don't think we need to check for the the <UNK> <UNK>
Reference: i take it this is the key assertion that indicates the script was overwritten. it would be better to make it much more explicit - make mock/start.sh and this assertion
Candidate: <UNK> *= 2;
Reference: why not use fail("")?
Candidate: why do we need to here?
Reference: this isn't right, it will cause the promise to be subscribed to twice. would you mind rebasing and using the [new time() method that i just added to promise](<link_0>
Candidate: should we re-throw the exception here too?
Reference: when this throws an exception the file writer may not get closed, consider a try with resources.
Candidate: use try-with-resources
Reference: probably something like (2 \* integer.bytes)?
Candidate: i don't understand this matters, if we matters, but we don't need to do we need need to do we need need to do we need need to check the
Reference: do we need tabletype.valueof?
Candidate: why do we need the <UNK> here?
Reference: rule vs ruleimpl (see above)
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: could there be assertions on the properties of the populated readhandle?
Candidate: can we use the getconnection here?
Reference: trailing tabs
Candidate: lambda?
Reference: can we use the constant for "/processor-" defined in zkkeybuilder?
Candidate: i don't think we need to check if the is is null.
Reference: please check the indentation here.
Candidate: why do we need to the <UNK> here?
Reference: it's probably a bit low. i doubt groupedjobinitializer use much memory so we could easily increase it a bit by default (like 100 maybe). would need to check how many
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: could be just  this. belongstorecentindexsegment = this. belongstorecentindexsegment || belongstorecentindexsegment  don't see why compareandset() (which is used in multithreading scenarios) is needed.
Candidate: why do we need to check the <UNK> <UNK>
Reference: db and table name need not be set always. shall use string.valueof(entry.getdbname()) as it return "null" string if null.
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() for the <UNK>
Reference: bug? why don't we decrementandget and set the future on 0
Candidate: should we be the <UNK> here?
Reference: same remark regarding !billeditems.iterator().hasnext(). also, maybe billedusage.compareto(tobebilledusage) < 0 should be extracted around these methods, since it's the same in both implementations:  if (billedusage.compareto(tobebilledusage) < 0) { populateresults(...); }
Candidate: suggestion <UNK> = <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: throw
Candidate: should we clean up with the response?
Reference: shouldn't braek if retval is false? actually (and this is just my opinion) i think it would be easier to understand if you return false once one is false: for
Candidate: if <UNK> != null) { actionreturnvalue <UNK> = <UNK> <UNK> } <UNK> { return false; }
Reference: this method should be changed to private
Candidate: this should be modifier) instead of <UNK>
Reference: nit: not sure if change is by accident or not, but this made readability worse.
Candidate: why do we need to <UNK> the sizes of the sizes properties?
Reference: use the logger here instead of system.err.println. also, include the entire exception:  java log.error("there was an exception quitting webdriver.", e);
Candidate: why do we need this?
Reference: would using the hash of name provide enough efficiency?
Candidate: should be be the <UNK>
Reference: if you change this a tiny bit, ticket.gettarget().contains(posasvec3d) => ticket.contains(posasvec3d) and add public boolean contains(vec3d posasvec3d) {return gettarget().contains(posasvec3d)} to the ticket, you'd open it up for all those things modders
Candidate: should we be the specific?
Reference: i have not tried yet, but i assume encoding the colon still works fine with the server?
Candidate: please use <UNK>
Reference: this should be final.
Candidate: please use <UNK>
Reference: is it possible to wrap argument parsing into varsimtool as a method?
Candidate: i don't understand why, but it matters, but what is it does.
Reference: so the name will be mac.domain? is it changable?
Candidate: why do we need to use <UNK> here?
Reference: i don't really like that test because isvariable has a strange semantic. i think i would prefer a test on the symbol usages.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this method should not be public or what's the point?
Candidate: if the == null) { return false; } else { if <UNK> { return <UNK> } else { if <UNK> { return <UNK> } else { if <UNK> { <UNK>
Reference: use get() here not tostring()
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: could be replaced with executorisshutdown?
Candidate: this should be be the <UNK>
Reference: what if a release with this name already exists there? the test will fail.
Candidate: @hdouss why 16?
Reference: ![major](<link_1> either log or rethrow this exception. [![rule](<link_2>](<link_0>
Candidate: ![major](<link_1> 'severity: major') either use or rethrow the exception. [![rule](<link_2>](<link_0>
Reference: how is anything below this line related to " add api to append basecomponent arrays to componentbuilder"?
Candidate: nit: missing whitespace
Reference: can we stream the request instead of having this intermediate string?
Candidate: i don't understand this matters, this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, but it matters, what about the
Reference: set the same as medium?
Candidate: can we use the <UNK> here?
Reference: why assertequalsb4left method name ? you also call this test with a4 model, so the method name is not appropriate. change the method name, or may be this test shouldn't
Candidate: unused
Reference: this doesn't need to be fully qualified if this lives here
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: are you sure that one getparent() check is always enough? i.e., might there be asts where you have to check the grandparent or higher?
Candidate: i don't think we need to check if <UNK> != null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: this should never happen right? or conversely, should we wait to schedule the timer until after initialization? (the ispresent check is probably still required but at that point becomes and
Candidate: should this be be specific?
Reference: junit style is to always use braces for "if" "do" and "while" statements.
Candidate: objects.equals()?
Reference: move if (delegate.isxhtmlstrict()) into assertopenimplicitblock
Candidate: this should be the <UNK>
Reference: i think you can use the article object's lastmodified as the return value here. you don't want to query for it once here and again in getdata; you should be
Candidate: should we use the exception here?
Reference: suggestion system.out.printf("httpclient is %s; service version is %s", httpclient, serviceversion);
Candidate: can be replaced by: <UNK> <UNK> { return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> { <UNK> }
Reference: same as other question, does this potentially result in class ids with spaces in them?
Candidate: we should need to use the in the <UNK>
Reference: this should return a boolean rather than boolean.
Candidate: can be simplified to: java if (root == null) { return <UNK> } else { return null; }
Reference: why is the windowref property not preserved?
Candidate: this should be the <UNK> <UNK>
Reference: why you have removed static imports?
Candidate: typo: <UNK>
Reference: should method be like snippet below instead of copying logic (there is also a possible typo around %.02f b in above case and %d b below)? java public static string
Candidate: why do we need to evict the timeout too?
Reference: should we do an assert.asserttrue on the return value of verify()?
Candidate: should be be <UNK>
Reference: since servicebuilder is a capabilityservicebuilder, use: java servicebuilder.addcapabilityrequirement(capabilities.ref_http_listener_registry, listenerregistry.class, ((httplistenerservice) service).gethttplistenerregistry());
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: please call setup and tear down of the operator.
Candidate: what happens if the overflows?
Reference: use filerepositorybuilder.create
Candidate: why do we need this?
Reference: can this be protected. i assume only the listmodel is using it
Candidate: should this be <UNK>
Reference: is it necessary to explicitly include these three cases, if they're handled the same as default?
Candidate: log.warn log.warn log.warn log.warn
Reference: can you move this inside the if statement to avoid making this call unless the status != 200?
Candidate: you can use the exception here instead of <UNK>
Reference: this will call conn.close at the end of the try block. can we use master.getconnection() and just make use of the shared connection rather than making a new one?
Candidate: please use stepverifier for 422 too?
Reference: let's clean this up to be consistent (ie: constants for both)
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: can be simplified to accountlinkingstatus.enabled.equals(getstatus())
Candidate: if <UNK> != null) { return <UNK> } return false; }
Reference: is it intended to not count marker processing in the analysis time? imo we should count everything
Candidate: why do we need the <UNK> here?
Reference: is this where the test fails?
Candidate: we should need to evict the to the the <UNK> the <UNK> the <UNK> is the software <UNK>
Reference: seterrormessage
Candidate: interface should be used exception.
Reference: acl.impersonate(acl.system); will set the thread context to system "forever" the normal pattern to use is  acl.system.impersonate(new runnable() { public void run() { ... } });
Candidate: why do we need to getparameters().getstoragedomainid()
Reference: null -> unsupportedoperationexception?
Candidate: why do we need need to use <UNK> here?
Reference: afaik this only returns the features directly defined in the eclass. this missed features from parent-eclasses. i think we should use geteallstructuralfeatures instead.
Candidate: the syserr should be be the
Reference: i think making it part of the version number here will emphasize it more than is necessary. let's put it in the build info along with the release name and
Candidate: why do we need to evict the <UNK> <UNK> the <UNK> <UNK>
Reference: we need to avoid multiple value calls on the same input as those itself might also be functions which would cause to multiple evaluations of the same expressions. this can
Candidate: should we be the <UNK> clients?
Reference: log statements needed?
Candidate: i don't think we need to check the <UNK> the <UNK> <UNK> the <UNK> is the
Reference: is this going to be more expensive for logging that occurs with a large stack?
Candidate: this should be the <UNK>
Reference: returning feedback to users seems a good idea.
Candidate: can we declare this as a local variable?
Reference: rename this variable name to something that references its purpose. it helps understand what the loop is doing at first glance instead of having to evaluate it.
Candidate: what is the reason if <UNK> == null) || <UNK> || <UNK> || <UNK> || <UNK> { <UNK> }
Reference: nit: fix indention (best, move otherstream above to new line and also reduce indention for all other parameters too)
Candidate: should this be <UNK>
Reference: use timeunit.days.toseconds(30)
Candidate: what is this happen if <UNK> is the <UNK> <UNK> <UNK>
Reference: some_layer is actually a group layer in this case sea_water_velocity is actually a layer name. assigning it to variable in this code simply looks weird. we are interested in what
Candidate: this don't need to subdir be the <UNK>
Reference: so i believe the only way this could be null is if a configuration was saved without the <jdks> entry and then reloaded. i don't see how that could happen
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: also test hydrate to bytes after the persist it should give back testrow. that will be a complete (ser/deser)ialization test.
Candidate: why do we need to use <UNK> here?
Reference: use guava sets.difference() and sets.intersection()
Candidate: <UNK> *= 2;
Reference: i think this will always return null - can you please verify?
Candidate: this sync?
Reference: please remove final from for loop variable.
Candidate: if there is a reason to use <UNK> directly?
Reference: could be helpful to have a default value?
Candidate: why do we need to check the <UNK> here?
Reference: final
Candidate: use <UNK>
Reference: while this creative re-use of a layout, i'm not sure this is a good idea. you create an additional, non-obvious dependency here. whenever we change the navbar listitem layout in
Candidate: can be replaced with <UNK> <UNK>
Reference: great, thank you! in ideomatic javaslang we access tuple fields directly, e.g. t._1, t._2 instead of t._1(), t._2(). could you change that please for all methods here? the methods are
Candidate: can be simplified to <UNK>
Reference: name it gooderer
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: revert
Candidate: you can use <UNK> <UNK> <UNK>
Reference: i think we want to use .equals() instead of == here, since deserialization will probably lead to different physical instances being compared.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you could call labelchanged() instead of comparing.
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ?
Reference: this doesn't appear to be used anywhere
Candidate: i think that this piece of this piece of these tests are pulled into a local date node node node node date node node node node node node node node
Reference: generating identical streams for the same key is not a good property of a *random value* generator.
Candidate: i don't think we need to check the <UNK> <UNK>
Reference: fromcusror
Candidate: why do we need to check here?
Reference: you can put ioexception on the same line here since you handle them the same, it reduces the visual bloat. } catch (parserconfigurationexception | ioexception e) {
Candidate: should this be null?
Reference: i think we can change the condition from i >= start to lastpos > i. on the fast path there's nothing to escape, so this loop should be a no-op.
Candidate: do we need to catch <UNK> <UNK> classcastexception?
Reference: will this check always be true if the two before were true?
Candidate: you don't need to use the <UNK>
Reference: these two lines can be combined into one.
Candidate: please use <UNK>
Reference: consider logging the exception without tostring so you don't lose the stack trace, i.e. logger.error("some message", error). this looks like it's a problem in a few places.
Candidate: why do we need to check the <UNK> here?
Reference: it's fine to fail fast here.
Candidate: please use <UNK> <UNK> <UNK>
Reference: could be replaced with selectedrisks.contains(alertrisks.get(alert.getrisk())).
Candidate: please use <UNK> <UNK>
Reference: i'd rename this variable to membervalue.
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: can selecthyperlinklabel be null?
Candidate: this should be the <UNK>
Reference: this looks odd
Candidate: should we be the <UNK> here?
Reference: replace block with:  java if (indexfiletype.isindexfile(filename)) { val indexfiletype = indexfiletype.frompath(filename); // todo: verify if this works for other layout types other than object_id! val objectid = indexfiletype.getfilename(filename); //
Candidate: this should be the if (state != null) { <UNK> }
Reference: you should use ctftmftesttraceutils.gettrace(gettrace()) instead probably. the teardown method of the base class dispose the gettrace() the test uses.
Candidate: use map<> on rhs
Reference: i think you should use expr.replace() as opposed to replaceall(). no need to deal with regex here.
Candidate: should this be private?
Reference: validate inputs to check if all required fields like registryurl and credential are set.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: annotations should go on the same line as the method declaration.
Candidate: this should be the islocal as well.
Reference: validationexception is reserved for use by domain logic to indicate invalid input. for a general purpose 'commons' method, illegalargumentexception would be more appropriate.
Candidate: should we use the exception here?
Reference: the type of the source field should be invokesource instead of int.
Candidate: you should need to check if the is is null.
Reference: this if and the list above can be removed completely.
Candidate: why do we need to mock <UNK> <UNK>
Reference: this. is unnecessary
Candidate: why do we need need to the <UNK> here?
Reference: abstractwaits have to be removed
Candidate: <UNK>
Reference: these 3 if conditions can be merged together
Candidate: should we throw an exception here instead of returning null?
Reference: but it also supports the '@' notation, no?
Candidate: this should be the feedid
Reference: we can get rid of this particular null check too, i believe.
Candidate: should we throw an exception here instead of eating the exception?
Reference: my understanding is that you're writing to a temp file? use file.createtempfile() if that's the case. uuid is just a random id.
Candidate: why do we need need to the <UNK> here?
Reference: use strings.isvalid(value)
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: we can avoid having leasemanager as class field and use coordinator to get the value
Candidate: why do we need to use <UNK> here?
Reference: i kind of prefer the old name - a "container" can contain anything, in this case it contains computation results.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: could you add braces here and for the below if? it's kind of hard to read in this case.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i think we should add an _ in between the userid and the url, if the url ends with an integer, it'd be difficult to decifer what's the userid and
Candidate: <UNK> vds <- arrays.aslist(new { throw new <UNK> }));
Reference: why can't we change the name directly in hotel json file but to modify here after serialization? there are two other test classes which have the similar structure, suggestsynctests and
Candidate: why do we need the <UNK> here?
Reference: do we need to test that "_routing" is a meta data field here?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: imho you should call writeandflush(...) and attach a channelfuturelistener that will close the channel after the write is done. that said you also will need to schedule some timeout that
Candidate: should we throw an exception?
Reference: i would prefer keeping the helper function, if someone decides to muck around the with the specs for say ctf 1.9, we need to make it easy to support it.
Candidate: why do we need to use <UNK> here?
Reference: not sure if this is really more readable than the previous version.
Candidate: if (state != null && <UNK> != null) { <UNK> }
Reference: this is a little silly
Candidate: @unyoungwax, prefixing the dictionary, you can use <UNK> <UNK> <UNK> <UNK> dictionary,
Reference: okay what is it....space after an "if" or not? the two lines above use different style. i vote for using a space :-)
Candidate: this you added behaved here?
Reference: to keep code consistency, you may use testk("v2");
Candidate: you can use <UNK> <UNK>
Reference: should reset the value in the config file too?
Candidate: the syserr should be be <UNK>
Reference: can this be more clearly named like inputpositioncount or something similar?
Candidate: nit <UNK> <UNK> "this access balancer "this dropped?
Reference: should be done via a logger
Candidate: can we be expecting an exception here?
Reference: currently all operations in the realmcache is locked on the realmcache.class, which means this will block opening all other different realmconfigurations. but never mind, i think having it here is
Candidate: please use <UNK>
Reference: it seems it do the work but maybe we can replace these 11 lines with these 4 ?  if (!prompts.contains(prompt.login)) { prompts.add(prompt.login); } session.getsessionattributes().put("prompt", stringutils.implode(prompts, " ");
Candidate: why do we need need to the <UNK> here?
Reference: shouldn't it always end on ':'? currently 'password' must be followed by ':' but 'passphrase for' can be suffixed by everything. not even a space after 'for' is required.
Candidate: this should be <UNK>
Reference: remove byteorder
Candidate: why do we need to check for the <UNK> ?
Reference: am i missing something or is replacementlength always 0 if there are no errors? because this replacementlength and replacementoffset information exist in the integration of the interpreters in sirius and
Candidate: if you is the <UNK> <UNK> is the <UNK> <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: why do you retrieve text of currently focused shell? what if there is a modal shell, some popup etc. then this would be broken. does the new docker connection wizard
Candidate: you don't need to use <UNK> <UNK>
Reference: we found that the query compilation time for sql has gone up to 5ms in certain cases (as compared to micro-seconds for pql). one suspect here is the additional processing
Candidate: should we use <UNK> here?
Reference: make sure to use spaces instead of tab characters
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: i don't think this should be called here. growth from an update tick should be distinct from growth from bonemeal (the probability of each being distinct is important, at the
Candidate: please use <UNK> <UNK>
Reference: remove redundant type info
Candidate: class<? extends <UNK>
Reference: use new enumproperty, instead of new stringproperty()._enum(enumproperty.getenumsaslist **before:** new stringproperty()._enum(enumproperty.getenumsaslist(order.action.class)) **after:** new enumproperty(order.action.class)
Candidate: good! this should be the fixture.
Reference: is this not a shallow copy? do we need to deep copy? you are giving a reference to ingredients not actually copying the array?
Candidate: please use <UNK> <UNK>
Reference: why do you need to lock this code? executorservice.execute is thread safe, isn't it ?
Candidate: if (args.length && <UNK> { return; }
Reference: given this requirement: if the setting for hide balance = on then the balance should always be hidden when returning to the home screen (regardless of the last state) hidebalance
Candidate: can be replaced with <UNK> ?
Reference: do we really want the entire stacktrace?
Candidate: why do we need to here?
Reference: i'm not sure that this piece is required here. or rather, we should only need it if the file we attempt to import is on android m and above and
Candidate: why do we need the layout here?
Reference: you should replace the test by (primerefining == null) and execute statements from the else block. then always return primerefining field after the "if", the main local variable is not
Candidate: should we be the <UNK> here?
Reference: @ivange94 please use apiexception(string messagekey, object[] parameters, throwable cause) with a messagekey = code from message.properties; cause is e you need to remember that all these exceptions might be shown
Candidate: what happens if the exception is the
Reference: you can do getunchecked() if you know the load() method does not throw any exception. the executionexception is just a wrapper that allows catching potential exceptions that get thrown by
Candidate: should we throw an exception?
Reference: thanks for improving the tests. i'd suggest a separate test for the special long argument case. this will keep the tests more focused and intention clearer.
Candidate: why do we need to use the <UNK> here?
Reference: does zone (reference) contain zoneid or are they completely different things?
Candidate: why do we need this again?
Reference: because you split the method, should you protect against count=0?
Candidate: if <UNK> != direction.incoming) { return; }
Reference: minor: tabledescriptors
Candidate: @unyoungwax, do we need to check narrowing compatibility.
Reference: suggestion var columnident = symbols.pathfromsymbol(field) if (!columnident.issystemcolumn()) { context.add(columnident, field); }
Candidate: why do we need to check for the <UNK>
Reference: logservermessage internally calls logauditmessage. so in effect, you would be calling this twice. i think the fix should be in glusterauditlogutil - in logauditmessage, if server is passed, server.getvdsgroupid can
Candidate: why do we need the <UNK> here?
Reference: replace with a constant.
Candidate: is there a reason for the _last_ first?
Reference: shouldn't also this need to be set to float?
Candidate: this should be null if <UNK> != null) { throw <UNK> } <UNK> { <UNK> }?
Reference: you should discuss with nicolas, but this class is probably useless. you should use labelinternationalizationutils.getsetlabelcommand directly i think
Candidate: this should be done in the pr, but it should be done in a separate pr, but it would be nice to preserve the <UNK>
Reference: can you get values for header1 and header2?
Candidate: why do we need to the <UNK> here?
Reference: if you want to be safe, you can do: if (mprefix != null && mprefix.length()) > 0 ) { on the coding style side, there should be a space after
Candidate: please use <UNK> <UNK> <UNK>
Reference: simpler: return partitiontostore.remove(id) != null; also, should be partitiontostore (camel case)
Candidate: should this be <UNK> <UNK>
Reference: that appears to be unrelated to this change (and wrong)?
Candidate: this should be setemptyelement().
Reference: is this something we want to make configurable via a system property?
Candidate: i'm not sure that this pr, but i'm not sure if we (?)
Reference: could you return a xml output instead?
Candidate: should this be <UNK>
Reference: suggestion preconditions.checkargument(latitude >= min_latitude && latitude <= max_latitude, "latitude must be between -90 and 90");
Candidate: <UNK> *= 2;
Reference: nothing seems to call the getaverage() method, so the timestamp_grace_time is never used. or am i missing something?
Candidate: this should be <UNK>
Reference: let's select a simpler name; i propose 'dropstalebuffers' or 'dropstaleblocks'
Candidate: should we be the specific?
Reference: figured that since this is new code.. it should be fine from semver check point
Candidate: why do we need to assert that the
Reference: can't we hit some name length limit with this?
Candidate: can we use the <UNK> here?
Reference: matter of taste but why not rely on autoboxing ?
Candidate: why do we need the <UNK> here?
Reference: this should only return null if removeerroneousexpressions is true.
Candidate: should we be the <UNK> here?
Reference: based on this should this policy implement <link_0> with per_call? having this logic and the positional change are another route as well, to explicitly prevent duplicate sas parameters.
Candidate: should we be schedule() here?
Reference: is this enough?
Candidate: why do we need the <UNK> here?
Reference: should the args passed into getstring be constants as well?
Candidate: i don't think we need to throw an exception
Reference: wouldn't using a linkedhashset do the trick, avoiding the manual "add-all-once" handling while still guaranteeing a stable iteration order?
Candidate: please use <UNK>
Reference: i think we have decided to all use schedlib tools for that even in server? is it right? if yes, add missing tooling in schedlib. prefix is 'jack-server-' in other
Candidate: why do we need to evict the <UNK> here?
Reference: we should add a third parameter for the path of the json output path and use : java // generate object spec file ddf2jsongenerator ddfjsongenerator = new ddf2jsongenerator(); try (fileoutputstream
Candidate: this fail()?
Reference: throw unregisteredaliasexception
Candidate: should we throw an exception if <UNK> { throw new <UNK> } { <UNK> }
Reference: suggestion empty_value);
Candidate: suggestion empty_value);
Reference: we should have tests for both cases (a) we assign the external id and call the commit hook (b) we don't assign the external id, and we don't pass in
Candidate: what happens if the is is invalid?
Reference: i would suggest using a stringbuilder instead for better efficiency. the builder also defaults to being empty, so you don't need to explicitly specify an empty string as the initial
Candidate: why do we need to check the <UNK> here?
Reference: you can do fileutils.readfiletostring(file, encoding) as a shortcut for reading the output file.
Candidate: you don't need to check on the <UNK>
Reference: trade date required for trade. now we have position and trade, when using 'trade', the trade date is required. this has been changed recently (see for example bondfuturetrade). overnightfuture should
Candidate: this should be setemptyelement().
Reference: i think we don't need null check here. just let it crash.
Candidate: should this be the specific?
Reference: please add technical details to the exception, here the referenced candidateid might be useful to be placed into the exception. if the future you will need to find out why
Candidate: you don't need need to the <UNK> <UNK>
Reference: when you pr this to develop branch you will see i have added a checkactivesession method you can re-use here.
Candidate: should we be the <UNK> here?
Reference: looks better to have a log message specific to this type of exception if you want to distinguish this exception from others, e.g. failed when accessing extension store.
Candidate: nicer: <UNK> ?
Reference: i hate to be the one to complain about formatting... this method name needs to be prefixed with spongeimpl$ to be consistent with the class (though, @gabizou, [i thought the
Candidate: we should need to acquire locks acquired acquired acquired lock acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired acquired
Reference: if condition of err.isconnected is not required when action is just to emit. by default its connected to sink.blackhole on which put object does not do anything.
Candidate: should we be schedule() here?
Reference: you can extract reqtopic.getresources() as a variable so that you don't need to call it again thereafter.
Candidate: should we move this into the messages.properties method?
Reference: getrestjiraclient() returns an optional<>, but then you just use the get() assuming that the issue has been found. so the exception will be odd. it would probably make more sense
Candidate: should we throw an exception here instead of returning null?
Reference: probably can avoid one level of nesting with (subjects != null & !subjects.isempty())
Candidate: i'd suggest changing this to <UNK> <UNK>
Reference: i guess you can approach same result in an easier way (just boolean arithmetic):  java boolean password_hashed = req.getparameter("password_hashed") != null && req.getparameter("password_hashed").equals("1");  then i believe it's better
Candidate: why do we need the <UNK> here?
Reference: maybe also add the oldjobtype blank check here?
Candidate: this should be <UNK>
Reference: select 1e1 works with postgresql/pgjdbc well, getbigdecimal() returns 10 as expected. i think you need to normalize scale in your implementation too.
Candidate: i don't understand why, but it matters, what is the that the is is the that the is is the
Reference: this should not be here. we should not catch, swallow exception this is a very bad practice.
Candidate: same as above.
Reference: why is this noncompliant?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: couldn't this be an import instead of a fully qualified reference?
Candidate: please use <UNK>
Reference: remove these lines, as they are there for testing purposes only....
Candidate: can we use <UNK> <UNK> <UNK>
Reference: if this is expected to be thread safe it's not, as it can return for multiple threads even though there is just one element in the underlying store (not both
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: remove //modified harsh.
Candidate: do we need to catch <UNK> here
Reference: i'm looking for a test something like this (i haven't run locally): suggestion final ghrepository repo = github.getrepository("hub4j-test-org/ghcontentintegrationtest"); final ghcontent filecontent = repo.getfilecontent("ghcontent-ro/a-file-with-\u00f6"); assertthat(ioutils.readlines(filecontent.read(), standardcharsets.utf_8), hasitems("test")); final ghcontent filecontent2 =
Candidate: why do we need to use the here?
Reference: i think you can replace this with executableelement.getkind() == elementkind.constructor to avoid the string comparison
Candidate: please use <UNK>
Reference: 'truth' is dubious. if that's not what you got, then how is 'truth' the truth? ;) 'expected' is unambiguous.
Candidate: i don't think we don't want to report the state of the state of the state of the
Reference: can't we use 'parameters.setforcerefresh(forcerefresh);' instead?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: with the deletion below, ci (spotbugs and intellij inspections) is flagging this as unused now
Candidate: this is be <UNK> to itemstack.
Reference: ofri, here we have attested the host, and its result is trusted, so we need to move the vds status to up. but we involk initvdsonup process, and in this
Candidate: why do we need need to check for the <UNK>
Reference: when running for a bigger table the same message is repeated every progress_counter rows but it does not tell anything about the progress, anything about the number of already checked
Candidate: stringutils.isnotblank()
Reference: why lastindexof(.)? hello.tar.gz will be hello.tara.gz
Candidate: should this be <UNK> <UNK>
Reference: remove this change please, as it should not be necessary.
Candidate: this should be null if <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK>
Reference: the funnel has a logabusefilterwarning() method that we could use here. technically it has both "warning" and "error" variants, but since we're not really distinguishing between the two for editing
Candidate: why do we need to the <UNK> here?
Reference: getimages() already returns a list. there is no need to stream it and then collect it again. consider something like this: optional.of(ec2client.describeimages(describeimagesrequest)).map(describeimagesresult::getimages)
Candidate: this should be the <UNK> <UNK>
Reference: tablescanplannodeid
Candidate: can you use the <UNK> if <UNK> == null) { return <UNK> } <UNK> } <UNK> { return false; }
Reference: sysout ??
Candidate: please use <UNK>
Reference: shouldn't we check for empty or null session id and throw exception as needed?
Candidate: why do we need to <UNK> stuff?
Reference: please-fix: this check is unnecessary because the other import-use-case only generates "file" uris and this use-case ignores it. => the boolean-flag, the check, and these try-catches only obfuscate code. =>
Candidate: why do we need to use <UNK> here?
Reference: i would probably use switch or multiple else if sections for the quotaaction values.
Candidate: i complains about narrowing <UNK> but if we failed?
Reference: please combine the two conditions.
Candidate: can we move this into a separate method, so we don't need to do the lookup (after <UNK> ?
Reference: use flatmap
Candidate: why do we need the layout here?
Reference: fair enough. since fieldcontextsimplequeryparser is no longer used, can you please remove it?
Candidate: can be replaced with the @nullable.
Reference: should we keep this check and add final else that throws an illegalstateexception instead?
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: i'd use a different config key (though i appreciate this is based on teleportenabled as used above) - perhaps "teleportauto"?
Candidate: should this be <UNK>
Reference: how important it is to make sure that cached revwalks are released even in case of an exception? put this in a finally block?
Candidate: why do we need to use the payload?
Reference: suggestion super("unable to send a notification to slack:" + e.getmessage());
Candidate: if <UNK> == direction.incoming) { return false; }
Reference: please add curly braces here
Candidate: why do we need the <UNK> here?
Reference: if it is live mode, should you assert this is set?
Candidate: this should be the <UNK>
Reference: greage->create
Candidate: the syserr should be be the
Reference: maybe move to constant. and the rv, of course. ;)
Candidate: why this <UNK>
Reference: extra space after !=. there're a few instances of this.
Candidate: i don't think we need to cast.
Reference: needs to check (and return) if the context is null.
Candidate: can we use the <UNK> here?
Reference: curious: is the following scenario possible: - some stats paged added - getoutput is called and returns the merged stats page - some new stats pages added?
Candidate: ![major](<link_0> 'severity: major') remove this call <UNK> to remove this method. [![rule](<link_1>](<link_2>
Reference: what exception do you expect here? is it the deserialization failure or any thing else? can you catch specific exceptions?
Candidate: why do we need to permission?
Reference: i'm too lazy to expand the whole file in the diff...does docheck get called from multiple places? could we just put the logic here?
Candidate: why do we need the <UNK> here?
Reference: you should have a local delayerror field for this, otherwise you are re-reading the flag on each emission which can cause unnecessary false sharing. java queue<object> q = queue; boolean
Candidate: if <UNK> != null || <UNK> || <UNK> || <UNK> != <UNK>
Reference: actually, the issue #794 is about getting an arrayindexoutofboundsexception rather than nullpointerexception which is caused when datapoints does not contain an index datapointindex - so the exact same thing still
Candidate: should we throw an exception here instead of returning null?
Reference: you can express this as:  return optional.fromnullable(metadata).or(collections.empty_map).entryset().stream().collect(...stuff...);
Candidate: why do we need the <UNK> here?
Reference: the pattern metadataschema.deletessection.getrowprefix() + sortskew.getcode(path) + path could be it's own utility function, since it's used frequently. perhaps: metadataschema.deletessection.encodedeleterow(path) or similar.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: info messages are above, including warn need to explicitly. for core, that's done in org.infinispan.util.logging.log where you'll find plenty of examples.
Candidate: why do we need to here?
Reference: loooooooop. should be getcause().getmessage()?
Candidate: this should be the <UNK> <UNK>
Reference: would it be cleaner to just name this responsedata? (the build method may just as well return the new response data immediately, instead of storing it in a local variable.)
Candidate: i don't think we need to call the <UNK>
Reference: lets return the value of the apapter.createdirectory here ?
Candidate: why do we need the <UNK> here?
Reference: assert.fail would be more appropriate here, if the if statement passes then the tccl is always not null.
Candidate: why do we need the <UNK> here?
Reference: this is not a caller's problem, but rather a bug in the implementation of this class. hence, verify would be more appropriate.
Candidate: i disagree with the <UNK> disagree with the <UNK>
Reference: this method indicates that the "value" map is expected to be <string, string> rather than <?, ?>.
Candidate: please use the enum?
Reference: this can be moved outside the function, as if rescheduleat == null, then you dont need to make a getandupdate method call, but just a get, and then the function
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: suggestion org.molgenis.data.query<entity> findquery = new queryimpl<>(findallquery);
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: please do not create useless variables, it is more readable if you directly use:  java return ecapi.postlog(cache, logtype, date, log);
Candidate: should we use <UNK> <UNK>
Reference: import parquet.schema.primitivetype.primitivetypename; to simplify this
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: invalid output schema
Candidate: why do we need to use the here?
Reference: annotate the method with @nullable
Candidate: this should be <UNK>
Reference: are we sure that the root element could not be a package?
Candidate: why do we need the <UNK> here?
Reference: i do not get that change. why did you decided to have messages carry their encoding / decoding logic? i understand i gave that advice for the work @albinsuresh is
Candidate: should this be <UNK>
Reference: maybe a good idea to check if "split" is assignable to "phoenixmultiviewinputsplit" and then cast, else return an exception.
Candidate: please import?
Reference: the visibility of this method can be private
Candidate: you can use the <UNK> <UNK>
Reference: nit: we could move the variable initialization after the if block as its not needed beforehand.
Candidate: why do we need to use the <UNK> here?
Reference: space after ) (checkstyle will complain).
Candidate: this should be the <UNK>
Reference: change to include the original exception: throw new mojoexecutionexception(e.getmessage(), e);
Candidate: why do we need to use <UNK> here?
Reference: i think, it would be cleaner to build a bloomfilterutility based on the required objects only instead of requiring to create a fake columndescriptor.
Candidate: please use <UNK> <UNK>
Reference: nit-pick: startcommit.hashcode can just be xored/added in since it is well distributed
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: suggest changing this so that we can see when a detected locale is (much) different than the browser/cookie locale locale resolvedlocale = lookupsupportedlocale(locale, getlocalekeys()); log.debug(string.format("incoming locale: %s. filter determined locale
Candidate: if vds { <UNK> } (throwable { <UNK> })); }
Reference: should we also change this to match what the cl intents? i.e. e.g. recordvideosizes
Candidate: i don't understand this matters, this matters, if you matters, this matters, but i don't understand why, but it matters, this use-case.
Reference: should use the static issupported() method . you have on targetchosenreceiver to avoid propagating build versions everywhere
Candidate: why do we need to use <UNK> here?
Reference: looks like we can use here integrationconfigutils.base_package and remove both constants in this class.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this test seems to be weaker than it could. could we use fixed clock and check for exact value rather than verify nullability?
Candidate: why do we need the <UNK> here?
Reference: please log a more descriptive message here. keep in mind, e.getmessage() may be null....in which case this will say "null". we may also want to look more closely at the
Candidate: why do we need to use <UNK> here?
Reference: we should add a log here as well
Candidate: you can do you need the <UNK>
Reference: can't we move this (e -> platform.runlater(() -> new errormessage(tr("error while creating shortcut"), e))) to another method called defaulterrorhandler or something?
Candidate: should this be be specific?
Reference: nullpointerexception expected
Candidate: should we throw an exception here instead of an error?
Reference: @amejia481 on null we were previously returning an empty string, and here you changed that behavior into return null. is there any special reason for doing that? did you check
Candidate: the syserr should be be <UNK>
Reference: i don't think this is the correct exception message for num == 0?
Candidate: needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed needed
Reference: suggest logging this as well.
Candidate: i don't think we need to trim the
Reference: cannot tell where this transaction was started.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: missing space
Candidate: this readasstring(...) instead of <UNK>
Reference: i'm not a huge fan of continuing to to a label. how about populating filters with all the untracked entries and then remove entries that match the untracked folder prefix?
Candidate: can be simplified to: java <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> } <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: seems a good candidate of method reference usage above  attribute.visitjdbctypes( jdbcmappings::add, ... );
Candidate: please use <UNK> instead of clazz, to arraylist?
Reference: if we had commands pending for events and the engine rebooted we might be left waiting for a very long time which might be frustrating to the users. if we
Candidate: if you is the <UNK> <UNK> is the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: why is the osexception not simply thrown again? throw e would keep the original stacktrace.
Candidate: should this be null?
Reference: also magic number here
Candidate: please use <UNK>
Reference: remove .getsucceeded();
Candidate: what happens if the events is events in the log.
Reference: suggestion if (!validateport(targettracecollectionport) && collectbuildtraces) {
Candidate: can we use the <UNK> here?
Reference: is it necessary to set 0 managed memory weight, by default it should be 0.
Candidate: i don't see the super issue like the super changes on the super ?
Reference: create a class that handles this and use the constructor for it here and replace this with a one liner
Candidate: this should be the <UNK>
Reference: what is this change for? it looks pretty much the same as it was before, with the exception handling changed.
Candidate: use <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: leftovers
Candidate: nit: 49
Reference: how about checking if styledstring is null then assigning it.
Candidate: should we return <UNK> ?
Reference: i don't like this to be a side effect of this getblacklist function. but i am still looking for a better way to better resolve this.
Candidate: stringutils.isnotblank()
Reference: final?
Candidate: please use <UNK>
Reference: this means we compute costs for all nodes even if we don't need them
Candidate: rename to <UNK>
Reference: at first the comparison looked weird, i.e. comparing a model with a source. the comparison is good, just need to improve the name of the variables.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: i'm a bit lost here: why do we read broadcastsocketaddress again? addresstouse is never used. address is only used in the log message.
Candidate: <UNK>
Reference: unnecessary assertion, please remove!
Candidate: why do we need to use the <UNK> here?
Reference: why these two options can't be populated directly by the simplerabbitlistenercontainerfactory when that etbatchlistener(true) is used?
Candidate: this should be the <UNK>
Reference: i'm sorry to request something that doesn't feel great but i think it would be better for it to be just like anki - this bug wouldn't have happened e.g.
Candidate: can be replaced with <UNK> <UNK>
Reference: why close the file directly instead of calling closefile()? one of the tasks of closefile() is to interrupt the filetimerthread and set it to null. with this change, reset() may
Candidate: why do we need to here?
Reference: or we can use a stringbuilder here that we build at the end of the request to avoid variable re-allocation?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: npe: timegraphviewer is null before super is called. but i don't think the next line is necessary.
Candidate: <UNK> doesn;t be <UNK> <UNK>
Reference: why update twice?
Candidate: if you is the <UNK> <UNK> the presenter.
Reference: the intention behind the methods only called by the attribute name is to chain the calls as in: java id(id).name(name).apiversion(apiversion);  for non-chained calls, the idiom is to use setters:
Candidate: please remove the method("post")
Reference: i don't see where postparameters is ever attached to the request.
Candidate: why do we need to use <UNK> here?
Reference: how about changing createmessage to allow to pass the 4 fields and call that with the corresponding values? it would reduce duplication and still check the correct structure.
Candidate: <UNK>
Reference: did you mean processfuture.isdone() instead of its negation?
Candidate: should this be <UNK>
Reference: place this below getoutput()
Candidate: i don't understand why we need to hide the <UNK> commit?
Reference: use gerritfixture.current().getcredentials(privilegelevel.admin). (we recently made a change so that this works).
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: can you do the arrows too?
Candidate: why do we need to check for the <UNK> part, and the
Reference: why do clients still need to call compile()? why can't the evaluator compile itself either in the constructor or lazily on first evaluation?
Candidate: the syserr should be be the
Reference: costly?
Candidate: should we use the <UNK> here?
Reference: @rubenmartin you should use entry.setvalue("null") instead
Candidate: why do we need to check the <UNK> here?
Reference: why is syncpodstodirectory being done during publishfinish? shouldn't that be done at the start of the publish operation, like publishstart or something? my concern is if this is done after
Candidate: why do we need to use the here?
Reference: you don't need this local variable, you can just put the string literal "test" in the thenreturn() method on line 230.
Candidate: please use <UNK>
Reference: there is a bug here, reported to jdt (470535)
Candidate: this should be factorized to <UNK>
Reference: i would extract all this: java form form = mockito.mock(form.class); map<string, list<validationerror>> errormap = new hashmap<string, list<validationerror>>(); errormap.put(errorfield1, arrays.aslist(new validationerror("errorkey1", "errormessage1"), new validationerror("errorkey2", "errormessage2"))); errormap.put(errorfield2, collections.singletonlist(new validationerror("errorkey21", "errormessage21"))); mockito.when(form.errors()).thenreturn(errormap); 
Candidate: why do we need to <UNK> here?
Reference: postevent returns cancellation status. you can inline it (and i'd prefer it for leaner mixins).
Candidate: should this be the <UNK>
Reference: this seems esoteric. what's wrong with -0.0 here?
Candidate: this should be meaningless here too?
Reference: what do you think about: * whether makes sense to pass user from subject instead of getting user from environment inside hdfscommand * from this function name seems like uploading
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: actually, in this case it should still print this whole report to stdout not to the log file.
Candidate: rename <UNK> <UNK>
Reference: initial size 5000 ?
Candidate: you should need to <UNK> the database <UNK>
Reference: remove cast to int
Candidate: should this be <UNK>
Reference: could move inside lambda further down, where we have access to the cache through stmt
Candidate: this getcredentials should be <UNK>
Reference: left operand is useless
Candidate: please remove the <UNK>
Reference: the logic in l201-l204 seems to be done in l194-199, doesn't it? if so, doesn't it make sense to remove one of them?
Candidate: should this be the <UNK>
Reference: this does not seem to work, as there appears to be no space on the left side (or 5 is too small)
Candidate: should we be the specific?
Reference: maybe use ioutils.write() from: <link_0>
Candidate: should we throw an exception exception?
Reference: please add the class name to the exception message.
Candidate: should we throw an illegalstateexception instead of exception?
Reference: i guess we may possibly avoid introducing unfinished_requests by doing this: java for (long id : channels.keyset()) { if (channel.equals(channels.get(id))) { defaultfuture future = getfuture(id); if (!future.isdone()) { response disconnectresponse
Candidate: should we be the username?
Reference: argument name is wrong in the call to the arg checker.
Candidate: should be be <UNK>
Reference: i don't get this line - what we are testing here. we set exact input, why we are not sure about output?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you could move this section into a well-named method to make the code easier to read.
Candidate: <UNK> *= 2;
Reference: let me suggest a different way: lets call it clustercompatibilityversion in the ovf and use vm#getclustercompatibilityversion on the export operation. in the import operation we will do: vm.setclustercompatibilityversionorigin(<parse cluster compatibility
Candidate: please add cda here
Reference: it is quite hard to follow this condition. what is checked here?
Candidate: why do we need the <UNK> here?
Reference: suggestion "might be caused by a previous networknode.sendmessage.onfailure.");
Candidate: do we need to catch exception here and throw classcastexception?
Reference: shouldn't get it from serivce_provider too?
Candidate: should we use the getconnection here?
Reference: same as other, return once or instantly.
Candidate: can be replaced by: return <UNK> && <UNK> { return <UNK> }
Reference: null == adapter
Candidate: i think this should be called on the username?
Reference: can we do some sort of validation on the media type? at least to make sure it is in the standard format (ie. type "/" [tree "."] subtype ["+" suffix]
Candidate: this should be repelaced on the code...
Reference: multi-line statements _are_ allowed.
Candidate: can be simplified to: java return <UNK> == <UNK> || <UNK> && <UNK> { return <UNK> }
Reference: what if login is deferred, wouldn't that code run too soon?
Candidate: why do we need to call <UNK> here?
Reference: can we just use zoneid.systemdefault() here?
Candidate: why do we need to use the <UNK> here?
Reference: add a new line here please
Candidate: should we be the <UNK> here?
Reference: hours and mins is relevant for weekly schedule too
Candidate: you don't need to use <UNK> <UNK>
Reference: you don't need to call this every iteration, you could remember it before the loop
Candidate: i don't need to check for the <UNK>
Reference: nitpick braces
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please format this line so it isn't so long.
Candidate: i don't think we need to throw an exception if the is is an exception, so that it should. it would be more appropriate.
Reference: @paulodamaso why swallow the exception?
Candidate: class<? extends <UNK> { <UNK> <UNK> input) { throw <UNK> } } }
Reference: ![minor](<link_2> 'severity: minor') use a logger to log this exception. [![rule](<link_1>](<link_0>
Candidate: you don't need to wait for the machines --> <UNK>
Reference: reportservice
Candidate: should we throw an exception here instead of returning null?
Reference: this test will run for 5 seconds+ if left like that, do complete the batch after your assertion to make it finish faster
Candidate: this fail()?
Reference: wrong indentation, hive_catalog, aria_scan_enabled setcatalogsessionproperty(hive_catalog, aria_scan_enabled, "false") (aria_scan_enabled field needs to be changed to public in com.facebook.presto.hive.hivesessionproperties)
Candidate: i this <UNK> <UNK> <UNK>
Reference: please use isempty() instead
Candidate: please remove the <UNK>
Reference: need to add patientobj
Candidate: why do we need the <UNK> here?
Reference: can be replaced with lambda
Candidate: please use <UNK>
Reference: iterables.getonlyone
Candidate: can we use the <UNK> here?
Reference: i would prefer to have an index different than zero... just for sake of testing that it works with 42 or 67 (because everyone loves prime).
Candidate: i don't understand this matters, this matters, if you matters, matters, but you don't need why, it matters, but it matters, afaik. edit: i haven't tested it: <UNK> = <UNK>
Reference: we should better use exchange.origin field to determine if this is an outbound request. for that purpose we could e.g. add a exchange.isoflocalorigin() method.
Candidate: what happens if the exception is the software exception we don't want to do we want to interact with the <UNK>
Reference: why are these methods (cleancachednotifications and cleancacheduniqueoutcomeeventnotifications) inside the thread definition?
Candidate: why do we need the <UNK> here?
Reference: 0 ?
Candidate: if <UNK> != null && <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: you shouldn't perform any filtering on subject when doing faceted search on the subject, so you can't use setcommonqueryparams method as it considers any subject area passed in the query.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: mark it as @nullable
Candidate: should we be schedule() here?
Reference: just a style thing but maybe add in typemapping a as(class<t>) to be able to do typemapping.as(classmapping.class) it avoids to put cast everywhere and makes the pattern if (type ==
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: if color output is not enabled, the # is not added into the prompt. adding of # to the prompt shouldn't be dependent on color-output property.
Candidate: this should be the <UNK>
Reference: in the current code disk can have no disk profile, which will lead to npe/indexoutofbounds exception here.
Candidate: please remove the <UNK>
Reference: accidental change
Candidate: consider using the fixture.
Reference: can you leave code better than it is now and move this path into private static field?
Candidate: why do we need the <UNK> here?
Reference: consider the collectionutils.isempty(this.applicationdefinitions) instead
Candidate: this should be the <UNK>
Reference: eww use the builder
Candidate: can we make this private?
Reference: and here submonitor.begintask(nls.bind(messages.tmfeventmatching_requestingeventsfrom, trace.getname())
Candidate: why do we need this?
Reference: any reason to return list<? extends partitionid> instead of "list<partitionid>" ?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: instead of passing httpclient here, you can as well use httpclient.createdefault() since you know httpclient is null.
Candidate: this should be injected, in the presenter.
Reference: i think usage of string concatenation here is an issue. could you fix it?
Candidate: can we use the <UNK> here?
Reference: why is this check needed? doesn't the check below cover it? in fact, for complexity to be < 25m, tilecount cannot be larger than that.
Candidate: we should need to do we need to do we need to do we need need to do we need to do we need need to do we need to
Reference: in our testing subscriptions we can't create a collection with 1m throughput upfront. the workaround we have is to create a collection with 100k throughput and then scale up. now
Candidate: why do we need this check?
Reference: what's the point of this change? if it does fixes the test case, why does it?
Candidate: why do we need to use the <UNK> here?
Reference: we should at least log it no ?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: using a set here instead of a list would be more efficient for lookups. we should also move to a static constant rather than defining it in the function here.
Candidate: <UNK> *= 2;
Reference: this seems wrong in light of the other constructor where you set creator/user to different values  null, null, sessionmanager.getauthorname(), sessionmanager.getusername(),
Candidate: i don't see the if we don't see the else branch if the else branch is the
Reference: were these tests failing on windows machines?
Candidate: please remove method("post")
Reference: nit: this is one md5 value so it need not be plural ?
Candidate: @unyoungwax, oops don't understand this matters, what happens if the is is invalid?
Reference: what has happened in order to return null from this method? this should never happen as we have done all checks before, right? if we return null because we hit
Candidate: if <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: why do you have two beforeclass?
Candidate: why do we need the <UNK> here?
Reference: missing set to action and type
Candidate: if vds { return false; } return false; }
Reference: would be better to store as a local private variable (like locationcontext / webstorage) and only inialize it once on construction. also fix the indentation here
Candidate: why do we need to check the <UNK>
Reference: it's better to have this logic in its own method so that if a client wants to determine what is or what isn't a minified file they can do that
Candidate: should we class" be specific?
Reference: this test should be where the check is made. in deletepipelineconfigcommand
Candidate: you don't need to use the <UNK>
Reference: i'm just wondering whether you should test for storage being null. can you check that please, and let me know? (does loadadapter support a null param, is it possible that
Candidate: can we move this into a single method to avoid duplication.
Reference: is there a reason for not using calendar.gettimeinmillis()?
Candidate: please use <UNK> <UNK> <UNK>
Reference: if this does not hit often, i would vote for making this info.
Candidate: i don't understand why, but it matters, what is it is the to the <UNK> the <UNK> is the
Reference: probably should be cloned here instead of taking a reference to an external object
Candidate: should this be <UNK>
Reference: there is a slight beter way to do write this. will do it
Candidate: why do we need need to be the here?
Reference: set interface
Candidate: i don't think we need to check for the <UNK>
Reference: suggest to rename to assertiontype instead of assertiontypetest
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: should use constant for the string
Candidate: why do we need need to the <UNK> here?
Reference: i don't think a template should be mandatory. you can always specify the list of packages on the command line
Candidate: should we use <UNK> here as far as far as far as far as far as far as far as far as far as far as far as far as
Reference: typo. suggestion fail("expanded to " + expansion.getexpansion().getcontains().size() + " but max was " + mydaoconfig.getmaximumexpansionsize());
Candidate: can you use division for the <UNK>
Reference: check your helpers, some could be static
Candidate: why do we need to use the <UNK> here?
Reference: will probably look better to call the new ctr here, and move the initializations to it. i.e.: public vmleaseparameters(guid storagepoolid, guid storagedomainid, guid vmid) { this(storagepoolid, storagedomainid,vmid, null); } public
Candidate: should we be the if the is empty?
Reference: indentation is spaces here when it should be tabs.
Candidate: i don't think we need to check if the is is the
Reference: just minor, but things like ".ssh", "id_rsa", "known_hosts", etc. should be declared as constants in this file.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit: would it make sense to make volumeids a set? if the same volumeid can be referenced by diff instances, duplicates are possible
Candidate: should we throw an exception here instead of the exception?
Reference: name dependency
Candidate: why do we need the <UNK> here?
Reference: what about dt_log_appender that is being configured above. can it be repurposed for this? also, looks like createloggingproxy is a pass through and system out and err are going to
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i think this message field can be removed and used directly in checkstate
Candidate: why do we need to check for (long <UNK>
Reference: null check here now
Candidate: should this be <UNK>
Reference: why is this test case removed?
Candidate: please use <UNK>
Reference: runnable -> lambda?
Candidate: why do we need the <UNK> here?
Reference: null check on ryainstance
Candidate: why do we need to check the the scenario?
Reference: shouldn't this be saved in the userrepository too?
Candidate: use assertj's <UNK>
Reference: the datafilechannel and indexfilechannel are created via data output driven. i am wondering that does it exist the case of empty output? maybe the operator filters all the input data
Candidate: why do we need to use <UNK> here?
Reference: nit: spaces after commas (applicable everywhere)
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: showing logging in this loop is good (it's consistent with operatormanager) but throwing exception has a downside. because throwing an exception will leave from this loop, users can know only
Candidate: i [] []
Reference: yeah its not needed.
Candidate: i this.key this.key this.key this.key this.key
Reference: how come this moved from updatetoken? i think it needs to be part of that synchronization block
Candidate: should we throw an exception here?
Reference: log the exception as well. i know i keep harping on this, but if these errors actually start happening in production, it will be really useful to have the exception
Candidate: why do we need the <UNK> here?
Reference: ignoretagchanges needs to be in a try/finally since the tag add or removal can trigger a lot of code.
Candidate: i don't think we need to check if the is is the
Reference: do you need to save this? what happens if you just do this instead?  this.fallback = fallback; // make sure we can invoke fallbacks on package-private interfaces for (method
Candidate: why do we need to the <UNK> here?
Reference: should we change these final messages too?
Candidate: should we be the <UNK> here?
Reference: you need to call configureconsumer too, see the other components
Candidate: please remove the <UNK> contiguous.
Reference: i'm not sure about this one. please pull this out of this pr because it isn't related to timing and lets run some ad hoc examples to make sure we
Candidate: you can use the syserr
Reference: what about if the clock moves backwards and you pass a negative or 0 wait?
Candidate: what happens if the is is the
Reference: might want to just use metricsrule to have it handle saving & restoring the metrics  @rule public metricsrule metricsrule = new metricsrule();
Candidate: why do we need the <UNK> here?
Reference: it's not a big deal, but if you're using intellij, you can get it to auto-generate tostring, hashcode, and equals in the same style as most other druid code automatically.
Candidate: should we use the <UNK> here?
Reference: would you tell me why this change is needed?
Candidate: can be replaced with <UNK> ?
Reference: can drop ternary condition
Candidate: stringutils.isnotblank()
Reference: these variable names are a little unclear - could you give them more descriptive names?
Candidate: can you use <UNK> <UNK>
Reference: this method doesn't need to be static.
Candidate: should we be the <UNK> here?
Reference: lambda
Candidate: nit: 49
Reference: getbytes should specify a charset.
Candidate: use readasstring(...) instead of utf-8
Reference: please keep the method with signalserviceaddress parameter and just add a new method (with the same name) that takes a string and does the canonicalizeandresolvesignalserviceaddress conversion.
Candidate: should we be the exception here?
Reference: it is possible to receive a memento not populated with key_type causing type to be null and generating a null pointer exception, this was already present in the logic of
Candidate: i don't need to evict if the is is required.
Reference: its probably better if we log json string here , helps in debugging on storm side.
Candidate: please import?
Reference: invalidnamesor invalidfieldnames is better than fieldnames
Candidate: why do we need the <UNK> here?
Reference: this method does not use member variables and thus can be made a static method.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: use the same error message as above for consistency: "field %s must be of type bytes. it is currently of type %s"
Candidate: can use objects.hashcode?
Reference: i don't see a good reason to make this a java.util.function.predicate rather than just a regular instance method that we call. we're always calling the same function (the predicate function
Candidate: why do we need the <UNK> here?
Reference: static import
Candidate: static import
Reference: what about just removing this method used 2 times, and give a doc name to both calls?
Candidate: please remove the <UNK>
Reference: to be consistent with surrounding code it should just return true here (as it is a part of manifest.exists() check). may be it needs a bit deeper rework like optional<string>
Candidate: this should be <UNK> errormessage = ...?
Reference: now that we store definitions in the addworkflowdefinition already, we should just remove this postprocessworkflowdefinitions method. it will also nicely clean up some dependencies from other components.
Candidate: this should be the <UNK> via: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: imo we should also print a warning. this is quite important info, should be visible when running in cli.
Candidate: why do we need this?
Reference: no, this method should not throw interrupted exceptions.
Candidate: no, this method should not throw interrupted exceptions.
Reference: this effectively removes the possibility to use another root resource by extending coapserver.
Candidate: should be be the <UNK> <UNK> the vdsid != null && <UNK> { return; }
Reference: i would put this bind inside of websession.module(), as its really a private detail of websession.
Candidate: can we noop noop noop noop noop noop noop noop noop noop noop <UNK> the noop <UNK> <UNK> the <UNK> <UNK>
Reference: default access
Candidate: why do we need need to be the <UNK>
Reference: to remove, just use new arraylist<>() in the constructor, one line below
Candidate: list<object> <UNK> = <UNK> <UNK> dialog, <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: new double() is redundant here
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: nit: java should be able to figure out that it is a string from the required type for generaltopologycontext
Candidate: please remove the fixture.
Reference: return null?
Candidate: should this be <UNK>
Reference: here we should throw: blocking work processor cannot be (safely) iterated over (add this as a first commit) then you don't need the while(true) in yieldingiteratorfrom()
Candidate: can we move this into a separate method? if <UNK> { <UNK> <UNK> = <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> }
Reference: better: dataservice.findall(dynamic_decorator, dynamicdecorator.class).map(dynamicdecorator::getid)
Candidate: why do we need need to the <UNK> here?
Reference: since we are force casting we should use the same type for the instanceof
Candidate: can be simplified to return <UNK> ?
Reference: this is worth logging as an error
Candidate: should we be the <UNK> here?
Reference: i guess this is the virtual size?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: i guess a more helpful message would be useful. this message seems like a debug "how did i get here?" message rather than something useful.
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: use gov.hhs.fha.nhinc.nhinclib.nhincconstants.exchange_type class here
Candidate: can be simplified to <UNK> <UNK> ?
Reference: please also add a feature flag to show this only for pre-beta builds. (&& releaseutil.isprebetarelease())
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: minor (here and on line 80): can you remove "jobplanner.this"?
Candidate: we don't need to do we need to use the <UNK> <UNK>
Reference: shouldn't you decode the namevalue[0] as well?
Candidate: can we use the division here?
Reference: wouldn't it be safer to use isassignablefrom?
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: routererrorcode mistmatch should suffice. if it fails, it will automatically print both the values
Candidate: why do we need to mock here?
Reference: gratuitous reindentation does not make a reviewer's life any easier.
Candidate: i don't understand what if we do, if the is is the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: eliminate assert statement in ctor and replace it with iae
Candidate: you don't need to use the <UNK>
Reference: int size = invokers.size(); for (int i = 0; i < size; ++i) { final typedmethodinvoker<?> invoker = invokers.get(i); ...
Candidate: please remove the unused line.
Reference: we probably need to stop the remaining runningprocessors somewhere, right?
Candidate: why do we need to permission?
Reference: this was added because of a npe; and it fixes that problem. however, it changed the functionality a bit. previous version returned a row containing null values. this returns null
Candidate: rename <UNK> <UNK>
Reference: is it really needed to look up the pagearea like that (the implementation of the getmethods sound fragile to me)? why not reuse the instance you already have? the fact
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: i think the logic should be extended with "if the memory size on the next-run configuration is different than this in vm_static, don't do anything" to handle the following case:
Candidate: should be be <UNK>
Reference: this will perform sleep even for stopvdscommand, which we don't want. please move this execution into startvdscommand.teardown() method
Candidate: i don't think we need to check if the is is the
Reference: typo: applied
Candidate: should this be <UNK> here?
Reference: you do not need fetch encounter from server, because it has been already done
Candidate: please remove the <UNK>
Reference: this seems wrong to me, or at least ambiguous and unclear and will likely lead to problems. the condition class has an "onsetdate", "enddate", and "datecreated" property. i think that
Candidate: should we use <UNK> <UNK> <UNK> <UNK>
Reference: maybe it is overkill to use throwable instead of exception?
Candidate: please use <UNK>
Reference: this.contributor
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: as you're cleaning code, could you change the declared type to list?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: these spaces should be removed.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: did you want to leave this in?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: could use foreach
Candidate: if (args.length == 0) { <UNK> }
Reference: on one hand i agree, but on the other then i'll refactor how this callback works: in stopuldates() we set the callback to null, so we are not implying that
Candidate: should this be <UNK>
Reference: do we really still need waitutils.sleepquietly(1) here?
Candidate: should this be <UNK>
Reference: its not a bug: you can use new okbuttont()
Candidate: the syserr should be the
Reference: this gives a fairly large group with three radio buttons. would a drop-down combo look better?
Candidate: should we be the <UNK> here?
Reference: this is all removed by #111 right?
Candidate: do we need need to <UNK> the <UNK> <UNK>
Reference: use "test/testgrid2.json". it is the same as grid1.json and is reserved for tests.
Candidate: please remove the <UNK>
Reference: qry -> query
Candidate: typo: <UNK> -> <UNK>
Reference: use non negative check it will help you to avoid nesting, also it looks better :  java if (userid.isempty()) { return null; }
Candidate: we should need to use the exception here instead of returning an exception if it is an exception).
Reference: it would be more oo if tags list would contain widgetpageobject objects and inside loop you would call:  widget.isvisible()  and each widget should implement such method
Candidate: should we use the exception here?
Reference: one disadvantage of breaking up the state is the doubling of lines here and below.
Candidate: why do we need the <UNK> here?
Reference: why masquerade as instructor?
Candidate: why do we need to evict the <UNK> here?
Reference: if possible, please use an assertion explicite in tests, don't wrap a check into page-specific method
Candidate: why do we need the <UNK> here?
Reference: you can remove the public modifier since the class is package-private
Candidate: this should be (throwable <UNK> { throw <UNK> } (throwable { null) { <UNK> { <UNK> { <UNK> { <UNK> }?
Reference: also log the count of "all checkpoints" ?
Candidate: please use <UNK>
Reference: this sentence seems broken. maybe 'denied for' or 'denied while trying to move'
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: why abstractmap::hashcode is not enough?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return <UNK> }
Reference: change method return type from string to void.
Candidate: why do we need the <UNK> here?
Reference: this suffers from the same problem as global channel interceptors. let's say i subclass channelsecurityinterceptor, to send a message<?> whenever a security violation occurs. this early instantiation will cause the
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ?
Reference: let's use asserttrue() instead of assert.
Candidate: if this is is not the <UNK>
Reference: will this propagate correctly? i assume it is being called from the syncclient thread?
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: please revert all changes here, they are not needed / hide errors where code tries to re-use disposed parts.
Candidate: why do we need to check the <UNK> here?
Reference: never set empty string to i18n. gathering strings in source code will fail.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: test methods can more simply just throws exception.
Candidate: why do we need this?
Reference: what if the collection is not empty but a string in the collection is null or empty?
Candidate: why do we need the <UNK> here?
Reference: i think this will be simpler if you change this from foreach to maptolong, returning 0 or getreservedrevocablebytes, and then use longstream.sum()
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: this should be removed from accumuloclient
Candidate: this should be throwable in the log.
Reference: we should break these errors out to help the developer.
Candidate: i think we should be <UNK> to the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: this would make 1 ms and 1000000 ns not equal. do we want that?
Candidate: should we be the <UNK> here?
Reference: i would extract the check if argument has particular value into method (to avoid duplicate in next condition and improve readability)
Candidate: please rename <UNK> to <UNK> <UNK>
Reference: missing timeouts (i think)
Candidate: you should be an exception as appropriate.
Reference: u00ad and u200c should map to "" (empty string) not "\"" (double quote). the original json has "\\u00ad=>" ... but the quotes are around the mapping \\u00ad=> (map to nothing)
Candidate: why do we need need to be <UNK> here?
Reference: how does this work? types shouldn't match right? i was under the impression that remotetimelockserviceadapter took in a namespaceawaretimelockrpcclient?
Candidate: why do we need need to the <UNK> here?
Reference: right now this branch always runs, because string.contains("") is always true. i think you meant something like this: suggestion if (variable.getkey().contains("\"") || variable.getvalue().contains(" ")) {
Candidate: this should be an itemstack.
Reference: why not generified?
Candidate: why do we need the "this."?
Reference: remove this. and the one below
Candidate: this should be the fixture.
Reference: if the assertion fails, one would have to run the test and debug why. wdyt about replacing it with assert that expects the count of **any** shm mount to be
Candidate: the syserr should be be <UNK>
Reference: don't we need to close the socket after socket connect since you are only try to check the connectivity?
Candidate: why do we need this?
Reference: there is a different method available to start with one delay of 15 seconds, and another period for all future runs. i think that is what you want here.
Candidate: should we be the <UNK> here?
Reference: i think the main thing to figure out is in what cases we should switch back to the leader. we know about out of range errors already. here are a
Candidate: should this be <UNK>
Reference: nit: the kafkaproducer field is set, returned, then set again from the same value.
Candidate: why do we need to the <UNK> here?
Reference: what do you think about returning collections.emptylist() here instead? then we can also annotate the method as returning @nonnull (and also drop [this check](<link_0>
Candidate: why do we need the <UNK> here?
Reference: adding this to a field is good manner.
Candidate: should be be <UNK>
Reference: i believe there is no need for this check.
Candidate: why do we need to <UNK> <UNK> <UNK> 110 size?
Reference: i would like to shorten the configuration names. if you are ok, could you please rename skip_before_chars into skip_before and skip_after_chars to skip_after?
Candidate: this should be injected, via: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: also, is illegalargumentexception correct? there's nothing wrong with the argument of itself, docnotfound seems more logical here.
Candidate: i don't understand why, but it is be good idea. it would be easier to read if the understand what if someone wants to.
Reference: list<feedrange> feedranges = new arraylist<feedrange>(feedranges.size());
Candidate: this should be an empty() if <UNK> { return <UNK> } <UNK> } } } } } } } } }
Reference: you should use a set for scopesandmetricsnamestoput, similar to scopestoput.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: you could try the slf4j log native expression  log.warn(error [{}] in database query: [{}]", ex.getmessage, expr);  log4j automatically replaces {} expressions with the resp. parameter. additionally i prefer
Candidate: do we need to check if <UNK> != null) { throw new <UNK> }
Reference: duplicate code inside xmldateutil.long2gregorian()
Candidate: beware that jclouds builder is <UNK> builder pattern? inappropriate <UNK> filter; <UNK> { <UNK> filter; }
Reference: declare the webelements at the start of the class instead?
Candidate: why do we need the layout here?
Reference: if we are swallowing exception here we don't need to addsuppressed.
Candidate: why do we need the <UNK> here?
Reference: i would prefer to put the longer explanation on rp.sendmessage() and use a shorter message in reject() (see below).
Candidate: should we be <UNK> here?
Reference: remove "for ambrydatanode"
Candidate: why do we eating the exception here?
Reference: this looks convoluted ... instead do string uristring; if (uri != null) { operationresult.addoperationresult(uri, usermessage); uristring = uri.tostring(); } else uristring = "retrieving uri failed"; //$non-nls-1$
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: new boolean skips the constant pool -- placing unnecessary pressure on the garbage collector. please use boolean.valueof instead.
Candidate: why do we need to override the <UNK> <UNK>
Reference: code style. constructor must be private. make a static factory method named create(...) to create a new transformer
Candidate: please use <UNK>
Reference: what would happen in the wrapper's environment status is error?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK> the <UNK>
Reference: why is this public?
Candidate: should this be null?
Reference: startswith("scsi") ?
Candidate: <UNK> *= 2;
Reference: by the look of it, this won't work properly. getcontent().add(foo) doesn't add foo to the endnote object
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: could be shortened:  if (!contentlet.getboolproperty(checkin_in_progress))
Candidate: can we expecting the getconnection in the properties?
Reference: don't you mean isstatic ?
Candidate: why do we need to use the <UNK> here?
Reference: let's simplify once again ;-) return sessionstore.read(authendpoints.name) != null
Candidate: should this be <UNK>
Reference: i'd use immutableset.of(this.resultstream) here
Candidate: i don't think we need to check for the <UNK>
Reference: what sets the expected state to lifecycle.running?
Candidate: please remove the <UNK>
Reference: i think it should be: if (representation instanceof dsemanticdecorator) && ((dsemanticdecorator) representation).gettarget() == null) { dsemanticdiagram.getrootcontent() is an eoperation marked as @deprecated in dsemanticdiagram.java. it is used later in refresh
Candidate: please use <UNK> <UNK> <UNK>
Reference: what is the usecase for having int when we already have long and double. if so is there any need for float ?
Candidate: <UNK> *= 2;
Reference: redundant parentheses
Candidate: redundant parentheses
Reference: can be made package-local
Candidate: can be simplified to: java results.stream().anymatch(entry -> value.getk1().equals(entry.getkey()) && value.getk2().equals(entry.getvalue()))
Reference: complete is set after the loop, so i think this check should be before the loop. the if (currentiterator == null) body is also getting a little large, so i'd
Candidate: i don't think we need to check if the is is the
Reference: check that the main id has been returned, because the equals method does not compare it.
Candidate: please import?
Reference: this method should just call node.tokapp(), since this transformation is likely to be useful in other settings as well
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: minor: can you use the ternary operator here.
Candidate: this should be setemptyelement().
Reference: assertfalse(...);
Candidate: assertfalse(...);
Reference: not sure why do you need fixture and manual interaction with directories and page cache, why not using class rules instead?
Candidate: hmm. we don't need to use the for the getcredentials getcredentials
Reference: please replace this with: if ( str.startswith("\"") && str.endswith("\"")) { return str.substring(1, str.length() - 1 ); } else { return str; } performance will be much better than using indexof
Candidate: please use <UNK> <UNK>
Reference: can't you set the consistency level here?
Candidate: should we throw an exception?
Reference: in this transform, config.inputfield is transformed to the json fields, which is one-to-many, all the other fields are identity one-to-one transform, your lineage should reflect this
Candidate: can we use the <UNK> here?
Reference: ![minor](<link_1> 'severity: minor') define a constant instead of duplicating this literal "anonymizationtest" 6 times. [![rule](<link_0>](http://sonar-s4/coding_rules#rule_key=squid%3as1192)
Candidate: why do we need to use <UNK> here?
Reference: i suspect the method names are swapped between shouldnotaddredundantversions and shouldkeepotherversions, as the former currently inserts 2 different versions and the first tries to insert the same twice. it should
Candidate: @exper0 let's use <UNK>
Reference: you have to call data.clear() before using it. yeah, the bytebuffer api is full of nitpicks like that...
Candidate: maybe make things easier to make the <UNK>
Reference: cryptoalgo
Candidate: should we use the <UNK> here?
Reference: it'd be helpful for debugging purposes which objects didn't make it into fedora. also, for string formatting like this you need to put {0} into the message where you want
Candidate: what is this happen if <UNK> is the <UNK>
Reference: this should probably be duefineamount
Candidate: hmm. this should be an alias in the ctor.
Reference: double the attribute compartment same visual id interfaceattributecompartmenteditpart.visual_id
Candidate: can be replaced with <UNK> ?
Reference: hi @treblereel, build failing due to this line. you are comparing session with itself. looks like a bug to me. you can check it locally by executing mvn clean package
Candidate: should we log the exception?
Reference: also for all other places. it looks strange to me that: 1. we make query with primitive parameters in the arguments, but 2. aggregate the results in a well defined
Candidate: the syserr can be reused in <UNK>
Reference: personal opinion, it is confusing to mix format and offsetstring, i mean third parameter of dmnsimpletimezone feel free to ignore if you think it is fine
Candidate: please use the <UNK>
Reference: it's not clear to me what this last line is testing.
Candidate: why do we need to check the <UNK> here?
Reference: to my understanding the model cannot change anymore, therefore it does not need an adapter
Candidate: use readasstring(...) instead of .block()
Reference: typo: not -> does not
Candidate: why do we need the <UNK> here?
Reference: caching an inverse in order to replace division with multiplication is premature optimization imo. even with a million targets and a thousand samples, this saves at most a few seconds.
Candidate: nit: <UNK>
Reference: let's use a non-wildcard result with whenanyresult
Candidate: why do we need the <UNK> here?
Reference: string.isempty() is used in other places of oskari. no biggie - just a heads up.
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: this is an else, right?
Candidate: we don't need to throw an exception?
Reference: hive stores min,max as well -- we don't use this currently, but we may in the future. also, other tools may make use of this. consider // todo ...
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: those 4 lines are identical in all methods - refactor into common method?
Candidate: should we be <UNK> here?
Reference: use !input.startswith to align with the parser above?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: this line doesn't seem necessary, as commandcontext is never used in the methods where it's passed as a parameter.
Candidate: why do we need to check the <UNK> here?
Reference: remove
Candidate: why do we need to use <UNK> here?
Reference: inline
Candidate: can you use the <UNK> generation?
Reference: is there a requirement to be able to set property value to null/empty value?
Candidate: why do we need this?
Reference: ya, and this is the problem with this whole thing, there are multiple places where variables are set. url, properties, now env. your specific problem is in parseurl it returns
Candidate: i don't think we need to throw an exception
Reference: what about contains as @evoevodin has suggested?
Candidate: should we use the <UNK> here?
Reference: put the actual modid in there if you're going to do that not your name
Candidate: why do we need the <UNK> here?
Reference: i think it is better to extract all these listeners to separate classes. it would make code look more neat
Candidate: the syserr should be be the <UNK>
Reference: should these logging statements be set to debug level instead of info level? also, if you switch over to using lang3 tostringbuilder, i think that version of it does not
Candidate: why do we need the <UNK> here?
Reference: where you have found such a term as docker image fqn?
Candidate: i think
Reference: please extract this condition to method.
Candidate: please remove the <UNK>
Reference: minor nit, these can be collapsed to:  } catch (runtimeexception | outofmemoryerror e) { applog.e(t.editor, e); }
Candidate: if getstate() != null && <UNK> != 0) { return; }
Reference: add an empty new line here (make it consistent with other count handlers).
Candidate: why do we need to use <UNK> here?
Reference: multiple ';'
Candidate: please remove the method("post")
Reference: ditto rename refactor
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: you don't need to do that , just call filesystem.newinstance(defaulturi, conf), remembering to close the new fs afterwards
Candidate: please import?
Reference: i think the save() operation should not happen in the templates (the wizard will/should save the model at the end anyway)
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: definitely not! jmxfetch is known to have quite a bit of code that could use some cleanup, so this is definitely welcome.
Candidate: please use <UNK>
Reference: can these two if statements be collapsed with the above ones?
Candidate: remove the method("post")
Reference: here you have code repedated
Candidate: why do we need to check the <UNK> <UNK>
Reference: i don't get it. this class is internal, and not really designed for subclassing: the intended way to reuse it is to construct with a custom supplier, it's not immediately
Candidate: can we return an empty collection instead of returning null?
Reference: i don't think we need this since the creds should already be set.
Candidate: why do we need the <UNK> here?
Reference: could we do return system.getproperty(this.port, getport(getprotocol()); here?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: same, this time even with wrong placement. i assume this call is based on vanilla code?
Candidate: why do we need the <UNK> here?
Reference: see getalllifelines remarks
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: i like the addition to be able to check on both payload and metadata, but it kinda feels like we've added additional behaviour to the 'event-payload-matching' function which is not
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this should be replaced with this.color = color.getrgb()
Candidate: use <UNK> <UNK>
Reference: rename those to:  pagesindexusermemorycontext pagesindexrevocablememorycontext
Candidate: please use syserr
Reference: suggestion public partitionupsertmetadatamanager getorcreatepartitionmanager(int partitionid) { return _partitionmetadatamanagermap.computeifabsent(partitionid, partitionupsertmetadatamanager::new); }
Candidate: can we be the 83 here?
Reference: since all you need is the project name, you could use #getnamespace() from the route. it will return the same value. additionally it will not make a call to grab
Candidate: the syserr should be be the
Reference: you could flip the .equals(..) below around to avoid the null check, or if you think that's not safe then you're missing another null check.
Candidate: the syserr should be be <UNK>
Reference: shouldn't these be being caught, bar ioexception, and written out as error summaries?
Candidate: should we use the exception here?
Reference: can you pass "null" as the callback? it is not being used, anyway.
Candidate: can be replaced with <UNK> <UNK>
Reference: you should leave ternary expression and use if/else if statements.
Candidate: should we be the <UNK> here?
Reference: what is this permission for?
Candidate: @unyoungwax, do we need to check the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: this verbage is wrong, this should be re-worded to something like "last tracking date"
Candidate: what happens if the is is invalid?
Reference: use curly brackets for all if statements to keep the code consistent across the whole project
Candidate: this should be the <UNK>
Reference: should we first check that it is a byte[]?
Candidate: please use use <UNK> <UNK>
Reference: the passed in authentication is ignored. we should leverage that rather than the securitycontextholder
Candidate: why do we need to use <UNK> here?
Reference: we actually dont need to collect that, can be left as stream, minor
Candidate: why do we need need to the <UNK> here?
Reference: what is this check for?
Candidate: can we use the <UNK> here?
Reference: this doesn't seem right. what are you trying to do here?
Candidate: should we throw an exception instead of exception?
Reference: needs us-ascii charset, or some other simple ascii encoding conversion
Candidate: should we be org.apache.kafka.common.utils.utils.closequietly ?
Reference: did you mean to leave this in?
Candidate: why do we need the <UNK> here?
Reference: small typo
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: did you mean asyncreceivecommits.factory?
Candidate: this should be <UNK>
Reference: haven't we refreshed this in the basecontrollerdataprovider, can we just use that result here?
Candidate: i disagree with the situation.
Reference: as noted above, we need tests for at least a few more ghreason values (specifically multi-word values).
Candidate: why do we need the <UNK> here?
Reference: this should already be handled by stringutils.isblank(brokerid)
Candidate: this catch (throwable e) { thread.currentthread().interrupt(); throw exception } catch (throwable e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw ioexception e) { throw } catch (ioexception e) {
Reference: nit: could be set to final and refactor as:  final integer partition; if (partitioner != null) { final list<partitioninfo> partitions = producer.partitionsfor(topic); if (partitions.size() > 0) { partition =
Candidate: if we is software software <UNK> software error? should be be an exception if <UNK> { throw new <UNK> <UNK> <UNK> { <UNK> } <UNK> { <UNK> }
Reference: we should also write tests for removing a reviewer which is not on the review, and removing a reviewer which is not a valid user
Candidate: why do we need the <UNK> here?
Reference: the whole block can be replaced with: return collections.singletonlist(constants.remote_type);
Candidate: should be stage be stage (which stage stage stage stage stage stage stage stage stage stage stage stage stage stage stage stage is stage stage (which stage stage stage stage
Reference: you'll probably get away with this, but this is modifying a shared instance of the groupspec instance (the entityspec is mutated by these methods). better practice (probably) to do entityspec.create(groupspec).displayname(bucketname)
Candidate: this should be the <UNK> <UNK> <UNK> the ethernet headers, so far. it would be better to be an validationexception.
Reference: is it guaranteed that we will have an abstractfile in node?
Candidate: why do we need to use <UNK> here?
Reference: this could be an int too. and could be declared inside the try {}
Candidate: we should need to use the exception here instead of <UNK>
Reference: suggestion private static boolean shasrunwebbrowsercheck = false; private static boolean shaswebbrowser = true; public static boolean haswebbrowser(context context) { if (shasrunwebbrowsercheck) { return shaswebbrowser; }  since this is static
Candidate: can be simplified to: java return <UNK> == <UNK> && <UNK> != <UNK> && <UNK> && <UNK> { return <UNK> }
Reference: <string> is not necessary in new arraylist<string>(); are you sure you're coding in java 8? please fix up your environment.
Candidate: this should be the <UNK> probably?
Reference: small nit - can probably drop " for"
Candidate: why do we need snapshotid here?
Reference: i think there was a reason... but for the life of me, i cannot recall which one. i'll check with daniele monday.
Candidate: timeunit
Reference: this relies on version being 0. safer to do the right thing here now. q: what should happen if the version doesn't match the field in the class? should we
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: @antonini please name it user, and initialize it with opt.empty
Candidate: please import?
Reference: depending on what to expect, you may be interested in using jenkins.getactiveinstance() instead to remove the null check above
Candidate: if you is a <UNK> of <UNK>
Reference: i have verified that we want the ability to run ingest modules on non-data source virtual directories. please remove the isdatasource check.
Candidate: should we be the <UNK> here?
Reference: java stream<pattern> patternstream = this.headerpatterns.stream(); map<string, object> headerstoembed = message.getheaders() .entryset() .stream() .filter(e -> patternstream.anymatch(p -> p.matcher(e.getkey()).matches())) .collect(collectors.tomap(map.entry::getkey, map.entry::getvalue));  ? also i would say the this.headerpatterns.stream() should be as
Candidate: can we make this the specific?
Reference: i guess that if the pipe is broken, the return code should be 1.
Candidate: use fail(); here instead of <UNK>
Reference: i think this message should mention that a new view is being created.
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: this should not synchronize on repository due to a risk for dead-locks. bugzillaclientmanager should use a private lock for managing the update job.
Candidate: why do we need the <UNK> here?
Reference: mobilephone->mobile
Candidate: should we use the <UNK> here?
Reference: should autocapturesessions also be disabled if setsessionendpoint is called with empty / null?
Candidate: ths ths need to <UNK> costs the
Reference: wouldn't it be preferable to delegate this to an injected errormessagestrategy rather than invoking the overridable method below ?
Candidate: should we be the <UNK> here?
Reference: i would name it isfiltered to suggest that nothing failed
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: change log level to debug
Candidate: the columns should be the origin model?
Reference: performance: init the string away with the size of the device list
Candidate: please use <UNK>
Reference: doesn't offheapentryfactory.getsize() include the size of the lru pointers?
Candidate: why do we need to use <UNK> here?
Reference: call to 'super()' is implicit. no need to state it explicitly
Candidate: super() should be spared
Reference: please make just one lookup operation for every key: putifabsent().
Candidate: please use the syserr
Reference: maybe use stringutils.isempty(jobtracker) instead of jobtracker == null.
Candidate: if (state != null && <UNK> != null) { return state; }
Reference: wrap with collections.unmodifiablemap() ?
Candidate: why do we need to use <UNK> here?
Reference: :o: should we use stringutils.isblank() here?
Candidate: this should be the <UNK>
Reference: java if (params.length > xaconnection)  would be better
Candidate: this should be the <UNK>
Reference: i think that would also help to address the potential perf issue on calling system.nanotime() multiple times when invoking the ontimer() multiple times.
Candidate: why do we need to the the payload?
Reference: variable name should be 'resource'
Candidate: we should need to hide the <UNK> of the <UNK>
Reference: this code is duplicated (4x)
Candidate: why do we need the <UNK> properties?
Reference: why not parse the lang and moreinformationurl attributes defined in the spec, and put those into the programinformation as well?
Candidate: should this be the fixture.
Reference: what about the custom hive version label in the component? we have to let the user know that it doesn't work with hive 1.2.0.
Candidate: please use <UNK>
Reference: are you aware that this is a nop?
Candidate: what happens if the is is the the <UNK> is the
Reference: in the get method which calls getchild we use property.getname() instead of field.getname().getprefixedname() as the key in the children map. can you make this consistent so that we're sure there's
Candidate: why do we need the <UNK> here?
Reference: no need for intermediate blob variable
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: please clean up any ternary operators to avoid nesting.
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: these methods all need to be implemented and annotated with @override.
Candidate: should this be <UNK>
Reference: it has been wrong before your commit, but as you touched this line could you use {} instead of string concatenation?
Candidate: why do we need the <UNK> here?
Reference: i don't understand the condition on the length.
Candidate: why do we need to tweak the <UNK> here?
Reference: else is obsolete and getting rid of it reduces nesting.
Candidate: this is eating the exception in the eating the exception in the eating the exception if we want to print the exception if the is is raised.
Reference: we can probably drop that line altogether in fact...
Candidate: why do we need to use <UNK> here?
Reference: we should return from the loop once this var is greater than 2. one way to do also get rid of the set could be to use a switch here
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what happens if cluster is null?
Candidate: typo: <UNK>
Reference: @kingthorin was suggesting constant.messages.getstring("codedx.error.httpmessage", alert.getalertid()) which does not require extra formatting by the caller.
Candidate: i don't think we need to check if the is is the
Reference: marshal is different than parse, maybe just from ioexceptions here
Candidate: should we use the <UNK> here?
Reference: can the magic number be explained some more (why 3)? or even more preferably show how its calculated in a static constant?
Candidate: if <UNK> && <UNK> { <UNK> } <UNK> { <UNK> } else { <UNK> }
Reference: this can be private. is there a reason to make it protected?
Candidate: please use the alignment.
Reference: metricnamedtoset
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ?
Reference: in setrawtargets(), raw expressions are found instead of references. so, it seems that resolving level should be set as rels_only. if i misunderstand, please let me know. thanks.
Candidate: why do we need to mock <UNK> here?
Reference: [broken double-checked locking](<link_0> pattern.
Candidate: i don't think we need to check the <UNK> objects.isnull
Reference: we don't use curly brackets around one line statements
Candidate: can be replaced with <UNK> reference: <UNK> = <UNK> ?
Reference: just wondering -- is there any way to make this return an iterator, so that if we want to return just the first page of 100 results we can do
Candidate: this should be <UNK>
Reference: 200ms might be a bit tight, usually we go for 300ms for ui related feedback.
Candidate: should we use the <UNK> here?
Reference: using a stringbuilder looks like an overkill here as there is a single concat, we can just do .setpreference("_shards:" + shard).
Candidate: this should be <UNK>
Reference: is it possible to extend streamingstateencoding with an abstract getstreamingstate() method that delegates constructing the appropriate streamingstate to the corresponding streamingstateencoding subclass?
Candidate: i don't think we need to check if the is is the
Reference: maybe you will call it in the previous conditions blocks
Candidate: unnecessary <UNK>
Reference: this method will never return false, if it does, please show me how you did that, we have a bug somewhere else that need to be fixed urgently.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: this should not be hard coded
Candidate: why do we need to use <UNK> here?
Reference: i prefer naming variables by what they represent. in this case for example: returnedbodypart or result.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i guess workspace could also be optional<file> in configuration so you could do orelse here and maybe simplify the code in other places, too? didn't go through every place it's
Candidate: :disappointed:
Reference: in this case, the user's configured primaryaddress will never be taken into account. this might not meet expectations...
Candidate: why do we need to check the <UNK> <UNK>
Reference: is this revwalk used? the objectreader should be released by r.close(), so i don't think this inner try { } finally block is needed.
Candidate: this .get()
Reference: code formatting is off (also please always use {} even on single line blocks)
Candidate: you don't need to use the <UNK>
Reference: oring with button1 happens for macos also.
Candidate: should this be <UNK>
Reference: needs done=true
Candidate: should this be <UNK>
Reference: static ?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: double space
Candidate: i don't think we need to print the exception here to the caller.
Reference: { } ?
Candidate: should be be the <UNK>
Reference: can you think of a way to avoid passing ozonemanager to this class? we now have a low level class depending on a higher level class and potentially a circular
Candidate: <UNK>
Reference: i would write this as:  stream.of("a_0", "x") .map(identifier::new) .map(lambdaargumentdeclaration::new) .collect(toimmutablelist())
Candidate: <UNK> evidence, you can use <UNK> <UNK> <UNK>
Reference: the partial load callback should not be changing the progress loader visibility state, so this line should be removed.
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: could we trim the given expression? currently i see the following in the generated code (note the double white space at the beginning):  target.settimeandformat( new org.mapstruct.ap.test.source.expressions.java.timeandformat( s.gettime(), s.getformat() )
Candidate: use map<> <UNK> <UNK>
Reference: this name seems wrong since it's not the last column. how about dropcolumn or just column
Candidate: please revert this changes in the tests.
Reference: now that the id is no longer required, we don't need it to be non-null
Candidate: should this be <UNK>
Reference: suggestion .filter(attribute::hasdefaultvalue)
Candidate: can we use the <UNK> here?
Reference: change to java transactionfactory.createboletotransaction(); transactionfactory.createdebitofflinetransaction(); transactionfactory.createdebitonlinetransaction();
Candidate: this should be the fixture.
Reference: negative logic
Candidate: i don't think we need to check if the is is null.
Reference: being able to do result.mstatus.mcode might indicate that somewhere in the way setting modifiers for glustervolumestatusreturnforxmlrpc.mstatus wasn't done properly.
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: @xiaolong-sn when we have a map we can add a method public string getstreamconsumerarn(string stream)
Candidate: can we use <UNK> <UNK> <UNK>
Reference: since you do really like the ternary operator, you could use it here, too. besides, uri.empty instead of null might be more null-safe.
Candidate: why do we need to touch the <UNK> <UNK>
Reference: metadataonly flag is always false in case of bootstrap. so, shall avoid checking it here.
Candidate: i don't think we need to check if the is is the
Reference: assertthat(map).isempty()
Candidate: you can use the fixture.
Reference: move tostring() into clickorderstablecolumn() method same goes for orderstable.elem.tostring() calls
Candidate: rename to <UNK>
Reference: is this an egit convention? i'd have used baseref == null ? null : baseref.getname() to avoid the negation.
Candidate: this should be the <UNK> <UNK>
Reference: nit: would it be clearer just to define the ondismisslistener inline here?
Candidate: we should need to use <UNK> <UNK> <UNK>
Reference: you should log this. how else could the user figure out what the problem is? though sometimes benign, lockfailedexception usually means there is a stale lock.
Candidate: i don't need braces around single line blocks around single line blocks
Reference: must change the maximum to 3. will fix on merge.
Candidate: <UNK> *= 2;
Reference: this is not safe, you need to actually check if they are started, wait if not and check again. it applies to all the cases.
Candidate: why do we need to here?
Reference: write a test about it!
Candidate: should this be <UNK>
Reference: when would you enter this state?
Candidate: if we (, of the <UNK>
Reference: httpservletresponse.sc_not_found
Candidate: why do we need the fully-qualified properties? for this pr.
Reference: what is the meaning of null ?
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: it looks like the same type of conversion of jdlms dataobject to a value object appears in more classes. this might be a good candidate to move to a helper
Candidate: why do we need the <UNK> here?
Reference: the top and bottom parameters need to be switched. suggestion projectionmatrix = new matrix4f().ortho(left,right,bottom,top,znear,zfar).transpose();
Candidate: i don't understand this matters, if we matters, but you don't need to check if <UNK> == null) { <UNK> = false; }
Reference: 'fields' should be applied only for top level json?
Candidate: why do we need the <UNK> here?
Reference: your call if you want to convert this to a stream:  chunks.stream().map (chunk -> ...)
Candidate: please use <UNK>
Reference: shouldn't we use try-with-resources instead of the suppress warnings annotation?
Candidate: i don't think we need to do we need need to the the <UNK> the <UNK> <UNK>
Reference: @rcpeters should be releasing the lock there?
Candidate: @exper0 we don't need to throw objects.tostringhelper() here.
Reference: maybe use new okhttpclient.builder()..., it's a bit odd that we are creating 2 clients?
Candidate: this should be the <UNK>
Reference: is the cost really multiplied by the length of the data type? what if you have a really long string, is it really that expensive?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: uriutils.addparameterstouriquery?
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: throttletier
Candidate: why do we need to here?
Reference: nit: you can use assertthrows. there are a few of these in this pr.
Candidate: can we use <UNK> here?
Reference: looking at [printnonzeroresultscenarios](<link_0> i think ambiguousscenarios should be treated the same as failedscenarios and always return a non zero exit status.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: change method name with prefix.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if constraint.issubstitution then i understand this method should return booltoken.true. but what if constraint.isfalse is true, shouldn't we return booltoken.false instead of null?
Candidate: we don't need to throw an exception if (state { throw new <UNK> <UNK> <UNK> { <UNK> }
Reference: might be nice to make this private and call it from inside of the homeactivityuicontroller constructor.
Candidate: why do we need to use the <UNK> here?
Reference: we also need to make this public. otherwise the client of the iterator<note> cannot see the blob that is attached to the note.
Candidate: long constructor. otherwise long long long long long long long long long long long long long long long long long long long long long long long long long long long
Reference: please don't touch old formats, whatever they do let them do that
Candidate: do we need to check the <UNK>
Reference: nit: put context in new line, and also for line 72 and 76
Candidate: why do we need to use <UNK> here?
Reference: iscdtproject variable is redundant since ifl != null condition can be used instead.
Candidate: rename the <UNK>
Reference: the resource message does not seem to exist, it's also concatenating with the key instead of the resource message.
Candidate: the uri.create should be validating the stacktrace, the the stacktrace, then creates an object object object object object in the
Reference: this part feels wrong. you should be using iclasspathdescriptor (which is designed to encapsulate iclasspathentry). my guess is classpathdescriptor should probably be changed to receive a scope element, that'll drive
Candidate: can be replaced by: <UNK> <UNK> { <UNK> }
Reference: useless check because it ftraces is always null when setup is called. it is called only once per execution regardless if only one test is run or the whole file.
Candidate: this should be the <UNK>
Reference: uswrpath -> uwrpath maybe? not sure what the s stands for.
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: make this 3
Candidate: please use <UNK>
Reference: the null check is too late here. should go further up.
Candidate: why do we need to check the <UNK> here?
Reference: can you get the user from context instead?
Candidate: why do we need to the the payload?
Reference: yea, we were trying to avoid changing those newmerger method signatures, which is how we grew setobjectinserter(). i wanted to drop the final part because i'm considering swapping in a
Candidate: this should be setemptyelement().
Reference: hmm totally forgot, this refactoring breaks backwards compatibility. maybe keep using the old classes for cifs for this release and return them from the cifsconnectionbuilder.
Candidate: you don't need to use the <UNK>
Reference: getlabelcontrol
Candidate: if (args.length != null && <UNK> != 0) && newvalue != 0) { <UNK> = <UNK> }
Reference: i haven't read the diff carefully, but: packettransformers should not keep the rawpacket/dtmfrawpacket instances, because these instances and their buffers are re-used. i don't expect many dtmf packets, so a
Candidate: this should be setemptyelement().
Reference: should this line be outside of the while loop?
Candidate: do we need need to throw an exception if we don't need to throw an exception if we don't want to throw an exception
Reference: can be simplified to java return itemmaterial == null ? 0 : itemmaterial.getmaxstacksize();
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: shall we mark it as final? also i don't quite understand why it is named as dump? if it is just a copy, will a name called tagrouterrulecopy be better?
Candidate: why do we need need to evict the <UNK> here?
Reference: consider using assertnotsame instead.
Candidate: please use <UNK> <UNK>
Reference: suggestion sb.append(sortorder); sb.append("}");
Candidate: should we use <UNK> objects.tostringhelper() name)?
Reference: couldn't the ekm from the persister be used?
Candidate: why do we need to the <UNK> here?
Reference: can you please delete this logging? we don't need this anymore since we verified our theory about the issue.
Candidate: why do we need to use the <UNK> here?
Reference: i saw hashedinputs being initialized during bolt construction on client side as well. if its not needed, we can just remove it.
Candidate: should be be <UNK>
Reference: super(); is unnecessary as it's automatically called
Candidate: this call super() to super()
Reference: the default provider is ad and id rhds attribute is null its becomes ipa? can you elaborate?
Candidate: can we use the syserr
Reference: is it even possible for si to be null at this point?
Candidate: <UNK>
Reference: there's a parseutils.missingoneof method for cases where at least one of a set of choices must be present. the missingrequiredelement message implies all of them must be present.
Candidate: <UNK> *= 2;
Reference: replace the exception by exception, so your test is self contained.
Candidate: why do we need to check the <UNK> <UNK>
Reference: this might be due to wip, but we should not be throwing stack traces.
Candidate: i don't think we need to throw an exception if the exception occurs, so we will throw an exception
Reference: if (oldindex >= newindex) throw new runtimeexception("useful message")
Candidate: why do we need to the the payload?
Reference: assertj on the collection, instead of the plain asserttrue?
Candidate: why do we need the <UNK> here?
Reference: does your logger take both %s and {}? the latter is more typical in my experience.
Candidate: this getcredentials should be <UNK>
Reference: we don't expect the sort order to change, so i'm thinking this should be done at the filtersettings creation time, it would avoid having to do these manipulations to the
Candidate: why do we need to use the here?
Reference: this code can be simplified to rely on autounboxing.
Candidate: this should be the <UNK>
Reference: getobjectid and getobjectvalue can be null ? if yes please adjust this conditions
Candidate: can be simplified to <UNK> <UNK> ?
Reference: the name & type check can be done here, here is example: java tablestructureadapter of(objlist<charsequence> names, objlist<typeadapter> types) throws textexception { this.names = names; this.types = types; if (timestampindexcol ==
Candidate: if (args.length != null ?
Reference: can we change all the variable names in tests from globalconfigfile to sessionconfigfile? for consistency.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: get without an assignment seems weird should this method be rename to appendimagelist or writeimagelist ?
Candidate: why do we need this?
Reference: better to use the official way here true instead than "true"
Candidate: better to true official way than true official way than true official way than true official way than true official way than true official way than true official official official
Reference: you can just call injector injector = guice.createinjector(); without any module for the same value.
Candidate: you should use the assert that android studio android studio android studio android android studio android studio android studio android studio android studio android studio android studio android studio android
Reference: when using a model tag, you can initialize your eventhandler in the org.eclipse.e4.ui.workbench.renderers.swt.stackrenderer.init() method.
Candidate: i don't think we need to do we need need to check whether the <UNK> is the software <UNK> but we don't need to do we need need to the
Reference: this should probably throw close the store and throw a runtimeexception, because someone is trying to kill us
Candidate: i don't think we need to throw an exception
Reference: we might end up potentially adding null values to a list. this should never happen. please check and only add non null values.
Candidate: use rectangle <UNK>
Reference: i'm just wondering what will happen if none of the renderers will have uuid matching the user-selected default? e.g. what happens when user sets -dorg.dashbuilder.renderer.default=nonexistentuuid? maybe that scenario is ok,
Candidate: suggestion <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> list <UNK> <UNK> list <UNK> <UNK> list <UNK> list <UNK> <UNK> list <UNK> <UNK> list <UNK> <UNK> <UNK> list
Reference: this addostypes() method called in all versions of the /capabilities resource, you should be creating differentiation between older versions and version_3_3 where new oss became supported
Candidate: please remove the <UNK>
Reference: have you considered something like : todelete.addall(arrays.aslist(fmemberstomove)); todelete.retainall(arrays.aslist(all)); retainall() keeps all elements in a collection (todelete) that are present in the list passed in as the argument (all).
Candidate: can we use <UNK> <UNK> <UNK>
Reference: hmmm where do you set the port to be opened?
Candidate: this should be the <UNK>
Reference: where did the 20% range come from? it might be more clear if it is a constant percentage and initialized in tnatsservicetransport() with the other parameters around heartbeats.
Candidate: this should be the <UNK>
Reference: > if we go for the approach where we use orm + our own classloaderservice implementation, i think this method needs to change. it is not enough to just check
Candidate: why do we need to use the <UNK> here?
Reference: super nitpicky, but "inform" feels like an awkward thing for this to be based on v. maybe "maininstance" (ie: anything rooted at '/'), just to keep the vocabulary within what
Candidate: this should be <UNK>
Reference: should this really be exposed as public setter?
Candidate: should this be <UNK>
Reference: junit way to skip some test methods from the unit tests (compared to ignore all tests. in which case it assume is used in @before method, ins which case all
Candidate: should this be the <UNK>
Reference: should be defined here
Candidate: this should be the <UNK>
Reference: reportparseexceptions is true by default?
Candidate: can you remind me that the getconnection is an exception on the <UNK>
Reference: why not use the same trick with timeunit? timeunit.hours.tomillis(1)
Candidate: assert.notnull()
Reference: style-nit: no space after method name before parameter list.
Candidate: why do we need to here?
Reference: this actually isn't correct. the "item" in this case that is being passed to the jsr-352 skiplistener is actually all the items in the current chunk. unlike spring batch, the
Candidate: should we throw an exception here?
Reference: it is always number or null?
Candidate: can we use the <UNK> here?
Reference: baseeventinfo.setloglevel(string) does the same thing. so, we should used you new method instead and remove setloglevel() from baseeventinfo (ibaseeventinfo). if we do so we need to make sure that the
Candidate: can we be null? if <UNK> == null) { throw new <UNK> }
Reference: it would be nice if we could skip the code duplication in passpersistablebundleextrastobundle(). since persistablebundle implements parcelable, and we can create a bundle from a parcelable, maybe with a bit
Candidate: the syserr should be be the
Reference: the message must be adapted if the command returned is a "remove blank space command".
Candidate: this should be the <UNK>
Reference: we should check for null and existence
Candidate: this should be <UNK>
Reference: energy / energycost will be > 1 when it has plenty of charge, no?
Candidate: you can use <UNK> <UNK>
Reference: what if configuration is empty?
Candidate: should this be <UNK>
Reference: that's a sad error handling. is there a reason why the test method cannot be marked "throws exception"?
Candidate: the syserr should be be the
Reference: this does not need to be public, let's keep private
Candidate: why do we need need to the <UNK> here?
Reference: don't think we need to log this. this is not useful for users.
Candidate: should we use the <UNK> here?
Reference: please change jsfiles to arraylist. there is now need for type vector in this single threaded situation.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: the trimmed result is ignored.
Candidate: use map<> <UNK>
Reference: you should use java.util.logging for this.
Candidate: shall we use the payload?
Reference: maybe add the tag here as well.
Candidate: should this be <UNK> objects.tostringhelper() name)?
Reference: could probably just use hasexplicitlyconfiguredaddress() instead of getaddress() to skip the possibly expensive lookup while retaining the feature to set the email address automatically.
Candidate: if we is software software software software software software exception software software software software software software software software software software software software software software software software software software software software
Reference: isempty
Candidate: please use <UNK>
Reference: perform the split here if needed, set to empty to avoid null conditionals if none.
Candidate: should this be the <UNK> annotation?
Reference: duplicate check (see below)?
Candidate: should we be the <UNK> here?
Reference: could be reformulated as a filter operation on a stream.
Candidate: why do we need the <UNK> here?
Reference: why is 1 added to schedulerthreads here?
Candidate: the syserr should be be <UNK>
Reference: extract the string or the expression by.cssselector(...) as a variable for better readability.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: 1. it is wrong place to customize "isparkingpluginenable" should not be here in the code 2. there is no need fofr this ifs , it should be always visible code
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: we have to validate the suffix here, because the user can pass a string which is not valid in java identifiers.
Candidate: please remove the <UNK>
Reference: some typedoutput instances can only be read once so consuming the entire stream will render them unable to write a second time for the actual body.
Candidate: why do we need the exception here?
Reference: here the name superclass is a bit misleading
Candidate: why do we need to use the <UNK> <UNK>
Reference: move after doexport. probably should be log.debug, although it doesn't provide too much useful information, perhaps we can remove it
Candidate: this @since <UNK>
Reference: this should be logged as well. use the monoerror() helper method in fluxutil instead.
Candidate: can we be an error message for an illegalargumentexception instead of an error.
Reference: maybe use !frcs.isempty() here? or is it necessary to check for the size here? we just have a for loop inside anyway.
Candidate: should we be the to the the properties? if it is the software <UNK>
Reference: we should delete if. since if this message is logged, it means pacemaker is not being used.
Candidate: why do we need to use the <UNK> here?
Reference: i noticed that finishcommit is not passed cd2. of course it still works fine because, cd and cd2 are the same. this made me think it may simplify the code
Candidate: why do we need to check for metadatastore ? <UNK> : <UNK> : <UNK> : <UNK> : 2; thanks!
Reference: could we fix position? you call validatecursorfornulls, but after that you call kafkacursor.fromnakadicursor, which basically does the same checks. from other side it is not clear why you call kafkacursor.fromnakadicursor
Candidate: unused variable declaration
Reference: you should return void instead of void, so you won't have to return null
Candidate: this should be <UNK>
Reference: entry (or something else since entry is already a field)
Candidate: entry entry entry to entry entry entry entry entry entry entry entry entry entry entry entry
Reference: shouldn't you fail if the read of even a single account fails?
Candidate: why do we need a <UNK>
Reference: hey @tonyr59h , got to say, this all-sites removal makes me a bit uncomfortable. i assume the reason you added it is to "clean up" any remotely-deleted sites, right? is
Candidate: if getstate() != null) { return; }
Reference: nit: throw on next line.
Candidate: should we throw an exception here?
Reference: that whole ordering is comparator.comparing(row -> row.getraw(column), comparators.naturalnullsfirst())
Candidate: why do we need to check for the <UNK>
Reference: why it's three components and not just one string?
Candidate: this should be the logger probably?
Reference: why not just set stopglusterservice to true in createmaintenanceparams()? isn't stopping gluster services already managed inside maintenancenumberofvdss command?
Candidate: should we be the <UNK> here?
Reference: suggestion if(entry.getvalue() == null) { target.put(entry.getkey(),null); } else if (issimpletype(entry.getvalue())) {  rather than using continue, go on with an else if
Candidate: can be simplified to: if <UNK> != null) { <UNK> = <UNK> }
Reference: stringutils.ifnotblank()
Candidate: what happens if the exception occurs, we don't want to do we want to do we want to do we want to log the exception
Reference: extract the value creation expression from the put() call to reduce nesting.
Candidate: i don't understand why, but i am not sure why, but i am not sure why, but i am not sure why, but i am not sure why, but i
Reference: remove after script_end
Candidate: why do we need the <UNK> here?
Reference: rewrite as: int c = methodname.compareto(other.methodname); if (c != 0) return c; return classname.compareto(other.classname);
Candidate: this should be the <UNK>
Reference: our convention is to create a new instance if members is null that way the method never returns null.
Candidate: please use <UNK> <UNK>
Reference: wouldn't it be easier to use scan consistency on findmaxattendees so that request plus is implied?
Candidate: we should be able to acquire the exception?
Reference: not sure if i get the logic here. why is this block (from // add responses that the user submitted himself to this line) moved to inside case student?
Candidate: can you be worthwhile to the <UNK> as well?
Reference: you can remove the this
Candidate: should be be the <UNK>
Reference: the timing dependency is still problematic. does the api let you run the dag and then terminate it once the results are computed? this can be taken up outside of
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: [minor] this won't ever appear in the response from ledger. it doesn't generate this link. it can come only from connector. i don't see the value of having this line
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: method can be protected now (private if not isolated in tests).
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: change this to use mdkconstants.sync_sysml_id_suffix.
Candidate: this should be the <UNK>
Reference: why do we need to have the initialized variable?
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: this logic is too hard to understand. i would refer a simple something like: if(offset1 == null || offset2 == null) { return null; } else { return integer.valueof(offset1).compare(interger.valueof(offset2)); }
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: as cosemdatetime appears to be immutable, there is no need to return a new object to protect internal state.
Candidate: immutablelist.of()
Reference: nit: checkargument? i am undecided myself, but shall we use illegalargumentexception or illegalstateexception in those cases?
Candidate: should we use the string concatenation instead of stringbuilder?
Reference: i am a bit confused that executecommandandcommitifneeded(ctx, command) does not set the lock owner and executecommandandcommitifneeded(contextbuilder, command) does - please move the checklockowner to the former.
Candidate: please use <UNK> <UNK>
Reference: slight performance enhancement... suggestion revisionactions = actions.toarray(new action[actions.size()]);
Candidate: this should be an exception if <UNK> { throw <UNK> }
Reference: shouldn't we be throwing filenotfoundexception here? or otherwise at least some subclass of runtimeexception, probably securityexception.
Candidate: why do we need to check the <UNK> here?
Reference: again, i am far from being an expert in networking, but if i made a mistake in writing the port number, enough to make it unparseable, i think terasology should
Candidate: use <UNK> <UNK>
Reference: aspect
Candidate: should we use the id here?
Reference: this will catch exceptions that extend runtimeexception and rethrow them as a different exception. seems very undesirable. looks like this is because of autocloseable. i think we need to do
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: in case changing the code above then just change here to: updategridsize(calculategridheight(values.size()));
Candidate: nextvalueindex should be be a syserr
Reference: i would move exception handling into isreloadable() and returning false when exception raised.
Candidate: please use <UNK> <UNK> <UNK>
Reference: maybe we should define the int outside of the for? not sure if this gets optimized, but i introduced a "bug" with string once, so i became a bit cautious
Candidate: i don't understand why, but i wanted to master, why do we need need to check the <UNK> <UNK> <UNK>
Reference: what's the purpose of this providedvscount? how come you can close even when not removing?
Candidate: please remove the method("post")
Reference: consider extracting helper method tryconsumefailedposition:  @override public boolean testnull() { if (tryconsumefailedposition()) { return false; } ... } private boolean tryconsumefailedposition() { if (numnextpositionstofail > 0) { filterindex++; numnextpositionstofail--;
Candidate: why do we need the <UNK> here?
Reference: as we discussed make this method return void and let the producepage() handle output from getoutput() method.
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the <UNK>
Reference: either you put all the aspects in the list (in which case, you may want to change the name of the field), or just the duplicates.
Candidate: this should be <UNK>
Reference: this won't work. it's combining two directories which would more than likely result in an invalid directory.
Candidate: why do we need the exception here?
Reference: probably worth including a negative test for solid or 454.
Candidate: why do we need need to the <UNK> here?
Reference: nit: stream on previous line
Candidate: nit: you prefer to prefer to prefer to use <UNK> <UNK>
Reference: this could also make use of createcloudresource method
Candidate: why do we need to the <UNK> here?
Reference: minor: i'd prefer starting this before passing to the streammetadatacache, just in case it tries to do something with the passed in systemadmins.
Candidate: why do we need the fully-qualified scheduler too?
Reference: nit: you don't need new object[] for the current version of slf4j
Candidate: if (throwable { <UNK> } <UNK> { throw e; } (throwable { ... } else { <UNK> }?
Reference: the propagate flag value is the same for all messages, to seen_messages and propagated_messages will always be the same. amirite? i'd then remove than metric.
Candidate: if (args.length { return; } } } } } }
Reference: whitespace suggestion public haplotypeprobabilitiesfromcontaminatorsequence(haplotypeprobabilitiesfromcontaminatorsequence other) {
Candidate: this should be <UNK>
Reference: if you just throw exception here - then this block doesn't really make sense, because you just throw what you caught. what can add value here is to create and
Candidate: i don't understand why, but it matters, what is it is the to the <UNK> the <UNK> is the
Reference: maybe we can add the limit as the size of the array list?
Candidate: why do we need to permission?
Reference: you can do view.settag(mainviewholder == null ? new viewholder(view) : mainviewholder);
Candidate: why do we need the <UNK> here?
Reference: inline compactedblock
Candidate: the syserr should be be the
Reference: why would a get something method have a side effect of setting something?
Candidate: should we throw an exception?
Reference: -1 sending order is important. you need to use a single thread to send the request or you risk it to be reordered.
Candidate: do we need to narrowing throwable here?
Reference: maybe add a function to the logger adding these "-" signs automatically in the right amount so every log line has the same length? <feature
Candidate: please remove the <UNK>
Reference: good thorough testing! could also test 3456 (i.e. where have just exceeded the kb > 2 threshold)?
Candidate: please remove the method("post")
Reference: this could go to beforeclass, right?
Candidate: i don't think we need to synchronize on the so we don't need to synchronize on the so we don't need to synchronize on the
Reference: suggestion + " or 'getdataview()' according to the used data type.",
Candidate: typo: <UNK> -> getcredentials
Reference: just return null here.
Candidate: unused
Reference: the arguments here should be flipped expected is now, actual is eventtime. the assertnotnull above is also redundant, if now.equals(eventtime) then eventtime cannot be null.
Candidate: why do we need the <UNK> here?
Reference: @garydgregory please use args.notnull for consistency with the rest of the code base.
Candidate: should this be <UNK>
Reference: can we remove: declare-response, useless-assign and just return the object from the method-call?
Candidate: can we use stringbuilder?
Reference: lets just return after this and skip the next check
Candidate: do we need a bit confusing. so we don't need to one names
Reference: confusing indentation, did you mean to delete the other bracket?
Candidate: if oldvalue is empty?
Reference: rename to method
Candidate: can be replaced with <UNK> ?
Reference: separate file for each test. rename it to avoid misunderstanding. file name should contain short information about its purpose.
Candidate: why do we need to the <UNK> here?
Reference: if you use thetable.getcolumn(name), this will throw ambiguouscolumnexception for you, so you can get rid of this else if
Candidate: can we be the division for the <UNK> capacity? if the division variant, then the division variant, then the division variant, then the division variant, then the division variant, then
Reference: should use textinputformat
Candidate: this should be the <UNK>
Reference: need to put this back - cannot change the api
Candidate: the syserr should be be the
Reference: make this separately lined for legibility.
Candidate: integer.size space after !=.
Reference: why not make the function static?
Candidate: the syserr should be injected, so we don't need to use the <UNK>
Reference: use constant?
Candidate: this should be setemptyelement().
Reference: this should just return realmobjectschema?
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need to restrict the
Reference: what about calling super? is it intentional we don't call it? if so - why?
Candidate: should this be the <UNK>
Reference: not needed empty line.
Candidate: why do we need to use <UNK> here?
Reference: it is not only unknown, it can be failed and failed restart also. you should simply print the commandstatus
Candidate: do we need need to be the here?
Reference: why not asserts?
Candidate: should this be the <UNK>
Reference: i think it's better to check class here instead of byte. byte value is error-prone. or at least can be replaced with an enum (but imo class check is better).
Candidate: should we be the <UNK> here?
Reference: logger shouldn't have **khalid** in name.
Candidate: why do we need the <UNK> here?
Reference: please add @nullable (same below)
Candidate: i don't think we need to check for the <UNK>
Reference: if we know the result, break out of the loop.
Candidate: why do we need to check for the <UNK> ?
Reference: seems like extraneous logging in this module.
Candidate: if <UNK> != null && <UNK> != null) { <UNK> }
Reference: rather than hardcode the string, can use the classname
Candidate: please remove the <UNK>
Reference: it looks like a npe-check on display is missing here (npe-safety seemed to be the point of the initial null-check of control)
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: put this condition together with state.getblock() == null; same for maxcombine
Candidate: this should be the <UNK>
Reference: can you make the old constructor call the new one (with a default value for the additional parameter)?
Candidate: you could use the normalization as <UNK> as above.
Reference: maybe assert that the entryid is the special entryid? just a thought.
Candidate: i mentioned mentioned mentioned mentioned above, you don't want to use <UNK> <UNK> <UNK>
Reference: should long size ... be moved to right above job job = ...?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: [optional] can you port this method to builder-like style?
Candidate: please use <UNK> <UNK>
Reference: this should not be necessary.
Candidate: should we throw an exception instead of exception?
Reference: mediatypehelper.istextlike(...) uses .equalsignorecase and .tolowercase() it's not needed here ? this was noticed by @kanovotn
Candidate: this should be the <UNK>
Reference: this jobscheduler version of feed update does not obey mobile update user preference. in contrast, the alarmmanager version in feedupdatereceiver does the check: java if (networkutils.networkavailable() && networkutils.isdownloadallowed()) { 
Candidate: why do we need this?
Reference: arguments should be 1 element array. type should be objectinspector for string rather than abstract.
Candidate: i don't think we need to throw an exception if invoked?
Reference: here you have a positive test
Candidate: can be replaced with <UNK>
Reference: != will work only for interned strings . use !str1.equals(str2)
Candidate: if <UNK> != null) { getparameters().getstoragedomainid() groupname = <UNK> |= <UNK> }
Reference: so here it's probably wrong then as well since you need to be able to save it with type 'null', to keep autodetect
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: table {0} does not contain a primary key. a vast amount of memory may be required.
Candidate: why do we need the <UNK> here?
Reference: fmsgroups suffer the same issue as fmsusers. you'll need to calculate the group mapping somewhere around line 71 and add it into the umsusersstate somewhere around line 78
Candidate: why do we need to use the <UNK> here?
Reference: nit: inline block variable
Candidate: code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath code: xpath
Reference: personally i find index < 0 simpler to parse.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: just throw unsupportedexception here, this method never called anyway since you've implemented readonly interface
Candidate: this should be the <UNK>
Reference: suggest adding the current state to the exception msg as well
Candidate: this should be <UNK>
Reference: catch this in populatereviews and just set the value to zero. we shouldn't fail to build the whole section just because one review has a bad value.
Candidate: this should be the <UNK>
Reference: i think we don't want to remove this... otherwise character content (that's not an entity reference) won't appear properly.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you override this in two test methods so this variable doesn't really need this scope. make it per test
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: @wwjbatista i think for this pr (sticky_polling), bypassing the logic from insertentryfromtransaction going straight to the db is fine, although we should at least update the stats (totalinsert.inc()). @sbrossie but
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: this message will be appeared even when containerclient == null also could you please add i18n for log messages?
Candidate: i don't think we need to do we need to check the the getparameters().getstoragedomainid()
Reference: i don't understand yet, why the facet check helps or is necessary.
Candidate: stringutils.isnotblank()
Reference: check for postartifact vs postartifacts
Candidate: should we be <UNK> here?
Reference: i think we actually want this to just be... suggestion return appurl;  the "/medic/_design/medic/_rewrite/" bit is the old format that we no longer need.
Candidate: why do we need to use the <UNK> here?
Reference: and if we are making it private then just return parameterdefinitions == null ? new parametersdefinitionproperty() : this; and the field can stay final ftw
Candidate: i don't think we need to check for the situation.
Reference: shouldn't unexpected be a single word?
Candidate: do you || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: is it possible to take this string from correctionmessages.properties without much change?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: delete this line
Candidate: should this be the fixture.
Reference: i believe this was a suggestion of @dwightguth: if computehash() returns 0, set the hashcode to 1.
Candidate: can be replaced by objects.hashcode names? objects.hashcode names? objects.hashcode names?
Reference: can't you get the fortune value from the loot context? edit: isn't this whole method unnecessary now that you've written the loot table json?
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: comparing with [testexecutionresult](<link_0> shouldn't this getter return an optional?
Candidate: should this be <UNK>
Reference: jenkins.getactiveinstance() instead (nullability check)
Candidate: typo: <UNK>
Reference: why are we wrapping this now? we are declaring we throw e, but we're actually throwing a runtimeexception
Candidate: the syserr should be be <UNK>
Reference: should be illegalstateexception
Candidate: do we need need to do we need need to here?
Reference: super nitpick: but could this be expirytimestring?
Candidate: can you use the feedid
Reference: it shouldn't be necessary to create the fragment when the activity is recreated. instead you can find the existing fragment, and if it's not there create it. ex:  mpostlist
Candidate: yeah, yeah, yeah, yeah, yeah, why do we need the site of site of site of site of site of site (which is used in this method?
Reference: could we extract the test portion as a common function?
Candidate: please use stepverifier <UNK>
Reference: rigion should be "region"
Candidate: you can use the <UNK> here as well.
Reference: not sure how likely it is, but this might the ide to freeze if the saving takes a very long time. i upload a new revision of your change using
Candidate: this should be setemptyelement().
Reference: immutablemap.builder throws an exception when tries to register another assigner with an already registered name. it will fail to initialize the class, which leads to noclassdeffounderror and snow owl startup
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: looks like we should better return an empty string here, then callers don't need to check for nullness
Candidate: do we need to use <UNK> <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: collections.emptyset()
Candidate: if <UNK> == null) || <UNK> { <UNK> }
Reference: this function actually returning a builder and not an uri. if you don't need the builder, return the uri directly or rename this function
Candidate: can be simplified to: java <UNK> <UNK> = <UNK> <UNK> <UNK> { return <UNK> }
Reference: it only rejects new tasks, so has no practical effect in this case. i would try shutdownnow, even with a bad support of interrupts by the thread
Candidate: the syserr should be <UNK>
Reference: this will give strange results for names with non-latin characters, for example the japanese name: ?? ?? will result in: ?? which is a bit weird. this might be considered
Candidate: should we use the <UNK> here?
Reference: what if the property is not set in system?
Candidate: why do we need this?
Reference: i recommend to replace it with the logger :)
Candidate: thank appreciate these issues: i appreciate these issues: often appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate appreciate
Reference: @lbergelson @nh13 in that case, would it be best to put 0l here?
Candidate: use <UNK> v1, k2, dictionary,
Reference: must return true all the time (addcounters can fail with replace event, but cards already discarded).
Candidate: this should be missed.
Reference: equal values should not be tolerated. any reassignment of already existing dimension or metric should be illegal.
Candidate: should we be the <UNK> here? if we == null) { return <UNK> } { return false; } return false; }
Reference: maybe do this test explicitly with localhost:1234
Candidate: please use <UNK>
Reference: i think we have an unwritten convention of using dopublish do such methods.
Candidate: i don't think we need to check if the is is the
Reference: why are we doing this? this integration test doesn't use optional fields so no need to pass along card_expiry. the mock can be modified to not return cardexpiry.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: is it worth it to extract this into its own function?
Candidate: this should be the <UNK> <UNK>
Reference: suggestion return tryactivateandget(e, item) != null;
Candidate: can we move this into a separate method?
Reference: place in applicationconstants instead.
Candidate: i don't think we need to hide the the the disk, that the <UNK> is the
Reference: need to add the //non-nls to string.format lines. if an exception is caught, what happens to randomaccessfile? will it get closed?
Candidate: why do we need permission?
Reference: m.getgroups()
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: in the save digest you use uppercase for sha
Candidate: please remove the method("post")
Reference: suggestion for readability -- chaining calls to append: java stringbuilder errorbuilder = new stringbuilder(samlconstants.security_assertion_issuer_format) .append(" ") ...snipped...  if you're feeling really crazy, you can even skip the stringbuilder declaration
Candidate: trailing <UNK>
Reference: personal preference: private static final float center = 0.5f;
Candidate: the syserr should be <UNK> <UNK>
Reference: shouldn't we throw an exception if execution reaches this point and the deletion plan is rejected? this will silently skip the deletion parts of the commit.
Candidate: i don't understand this matters, if we matters, this matters, but i don't understand this matters, if the matters, but it matters, but i don't understand if the matters, but
Reference: lambda?
Candidate: this getstate() != null ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK>
Reference: is there any way you could get rid of this return? nested returns that aren't at the beginning of a function can make it hard to understand the flow.
Candidate: can you use the getconnection for the <UNK> <UNK>
Reference: package name should be lowercase.
Candidate: why do we need to use <UNK> here?
Reference: suggestion tooltip.add(key + ": " + value);
Candidate: please use <UNK>
Reference: intenal -> internal
Candidate: <UNK> would be good to use <UNK> <UNK>
Reference: this is a perfect log - all the data is there for investigation. why don't we integrate all of these in request.getloginfo? this way the correlation id will always be
Candidate: say, example say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say, say,
Reference: make static
Candidate: nitpicky <UNK>
Reference: getonlyelement() instead of getfirst()
Candidate: why do we need to use <UNK> here?
Reference: java authcarddetails.getaddress() .flatmap(northamericanregionmapper::getnorthamericanregionforcountry) .map(northamericaregion::getabbreviation) .ifpresent(worldpaytemplatedata::setstate);
Candidate: why do we need to use <UNK> here?
Reference: suggestion: use <link_0> so that we don't need to catch exception in here. make code more readable
Candidate: shouldn't this be be <UNK>
Reference: as temporary decision, i refactored it so that "dice = null" in case if dices not thrown yet. imho, in future we shoud create separated jsons for new/playing status and
Candidate: use <UNK>
Reference: this actually can be private static. 1. first it can be static because it does not refer to this zkfc object fields 2. other methods are protected i *guess* because
Candidate: use map<> <UNK>
Reference: shouldn't the rowdata field be inside the servicelisteners.size() > 0 if below, since it isn't used outside of that scope?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: this seems hacky, and besides why this is needed? bootstraplayoutserver has an exceptionally block: java .exceptionally(throwable -> { try { cfutils.unwrap(throwable, alreadybootstrappedexception.class); } catch (alreadybootstrappedexception e) { log.info("bootstraplayoutserver: layout server
Candidate: why do we need the <UNK> here?
Reference: the position parameter is in nattable coordinates and could be out of range in the scrollablelayer. ideally the scrollablecolumn row be underlying scrollable layer row that is already found at
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: ecoreutil.getexistingadapter()?
Candidate: this should be the <UNK>
Reference: how come default and fragment is in the same branch? maybe i do not understand something?
Candidate: why do we need writehandle here?
Reference: need to remove redundant cast.
Candidate: why do we need to the <UNK> here?
Reference: i think you want to compute extractmyrating() on computation scheduler. to do this you should use observeon(schedulers.computation()) before map and then use observeon(androidschedulers.mainthread()) before subscribe()
Candidate: why do we need to use the <UNK> here?
Reference: we usually prefer people providing default value through properties file, we want to make the default value more explicit. can you provide the default value in secor.common.properties?
Candidate: please use <UNK>
Reference: this line needs to be removed since the last commit.
Candidate: please use <UNK>
Reference: unnecessary change.
Candidate: rename <UNK>
Reference: why not do this null handling in read() and shouldn't the reader get closed in a try/finally ?
Candidate: do we need need to use the <UNK> <UNK>
Reference: why is this better? imho we could do away with lastattempt completely and just use elapsedtime = system.currenttimemillis() - start; directly and move attempts++ back before the closure.
Candidate: should we be schedule() { <UNK> } <UNK> } <UNK> } } } } } }
Reference: i am slightly confused. why do we need a new class if existing one (messagingexception) provides everything you need to hold and access both the _cause_ and the _message_. is
Candidate: why do we need need to the <UNK> here?
Reference: use some non-link local ip here as the resolver may filter them out anyway?
Candidate: why do we need to check the <UNK>
Reference: make the fileinfo map immutable.
Candidate: if the != null && <UNK> != null && <UNK> != null && <UNK> && <UNK> { return state; }
Reference: new methods should be guarded for cluster version eg:  if (isclusterversionlessthan(v3_11)) { throw new unsupportedoperationexception("not supported ..."); }
Candidate: this should be repelaced e1 && <UNK> { <UNK> } }
Reference: i'd rather see a single return.
Candidate: this this repelaced e1 { <UNK> <UNK> <UNK> } } } } }
Reference: i would return a warning (as well as for the permission check case below)
Candidate: this should be the the <UNK> e1 is a software lot of the code to do, but it will be easier to read if the decided to maintain the the
Reference: a number of these tests don't actually throw an httpmediatypenotacceptableexception. will you please remove the throws from the signature where it is unnecessary? this way, the expectations of the test
Candidate: why do we need the <UNK> here?
Reference: there is a method org.scijava.util.arrayutils.safemultiply32(long...) that you can use to downcast a long (or the product of multiple longs) to an int safely. it fails fast if the downcast would
Candidate: why do we need to use <UNK> here?
Reference: there may not be a selected column at this point. you should check columns.getcurrentlyselectedcolumn().ispresent(), or assert it.
Candidate: why do we need the <UNK> here?
Reference: please clean it in every case
Candidate: i don't think we need to check the if the is is skipped, <UNK> is skipped,
Reference: we should check closedstreamer flag only after lock acquiring.
Candidate: why do we need to here?
Reference: to test uncaughtexception you need to call it :wink: let's see what you come up with. let me know if you need help or a hint.
Candidate: assertfalse(...);
Reference: why are we even using matches()? there is no regex invlolved. we could just use equalsignorecase()
Candidate: why do we need this?
Reference: here we can add some more info like "access denied! the given realm is not in the allowed realms"
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> the <UNK> <UNK>
Reference: these are repeated frequently, which is pretty dangerous for making these updates later. it seems like storing these flags (and the relevant serialization code) in a composed member object would
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: unnecessary new suggestion {"na12891.over.fingerprints.r1.sam", true},
Candidate: what about testing the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of the rest of
Reference: any reason not to move this addpendingclient call into the existing conditional block directly above?
Candidate: you don't need to use the <UNK>
Reference: don't log and throw the exception
Candidate: can we make this private?
Reference: these two statements are so similar that i would actually just positive ? null : errorcallback instead of duplicating them entirely.
Candidate: why do we need the layout here?
Reference: minor nitpicking but we might as well be consistent in the way we test for this. see the change just above this one.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: muss dies public sein oder recht package private?
Candidate: should this be <UNK>
Reference: does this need to be public?
Candidate: this is eating the exception
Reference: missing a "break" (or just return)
Candidate: i don't need to check for the <UNK>
Reference: what purpose is customfiletag serving?
Candidate: why do we eating the exception here?
Reference: use try-with-resource. java try (response response = executeget(bucketname, objectname, null, queryparammap)) { .... .... } catch (errorresponseexception e) { if (e.errorresponse().errorcode() != errorcode.no_such_object_lock_configuration) { throw e; } } return false;
Candidate: should we be the <UNK> here?
Reference: i missing here how we are testing htlscanner? i have a feeling that we only check expressions part but what about other stuff like tag, text... ?
Candidate: why do we need need to the <UNK> here?
Reference: reset the thread to interrupted state
Candidate: we should need to do we need need to do we need need to do we need to close the <UNK>
Reference: while string concatenation is more performant, would it be easier to read if you used a [string.format](<link_0>,%20java.lang.object...%29) instead to make this more readable?
Candidate: should this be schedule() here?
Reference: can this throw any exceptions? if so should catch and make sure destroy is called on dbmanager.
Candidate: this should be <UNK>
Reference: why do we need to repeat creating flattenvalue? this could be simplified to the following: java return name + separator + flattenvalue;
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i guess 'else' is not required here since the if block has a return... personally, i'd find this easier to read:  messagehandler handler = createdirecthandlerifpossible(targetobject, targetmethodname); if (handler ==
Candidate: why do we need to check the <UNK> here?
Reference: you have to create a constant.
Candidate: why do we need need to the <UNK> here?
Reference: this is a filter. if we return before passing the end element event to the next content handler, we'll end up with unbalanced tree. is this really correct?
Candidate: do we need the layout here?
Reference: can we add atleast code in this error msg or if it would make sense then print complete paramters
Candidate: why do we need to use <UNK> here?
Reference: shouldn't the strategy identifier be referenced by its identifier constant (which might be made public)?
Candidate: why do we need to check for the <UNK>
Reference: please make this lowercase ("dslist") and then everything looks good
Candidate: why do we need to the <UNK> here?
Reference: this looks like it will cause a classcastexception to me. did you mean instanceof visitingexception?
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: maybe something like this:  return allcriteriawithnumbers.stream.collect(collectors.joining(" or "));
Candidate: can be simplified to <UNK> <UNK> array.
Reference: columnname is null
Candidate: should be be <UNK>
Reference: this can be simplified throughout to: getbody().readutf8()
Candidate: should this be specific?
Reference: call reflow() instead?
Candidate: why do we need the <UNK> here?
Reference: why not to check the group name instead of groups number?
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> } { <UNK> (long <UNK> { <UNK> }
Reference: should this be exception-worth too?
Candidate: why do we need need to the <UNK> here?
Reference: sounds like util method to be reused.
Candidate: you should be expecting the input file for the input file repo, depending on the input file depending on the input file depending on the input full repo, so that
Reference: in what use case the new db name can be null?
Candidate: do we need to the <UNK> <UNK> <UNK> <UNK>
Reference: if replace entity.getoperatorid() with something else (for example number 5), i think that all tests will pass.
Candidate: this should be the <UNK>
Reference: > setstatus [](start = 9, length = 9) isn't setexception already indicating the status of failure? #pending
Candidate: this should be the <UNK>
Reference: can the "base == otp" case trip? if so, what prevents cycles that don't involve otp?
Candidate: this don't need to check for the "else" of the
Reference: invert condition
Candidate: why do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: !cancelled cannot fail if cancelled is a primitive. if it does, the jvm or the cpu needs to be taken out of service.
Candidate: i don't think we need to synchronize on the <UNK>
Reference: this will result in a bunch of round trip calls to the datastore/db. a better approach would be to add the list of ids as filters and then just call
Candidate: why do we need need to check the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: *persian
Candidate: why do we need to mock the <UNK> <UNK>
Reference: need the name/urn in the output.
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: one-line if possible.
Candidate: please use <UNK> <UNK> <UNK>
Reference: normally i would use collections.unmodifyablelist(...) here. i think the apache-commons variant is there only for jdk4 users.
Candidate: this should be <UNK>
Reference: please check that version isn't null. otherwise the automated null checks fail.
Candidate: please use <UNK>
Reference: @rnveach i think here we should have different name for parent and child to not confuse them
Candidate: you should expecting the exception here?
Reference: seterrormessage
Candidate: seterrormessage
Reference: use collections.singleton as you did for attachments.
Candidate: please remove this line
Reference: as described below: it's already not a first version. please think carefully how to code oninstall() and onupdate().
Candidate: why do we need the <UNK> here?
Reference: this null check is redundant because lastobjectpropertyinpath is never null.
Candidate: do we need this check?
Reference: these compareto(qc) could be abstracted a bit: if it's okay to compare date before data, just make the impl classes do int compare = super.compareto(t); if (compare == 0) {//
Candidate: please use <UNK> <UNK>
Reference: please assert a return value.
Candidate: why do we miss? miss?
Reference: i get that you're doing this so that exceptioncounter is final which you need for the foreach(), but i think i'd prefer to use atomicinteger here
Candidate: why do we need to use the <UNK> here?
Reference: i'd really really like bytestring objects to be immutable, because we use them in a lot of places.
Candidate: shouldn't this be processed here?
Reference: i think iscreatable( ) will allow numbers that can't be parsed into integers (like floats). i think a regex is possibly the right approach here. 0|[1-9][0-9]{0,5} should work (either just
Candidate: why do we need the <UNK> here?
Reference: stripping trailing slashes is so common we should have a library function for it.
Candidate: the syserr should be injected, so we don't need to do we need need to do we need need to do we need need to do we need need to
Reference: the productmanager did flush when saving the core products, then again when saving the owner-products. here it seems we're deferring flushing for when? shouldn't we flush before candlepinpoolmanager starts processing
Candidate: should this be <UNK>
Reference: this looks complicated and hard to understand/maintain. i'd suggest using int for releaseortarget, something like this:  int targetedjavaversion = 8; if (release != null) { normalized.add("--release"); normalized.add(release); targetedjavaversion =
Candidate: can we use <UNK> <UNK> <UNK>
Reference: third-party exception
Candidate: why do we want to use <UNK> here?
Reference: this does not pass on os x - investigating...
Candidate: why do we need this?
Reference: new glob vs. toglobpredicate() -- would rather use one approach either the factory method or the constructor but we shouldn't mix both. maybe we should go with the factory method.
Candidate: why do we need to use the <UNK> here?
Reference: you can remove this if else. nothing uses islandscape. you can also remove variable declaration.
Candidate: if we && <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: isnumericformat(format) does not need to be computed for each object. you can compute this outside the function that is applied per object (on line 125)
Candidate: this is be setemptyelement().
Reference: please, stop container in finally block
Candidate: @exper0 let's move the meaningless here to the left.
Reference: itemstack has a nice splitstack method that does exactly this in one call. don't even need to check stacksize beforehand.
Candidate: this slot is be redundant? slot
Reference: typo on certificaiton; should be certification
Candidate: should we use the <UNK> properties?
Reference: if there are multiple primitives columns, users won't be able to tell which column failed to map from this error message. we should provide more information about which column failed
Candidate: why do we need the exception here?
Reference: already set in xml
Candidate: remind me: if oldvalue is the <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue =
Reference: since this is class is becoming a shell that delegates all of its operations to a nativeimpl instance, wouldn't it be a better design to also include getcpu() in nativeimpl?
Candidate: why do we need to use the <UNK> here?
Reference: why removing this?
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: add cda to check if the init succeeded, if it fails you'll end up with null vm which will cause to an npe.
Candidate: please use <UNK> <UNK> <UNK>
Reference: don't allow comparison against both the name and the value. that's confusing.
Candidate: this can be repelaced by the userreportingsettingshelper
Reference: well this and whether silencing after x number of failed/merged transactions happens.
Candidate: this should be setemptyelement().
Reference: @pynicolas method trees also extend functiontree
Candidate: i don't need to check the <UNK> <UNK> the <UNK> is the <UNK> explicitly)
Reference: by doing so, you are changing the expected behavior for some weird cases. i would prefer to have a separate method like createaccountwithhashedpassword if the goal is only for casc.
Candidate: this should be the <UNK>
Reference: when concatening strings with +, it's not needed to do .tostring(). this gives the same result:  return singlebenchmarkresult + "_" + problemstatistictype;  furthermore, it even avoids a nullpointerexception
Candidate: should we use the <UNK> id + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: it's so beautiful
Candidate: why do we need to call the <UNK> here?
Reference: another way that is more relevant to the backing data is results[resultsindex].length
Candidate: why do we need the <UNK> here?
Reference: add the force parameter to the tostring()
Candidate: this should be <UNK>
Reference: @aslan11 return statements are missed
Candidate: nit: you can rely on auto-boxing.
Reference: can be rewritten with a simple arrays.aslist() call.
Candidate: please move this private private private private private private private private private private private private private <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: minor nit....can you please rename islinuxos to something more fitting, like epollenabled?
Candidate: nextvalueindex should be be <UNK>
Reference: for non-public methods checkwidget() is not required.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { return; }
Reference: user ordertable.table_name instead of plain text. forget this, let it be there, let's put the constants reassemble work in the next phase if there would be such a chance in
Candidate: should we use the <UNK> here?
Reference: i disagree with this being on by default. also recommend you change to boolean.parseboolean
Candidate: this should be <UNK>
Reference: getforce() returns boolean we do not need to double check.
Candidate: please move this to <UNK> mapping?
Reference: remove "create=true" here too.
Candidate: why do we eating the exception here?
Reference: why did you do this?
Candidate: remind me: <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> c'est filter; <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: we may want to move this into onpause(), so the notification only start when the user leaves the view of the trip planning results. in some cases, i'm currently getting
Candidate: please use <UNK> <UNK> <UNK>
Reference: i don't think wrap up our exception with a library exception is a good idea, it is prone for falsehood assumptions (this amazonserviceexception exception won't have requestid, errorcode, statuscode,...). also,
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: is it enough to use max-data-volumes-supported as the max device id, seeing as device id 3 is not used? (or is reserved) e.g. let's assume that getmaxdatavolumessupported(vm) returns 6. what
Candidate: can be replaced with <UNK> ?
Reference: !false == true, so i think you need to keep setting the mapper.
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ?
Reference: this was actually my suggestion because the names are not unique when there are nested jobs. continuing to use names for non-nested jobs means we don't break existing users.
Candidate: suggestion <UNK> <UNK> + " + " + " + " + " + " + " + " + " + " + " + " + " +
Reference: if this always returns false setcancelled is pretty dang useless....
Candidate: this should be setemptyelement().
Reference: seeing this everywhere makes me think that we should wrap/hide the session variable such that it's not directly accessible as an instance variable, but is returned by this method, similar
Candidate: the syserr should be be the
Reference: i believe you found the right area to fix, but the change works fine for y anchor equals to 0, which makes for top alignment. but what if bottom alignment
Candidate: i don't think we need to the the lock in the
Reference: >foretsry typo
Candidate: i don't think we need to call <UNK> <UNK>
Reference: 1000?
Candidate: i don't understand this matters, if you matters, this matters, this matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, but
Reference: could you please rename all _ret variables ? that's the only remaining request before i can merge this pr. thanks
Candidate: why do we need the <UNK> here?
Reference: since it seems like we might want to support this on line charts as well, consider moving the definition of changepointshape up to the superclass with a default behavior of
Candidate: this should be the <UNK>
Reference: it would make life easier if we logged something when a new broker is created and also when it's deleted in line 70.
Candidate: why do we need to use the <UNK> here?
Reference: these can be declared inside the try block, together with the return statement.
Candidate: why do we need need to use <UNK> here?
Reference: better use this.ordinaldescriptormap and test if it is empty. same remark below for the second one.
Candidate: this should be the <UNK> of the <UNK>
Reference: isn't this code being executed on the ui thread? the syncexec() shouldn't be needed.
Candidate: should we update this log log page page page page page page page page page page page page page page page page page page page page page page page page
Reference: again the system.outs
Candidate: you don't need to subdir on the <UNK>
Reference: as a practice, get the value of "httptransportcontextholder.getinstance().gethandlerexecutor()" to a variable, and use the variable after that, rather than doing the same lookup twice. it may or may not be
Candidate: should this be <UNK>
Reference: this looks like an unnecessary case as it replicates the unbounded replay behavior with default capacity 2.
Candidate: why do we need to use <UNK> here?
Reference: should you throw runtime exception?
Candidate: this should be the subdir permission?
Reference: i think this should be negated if (!strings.isnullorempty(simple.getid())) { otherwise it only adds null and ignores it when it's not null
Candidate: i don't think we need to throw an exception
Reference: maybe uribuilder would be better here?
Candidate: i don't think we need to check for the <UNK>
Reference: maybe, this check should be above of the request-body validation?
Candidate: should we be the <UNK> here?
Reference: static import?
Candidate: why do we need the <UNK> here?
Reference: getparent().getid()
Candidate: should we be the <UNK> here?
Reference: seems to be a regression in the merge: the checksum flag is missing.
Candidate: use <UNK> <UNK> <UNK>
Reference: should we add the navigator's dependencies when this is not supported?
Candidate: @unyoungwax, do we need to trim entries?
Reference: please remove regex and such ambiguous numbers as "13" ? the code should be easy to read & verify now is totally cumbersome.
Candidate: should we throw an exception here instead of returning an error?
Reference: how can it be equal to false if it's a number? am i missing something? same question for default case as well.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why does this do configure and save?
Candidate: should be be <UNK>
Reference: it would be rather preferable to create a new method with error propagation
Candidate: the syserr should be be <UNK>
Reference: should we be passing the close timeout to join?
Candidate: we should need to use the exception in the <UNK> <UNK> we don't need to do we need to interact with the <UNK>
Reference: not sure what is the benefit compared to collections.unmodifiablemap.
Candidate: should we return <UNK> ?
Reference: you could keep the default (i.e., false) in one place by replacing this constructor implementation with this(errorproneflags.empty());.
Candidate: should this be <UNK>
Reference: only the createindexes and the dropindex synchronise on the indexingservice monitor lock as far as i can see. this means the state in here is inconsistently synchronised. if we are
Candidate: i don't understand why, but it matters, what is the that the is is that the is is the <UNK>
Reference: we are not handling "timeout" anymore
Candidate: please use syserr
Reference: do you keep this at info level?
Candidate: do we need to check for the anyway?
Reference: if the correct flow of things depends on the order of calls, then something here is wrong. why did you need to change it?
Candidate: why do we need this check?
Reference: range should be parameterised, the compiler gives warnings for it. same for all other occurrences below
Candidate: if the == null) { <UNK> } else { if (...) { ... } } } else { } else { ... } else { ... } } else {
Reference: why not  if (linecount == mmaxlines && layout.getellipsiscount(linecount - 1) > 0 && gettextsize() > mmintextsizepx)
Candidate: i don't understand why, but it matters, what is the that the is is the <UNK> the <UNK> <UNK>
Reference: why remove the winning team from this game and add again ?
Candidate: this should be <UNK>
Reference: remove "exiting process now." from message here, should be in the runnable.
Candidate: why do we need to the the sizes of the sizes properties?
Reference: again, "remote installation..." might be a confusing error message when someone tries to remove a plugin
Candidate: should we use the <UNK> here?
Reference: ![major](<link_1> make "getnumberofcommas" a "static" method. [![rule](<link_2>](<link_0>
Candidate: why <UNK> <UNK> <UNK> ? <UNK> : 2; : 2;
Reference: please remind me why do we need this at all? apache ignite does not have compatibility between versions. can we get rid of feature check entirely, assume it as "always
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: note to self: figure out why we can't use what we're ending up filtering by here as a key so we can prevent linear search thru idmanager.sessionmap.values() unless @coyotesqrl already
Candidate: the syserr
Reference: i think you can use method add(int index, e element)
Candidate: why do you need to tweak the <UNK> <UNK>
Reference: can you read back the address and make sure its a hole?
Candidate: the syserr should be the <UNK>
Reference: exiting, so stderr
Candidate: why do we need the <UNK> here?
Reference: this change seems to be different to the original intension. this log appears to show which hdfs namenode is used in this tajomaster.
Candidate: i'm not sure if this is the <UNK> is the <UNK> <UNK> is not the <UNK> <UNK> <UNK> <UNK>
Reference: nit: redundant casting
Candidate: should this be <UNK>
Reference: try onrelease
Candidate: this should be the <UNK>
Reference: i tested following code, and i think this line will throw exception. of course, when we write @column(name = xxxxx) if will behave correctly.  @column public string getlongcolumnnamewitoutannotationparameter() {
Candidate: the syserr should be be the
Reference: never used?
Candidate: this should be the <UNK>
Reference: i think we need to set cachedinitialdefaultschemadescr to the returned schema descriptor before returning from the function.
Candidate: this should be the <UNK>
Reference: the forserver == false flow looks wrong. if null is passed, then keymanagerfactorywrapper will throw (and we probably want the keymanagerfactory to be null in that case).
Candidate: i don't think we need to check the the situation.
Reference: any possibility that delimiter is something else? also, i'm wary of possible empty or null values. do we protect the converter from such scenarios?
Candidate: this should be the <UNK>
Reference: why we have to transit to suspended before prepare-closing? originally we want to check that created state can still trigger close.
Candidate: please remove the method("post")
Reference: why not throw an illegalstateexception at this point? i would prefer funny business to be highly visible.
Candidate: if <UNK> != null) && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: might be better to set it true only if the value is "true"
Candidate: should this be <UNK>
Reference: perhaps if we want to force this it should be synchronous on the current thread instead of putting it on a scheduler? i think even though you say now that's
Candidate: if we is the software exception but we don't need to throw an exception if it is an exception, it will throw an exception if you opt to throw an
Reference: env name is not compliant with other env names we have. consider che_cors__filter_enabled or che_cors__filter__enabled
Candidate: this should be done in the <UNK> still, we don't have the lock in this case.
Reference: please name the local variable differently from the field, for instance deprecated, because otherwise reading the code is a bit confusing. this will also avoid doing this.isdeprecated a bit further
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: you can move these initializations to the field definition
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: why is this now a literal and not a static final? ideally, we could calculate the width of the terminal, but this is out of scope here.
Candidate: this should be setemptyelement().
Reference: same as <link_0> only the context autostart may be optional.
Candidate: i this tear down the player's the player's the player's the player's the player's the player's the player's the player's the player's the player's the player's the player's the player's
Reference: can we wrap this with log.istraceenabled?
Candidate: do we need need to throw an exception if it will throw an exception
Reference: this doesn't look right
Candidate: do we need to the <UNK> here?
Reference: same here and above.
Candidate: should we use the values here overflows?
Reference: this function can be private
Candidate: please use syserr
Reference: maybe call the variable "label" rather than "name1"
Candidate: i don't understand this if this is is the
Reference: i don't think this is quite right. we should fall back to the conversion service if it can do it: suggestion if (canconvertfromstringto(long.class)) { idaslong = conversionservice.convert(identitifier, long.class); } else
Candidate: why do we need to use <UNK> here?
Reference: it seems the atrootdirectory check is faulty. i get into a loop when pressing back on the music tab (currently only one i'm trying to test).
Candidate: if (state != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: razentitlementenabled
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: please add braces. to see more checkstyle violations, please have a look at the output of the static-analysis ci task.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: rename that method to getpauseinfo
Candidate: typo: <UNK> -> getcredentials
Reference: make "/manager" a constant
Candidate: this catch throwable here and throw an exception exception instead of catching exception?
Reference: this logic seems not to be tested with a symbolic link.
Candidate: you don't need to use the <UNK>
Reference: i am a bit confused about the fix. this seems to already be doing what the commit message is describing.
Candidate: can we assemble the <UNK> of the the enum?
Reference: code will be  string str = caseformat.upper_camel.to(caseformat.upper_underscore, uniquename); if (str.endswith("i_s_d_a")) { str = "original_isda"; } return valueof(str)
Candidate: this should be the <UNK>
Reference: this could swallow interrupts etc? how about doing exceptions.propagateiffatal() first?
Candidate: can we use static"
Reference: add a message to the failure
Candidate: i don't understand why, but it matters, but i don't understand why, but i don't understand why, but i don't understand why, but i don't understand why, but i think
Reference: this can't work. you haven't specified a message id
Candidate: should be be the <UNK>
Reference: you can remove the tostring() call.
Candidate: <UNK> *= 2;
Reference: again: capture, then test. getgenericparams is expensive.
Candidate: should be be specific?
Reference: is there a reason to save the process, when the process flagis not changed again? i think this save is only neccessary when export failed and exportflag changed back. it
Candidate: why do we need the <UNK> here?
Reference: use early returns instead for these if/elses?
Candidate: i don't think we need to check if the is is the
Reference: just in case, you want to add the task which has no parent in successtasks, right ?
Candidate: why do we need the <UNK> here?
Reference: calendar.getinstace already returns an instance set at "now", so this call is useless (and in all the other places where you call settimeinmillis(system.currenttimemillis()))
Candidate: you don't need to use the <UNK>
Reference: return (expression instanceof callexpression) && functionmanager.getfunctionmetadata(...
Candidate: use optional.ofnullable()
Reference: replace it by stringutils.comma
Candidate: shouldn't this be be allowed? normalization should be configurable too?
Reference: you can collapse the realmfileisbeingcreated condition & remove the pmd exclusion warning
Candidate: i don't think we need to migrate the anywhere here?
Reference: the problem os sort is not solved here, vmdevicetosave.values() - these order is unpredictable, we should sort device here.
Candidate: i don't understand why we need to the transaction scenario? here?
Reference: i think this would fit in 120 characters (same for lines 89-90).
Candidate: please remove method("post")
Reference: please change it to something like:  if (propsinputstream == null) { throw new illegalstateexception(propertiesnotfoundmessage); }  or remove it completely please. the problem is that java asserts need to
Candidate: should we use the <UNK> here?
Reference: handle errors on listener invocation?
Candidate: i don't understand this matters, if we matters, this matters, but i don't understand this matters, if we matters, but i don't understand this matters, if we matters, that the
Reference: i'd create the domain first, set all it's params, and only then apply to image, but that's really nitpicking ;-)
Candidate: why do we need need to check the <UNK> here?
Reference: if the eclipse application does not have focus, then you can still get a tool tip by hovering on the time graph. even after clicking the tool tip shell, the
Candidate: if getstate() != null) { return; }
Reference: ![major](<link_0> 'severity: major') catch exception instead of throwable. [![rule](<link_1>](<link_2>
Candidate: i don't understand why, but it is be the anywhere, but it will be good idea to be the
Reference: this will give "public=="+publicport. you don't need to include the "=" yourself.
Candidate: unsupportedoperationexception should be <UNK>
Reference: public collection<operatorspec>
Candidate: this should be <UNK>
Reference: throws queuefile.<error>getsneakythrowable(e);
Candidate: throws runtime exceptions?
Reference: letting it simply throw the exception is an easier way to get the test to fail, also gives all details including a stack trace, while this only reports the error
Candidate: this should be <UNK>
Reference: if there isn't a job, we should make sure there is with a setup function that creates one that runs first. or, alternatively make the test pass if no jobs
Candidate: the "used"
Reference: to align this with the oidcuser that oidcuserservice creates, i think [an oidcuserauthority should also be added](<link_0>
Candidate: should we throw an exception instead of returning null?
Reference: can this be called type instead of id? also i'm not seeing a client test for this enricher, did i miss it?
Candidate: why do we need to check the <UNK>
Reference: call the other constructor (line 86) with default values for the unused members here.
Candidate: please remove the method("post")
Reference: why public?
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: you can configure this using the @mock annotation: @mock(answer = returns_deep_stubs)
Candidate: please remove the method("post")
Reference: kie-wb-common-stunner-extensions/kie-wb-common-stunner-forms/kie-wb-common-stunner-forms-client/src/main/java/org/kie/workbench/common/stunner/forms/client/widgets/formpropertieswidget.java:187: error: null_der$ object diagram last assigned on line 186 could be null and is dereferenced at line 187. 185. final string domainobjectname = translationservice.gettranslation(domainobject.getdomainobjectnametranslationkey()); 186. final diagram<?, ?> diagram
Candidate: i don't think we need to check the <UNK>
Reference: isn't the same as just removing the 'localrack != null' check in l372? that way we get the same behavior in one if condition.
Candidate: can you use the <UNK> of the properties?
Reference: ![codacy](<link_0> issue found: [avoid unnecessary if..then..else statements when returning booleans](<link_1>
Candidate: if the == null) { return false; } else { if <UNK> { return <UNK> } else { if <UNK> { return false; }
Reference: you could also use files.isregularfile
Candidate: why do we eating the exception here?
Reference: you have some duplication caused by the fact that you check here the exception but also in the catch block above. i would either check here that we have the
Candidate: do we need to store the loader of the loader of the individual loader store knows. the individual verifications
Reference: grammar nazi suggests: > can't label the namespace due to lack of permissions. grant cluster-wide permissions to \get\ and \update\ the \namespaces\ to the \che\ service account (che operator might
Candidate: do we need need to check anywhere if <UNK> != null) || <UNK> { throw null; }
Reference: minor: not sure this is the cleanest way to write this. consider collections.emptymap() or immutablemap.of(), or even just new hashmap<string, string>(). the first two are immutable, and i prefer maps
Candidate: should this be <UNK>
Reference: do we need to call removeinvisibleorgunits here as well?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: val -> value
Candidate: you don't need to use <UNK> <UNK>
Reference: @pynicolas fixed b6229cc713c75b2a4e8a4e5f378d14e5b03b3eb7
Candidate: the syserr should be be the
Reference: looking at this i feel we should have 2 filters. one for inclusion and the other for exclusion. in other words instead of lucenequery.filter let's have lucenequery.include and lucenequery.exclude
Candidate: this should be setemptyelement().
Reference: we try to encourage all checks to do log in visit.... methods. please refactor this method to return boolean to make a log base on result from it.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this is fine but it's a bit odd to see this instead of an if/else.
Candidate: why do we need to check the <UNK> here?
Reference: @erimerturk what happens here for existing records, which hasn't the subscription attribute before ? returns null or what? if so let's add default value true
Candidate: why do we need need to the <UNK> here?
Reference: diff tool?
Candidate: this should be <UNK> <UNK>
Reference: an idea for code simplification - move new pvc creation and replacement to a separate method and make it return new pvc for reuse
Candidate: can you combine this statement into the previous line.
Reference: when would you get into this code path, considering the updatecompactioncflist logic above?
Candidate: why do we need to evict the <UNK> request?
Reference: is it possible to assign from the putifabsent call without a get?
Candidate: if the == null) { return; }
Reference: i think we have to overload the constructor to not break existing clients using the old constructor. i suggest to add a hint to favor aggregation.geonear( ) over using the
Candidate: should we be the <UNK> here?
Reference: what is the jgit community consensus about final variables? -used them every where -only member variables should be final -... i looked in the contribution guide and i didn't find
Candidate: why do we need to use <UNK> here?
Reference: if we introduce new abstract methods to abstractuserstoremanager it will break the existing implementations. therefore let's implement the method here to preserve the backward compatibility.
Candidate: should we be the <UNK> here?
Reference: i know that the original code used relativelayout.visible/gone, but do you mind switching them to view.gone/visible for consistency with the rest of codebase?
Candidate: i don't think we need to check if <UNK> != null && <UNK> { <UNK> }
Reference: use adapters.adapt(geteditorinput(), ieditorinput.class)
Candidate: can we move this logic into the <UNK>
Reference: typo: initializable
Candidate: can we use the <UNK> here?
Reference: revert this line?
Candidate: use this.key
Reference: let's use a better variable name than "s" (also and there are several such places, when would metadatablock be null? if nowhere, i think we can simplify the logic here)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: huh? the point is that a cast isn't necessary
Candidate: why do we need need to the <UNK> here?
Reference: can't we just use ordinary indexing here, ie %s\n%s\n%s? i actually didn't know about explicit indexing syntax, but it seems ordinary indexing is more readable.
Candidate: nit: you can use <UNK> <UNK>
Reference: i just realized, this else is unused!
Candidate: why do we need the columns here?
Reference: null check?
Candidate: unsupportedoperationexception should be public.
Reference: same question like above.
Candidate: ![major](<link_0> 'severity: major') remove this line [![rule](<link_1>](<link_2>
Reference: minor: for "list" you can use builtintypes.list
Candidate: this should be <UNK>
Reference: we probably shouldn't be calling a deprecated constructor from a non-deprecated one.
Candidate: why do we need to use the <UNK> here?
Reference: you have the method getvdsdao().getallforstoragepoolandstatus
Candidate: this should be the fixture.
Reference: while (loop < maxretry) will get rid of the extra if break condition.
Candidate: why do we need to check the <UNK> here?
Reference: repeating this is icky :( can there be a tryparsetimestamp() method and a tryparsemessagetags() method we just call?
Candidate: use <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: variable metricsinterceptor might need to start with a lowercase letter.
Candidate: why do we need the <UNK> here?
Reference: this method can just throw an exception back to caller to decide what to do with the exception. it is not necessary to take in the logger.
Candidate: should we use the exception here instead of catching the exception?
Reference: use protected access modifier instead of default (all-over)
Candidate: why do we need to check the <UNK> <UNK>
Reference: this change misses the case where hasnext returns false no longer failing the test. i think the right thing is to not test the return value and to remove the
Candidate: should we use the exception here?
Reference: can you please remove this new exception from here? i believe that it's unused and left from previous fix attempt. thank you!
Candidate: why do we need to here?
Reference: please check that unsubscribe works in each phase of a running subscription.
Candidate: why do we need to the scheduler here?
Reference: m_pathlist is a good use case for using immutable map
Candidate: why do we need the getconnection here?
Reference: should not it be set by default when it is jre 8 on the machine?
Candidate: you don't need to mock <UNK>
Reference: the fqn should not be needed here, instead the simple name should suffice when returning the required import through getimports().
Candidate: please use <UNK>
Reference: use the constant to construct the message so that it doesn't get out of sync if we adjust its value.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: should that get changed then?
Candidate: should this be <UNK>
Reference: please check if the are any usages of this method outside this class. if not, please make it private.
Candidate: this should be the <UNK>
Reference: no space between the commas!
Candidate: why do we need to use <UNK> here?
Reference: getqualifiedname()
Candidate: can be replaced with:  java return input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> ?
Reference: objects.requirenonnull?
Candidate: if we is the software <UNK> software <UNK> is the software <UNK> <UNK> should be be the <UNK>
Reference: while we are here, and this is not a requirement (i've already approved the pr), would be good to have a small new unit test that confirms the new configuration
Candidate: why do we need to here?
Reference: oh, i see. good find. how about "finished subprocedure (pid={}), resume processing of parent (ppid={}), and use parent.getprocid() instead of the string replace.
Candidate: why do we need the <UNK> here?
Reference: please retrieve all non prestarted vms and after that put them to loop or retutn a vm and not its id, there are to many queries to db which retrieved
Candidate: why do we need to check for the <UNK> <UNK> <UNK>
Reference: wouldn't it be simpler to just call entry.getvalue().get(0)?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: considering this is actor state, and concurrency should be already solved by actor model, is there any particular intention on using concurrenthashmap??
Candidate: should we use the exception here?
Reference: the code block added here (lines 29 to 38) is identical to the code added for eventbasedgatewayactivitybehavior, excepted by the fact that the first one has a break clause. is
Candidate: why do we need need to the <UNK> here?
Reference: small formatting issue, please be consistent with spaces between the + it should be: host + ": " + name
Candidate: why do we want to close the resources here? thanks!
Reference: looking again at the docs <link_0> i am still not sure if the order is now completely correct. the doc says columnfamilyhandle > rocksdb > dboptions > columnfamilyoptions but the
Candidate: why do we need to synchronize on the <UNK> thread? if (actual == null) { return; }
Reference: lets replace magical numbers with strings that represent them. somewhere near the top of the code but with better spacing  java private final string playlist = "playlist"; private final
Candidate: i don't understand why, but the tablets can we do, if the architecture is the <UNK>
Reference: when we use updatedat for versioning we are assuming that system clock is good enough as an indication of order, given concurrent changes are not very frequent, right?
Candidate: why do we need to use <UNK> here?
Reference: you can do .orelsethrow here
Candidate: should be be the <UNK> ?
Reference: would suggest to make it private.
Candidate: why do we need the <UNK> here?
Reference: is there some way to make this not hardcoded? i'd like to support other pluggables or even other types of pipebehaviour that can connect to redstone.
Candidate: why do we need need to clone the <UNK>
Reference: why do we not have the same result on windows? we can find the file on windows but not on *ix?
Candidate: why do we need this?
Reference: must be targetcardinyourgraveyard
Candidate: this should be the <UNK>
Reference: not sure if this needs overflow checking.
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: a better solution would be to inject the statemanager and call clearsearchquery (for how to inject see for example the linkedfileeditdialogview dialog)
Candidate: why do we need to use <UNK> here?
Reference: inserttorealm sounds wrong somehow. insertinrealm? or just insertobject?
Candidate: why do we need this?
Reference: this should call the dao directly as it did in 1.11
Candidate: unsupportedoperationexception should be <UNK>
Reference: how about extracting this value to variable so it can be checked later on?
Candidate: should we assert that the "expected" exception too?
Reference: these could be ordering.natural().immutablesortedcopy(...), it incurs fewer copies according to the ordering docs.
Candidate: isempty cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster
Reference: if createocspresponse on line 168 is throwing an exception as the test expects, then this line will never get called and can be removed.
Candidate: why do we need to here?
Reference: given registerdisplaylistener is in the if block in enable, this should probably be in the if block in disable also.
Candidate: this should be the <UNK>
Reference: is it better to do a non-empty check and remove the try block?
Candidate: should we throw an exception here instead of returning null?
Reference: why don't you use: path.length() == 0
Candidate: i don't think we need to do we need need to check the <UNK>
Reference: this can throw runtimeexception
Candidate: should we throw an exception here?
Reference: when using asserttrue()/assertfalse(), we should use the variant that takes a failure message so we can provide more information when the test fails (otherwise the printed failure message will just
Candidate: should this be <UNK>
Reference: maybe something like array_position does not support elements of complex types that contain null? in theory t can be a map or a row.
Candidate: if the != null && <UNK> { <UNK> } else { if <UNK> { return false; }
Reference: i see the idea, but i am worried about gettrackers() method returning fake data. users can attempt to call .gettrackers() and then add an item to the collection, and the
Candidate: should this be <UNK>
Reference: i am wondering if this should include a null check here as well. stringutils.length(notetext), will return zero if notetext is null, otherwise return the length of the string.
Candidate: why do we need to check the <UNK> here?
Reference: this would be better sized as 2 it seems, although that's obviously a nitpick.
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: use type.binaryname() instead?
Candidate: please use <UNK>
Reference: charsets.utf_8?
Candidate: why do we need to here?
Reference: we could also try to use the icon theme here, for instance the group icon.
Candidate: can we use the syserr
Reference: announcement_webview variable name should be renamed to webview, 'announcementwebview' webview seems odd here.
Candidate: why do we need to check the <UNK> here?
Reference: why is this doing concatenation instead of assignment?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: remove / update the log line.
Candidate: i we remind me nervous if we are expecting an exception on the exception if we are expecting an concurrency deal with <UNK> already? already?
Reference: does is make sense to move the logic of only add if not yet added into pushheredocmarker? that would allow to remove getheredocmarkersindexset and to simplify this part.
Candidate: why do we need the <UNK> here?
Reference: should we assume the table exist's when we can't check for it?
Candidate: why do we trying to serialize favor of trying to favor of trying to favor of trying to favor of favor of trying to favor of trying to favor of
Reference: please avoid returning in middle of functions.
Candidate: can we use <UNK> here?
Reference: one question: should syncthread be a member of this class? isn't it possible to initiate the thread where it is actually start, like you did in memorystoreimpl.initialize()?
Candidate: should this be <UNK>
Reference: can you change to: "unable to generate uuid due to unexpected encoding error: " + e.getlocalizedmessage()
Candidate: should we use the exception here?
Reference: have this return updatefilemetadata instead of void so developers can use the builder pattern like:  java updaterequest.addupdatetask(op, k, v) .addupdatetask(op2, k2, v2);
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why doesn't this use the key and value schemas instead of the types? i think it would make more sense to check schema.type instead of evaluating string equality.
Candidate: why do we need to the the payload?
Reference: isempty? do you reject file name " " ? :)
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: static import hivesessionproperties.getparquetwriterpagesize and hivesessionproperties.getparquetwriterblocksize
Candidate: why do we need the getconnection here?
Reference: sounds ok to me that the outcome matches the false return
Candidate: i don't see the reason for the _last_ <UNK>
Reference: this parameterservice method accepts a boolean object, so you don't need to unbox boolean.true here.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: let's not assume that count is bigint. (in some type systems it might be int.) use aggregatecall.type?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: use long names please: options
Candidate: why do we need to use <UNK> here?
Reference: this test demonstrates the usability issue in waitallstrategy, we should change withstartuptimeout's return method to waitallstrategy. you can do it in this pr if you want :) /cc @rnorth
Candidate: why do we need need to check the the <UNK> <UNK>
Reference: we don't want to log the buffer as it enables log injection
Candidate: why do we need to permission?
Reference: we could consider 0 as being invalid as well. that would also help to revert that change: <link_0>
Candidate: this should be the <UNK>
Reference: && !keywords.isempty()
Candidate: i don't think we need to check if the is is the
Reference: you already have access to the list here, why not return the first item in the list as a mono rather than wrapping it in a flux from iterable and
Candidate: can we use the <UNK>
Reference: instead of having if calls for each case, can be encapsulate the each condition inside a strategy class? that way, this could would be reduced to handler.execute() where the handler
Candidate: if (args.length == 0) { }?
Reference: did you intend to make this final ?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { return; }
Reference: cool that we're doing this now :) if automatic model runs is not enabled, and the occurrence's location has passed qc, is_validated needs to be set to true - can
Candidate: why do we need the <UNK> here?
Reference: calling delete model twice here
Candidate: should we be schedule() here?
Reference: these exceptions should be logged
Candidate: should we be the <UNK> here?
Reference: add a newline here: suggestion final listpreference durations = (listpreference) findpreference(getstring(r.string.seek_duration_key));
Candidate: @unyoungwax, speaking it is not needed to the <UNK> part, but it should be be the <UNK>
Reference: the only reason i can think of for allowing a null argument is to allow reuse of an existing builder where specifying a null day count would clear the previously
Candidate: i don't think we need to check for the situation.
Reference: can we just use the more lenient comparison window always, and get rid of the os detection? we are not really intending to test the system clock here at all,
Candidate: can we use the <UNK> here?
Reference: this is what i mean. if i supplied two different dates, can i get different results basing on the date value?
Candidate: should this be <UNK>
Reference: any reasons to change the <code>displayname</code> to the project's full name. in such cases the status info will lose the information about the build.
Candidate: do we need to catch exception?
Reference: printstacktrace()? isn't it better to use a logger?
Candidate: should we throw an exception exception?
Reference: keep on separate lines -ide clearly thought it was being helpful
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: for the case source = "$table.bar". i believe this case will pass validation, but maybe you should throw an exception.
Candidate: we should use the <UNK> properties?
Reference: this is never used?
Candidate: if the == <UNK> && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: returning void.class would seem ok and more friendly.
Candidate: should we use the <UNK> here?
Reference: i think an indexoutofboundsexception would be better here
Candidate: i don't think we need to check if the is is the
Reference: may not be in code you touched, but i would think the getfield_changes method should be renamed getfieldchanges
Candidate: this should be setemptyelement().
Reference: i guess you don't need these maps, since you have those small objects?
Candidate: why do we need the <UNK> here?
Reference: curlies not needed
Candidate: i don't understand why, but it matters, but why do we need to <UNK> the <UNK>
Reference: risks swallowing interruptedexception. worth doing exceptions.propagateiffatal(e). do we want to log it (at debug) when it's the first time we've seen the ssh exception? no strong feelings. certainly don't want
Candidate: why do we need the <UNK> here?
Reference: we can make this static.
Candidate: why do we need the <UNK> here?
Reference: i'd rather see an overloaded constructor in releasehelper and let the old one do this(cclient, false, null, null). the false, null, null part makes the code less readable at this
Candidate: why do we need to clone the array.
Reference: good point! forgot this was the constructor
Candidate: why do we need the <UNK> here?
Reference: minor thing, here there is no need to expose this as a list object (getsources().get(1) won't mean anything), so the return type could be a collection<ianalysismodulesource>
Candidate: this we need to use the the properties?
Reference: move the defaults to the class instead of having every user call the setters.
Candidate: why do we need the getconnection here?
Reference: should this change be applied to other methods of this class as well (getabsolutepath, getrequesturi)?
Candidate: the syserr should be be <UNK>
Reference: this should be called after kafkarecordsupplier.addconsumerpropertiesfromconfig
Candidate: map<string, map<string, string> map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string, map<string,
Reference: but if this is happen because without a reason this exception is not thrown or declared a mostly not fetched runtimeexception is thrown.
Candidate: <UNK> *= 2;
Reference: there are a bunch more of characters and even directory names that are reserved on windows systems.
Candidate: this readasstring(...) instead of .block()
Reference: i think java's merge() function on map handles the case where a key is not present. so i think the following code will insert the value from stats2 if stats1
Candidate: why do we need to check the <UNK> here?
Reference: megre both if statement into single if
Candidate: this should be the <UNK> <UNK>
Reference: can you please add a space after if for consistency (here and in other cases)?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: as with artifactwaypoint, i'm not sure why this class is not final with a package access constructor.
Candidate: i don't think we need to call <UNK> <UNK> <UNK>
Reference: catching a throwable is not a good idea. what's the intention here?
Candidate: do we need need to catch <UNK> here
Reference: i'd create a dedicated mapper for the updatevmtemplateparameters (see [1]), [1] vmmapper.runvmonceparams map(vm vm, runvmonceparams template)
Candidate: nit <UNK>
Reference: possible alternative suggestion: have cramrecordreader.read return the new alignment start.
Candidate: @unyoungwax, do we need to trim entries?
Reference: joao, you are not sure that selection is a istructuredselection here, the first if test could return false becauseof the selection type. please review the entire if block: if (sel
Candidate: i don't need to check if the is the <UNK> is the <UNK> <UNK> is the <UNK> <UNK>
Reference: use getplayersinrange(source.getcontrollerid()) to get a list of players that is not the controller who can interact with the ability.
Candidate: consider using the database object object here.
Reference: do we really need to wait for progress bar invisibility at the start of method? it is expected that workspace is completely ready to perform an operation, isn't it?
Candidate: please remove the method("post")
Reference: seeing that you have used <s> for state, for consistency, i think we should change the operatorstate to have <s> rather than <i>, which is what it is right now.
Candidate: should we throw an illegalargumentexception here?
Reference: that's the method i was talking about. probably we can simplify all of these by adding a method in namespaceawarevisitor. to me it's quite strange to see everywhere the same
Candidate: this should be the <UNK>
Reference: i would suggest we make the sync version call the async version and block on the callback. this reduces duplicated code, and also doesn't serialize the calls, which isn't really
Candidate: please use <UNK> <UNK> <UNK>
Reference: update of keyssupplier field is not mutually exclusive...
Candidate: should we call <UNK> <UNK> <UNK>
Reference: can you remove whitespace before the parenthesis. same below.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: use type chargedto in return responseentity instead of ?
Candidate: should we print the exception here?
Reference: any point logging here as for the streamworkmanager?
Candidate: can be replaced with <UNK> ?
Reference: the logic in testackbeforesync and testackaftersync does sounds good to me. i think for: - for testackbeforesync, you need to ensure callback come before sync and eventually sync will still
Candidate: why do we need this?
Reference: nit: while this follows the above, normal usage is e instead of ex, including in other places in this pr.
Candidate: why do we need the <UNK> here?
Reference: let's try to decouple the ui concerns and the actual link shortening. now the link creation is asynchronous. ideally we should have a listener with a possible method ondynamiclinkready(string url).
Candidate: why do we need to use <UNK> here?
Reference: can this instead? return getnonnullrequestparamvalues(paramname)[0]
Candidate: this should be the <UNK>
Reference: camel casing
Candidate: the syserr should be be <UNK>
Reference: nit: druid format convention is like  1000, null,
Candidate: can we use <UNK> <UNK> <UNK>
Reference: personal preference, feel free to ignore. when printing longs in situations like i prefer to look at hex over decimal.
Candidate: can we use the <UNK> here?
Reference: can be simplified with providers.of(backupregistry);
Candidate: nit: 49
Reference: hard delete needs fixing. token might become invalid is the indexes were compacted where the hard delete token was present.
Candidate: should we move this to debug level?
Reference: same here re: flatmap
Candidate: can be replaced with <UNK>
Reference: the assumption here is that the implementation class of the map (linkedhashmap in this case) will take care of the serialization. however, when reading the string from the db and
Candidate: i disagree with <UNK> <UNK>
Reference: this duplicates findenclosingmethod on cipherblockchainingcheck - should move to expressionshelper or something similar
Candidate: this don't need to check for the <UNK> the <UNK> is the <UNK> <UNK>
Reference: can you use number instead of integer here and below? so, you'd check if it is an instance of number and then cast it to a number and use number's
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: final :d
Candidate: why do we need to use <UNK> here?
Reference: if you have a prestatement visitor, why having this check before ?
Candidate: why do we need to use the payload?
Reference: else if, just for consistency with the rest of the method structure?
Candidate: the syserr should be be the
Reference: isn't this constant? get and set this value once.
Candidate: why do we need this?
Reference: gary, this test still doesn't pass for my windows tail-wrapper: - by default > [message=tail: invalid option -- f, file=c:\users\cleric\locals~1\temp\filetailingmessageproducertests\foo] - with --follow=name --retry -n 99999999 > org.junit.comparisonfailure: > expected
Candidate: please use <UNK>
Reference: would be more readable if entity was called authentity or such. similarly for the other isallowed() method
Candidate: i don't think we need to check the the <UNK> <UNK> <UNK>
Reference: could this (ruleconfigparam) be passed as parameter of hostprocess instead? (it would be easier to use custom configurations per scan, for example, through an advanced tab in active scan dialogue.)
Candidate: debugging state of debugging state of debugging debugging debugging debugging debugging debugging debugging state information debugging debugging debugging debugging debugging debugging debugging debugging debugging debugging debugging debugging debugging state information
Reference: no need for this
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: this seems not being used, just deprecate it?
Candidate: please use gender here
Reference: missing final
Candidate: missing final
Reference: rather than deleting the previous entity, why not just remove the next part on recreating the same entity? since nothing about fs was actually modified.
Candidate: i don't understand what about the remember, the the <UNK> is the <UNK> <UNK>
Reference: the recipients and signature fields aren't checked.
Candidate: i don't think we need to check for the <UNK>
Reference: move this call to the start of the method, since that's generally how it's done.
Candidate: this should be the <UNK>
Reference: ideally this lock should be followed by a try finally, in case something goes wrong.
Candidate: the syserr should be be the <UNK>
Reference: a small code style thing: the else clause is redundant. it could jut be if(forceansi) {return true}; return ansienabled && ansisupported or simply return forceansi || (ansienabled && ansisupported)
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: typo specfied.
Candidate: if we stripe { throw <UNK> } else { if (throwable throwable) { ... } null) { ... }
Reference: id is null when calling from the web layer, so it will result in an unhandled npe please find an alternative value, eg: user id
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this map should be generified as well.
Candidate: you don't need to use the <UNK>
Reference: should this be eventual?
Candidate: why do we need need to the <UNK> here?
Reference: these days we have more robust test helpers like bindingassertionhelper which avoid having to count names and update counts if the testcase changes. there's no need to change this now,
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: system.out?????? use a logger.getlogger(). then trace.. look at how trace is done in other places.
Candidate: if we is the software stripe { <UNK> <UNK> } } } } } } } }
Reference: nit: you can omit the explicit type args here in new hashmap<>.
Candidate: can we use the <UNK> here?
Reference: wouldn't this alter the item that is passed in? that could potentially break plugins.
Candidate: feedid prime feedid is prime feedid
Reference: resources is now just input. remove the variable:  inputstream input = closer.register(targetfile.newinputstream());
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: i see this hardcoded strings in 3 places so far and in 2 different files. can we define them as constants?
Candidate: please use map<> on the <UNK>
Reference: print the tenant id in the log. otherwise we can not figure out to which tenant this error is belonged
Candidate: <UNK> *= 2;
Reference: no need to check if newtext.length() == 0 then ... additionally you are not checking if newtext is a valid hex input but let color.parsecolor decide that for you. this
Candidate: why do we need to use <UNK> here?
Reference: these are opened and never closed, using try-with-resources would fix that, although it's a bit awkward since infiniumgtcfile itself is not autocloseable.
Candidate: should we throw an exception here instead of returning an error?
Reference: spaces around if/catch (we really should have checkstyle running in travis rather than manually reviewing for style errors).
Candidate: should we use the getconnection here?
Reference: you're using the deprecated configuration api. could you update it to use the new one? we're in the process of eradicating all usages of the old api. i already updated
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: replace "roles" with ipentahosession.session_roles
Candidate: should we use the <UNK> properties?
Reference: any thoughts to checking client.isopen()? i vaguely recall cases where that was an important check during system testing. it would be good to see any error behavior here be covered
Candidate: should this be the <UNK> permission?
Reference: i guess xor works but this is a logical test so i think a logic operator != is more appropriate suggestion assert permitall != (rolesallowed != null);
Candidate: should we be the <UNK> here?
Reference: use getordefault to preserve behaviour, rename to fromenvironmentordefault.
Candidate: please import?
Reference: expected and actual sqls are now same, use simpler assertquery overload
Candidate: nit: 4 spaces 4 spaces 4 spaces 4 spaces 4 spaces 4 spaces
Reference: nit: rename to combineclosables/groupclosables and static import
Candidate: we should need to print the exception here to the caller.
Reference: how about setting the log level?
Candidate: i don't think we need to throw an exception
Reference: log error before callback.onerror?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: consistency with other methods: datasemanufacturer is used in other methods, suggestion to use here: databasemanufacturer
Candidate: the syserr is be <UNK>
Reference: use getinstance().logerror() instead of printstacktrace
Candidate: this is eating the exception on the exception
Reference: rewrite: this.apolloenabled = "true".equalsignorecase(apolloflag)
Candidate: this should be the <UNK>
Reference: the action shouldn't fail if: the above & getparam().getdesthost == getvm().getdesthost()
Candidate: please consider extracting this as a local variable. variable, thanks! also, replace code with: return <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK> -> <UNK>
Reference: should not we detect that the cache is full before continuing to read? do we end up reading the lines for rowval twice?
Candidate: why do we need the <UNK> here?
Reference: would it be useful to see these log statements in production env.?
Candidate: why do we need to use <UNK> here?
Reference: this expression is repeated in both if and else branches.why not extract it before the if and reuse in both branches?
Candidate: this should be the <UNK>
Reference: magic number?
Candidate: why do we need to use the <UNK> here?
Reference: nit: redundant local variable. i'm okay with it, but intellij complains :-)
Candidate: why do we need need to the <UNK> here?
Reference: this is quite unclear why the "if" is here. i imagine it's because the createexcelanalyzer is still using a java.io.file? if so then construct the if around that fact so
Candidate: why do we need to check the <UNK> here?
Reference: final #wontfix
Candidate: formatting: { <UNK> }
Reference: is it correct to catch and "swallow" the interruptedexception (and below as well)?
Candidate: what do we want to do the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i guess facet should never be null. is that right?
Candidate: <UNK> *= 2;
Reference: we should think in refactoring a bit this to add a "thumbnail" resource in owncloud-library, but maybe we should merge this first. on the while, some low level details: -
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: this condition is not correct from what i see. when build is null, the result will be always empty. e.g. getusersasset()  will be always returning empty list after the
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: registeron
Candidate: why do we need to tear down the <UNK>
Reference: might be nice to have an overload which sets only groupid.
Candidate: should be be <UNK>
Reference: is "this" necessary?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: the second argument here is the name of calling function, so it should be "start", not "audiorecord".
Candidate: should we be the <UNK> here?
Reference: this constructor can also be private, i think.
Candidate: you don't need to use the <UNK>
Reference: so instead of "using", we can say .withinitialconfig(compositeconfig.builder().withconfigname("helloworld").withapplicationoverrides(...)) i haven't fully thought through how we can add this compositeconfig to the layered hierarchy yet. but ultimately, i really think the
Candidate: i don't think we need to use the anywhere, so we don't need to use the anywhere, but it should be the
Reference: i use pagefactory with ajaxelementlocatorfactory for this.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: like nmfreef, let's import mlrparameters statically by adding import static edu.snu.cay.dolphin.async.mlapps.nmf.nmfparameters.*;
Candidate: please remove the <UNK>
Reference: do we need to do this every time we start the manager or is a one time thing. does indexing a new record not index correctly? would this break on
Candidate: i don't think we need to check the if the is is the software <UNK> so that we don't need to check explicitly)
Reference: bad styling - needs braces
Candidate: can be simplified to <UNK> <UNK> ?
Reference: i don't see a reason to use "block" here, just pass this.
Candidate: should we use moreobjects moreobjects here?
Reference: only one final? or should we make all final?
Candidate: dircacheeditor sure this sure incompatible, sure this sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure sure
Reference: you are only creating this list so you can later iterate over it, why not just iterate over the stream directly?
Candidate: why do we need to the <UNK> here?
Reference: suggest changing to  if (ess.getsettings().broadcastafkmessage()) ess.broadcastmessage()... user.sendmessage()
Candidate: why do we need the getconnection here?
Reference: this can be simplified return "<html><title>google</title></html>";.
Candidate: the syserr
Reference: btw why not rename syncmanager to syncservice?
Candidate: why do we need to here?
Reference: as it is info level that most end users will get to see in their main log, i would suggest to make it a bit more end user compatible, e.g.
Candidate: why do we need to use the <UNK> here?
Reference: might as well work with a realvector instead of a matrix starting from this line.
Candidate: <UNK> *= 2;
Reference: division by zero
Candidate: i don't understand this matters, if we matters, yes but we should be the to the the <UNK> <UNK> <UNK>
Reference: adapted
Candidate: if getstate() != null) { return; } <UNK> { <UNK> }?
Reference: is this path always this way for all kubernetes users? is default ever something else for example?
Candidate: if we is the software <UNK> software <UNK> should be be the
Reference: shouldn't we call super(conf, store, smallestreadpoint) instead?
Candidate: please use <UNK> <UNK>
Reference: shouldn't this be done when a new volume is detected - i.e in the createvolume() flow?
Candidate: what is this happen if the is is null?
Reference: are these two different buttons that alternate?
Candidate: shouldn't this be be the <UNK> ?
Reference: nothing happens with activescope, seems wrong...
Candidate: i don't think we need to use the subdir in the <UNK>
Reference: sorry, i didn't explain this well. assert.state will do the if check for you as well, so we can remove that, too.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: it might be more efficient (or atleast clear) if, in activate(..) you parse the params out into a map using [1] map<string, string> rewrites = parameterutil.tomap(urlrewrites, ":"); and in this
Candidate: please use <UNK> <UNK> <UNK>
Reference: since you are at it, can you please change this to long primitive type? :)
Candidate: why do you need to check on the username?
Reference: you can do method chaining here also? java recipienttorecipientstats.computeifabsent(...) .addresponsetorecipientstats(response);
Candidate: why do we need the <UNK> here?
Reference: add checkstate(type instanceof unknowntype)
Candidate: if <UNK> && <UNK> { return false; } else { return false; }
Reference: we always use {} blocks even for very short conditions: if (id != null) { ids.add(string.valueof(id)); } however i'd keep the cast (string) id instead of string.valueof(id) as the key
Candidate: can we move this piece of this piece of this piece of this piece of this piece of this piece of this piece of the
Reference: you should expect here only instances of type long since you provided a separate method for other ints (integerequal).
Candidate: use iu
Reference: while this will do what you want it to do, note that mistform ultimus does not actually have the changeling ability. this will generate incorrect rules text.
Candidate: i don't need to check for the disk, so we don't need need to check for the disk, so we don't need to check the disk,
Reference: hell no
Candidate: if the != null && <UNK> { return false; }
Reference: this is a code smell. you should have only one path to the super. instead, call this(storagepoolid, null)
Candidate: please use <UNK>
Reference: shouldn't this also be called eventfloodrate?
Candidate: please use <UNK> <UNK> <UNK>
Reference: this should check what was in the environment variable before returning true.
Candidate: i don't need to check for the <UNK>
Reference: this breaks mysql in theory ... defaultbeanloader line 224
Candidate: use <UNK> instead of string concatenation
Reference: check finals
Candidate: you can use <UNK> here as above.
Reference: when you return inline mocks like this, you need to add the mockito.clearinlinmocks() or else it won't be garbage collected.
Candidate: why do we need the <UNK> here?
Reference: i would rather simplify this to  final list<testinfo> sortedtis = new arraylist<>(testsformutant);
Candidate: why do we need the <UNK> here?
Reference: duplicate police, hands up! :police_car: why not just do return !isanyempty(css) at this method? or return !isnoneempty(css) at isanyempty() method? and the same for the methods isanyblank() and isnoneblank()...
Candidate: i don't think we need to check if the is is the
Reference: exception, so stderr
Candidate: why do we need to use getcredentials here?
Reference: i'm not sure if this is required. i think the caller should be shutting down and not the start() method. not sure if this is huge change.
Candidate: please use syserr
Reference: { guid idtoremove = nic.getid();
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: ign? in-game name? if so and if it needs to be short i suppose that's alright :-)
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: that's why concurrenthashmap made it work (it internally synchronizes on its instance)
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but it matters, but i don't understand why, it matters, but it is
Reference: do we need a new instance of the selector each time selectexecutor is called ?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: split this line ?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: can't we use some standard format constant instead of this adhoc format?
Candidate: the syserr
Reference: update this to using the public beginrecognizecontent api
Candidate: this should be <UNK>
Reference: what if getenv returns null?
Candidate: nit: can be simplified to: java <UNK> = <UNK> hostinfo = (string <UNK> = <UNK> == false) == null) { <UNK> (string <UNK> = <UNK> false) == null) { <UNK>
Reference: i would do this instead: initialize(absoluteuri, contextpath, (initdata != null && initdata.canbecached(absoluteuri)) ? initdata : null); iow, no point in spending time on checking if the cache can be used
Candidate: can you use the fqns in the constructor?
Reference: minor: bloomfile
Candidate: i don't understand why, but i haven't encrypted, why, but it is encrypted, but i don't understand why, but it matters, but i would be nice to
Reference: could pass in mode too when finding by path
Candidate: we should need to log.isdebugenabled() check log.isdebugenabled() in the software kubernetes situation. i don't think we need to do we need to check the getcredentials
Reference: i would call this something besides dnd, it could be mistaken for drag n drop which has the same acronym.
Candidate: why do we need the <UNK> here?
Reference: lambda
Candidate: why do we need to use <UNK> here?
Reference: you should use splicespark.getsession() here
Candidate: can we move this logic into a separate method?
Reference: what if get returns null? i think in that case rename should immediately return false.
Candidate: <UNK> is setemptyelement().
Reference: again, this should probably use the implementation from abstractset to ensure equals and hashcode are correct for set.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: acquisition of all locks should always come outside (just before) entering the try-catch. because if something goes wrong, the finally block is going to try to unlock a lock you
Candidate: should we throw an exception?
Reference: for experiments that don't have an experiment type associated with should have the generic experiment type set automatically. this will make the upgrade for users that have already experiments seamless.
Candidate: can we return <UNK> <UNK> <UNK>
Reference: should probably not return false when len or offset is negative.
Candidate: i don't understand this matters, this matters, if you matters, this matters, this matters, that this interfere with a millisecond
Reference: should there be an assertion that the iterator actually returns something?
Candidate: should we use snapshotid in the constructor?
Reference: use slf4j string interp
Candidate: why do we need to use <UNK> here?
Reference: can we use datatools.parseinteger here to handle the numberformatexception?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i think both of these should stay non-final since it's possible to provide more efficient implementations in subclasses.
Candidate: why do we need the <UNK> here?
Reference: why the lazy? this will eventually always be called when build is called
Candidate: why do we need need to be <UNK> here?
Reference: curious why you throw illegalstateexception in the other methods but not these?
Candidate: the syserr should be be <UNK>
Reference: i don't get why the chosen name should be different between this case and the one above (when schema == null). does that matter ?
Candidate: if we is the software stripe { <UNK> } else { if <UNK> { <UNK> } } } } } } } }
Reference: is it worth testing what happens if you try to deploy a data source that does not exist?
Candidate: should we be <UNK> here?
Reference: this is now never null.
Candidate: please use <UNK>
Reference: what if there is no first ?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: if it's already suspended due to watermark then i think suspend should be a no-op (other than setting a user-suspended flag) - the actual suspend status of the channel should
Candidate: should this be <UNK>
Reference: as mentioned above: please filter out nulls and provide some unit tests to cover those cases.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: it's hard to read the long if statement. you could use _shouldrefreshcache.orelse(false)
Candidate: should we be <UNK> here?
Reference: what happens if i send both urls and tag?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: can be written as !double.isinfinite(doublevalue)
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: not related to this changes, but wondering if we need to construct immutablebyteswritable object. can this method impl be reduced to:  return cell.getrowarray()[cell.getrowoffset()] != queryconstants.separator_byte;
Candidate: this should be the <UNK> <UNK>
Reference: nit: i'd suggest we have a separate recycle() function rather than piggy-backing on close with additional flag, since the clean is always true, i.e. we would always just 1) write
Candidate: should we check if <UNK> != null) { <UNK> } <UNK> } } } } } }
Reference: is this block still needed? because it was a workaround
Candidate: can we be expecting an exception when expecting an argument.
Reference: here you may want to create a dmncontext actually from dmnruntime instead
Candidate: no, this should be "true".
Reference: when you work with temp files, please use the java.io.file api. use the function: file.createtempfile(prefix, suffix) and work with file tmpfile instead of string filename.
Candidate: this should be the <UNK>
Reference: return type should be changed to iterator
Candidate: why do we need to check the <UNK>
Reference: i think that a single (warn) message should still be emitted. something like: "there are intervals that are failing to liftover, but logfailedintervals is false. to see what intervals have
Candidate: i mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned above, mentioned mentioned above, mentioned mentioned above, mentioned above, you mentioned above,
Reference: use <link_0> here. way more robust.
Candidate: assertequals(1, <UNK>
Reference: not supported yet
Candidate: if <UNK> != direction.incoming) { <UNK> }
Reference: you should be able to replace dbfacade.getinstance() with getdbfacadeinstance()
Candidate: spelling dynamic checkargument misleading. hope dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic dynamic
Reference: should removereplica return a success boolean like addreplica?
Candidate: why do we need the <UNK> here?
Reference: again, i was wondering, what is the thinking behind making close() final, and process() non-final.
Candidate: i don't think we need to close the dispatcher and then we don't need need to do we need need to check on the build.
Reference: this is calling super.setattribute() twice is that intentional?
Candidate: please use <UNK> <UNK> <UNK>
Reference: rename to setifabsent
Candidate: the syserr should be be the <UNK>
Reference: bundlekey or bundleexternalkey (no space).
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: use commonhelper.assertnotnull
Candidate: why do we need to <UNK> here?
Reference: requestdto.getbaseparam().setuserid(getloginname());
Candidate: please use <UNK> <UNK>
Reference: the 'when' can be dropped from the log statement.
Candidate: please use <UNK>
Reference: nit: more compact alternative.  int i = s.length() - 1; while (i >= 0 && character.iswhitespace(s.charat(i))) { i --; } return s.substring(0, i + 1);  similar for treamleading.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why do filters need access to the results of previous filters? is it so that we can skip call screening if something else blocks the call?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: print out the trash path.
Candidate: why do we want to use the here?
Reference: add the new queries at the end of the cleanup run?
Candidate: <UNK> *= 2;
Reference: @fabriciofx let's use text matchers from cactoos-macthers to assert text implementations
Candidate: @hdouss why do this.
Reference: what is the purpose of this override? it seems to just call super.
Candidate: why do we want to use the <UNK> <UNK> <UNK>
Reference: if its needed to be cleared in init --force please do cleanup there too.
Candidate: why do we need to use <UNK> here?
Reference: much as i prefer !isempty over size() > 0, the latter is used everywhere else in this method, so switch to that?
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: use math.tointexact(index) instead of a cast (int) index.
Candidate: the syserr should be be the
Reference: is it possible for this vmgroupmapping to be null? looking at the code this seems an impossible case.
Candidate: should we be the <UNK> here?
Reference: bufferlist should not be null - you should throw a illegalargumentexception
Candidate: can we make this private?
Reference: nit: annotations usually go on the line above, like with @override
Candidate: we should use the exception here instead of <UNK>
Reference: remove empty line
Candidate: can we use the iterator here (with <UNK> <UNK> <UNK>
Reference: what kind of operation would throw illegalargumentexception? i'd usually expect a 4xx for bad input.
Candidate: i don't understand what if we do, but we don't want to do we want to do we want to do we want to do we want to do the
Reference: i am unsure about this one. before this, we were returning a live stream, and after this we may be returning a closed stream.
Candidate: why do we need the <UNK> here?
Reference: this map is not required to build rulesbydbdeprecatedkey. loop at line 220 can easily be changed to work directly with the set<singledeprecatedrulekey>
Candidate: should we use the getconnection here?
Reference: the write lock should be locked ahead of line 67 (before getreplicaidsbystate() is called). otherwise there is a race condition to miss remote leadership change.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: logging could be improved here to use parameterized messages <link_0>
Candidate: why do we need to <UNK> the <UNK> here?
Reference: this code is the same in multiple classes. it would be great to reduce the code duplication.
Candidate: typo: <UNK>
Reference: it's not ideal to have this hardcoded, but then again we do the same for cassandra
Candidate: why do we need to use the <UNK> here?
Reference: remove
Candidate: should this be be the the presenter.
Reference: this normally shouldn't happen. so could some log.warning be done?
Candidate: should we be the fixture.
Reference: shouldn't we also update super.latestasynccheckpointstartdelaynanos?
Candidate: why do we need to the <UNK> here?
Reference: this causes a compiler warning because applicationcontextprovider.getapplicationcontext() is a static method. perhaps it shouldn't be static - but i have run the application with this as a static call and
Candidate: should we throw an exception?
Reference: i'd prefer an alert instead of a toast. the later can be easily missed. great job!
Candidate: should this be <UNK>
Reference: the rule speaks about code readability. i don't think readability of these methods are a problem. it's a rather bigger problem to call something "local" that is not local. as
Candidate: why do we need to mock the <UNK>
Reference: use !isempty() check
Candidate: do you need need to use anywhere anywhere anywhere anywhere anywhere
Reference: this should be synchronized as well
Candidate: should this be <UNK>
Reference: same deal as with filesender.
Candidate: do we need to check if <UNK> != null) || <UNK> { <UNK> }
Reference: so, we write the bloom filters into the row-group. it means we have to seek to the row-group and read from them even if the whole row-group could be dropped
Candidate: use <UNK>
Reference: if you return here, you don't need to the keepwaiting boolean.
Candidate: why do we need the <UNK> here?
Reference: what happens if no questionnaire is found for the give id
Candidate: this should be the <UNK>
Reference: why not set javahome property for all launches to be explicit ?
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: i think we can ignore codacy on this one going forward as it's possible to merge even when it's complaining. perhaps we could even configure codacy to ignore it.
Candidate: can we make sense to use the in the pr?
Reference: there's a mediastreamimpl#getrtcpterminationstrategy() method which amounts to rtcptransformenginewrapper.getwrapped(). why not use it here and in the method setrtcpterminationstrategy and, thus, simplify the source code for the reader?
Candidate: we should need to check if <UNK> { <UNK> } else { if (throwable { null) { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> } }
Reference: incomplete
Candidate: why do we need to use <UNK> here?
Reference: invalidate() acquires locks, and i'd rather not block while holding the shared topology lock. ideally i'd like only datacontainer.compute() to be done while holding that lock.
Candidate: i disagree with the <UNK> of the <UNK> <UNK> <UNK> <UNK> <UNK> software <UNK>
Reference: ![major](<link_0> the cyclomatic complexity of this method "execute" is 14 which is greater than 10 authorized. [![rule](<link_2>](<link_1>
Candidate: do we need to check the <UNK> if <UNK> == <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> {
Reference: make a static logger
Candidate: i don't understand if we matters, this matters, but if we matters, but i don't understand this matters, if the matters, but i don't understand this matters, if you matters,
Reference: still a bit of code left over here from the old code, could you remove this?
Candidate: you should be the <UNK>
Reference: see note in jqueryhelper. needs a nullcheck if null is a possible return value of jqueryhelper.getfieldvalue(selector).
Candidate: why do we need to check the <UNK> <UNK>
Reference: this is no correct anymore. it should be 2, 3, 4, 5 now.
Candidate: why did you move this line
Reference: compute can remove entries, too.
Candidate: unused
Reference: i would change the variable name. monthbefore is missleading. it should be something like nextmonth.
Candidate: why do we need to mock <UNK> here?
Reference: log the exception here
Candidate: you don't need to use the
Reference: the check should be done in the sslconfig.builder.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: i'm not sure about this change. why get the plugin from the store when it's in the event?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> <UNK>
Reference: i think we could avoid using the ternary operator since i could not find any other use case in the code base and it could be confusing at times
Candidate: i don't think we need to check for the <UNK>
Reference: want to use the property from taskproperties instead of the default.
Candidate: why do we need to use <UNK> here?
Reference: can the executor be user provided? (e.g. icompletablefuture.andthen user can provide the executor) user executor returning this exception may not always mean that the client is being shutdown, does it?
Candidate: should we log the exception in the exception if we { return; } <UNK> } } } } }
Reference: just curious, not a problem, but why set sysnamelist to null before setting it via the map operation?
Candidate: can we move this to the <UNK> (my we don't need to call <UNK> <UNK>
Reference: sql 'like' is case sensitive
Candidate: this should be the <UNK>
Reference: how can you confirm that these two objects are unretired objects and no more retired objects in this list?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: hardcoded string "id"
Candidate: you can use assertj's <UNK>
Reference: y+1 <- yeah... nup. squashing such things simply hurts my eyes
Candidate: why do we need to check the <UNK> here?
Reference: connecting an already shutdown runtime is not a good idea. probably we should add a check to avoid that (not in this pr). just create a new runtime.
Candidate: this should be the <UNK>
Reference: please avoid magic numbers - either add cmdentity.hasenginesessionseqid() or add the -1 as constant in ssosessionutils (or to any other appropriate class) or static method to ssosessionutils.hasenginesessionseqid(sessid)
Candidate: this should be replaced with <UNK> <UNK> clazz, <UNK> clazz,
Reference: while *excessively* unlikely there is still the possibility of this producing a conflict. perhaps we could get the current epoc time in milliseconds and use that number instead? unless we
Candidate: can you use <UNK>
Reference: you should have an @afterclass method that unsets this. using @mockejbstrategeyrule could save you the trouble, iirc
Candidate: why do we need the <UNK> here?
Reference: this message is shown to user as well as position of the error. user needs to know what to do with this. 'likestring' is not a commonly known term :)
Candidate: the syserr should be be the
Reference: some useless white spaces here.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why parallel stream?
Candidate: please use <UNK> <UNK>
Reference: should this be a bundle message?
Candidate: should this be <UNK> <UNK>
Reference: if (!templateoptions.getnetworks().isempty())?
Candidate: please remove method("post")
Reference: looks good!
Candidate: typo: <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: nit: if statements could be combined to reduce indentation
Candidate: i don't think we need to do we need need to check the getcredentials for the <UNK>
Reference: as we have discussed, we sould have the response/resquest rule here also. i am unsure wrt to the use of .appendsuper(super.equals(other)), i'd favor a short note of @buehner here.
Candidate: please use objects.isnull
Reference: consider using lambdavalidator to be able to add a lambda for the tostring method of this validator.
Candidate: use <UNK>
Reference: the following avoids having to parse the format string and creating a temporary string. java string bitcoinuri = matcher.group(); outputbuffer.append("<a href=\"") .append(bitcoinuri) .append("\">") .append(bitcoinuri) .append("</a>");  come to think of
Candidate: please use <UNK>
Reference: this is not needed, please leave the code "as is". null is never instanceof of anything.
Candidate: @unyoungwax, prefixing this to <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: the local variable *listdata* should be renamed to *listdata* as per local variable naming conventions.
Candidate: i don't think we need to do we need to synchronize on the so we don't need need to do we need to synchronize on the <UNK> hand,
Reference: java return supportedproperties.stream() .filter(propertiesmap::containskey) .findfirst() .map(propertiesmap::get) .orelse(null);
Candidate: you don't need to use the <UNK>
Reference: is it intentional to remove synchronized here?
Candidate: why do we need the <UNK> here?
Reference: need to set timestamp
Candidate: i disagree to <UNK> costs the <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs <UNK> costs the <UNK> costs the <UNK> costs the
Reference: appendlogs
Candidate: why do we need to use <UNK> here?
Reference: i would say do an instanceof check and throw a meaningful exception.
Candidate: this should be the <UNK>
Reference: i suggest passing all of the variables we access in this constructor viasustainedconnectionworker.this.spec to be switched to parameters we pass upon instantiation
Candidate: you don't need to use <UNK> <UNK>
Reference: should throw a meaningful exception because it's not meant to be used in a context where snapshots would be needed.
Candidate: this should be <UNK>
Reference: kuraerrorcode.configuration_snapshot_not_found in my opinion
Candidate: use <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: you don't need to make this a list, just set it to the double[].
Candidate: use <UNK> instead of stringbuilder?
Reference: wouldn't be good to use the return value of iset#add instead of calling iset#contains + iset#add ?
Candidate: why do we need the <UNK> here?
Reference: @adavid9 can you please add throws ioexception and replace original catch (exception) with following:  catch (ioexception e) { throw new artifactstorageexception("unable to undelete trash for storage " + storageid
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: were we using this is_fwd_param for anything other than the backend publishing?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this produces findbug warning: > 06:13:08 [info] sequence of calls to java.util.concurrent.concurrenthashmap may not be atomic in org.jboss.weld.bootstrap.specializationandenablementregistry$beansspecializedbybean.apply(bean) ["org.jboss.weld.bootstrap.specializationandenablementregistry$beansspecializedbybean"] at specializationandenablementregistry.java:[lines 79-115] i think this should work:  atomiclong value
Candidate: if the != null && <UNK> && <UNK> { <UNK> }
Reference: don't swallow exception.
Candidate: why do we need to use the <UNK> here?
Reference: wrong method name in the error message.
Candidate: i think this should be the specific?
Reference: avoid duplicate code. just call addonsubscriptionschangedlistener(listener, listener.mexecutor).
Candidate: if <UNK> != null && <UNK> { <UNK> } else { if <UNK> { <UNK> } else { ... }
Reference: couldn't the execute(httphost host, httprequest req) method be used here? or is the default context somehow breaking things?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: no null check for zone?
Candidate: why do we need to use the here?
Reference: shouldn't we throw the sqlexception? or at least log it
Candidate: why do we need to here?
Reference: maybe would be good to talk to reddeer people about making org.jboss.reddeer.eclipse.wst.server.ui.view.server.serverstatecondition public as this abstract is just copy-paste of that private class.
Candidate: i import?
Reference: investigating....
Candidate: should we be schedule() { <UNK> } <UNK> } } } } } } else { if (throwable { <UNK> { <UNK> { <UNK> } } } } } }
Reference: same, pass the builder object in
Candidate: this should be the <UNK>
Reference: shall we fail here since we don't expect exception?
Candidate: formatting: } else { if (...) { }
Reference: why do you search for the same path twice? is it a test case to validate the results won't be merged?
Candidate: please import?
Reference: this will never be true, since we just checked that node is instanceof iastdeclarationstatement above.
Candidate: please confirm that a treeitem
Reference: this won't change the actual value. you'll need to set the actual field (or use the existing methods in entity).
Candidate: this should be the <UNK>
Reference: did this have any effect? don't we want to shut down the bus _after_ we disconnect from the cluster? by shutting down the change bus first, might we not lose
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, but it matters, what is happening.
Reference: is this test useful? i don't think so...
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: system.out? booh!
Candidate: should this be the <UNK>
Reference: would it be possible to just include/set the hostname when we construct the health object instead of setting it over here? i feel like it is more bug prone to
Candidate: why do we need the getconnection here?
Reference: style inconsistency: space after if
Candidate: why do we need to use the <UNK> here?
Reference: this should stay in warn
Candidate: this should be injected, so we don't need to establish the events on the construction.
Reference: should this be an info log? it feels like a debug log to me.
Candidate: why do we need the <UNK> here?
Reference: this is used a few times, could benefit from being a const or defined in the set up. depends if its necessary
Candidate: <UNK>
Reference: getmainast() i counted 4 invocations of this method, please extract to variable
Candidate: why do we need to check for the sides of the <UNK>
Reference: the same here as in updateuploading()
Candidate: should we throw an exception here?
Reference: same instance on both cases
Candidate: <UNK> *= 2;
Reference: prefer a local variable as this method could be called many times because the labelandiconrefresher is created for each abstractnotselectableshapenodeeditpart
Candidate: i don't need to check if (state != null && <UNK> && <UNK> { <UNK> }
Reference: wrap or add a variable
Candidate: why do we need need to call <UNK> <UNK>
Reference: why was it necessary to move the js from resources/org/jenkinsci/plugins/p4/console/p4consolenote/script.js into the generated html?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i would error out here. a blacklisted algorithm should never be allowed for use.
Candidate: should we be the <UNK> here?
Reference: i would prefer to use configconstants.getconfigfolder().
Candidate: please remove the method("post")
Reference: remove one ~is not a~
Candidate: if <UNK> != null && <UNK> && <UNK> { return false; }
Reference: i think this is something wrong for this component contract. we can't constantly poll from the source until null. the point of the receive() is to get file or nothing.
Candidate: should we throw an exception?
Reference: checking same condition twice
Candidate: should this be the <UNK>
Reference: why are you clearing their inventory? i dont remember that ever being a thing...
Candidate: why do we need to use <UNK> here?
Reference: this wrapping is hard to read since the ifpresent() is part of the lambda above. i'd write it like java new hivefileiterator(path, filesystem, directorylister, namenodestats, fail).foreachremaining(file -> splitfactory.createinternalhivesplit(file, getvirtualbucket(bucketcount, file.getpath()))
Candidate: should we use the <UNK> here?
Reference: see stringutil.isempty
Candidate: should this be the <UNK>
Reference: maybe use list interface?
Candidate: what's returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning returning
Reference: correct keyword order
Candidate: please use <UNK>
Reference: maybe also test a repeated key? should just work.
Candidate: can you use the fixture.
Reference: ![critical](<link_1> 'severity: critical') either log or rethrow this exception. [![rule](<link_2>](<link_0>
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: add if debug
Candidate: i don't think we need to check the <UNK>
Reference: suggestion annotation.maxcharspercolumn(), annotation.ignoretrailingandleadingwhitespace());
Candidate: should this be the specific? if we { null) { throw new <UNK> } { throw new <UNK> { throw new <UNK> { ... }
Reference: gotcha. and we don't want to create the table when the worker is run the first time, probably because we don't have any mechanism for that?
Candidate: why do we need to use the here?
Reference: can't the whole test be boiled down to: if (longlinecnt > (longlinesthreshold * nonemptycnt) / 100) { this will also work when threshold is 0.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: just a thought. can you please extract out the common portions of on<actions> although i don't see any gain apart from the code size reduction. same for the window displaying
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to the the
Reference: change breaks equals contract, because equality doesn't take into account subclass names and this new hashcode does. to avoid that, use objects.hash(anchorvariabledemand.class.getname(), ...)
Candidate: can you use <UNK> <UNK> <UNK>
Reference: replace with return this == other;
Candidate: this should be the <UNK>
Reference: you should also support \\doctrine\\common\\persistence\\objectmanager::getrepository for people getting the repository from the entitymanager
Candidate: i confusion: if <UNK> == null) { return; } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: shouldn't we be revert everything and throw an exception since it failed to update the carbon profile? why are we logging it and carrying forward?
Candidate: @unyoungwax, do you need to check for the refresh?
Reference: all possible paths must be in the index, not just the first path.
Candidate: shouldn't this be an empty set?
Reference: a call to license validation is required after to fail the nomad prepare phase if needed since we cannot rely only on client-side validation. topologyservice.getlicense().ifpresent(l -> licenseservice.validate(l, updated))
Candidate: should we use the exception here?
Reference: no reason to delete files: temporaryfolder rule takes care of that.
Candidate: can we use <UNK> <UNK>
Reference: can we include some of the agent details in the log message when this happens? i.e. what agent was affected?
Candidate: why do we need the <UNK> here?
Reference: i was told all resources have to be closed. connection is a resource, so i miss try/finally/close around it.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: maybe a shorter way to write these inputs is: byte[] input = asbytes("1\n\r2\n\r3"); private static byte[] asbytes(string in) { return in.getbytes("utf-8"); }
Candidate: why do we need to mock here?
Reference: grafts should be volatile, and use a volatile safe pattern here: static state { final filesnapshot snapshot; final map... grafts; } private volatile state state; state s = state; if
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ?
Reference: &&?
Candidate: i think this should be used in the dictionary, you can call (state .stream() <UNK> -> <UNK> <UNK> .collect(collectors.tolist());
Reference: same as above, no need to re-add the product here. the one you've edited is the same that the pool already has a reference to.
Candidate: why do we need to use the here?
Reference: if the default is null, you may use caughttypes.get("baseexception")
Candidate: can we use the <UNK> here?
Reference: (nit) reformat (or just put 3600)
Candidate: should we be the specific?
Reference: if there are a 1000 pipelines with 3 stages each (say), and a plugin wants to handle everything, won't this loop become slower and slower, because of the contains on
Candidate: this should be <UNK>
Reference: i think this should use the full constructor  webpage.newbuilder().build();;
Candidate: why do we need need to the <UNK> here?
Reference: it doesn't make sense to have a null value here. we should fail with a null key or value
Candidate: why do we need the layout here?
Reference: r.getstring("category") doesn't have to be in the try/cactch
Candidate: why do we need the <UNK> here?
Reference: don't need a thread for this since it is a one store shutdown
Candidate: i don't understand this matters, if we matters, but we don't need to check if the is { <UNK> } <UNK> } <UNK> { <UNK> }
Reference: you would want to check failurecount value here inside the if. if it is zero, you would want to return false. otherwise we could miss a success.
Candidate: i don't think we need to check if the == null) { <UNK> } <UNK> <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: instead of using addcandoactionmessage and return false, you can use failcandoaction method that does both.
Candidate: i don't think we need to check if the is is null.
Reference: this is a blocking call.
Candidate: do we need the getconnection here?
Reference: setparent is missing? is this good or bad?
Candidate: can you use syserr
Reference: i am currently trying to remove coreregistry usage. the assetmanager can also be obtained via depenendcy injection. e.g. by adding a private assetmanager field with an @in annotation. the registration
Candidate: i don't think we need to log the exception if the is is the software exception but we don't need to do we need need to the
Reference: remove tostirng
Candidate: please use <UNK>
Reference: please remove this line
Candidate: why do we need this?
Reference: i think you actually need to count the number of matches: integer.bitcount(format.roleflags & parameters.preferredroleflags)
Candidate: <UNK> *= 2;
Reference: you probably want this to be a higher level - internally most things aren't logged at debug. i realise that if a node is down this could cause a bit
Candidate: why do we need the exception here?
Reference: can use the string constructor with explicit charset instead (charset.forname("utf-8") and remove the try-catch.
Candidate: should this be the specific?
Reference: could you make this derivativetmppath? i seem to be having a hard time following which paths are landing in which variables since everything is derivatives.
Candidate: can be replaced with <UNK>
Reference: a little simpler to delegate to the new constructor.
Candidate: why do we need to use <UNK> here?
Reference: i believe it's redundant binding.
Candidate: why do we need to the <UNK> here?
Reference: should be extracted to its own method i think.
Candidate: storagetype should be be <UNK>
Reference: logging should be done where the exception is catched rather than where it's thrown. the message is already in the exception
Candidate: should we throw an exception here?
Reference: mock
Candidate: why do we need to use <UNK> here?
Reference: add the reason for dropping message?
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: put content in 1 line as many as possible.
Candidate: nit: dont declare the local vars closer idea. otherwise, most stuff works most easier read read. read read read read read read read read. read read read read read read.
Reference: suggestion .withsystemerrormessage("failed to initialize 7-zip: %s (%s)")
Candidate: can we use <UNK> <UNK> <UNK>
Reference: null check
Candidate: should we throw an exception?
Reference: should have an assert or some check that remotetools is found.
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: what is the need for a postfix here?
Candidate: why do we need to here?
Reference: shouldn't be there a negation?
Candidate: thank you for you. for you.
Reference: was there an error coming out of this code?
Candidate: do we need to permission?
Reference: can we add remote? i assume that might add useful debug info.
Candidate: use stepverifier instead of the try-catch-fail
Reference: the default value should be false for barrierconsumedchannels, otherwise it seems inconsistent with the variable semantic. only after task processing the barrier from respective channel, it should be set true.
Candidate: why do we need need to be <UNK> here?
Reference: how does this test work?
Candidate: why do we need the <UNK> here?
Reference: where is the assert?
Candidate: iterable<integer> = <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK> <UNK>
Reference: it might help prove out the contract if a line was drawn here between the relying party, the request, and the final saml2authenticationrequest instance. for example, i'd probably do authnrequest.getdestination()
Candidate: i don't think we need to check the the state of the <UNK>
Reference: is null a valid input value here at all?
Candidate: if (state != null) { <UNK> }
Reference: what if you attached a new network to a nic? it won't have reportedconfiguration, but it is attached.
Candidate: should this be the username?
Reference: >object [](start = 14, length = 6) why not using string? #resolved
Candidate: stringutils.isnotblank()
Reference: please use a more normal looking address everywhere. e.g. <link_1> or <link_2>
Candidate: why do we need to mock <UNK> here?
Reference: awesome :-)
Candidate: can we be able to be able to be able to be able to be able to be able to be able to be able to "tables" ?
Reference: need this? don't we have enough spew in log already around assign?
Candidate: what happens if the is is the
Reference: should this not be a double? <organisation
Candidate: please use <UNK>
Reference: setname("noop");
Candidate: this should be <UNK>
Reference: just a minor thing that these objects can be moved into line 125.
Candidate: {}?
Reference: i think if you inflate with the attach parameter set to true, you won't need this line (here and elsewhere).
Candidate: this should be <UNK>
Reference: debug statement?
Candidate: please use <UNK> <UNK> <UNK>
Reference: {] seems like a typo
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but i don't understand why, but it matters, afaik.
Reference: node with idx = grid_cnt - 2 is also a client node.
Candidate: why do we need need to <UNK> <UNK> <UNK> <UNK> ?
Reference: can use map<string, ?> flags = immutablemap.of("name", "controller targets tracker");
Candidate: should we use <UNK> <UNK> <UNK> <UNK>
Reference: given this is on transactional path, keeping a list of scoreboards parallel to m_scoreboardcontainers is good for performance.
Candidate: <UNK> "config job.name is missing" ?
Reference: we know scope here because of if statement, so no need to concat scope variable with slash
Candidate: should we be the <UNK> here?
Reference: random seems like an odd name. something like rtp, randomtp, or randomteleport
Candidate: why do we need this?
Reference: just create a keep list using new arraylist<>(fieldstokeep)
Candidate: the syserr should be an invalidator
Reference: stream must be closed with resource at the time it is created.
Candidate: hmm... you don't need to check the <UNK> the <UNK> is the
Reference: why are you dividing by 1024 again here, when getfilesize() already does that? and the call to getfilesize below does not do that
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: let's use if (genericutils.isnotempty(headers) && headers.contains(...)) just in case *null* is passed
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: lets add the cnf folder to the tableviewer so we may need to add more than just bndworkspace.getallprojects() since that doesn't include the cnf project.
Candidate: do we need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: could we please do this as a single query for all patches within this patch set that this user has reviewed, and then do a hash join here in java?
Candidate: we should need to check if the is is the software <UNK>
Reference: maybe we should add to this message that the limit was set on a topic and can be changed on it.
Candidate: do we need to permission?
Reference: this method can be written better. we should check only programenrollment created by task action. verify if all fields are filled correctly. check also if programenrollmentlist has 2 objects
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: nit: make this a string constant somewhere and use it at both of the logging sites
Candidate: i think this happens <UNK>
Reference: !pluginconfigurations.isempty() is the preferential way to do this.
Candidate: should we throw an exception here?
Reference: do we need this clear() call? "toclean" is not used anymore.
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: not sure what you mean.
Candidate: this should be the <UNK>
Reference: hashcodeutils hmmm, i see, this id used by the hash code.... not sure where this calculation comes from to be honest, i have seen this in the old widgets, if
Candidate: can be replaced with <UNK>
Reference: please use english only for messages.
Candidate: i don't think we need to throw an exception if the throws validationexception.
Reference: an empty string seems different than a collection with no items in it (which is what was returned before). is this correct? it may account for why those json files
Candidate: this should be the <UNK>
Reference: huh. why would this be null? isn't it just in the activity layout?
Candidate: this fail()?
Reference: i think this close is redundant since assertexpectednumberofvariants closes the iterator, and the other call sites don't manually close it. having said that, i think the tests would be much
Candidate: why do we need this?
Reference: throw exception instead?
Candidate: why do we need need to be overridden?
Reference: invert if condition
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: please use stringutils.equals
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: what about segments that partially overlap the interval ? earlier they were also being returned as usedsegments, i think we need to preserve that behaviour.
Candidate: why do we need to the the sizes of the sizes properties?
Reference: add a util method boolean issingletopic(readableconfig). it can also be used in sink side.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: 1970
Candidate: why do we need need to the <UNK> here?
Reference: similar approach here, maybe create a function to do this test.
Candidate: should be be the <UNK>
Reference: why is this exception ignored? (except for a log message)
Candidate: i don't think we need to check the <UNK>
Reference: it seems that we should check this in resourcesetchanged
Candidate: the local sort sort sort sort sort sort creates sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort
Reference: you could use preconditions.checkpositive(int,string) method in the same way as it's used below. it does logically the same thing as this conditional statement.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand
Reference: the parameter needs to be 1 since the backup model node is one level below the cache
Candidate: this should be <UNK>
Reference: this probably won't work as expected. you do not know the rest of the where condition in here.
Candidate: do you want to use <UNK> <UNK> <UNK>
Reference: else branch is not needed
Candidate: why do we need the <UNK> here?
Reference: externalize log
Candidate: i don't think we need to check for the <UNK> the site.
Reference: you need check rc first. if rc is not ok, then fail readcallback. otherwise do the logic to read actual entry.
Candidate: why do we need need to the <UNK> here?
Reference: extract name.tolowercase() as a local variable?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: variable names shouldn't start with a capital letter
Candidate: the syserr should be be the
Reference: only spawn items serverside, this creates clientside entityitems
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: so how is doing getitems().add(item) going to work in this scenario? it obviously won't be added to the positions map.
Candidate: please use <UNK> <UNK> <UNK>
Reference: can't we safely throw a rnfe on every 404, without checking the method and path?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: free?
Candidate: please use <UNK> <UNK> <UNK>
Reference: i guess that the project state could be moved as constant to the client lib (we currently have lots of places where we use a "running" to check for pod
Candidate: can you use <UNK> <UNK> <UNK>
Reference: i would rather not put a number in the callback variable, something like: callbackiftimeout
Candidate: should we log snapshotid in the log message?
Reference: how about check whether the type of a field is comparable in shouldpushdownunaryexpression method ? then the logic of binaryfilterapplies need not to change
Candidate: can we move this into a separate method?
Reference: i really don't like this message in fact... "expected" does not make sense. i would prefer to have "this call can throw an exception" instead, and ideally, even the name
Candidate: why do we need need to here?
Reference: i don't believe this is necessary - we'll never get a delivery after a cancel or cancelok, but i suppose it doesn't hurt, except for the (small) overhead.
Candidate: i don't think we need to catch the exception, so you don't need need to do we need need to catch the
Reference: method calculate has 9 arguments (exceeds 4 allowed). consider refactoring.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: these 2 lines can be factored into 1: user user = users.signin(user.admin()). btw, do we really need admin?
Candidate: why do we need to use the here?
Reference: this does not make sense, you are doing a write and locking on read ?
Candidate: if we getparameters().getstoragedomainid()
Reference: * the check should be on storage domain. * so the change in ie50e7dd9 is no longer relevant?
Candidate: <UNK> should be replaced with: <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: wrap super.close() with a try/finally so the channel is always diconnected
Candidate: i too, too, too, too, too, too, too, too, too, too, i think.
Reference: i think this check will never be true, therefore it's not required.
Candidate: we should need to do we need need to the <UNK> <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: please keep one var per line.
Candidate: should we catch exception here?
Reference: databaseutils.makeplaceholders(1) should be replaced by the literal ? in the string.
Candidate: suggestion return <UNK> ?
Reference: what if organizationdiscoveryintervalmillis is less than 1000? use milliseconds instead
Candidate: why do we need this?
Reference: new echo server for every test or will a single one for all tests suffice? if a single one will suffice, then you could declare all variables used here as
Candidate: can we use weights of the weights of <UNK>
Reference: use ds3docspecemptyimpl
Candidate: use ds3docspecemptyimpl instead of <UNK>
Reference: ![major](<link_2> at most one statement is allowed per line, but 2 statements were found on this line. [![rule](<link_4>](<link_0> ![minor](<link_3> missing curly brace. [![rule](<link_4>](<link_1>
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: might be better to say compactiontask.type.equals(status.gettype()) to remove reference to literal and to cover for the case when status.gettype() is null for any reason.
Candidate: what happens if the [] happens if waiting on the maximum node. on the maximum node. node.
Reference: so every time this is called, we will shuffle the tasks and have a completely different assignment mapping?
Candidate: use <UNK>
Reference: shouldn't this be == 0?
Candidate: please use <UNK>
Reference: could you rework this code to not use swt. even if this code is in an ui bundle, it will one day, i'm sure be used/moved outside of an ui
Candidate: can be simplified to: if <UNK> != null) { return <UNK> } else { <UNK> }
Reference: log excepion also
Candidate: what happens if the exception is the software exception we don't want to print the stack trace trace, so it will throw an error message.
Reference: you have got a factory that creates defaultmultifactorauthenticationsupportingwebapplicationservice objects, right? it needs to be passed into the factory, and from the factory down here.
Candidate: can you use the <UNK>
Reference: as you say, does oracle or h2 have to do this? for the dummyxaresourcerecovery i can see that is likely a requirement
Candidate: why do we need this?
Reference: blockx, blocky, blockz
Candidate: this should be the feedid
Reference: i'm a bit confused what's going on with this api. we first wait on the aggregate future and then we wrap it in another future. that seems wrong, right? the
Candidate: why do we need the <UNK> here?
Reference: i'd argue that  java import static pl.allegro.tech.hermes.integration.test.hermesassertions.assertthat; assertthat(publisher.publish(topic.getqualifiedname(), avrouser.asbytes()).hasstatus(created);  would be more verbose and clear at this stage than having it tested inside the publisher.
Candidate: why do we need the <UNK> here?
Reference: i know this is a tiny thing, but the mis-match of uppercase sql and lowercase sql things is odd to me. i don't care about which one we use, but
Candidate: why do we need the <UNK> here?
Reference: empty return isn't needed
Candidate: this should be the <UNK>
Reference: i would call the new addnewmodelelements directly
Candidate: i don't think we need to call the <UNK> <UNK>
Reference: proxyports.stream().map(proxyport -> "localhost:" + proxyport).join("terracotta://", stripe_separator) or something similar
Candidate: rename to to <UNK> <UNK> <UNK> -> <UNK>
Reference: chanelling nils... spaces between ) and { and between if and (
Candidate: why do we need the <UNK> here?
Reference: assertions has a method to handle collection size. use that, test fail messages will be much nicer.
Candidate: why do we need to bind <UNK> here?
Reference: why executing so late? shouldn't we execute that as soon as possible after backend?
Candidate: this should be the <UNK>
Reference: why introduce ra = cp?
Candidate: should we catch (throwable e) { throw exception } catch (throwable e) { thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw ioexception e) { throw <UNK> } } } catch (ioexception e)
Reference: why not map this and then collect it as a list?
Candidate: why do we need to use the here?
Reference: would you please invert this if as well?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: objects instead of values here too if you are doing in the provider
Candidate: the syserr should be be the
Reference: seems only one test is failing, we can first convert the key to path and then use getpath instead of getrawpath in uribuilder. something like this worked for me -
Candidate: why do we need to here?
Reference: raw type, needs <?>
Candidate: please use <UNK>
Reference: does not compile on neon, prefer: autoscalediagramcheckbox.addselectionlistener(new selectionadapter() { @override public void widgetselected(selectionevent event) { autoscalediagram = autoscalediagramcheckbox.getselection(); } });
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: again you're concatenating strings instead of using the api as provided. how about java final path confpath = paths.get("target", "test-classes", "hbase-site.xml");
Candidate: why do we need the <UNK> here?
Reference: what happens if the folder plugin is not installed and the class is not available?
Candidate: shouldn't this be be the <UNK>
Reference: have you merged master? i thought i fixed this to include the exception in the message... i might've just not pushed it yet, but let's make sure that we have
Candidate: we should need to call the <UNK> <UNK>
Reference: i was assuming a different syntax for this:  values("id", "name") .row(k(1), k("ana")) .row(k(2), k("fred")) .row(k(3), k("manuel")) .row(k(4), k("rita"));  does it make sense? or is it trickier to use?
Candidate: why do we need to use <UNK> eq here?
Reference: maybe we can be a little more conservative and avoid creating the new type timestampedserializedkeyvaluestore, and therefore avoid changing the decorators at all. i'd like to avoid any reasonable possibility
Candidate: this should be <UNK>
Reference: why is this public, when exponentialmovingaveragerate's is private ?
Candidate: do we need need to catch <UNK> here
Reference: first i would make intervaltoindexmap final and give it a size estimate in the constructor as you know how many elements it is going to have.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: i don't think the intent can be null in the normal course of things, so this check is not needed.
Candidate: why do we need need to <UNK> <UNK> <UNK>
Reference: this should follow the normal exception handling path and let the caller handle the printing of the exception.
Candidate: why do we need this?
Reference: this logic is not same as per branch-2 patches. what is different here? why?
Candidate: what is this a reason for the <UNK> of the <UNK> <UNK>
Reference: getvalue needs only to be called once (nitpick):  return string.format("byte@0x%1$x=0x%2$x (%4$d)", pointer.nativevalue(getpointer()), getvalue());
Candidate: please use setemptyelement().
Reference: doesn't stringutils.isnotblank already compare for null?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: not just the size, but also the contents of the list can be useful.
Candidate: this should be the <UNK>
Reference: this feels like it'll implode, let's see
Candidate: why do we need to check the <UNK> here?
Reference: just wondering...is it worth putting the rc == fmt check first for a short-circuiting efficiency improvement?
Candidate: this should be the <UNK>
Reference: shouldn't this be return totalexternalaccounts > 0?
Candidate: why do we need the <UNK> here?
Reference: why is the compareandset() necessary? why would this method be called more than once?
Candidate: why do we need need to check the <UNK> here?
Reference: no need, you can simply use : if (destdomain.isbackup()) {
Candidate: can you move this into <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: <link_0>
Candidate: can we use the casts?
Reference: suggest retaining untranslated strings and translating during rendering.
Candidate: why do we need to check for the <UNK>
Reference: no need to check isenable() here. its checked in identityprovidermanager before invoking the listener. that's the contract of the interface - to say whether the listener is enabled or not.
Candidate: do we need to evict the based on the based on the based on the based on the based on the based on the based on the based on the
Reference: is the coupon automatically redeemed? or should it be applied to the subscription explicitly?
Candidate: why do we need the <UNK> here?
Reference: would be better to not turn off, this affects all tests.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: remove setting location
Candidate: <UNK>
Reference: selectors cannot be fetched from the database
Candidate: why do we need to <UNK> the <UNK> here?
Reference: looks like the specific instrumentation method that classpathagent uses can be used with java 8 and below. why not just use that there?
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: will create a constant with a meaningful string.
Candidate: use iu
Reference: code style: just wording, "completed" sounds a little bit misleading, imo "retry limit exceeded" would be easier to understand from the logs.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: i would have liked to see another file to get another value for cognitive complexity here, showing that it is now indeed computed on whole file/project and not only at
Candidate: please remove this method("post")
Reference: same here, not sure this construct buys us much.
Candidate: this should be the fixture.
Reference: must be "replace"
Candidate: should be setemptyelement().
Reference: i don't think this is correct. the explain interface wants to explain _only_ this entity projection. the getquerytext function is returning everything to date that has happened with this projection.
Candidate: why do we need to the <UNK> here?
Reference: i'd replace that by just !invert.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: should this method be final?
Candidate: if oldvalue is null?
Reference: we should log this exception. it is ok to continue, just make sure the error goes into the log.
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: this is not a good assertion, it should instead check that the count you get back when you call getordertypes(true) has increased by 1 and that the new item has
Candidate: please remove this line
Reference: exception should be logged also for debugging purposes?
Candidate: if we is the software exception here but we don't need to throw an exception if <UNK> { throw new <UNK> }
Reference: what if the session is closed remotely before the producer is able to close it? won't closelatch be uninitialised?
Candidate: why do we need need to check the <UNK> here?
Reference: labels must be externalized and internationalized (by creating a class which extends nls and using a messages.properties)
Candidate: should be be <UNK>
Reference: useless cast from long to double.
Candidate: should we be <UNK> here?
Reference: all single characters can be represented as ','. might make it slightly easier to read.
Candidate: typo: <UNK>
Reference: also here we can print some warning message or something for us to know its not yet persisted.
Candidate: why do we need this check?
Reference: please use the closequietly methods at dbutils
Candidate: i don't think we need to log the exception in the exception we don't want to catch the exception and throw an exception
Reference: i assume this function must only be called if the service is activated. eventpublisher is a mandatory reference, so no need to check for nullness.
Candidate: if the != null && <UNK> { <UNK> }
Reference: i think logger was legitimate in this case, because it is not related to slave logs
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](http://sonar-s4/coding_rules#rule_key=squid%3aunusedprivatemethod)
Reference: change this to typeconstants.java_lang_record
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: please remove the same set on 1065.
Candidate: please use assertthat
Reference: suggestion if (!chatchanneluser.getavatar().isempty()) { return; }
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: we still need to pass the blockchainstate here so the notification will be updated with the sync state.
Candidate: i disagree with <UNK> <UNK>
Reference: looks like displayheight is 0 when running in api 10. we'll still need to fall back to the original method of getting the height.
Candidate: why do we need need to be <UNK> here?
Reference: i think you would also need to teleport the passenger after dismounting, no?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: here, you should add some assertions. i would set a variable to the result of saveuserlocation, then assert that an id and a uuid are assigned.
Candidate: why do we need need to the <UNK> here?
Reference: instead of creating a gridlayout here, use a gridlayoutfactory at the end of the method.
Candidate: lambda?
Reference: i was thinking of keeping it, just making it less verbose.
Candidate: why do we tear exceptions?
Reference: why did you remove the statedata?
Candidate: why do we need need to <UNK> here?
Reference: this results in a rather ugly label - i would reduce it to product.getname()only. for the address, you can use 'discoveryresultbuilder.withrepresentationproperty()' - this makes sure, that the address is also
Candidate: should we re-throw the stack trace and throw an exception if the exception failed?
Reference: static import max (similarly to min in this class)
Candidate: i don't think we need to do the tear to the
Reference: please remove the done boolean as explained above.
Candidate: why do we need to check whether the locks is be fetched in the db. we don't need to check whether the is is not the
Reference: i would just close the if and don't use the else --> way too much code for an else branch. i think, using the if as guard here is ok.
Candidate: the syserr should be be <UNK>
Reference: need to revise to trace() for the final version.
Candidate: what about returning null?
Reference: we are to ensure all other attributes from both sources are still here.
Candidate: why do we need to use the <UNK> here?
Reference: we use assertj library, our assertions look like assertthat(something).isequalto(expected)
Candidate: please remove the
Reference: this should use getindexid()
Candidate: please use syserr
Reference: merge with the previous line
Candidate: nit: @since space after opening parenthesis.
Reference: might be ok to assume the tuple elements are not null.
Candidate: objects.equals()?
Reference: it seems not to be a good idea to open the same file for reading and writing at the same time. if you move the output stream back down, it
Candidate: why do we need the <UNK> here?
Reference: should this class and its methods be package-private instead of public?
Candidate: should this be null?
Reference: config file has glusterfs storage enabled in 3.3, should this be changed here too?
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: can this be part of the entity class instead? e.g. public static string primary_key_name = "googleid";
Candidate: what happens if the is is the
Reference: this doesn't appear to be working -- that is i have stuff that i can resolve in an editor, bvut i'm not seeing an icon.
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: there is one more place we check emittedeventdao.hasbeenemittedbefore(event);  <link_0>
Candidate: i don't think we need to check the if the is is the <UNK> <UNK>
Reference: i don't think this change was intended.
Candidate: ![major](<link_1> 'severity: major') either log or rethrow the exception. [![rule](<link_2>](<link_0>
Reference: this should be registered to the "standard" special paths, imo.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: remove copypast
Candidate: use <UNK> instead of <UNK>
Reference: this won't get called in situations where system.exit() succeeds. <link_1>
Candidate: should we be the <UNK> here?
Reference: so we are adding a new top-level element to ejb3 subsystem configuration. how is the version and namespace evolved? do we need to bump it from 5.0 to 6.0, or
Candidate: this should be <UNK> <UNK>
Reference: why do we need to check bound here? wouldn't min be null if we only ask for maxtime?
Candidate: @unyoungwax, prefixing the <UNK> <UNK> <UNK> <UNK> dictionary,
Reference: since connectionstage is initialized with completedwithnull, this connectionstage == null check can be removed or checked against completedwithnull.
Candidate: this should use this method
Reference: put a <code>list.size()</code> into a variable, before the for statment, its best for perfomance
Candidate: i : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> :
Reference: i wouldn't prefix with 'qe-' to make this shorter - the data-ouia prefix of attribute says it all - for use during testing.
Candidate: why do we need to check the <UNK>
Reference: i'm curious how we decided that 1h is the recommended value for monitor interval, and why a smaller value, say, 30min can cause pressure on metastore?
Candidate: please rename this to b/w the <UNK>
Reference: export ld_library_path= doesn't seem to be necessary with my distribution of bitcoind. also, config.bitcoinpath seems to expect to be pointed to the bin sub-directory of bitcoin-core's home (the one that
Candidate: nit: you can use <UNK> <UNK>
Reference: you are ignoring the sync parameter. the recipients can be replaced with a single address (it doesn't change since it is assigned in the constructor)
Candidate: please remove this line
Reference: point outside of image
Candidate: this should be the <UNK>
Reference: why move this before clearallerrors()? the tracking call should probably be performed at the end.
Candidate: the syserr should be be <UNK>
Reference: nit: one liner: this.features = objects.requirenonnull(features, "provided features can not be null.");
Candidate: should we be the <UNK> here?
Reference: tissueoriginimpl.unsaved_id if we're being pedantic.
Candidate: why do we need the <UNK> here?
Reference: what happens if a task finishes in this block of code?
Candidate: the syserr should be be the
Reference: changes in 3 tests above don't seem relevant either.
Candidate: why do we need the <UNK> here?
Reference: since you intend to resolve the property by its name, you should be aligned between this value to the property name as defined in the enum itself, the resolution of
Candidate: do we need to use the here?
Reference: typo: unsupported pool type...
Candidate: should this be the payload?
Reference: you can skip this peek and add requirenonnull(columntype, "columntype is null"); in createcolumnstatisticsforemptypartition instead
Candidate: rename to <UNK>
Reference: unnecessary
Candidate: should we be the noop to <UNK> the <UNK> <UNK>
Reference: i think that this condition is not sufficient. we end up creating an ambiguous symbol in the following case and i suppose we should not:  x = 42 x
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: check for null - someone might be calling createchannel() while someone else is calling destroy().
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: i am totally fine with this, but do you think it makes sense to just have all of our resources return a common exception class with a code and a
Candidate: i don't need to override the in the pr?
Reference: why not to prefet it to return the value of the inner method ? so line 134-135 would look like: return failvalidationcannotplugpassthroughvnicnosuitablevf (...); ?
Candidate: why do we need to here?
Reference: newstory
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: use a simple setter (notice that the setwaterlevelincrementratio doesn't have this side effect) and have either the acceptorconfig set the default value, similar to how it sets 400 for late
Candidate: should this be <UNK>
Reference: i think this may have been white for a reason...
Candidate: please use <UNK>
Reference: possibly add this for safety to prevent an infinite loop, wasn't sure about adding it in the while loop condition as he may want it for the first exception, and
Candidate: do we || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: how does success/failure information get back to the callee?
Candidate: can we use the <UNK> here?
Reference: it's more readable to just close it - especially when using java7 try-with-resources.
Candidate: should we throw an exception if we { null) { throw new <UNK> } { throw new <UNK> { throw new <UNK> { throw new <UNK> { <UNK> }
Reference: rename to launch
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: this kills the app. no seriously, keeping a reference to the activity as the context is a bad thing. use getapplicationcontext to make sure you dont get activity leaks (not
Candidate: cant this be be possible? if possible?
Reference: the call to super() is superfluous and can be removed. the compiler will take care of this.
Candidate: super() should be spared
Reference: isn't the offset the frequency of the cron job?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: sysout
Candidate: why do we need the <UNK> here?
Reference: you can remove this line
Candidate: this should be <UNK>
Reference: can we reorder this if-then-else? to:  if (stringutils.isblank(consoleproxyurldomain) { // blank config, we use the proxy ip sb.append(proxyipaddress); } else if (consoleproxyurldomain.startswith("*")) { sb.append(proxyipaddress.replaceall("\\.", "-")); sb.append(consoleproxyurldomain.substring(1)); // skip the
Candidate: why do we need to trim entries?
Reference: a proper float epsilon should be used here. flow-math has a value in genericmath.java that can be used for this, just copy paste it.
Candidate: why do we need to check the <UNK> here?
Reference: please not here. this is not a standard swt table.
Candidate: map::computeifabsent
Reference: why zeros?
Candidate: can you move this to the <UNK> <UNK> <UNK>
Reference: if deprecated, do we wanna just not add it ?
Candidate: why do we need the <UNK> here?
Reference: fwiw, in case you were unaware, outputsettings supports the builder/fluent idiom so you could chain these calls without referring to a local variable over and over. in fact, i suspect
Candidate: why do we need to evict the <UNK> here?
Reference: ts -> typespec
Candidate: can we use the <UNK> here?
Reference: why not : hostjobsinfo = (map<string, object>) temp;
Candidate: the syserr should be be <UNK>
Reference: one minor nit, would you mind add check for other distinct functions? coz we don't support sum distinct yet.
Candidate: if <UNK> != null && <UNK> && <UNK> { return false; }
Reference: will this always split after first comma (or at index 70), also for commas e.g. in version ranges ? i was thinking maybe to reuse manifestelement.parseheader() instead of this low-level
Candidate: should we use the <UNK> here?
Reference: why is this necessary?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: rather than directly accessing these instance variables from the metrics class, it would be clearer if you have a method such as: reporthourlyrunnerstarttime(string topic, string hour, long starttime)
Candidate: why do we need the <UNK> here?
Reference: should this catch the more generic exception instead? if there's any kind of exception thrown from the plugin, it won't be caught here. also, gopluginframeworkexception might not mean no support
Candidate: should we throw an exception here?
Reference: i would rename it to analyzedbefore => it's a project search, it doesn't make sense to search for project having been analyzed in the past : i would not put
Candidate: unsupportedoperationexception should be
Reference: returning boolean type is useless here because it can only return **true**, or throw timeout exception.
Candidate: should this be the <UNK> ?
Reference: you need to change the text on the effect because you're changing the filter text
Candidate: rename <UNK> to <UNK>
Reference: seterrormessage
Candidate: the syserr should be be <UNK>
Reference: add a class like gerriteventkeys to gerrit-events then use it.
Candidate: this should be repelaced e1 && <UNK> { return false; }
Reference: now it can be simplified to set<set<schedulingexecutionvertex>>.
Candidate: <UNK> evidence,
Reference: need a default case?
Candidate: why do we need to here?
Reference: would call it only 'buildimage' as the potential autopull of the base image is more an implementation detail.
Candidate: why do we need to <UNK> eq here?
Reference: use fragmentutils:isfragmentuiactive
Candidate: this is the cheapest check)
Reference: one general question that is not in your code change. why do we use nanoseconds instead of milliseconds here?
Candidate: we should need to call <UNK> <UNK> <UNK>
Reference: you have this same line in every case. how about moving it after the switch.
Candidate: i don't think we need to check if the is is the
Reference: since you now have access to the page.listkeys() property here, maybe you could add a check to update the delete button label to name the specific list the page is
Candidate: this should be <UNK> the presenter.
Reference: instead of replacing, can you escape the quotes?
Candidate: why not the exception?
Reference: nit: rename this variable to filteredchildren
Candidate: the syserr should be be <UNK>
Reference: maybe: private static <t> list<t> extractlist(map<string, object> xmlrpcstruct, string propertyname, boolean returnnullonempty) { object[] items = (object[]) xmlrpcstruct.get(propertyname); if (items != null && items.length != 0) { return arrays.stream(items).map(item ->
Candidate: can we be replaced with:  <UNK> -> entry.getkey(), <UNK> -> <UNK> -> <UNK> -> <UNK> -> entry.getkey(), <UNK> -> <UNK> -> entry.getkey(), <UNK> -> <UNK> -> entry.getkey(), <UNK> ->
Reference: @ankritisachan correct.
Candidate: should this be <UNK>
Reference: concepts are cached, so it's not a big deal if the conceptconnector is called twice.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: the defaultpluginmanager was almost a "runtime view of/access to plugins". it didn't really know about plugin locations and the filesystem, till now. are you sure you want it to know
Candidate: can be replaced with <UNK> ?
Reference: no space after ! (several other instances below)
Candidate: why do we need to here?
Reference: arrays.aslist?
Candidate: this should be <UNK>
Reference: scala.collection.javaconversions -> javaconversions
Candidate: i don't think we need to return the <UNK>
Reference: this assumes that the order of your expectedlanguage is the same as actuallanguagelist. what if they returned "es", "en" rather than "en", "es"? your test would fail.
Candidate: why do we need to use the <UNK> here?
Reference: and this one too.
Candidate: throws exception
Reference: hmmm, this changes the semantic of what we do significantly as we now replace every occurrence in the query. there's no risk at doing that?
Candidate: should this be <UNK>
Reference: why do you need this? is this the case when cluster is down and cant get connection? also should this be only when auto connect is enabled?
Candidate: why do we need this?
Reference: we shouldn't require the ?test param
Candidate: why do we need the exception here?
Reference: i think this set of conditions is a bit hard to read, can you change it to something like: if (child != null && child.getextractiontype() == extractiontype.many_to_one) { return extractiontype.many_to_one;
Candidate: please use <UNK> <UNK> <UNK>
Reference: why is this public?
Candidate: we should need to use the <UNK> <UNK>
Reference: any tests to show the interaction of the 2 holiday calendars?
Candidate: why do we need to synchronize on the lock ?
Reference: seems a little repetitive wrt. the method above.
Candidate: please remove this line.
Reference: getemailaddress can return null.
Candidate: should this be <UNK>
Reference: this needs an assertion that the operation was retried
Candidate: why do we need to use <UNK> here?
Reference: - how about replace the other fields (i.e. domain, path)? they can also have variables. - does it really need to create new cookies? (it could use the setters.)
Candidate: i don't understand this matters, if we matters, but i don't understand why, but it matters, but it seems to me that it explicitly)
Reference: why does this need getcallermoduleloader? i realize the previous code was doing this, but there are better ways to obtain a module loader. (getclallermoduleloader use stack crawling which is quite
Candidate: why do we need need to the <UNK> here?
Reference: is it possible that this query will still return more than one broadcast? if so, is there a way to be sure that we're getting the intended livechatid? for example,
Candidate: this should be the <UNK>
Reference: fix cyclomatic complexity sonar issue
Candidate: this should be repelaced e1 { <UNK> <UNK> } <UNK> } } } } } } }
Reference: this should use a stringbuilder.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: forgot something?
Candidate: why do we need the layout here?
Reference: conditions -> breakpointconfiguration
Candidate: wouldn't it be nice to check for loop?
Reference: does this have to be after the above line? seems like it may as well be right before. or you could just check that the returned list is empty. or
Candidate: why do we need to <UNK> stuff?
Reference: the message is slightly confusing and should be "contains duplicate ch profile:" (?)
Candidate: i don't remember, <UNK> we need to use <UNK> <UNK> <UNK>
Reference: dont you need to check for exceptions here too.
Candidate: i don't think we need to check the the the <UNK> is the
Reference: check for null artifact before using?
Candidate: should this be <UNK>
Reference: i would expect the compiler to optimise it but still, how about moving this line after the check below so it would be more clear that this field is not
Candidate: if oldvalue is not be null.
Reference: those functions are confusing because they may return null but under our assumption pdb should always has at least one segment. maybe assert(entry != null) is more readable.
Candidate: shouldn't this be null?
Reference: the isempty() test is redundant. you can just call itemstoremove.foreach(item -> thir.remove(item))) directly without testing for emptiness. if it's empty no item will be removed in the foreach, which is
Candidate: do we want to mapping. directly?
Reference: thanks. will change it.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: can you rename any local vars that have used ns - otherwise could get confusing.
Candidate: if the == null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: this is a long lambda; would it make openeventstream() easier to read if it was granted private-method status?
Candidate: i don't understand this matters, this matters, but we do, but we don't want to do, but we don't want to do, but we don't want to do, but it
Reference: would it be better to use explicit values instead of random? for example, we know all the corner cases would be around bits being split across read boundaries. we can
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: given/ execute/ assert sections.
Candidate: please use <UNK>
Reference: this doesn't have to be public. just use default package access since only thee cache impl in this package has to see it.
Candidate: this should be <UNK>
Reference: nit: save math.log(mlogbase)) as a constant since we need this frequently?
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: i think we need to add first themonitor.begin("refreshing", 1);
Candidate: suggestion: if we progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress progress
Reference: can be simply replaced by:  organizationdto organization1 = db.organizations().insert();
Candidate: this should be <UNK>
Reference: add newline before return.
Candidate: add newline before return.
Reference: enclosing the ipv6 address in [] is not needed with the uri constructor you use at l248. otoh, networkutils.formatpossibleipv6address() does more than just add the [], it also does the
Candidate: wouldn't it be nice to do:  if <= && <UNK> <= && <UNK> <= && <UNK> <= && <UNK> <= && <UNK> <= && <UNK> <= && <UNK> <=
Reference: maybe remove the first 2 :?
Candidate: if we is the software stripe { return <UNK> } else { if <UNK> { <UNK> { <UNK> { <UNK> }
Reference: since the method removeappender(string) will have to internally call getlogger(string), what about changging to logger.appender(loggername) to loger.removeappender(appender)?
Candidate: thank you!
Reference: if it's null it's invalid? if it's null, shouldn't it be valid (and default to 1 basically)?
Candidate: should we print executors here too?
Reference: casting would be faster...
Candidate: should we be the <UNK> here?
Reference: can be done on 1 line
Candidate: can this be used?
Reference: this returns the expression, you can combine this line and the next
Candidate: <UNK> tablets should be the the constructor: <UNK> = <UNK> oldvalue = <UNK> oldvalue = <UNK> <UNK> <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK> oldvalue = <UNK>
Reference: i would choose another name for the property name, the term version being probably widely used in existing databases. ideally it would be configurable by the user.
Candidate: why do we need to check for the <UNK> entries?
Reference: instead of checking a concrete class consstring that's tied to rhino implementation, check a common class instead: if ( source instanceof charsequence)
Candidate: this we need to use the file name
Reference: ![info](<link_0> 'severity: info') do not forget to remove this deprecated code someday. [![rule](<link_1>](<link_2>
Candidate: the syserr should be the
Reference: why is the overlapsinterval part needed in the filter? won't that always be true due to the query?
Candidate: why do we need this check?
Reference: remove this
Candidate: this should be setemptyelement().
Reference: i know it's a pita but i really think interruptedexception should be dealt with specially here to reset the interrupted status.
Candidate: i don't think we need to throw an exception if invoked?
Reference: add final keyword.
Candidate: use <UNK>
Reference: final?
Candidate: please use <UNK> <UNK>
Reference: there should be added a break;
Candidate: if the == null) { return; }
Reference: could you update this to also add a logger.warn statement if we ever do this? i want to work through updating these flows. thanks!
Candidate: you can use <UNK> parameter parameter name parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter parameter
Reference: - did you checked if return value of this method is used in calling methods? - did you checked if previous thrown exception is handled in calling methods?
Candidate: i don't think we need to check for the the <UNK> <UNK>
Reference: is this even possible?
Candidate: can we be simplified to <UNK> <UNK> ? <UNK> : <UNK> : <UNK> <UNK> <UNK> { <UNK> }
Reference: do we need this to be public? i only saw it's being called in handleauthentication.
Candidate: i don't understand this matters, if the is overwrites the <UNK> is afaik. intended?
Reference: is this the same as system.currenttime in milliseconds?
Candidate: can we use static"
Reference: @tarun0 why don't you use this <link_0>
Candidate: use use utils method to show error error <link_0>
Reference: best make this private method.
Candidate: this should be nicer: <UNK> <UNK> <UNK>
Reference: reformat code
Candidate: should we use the getconnection here?
Reference: assertnull ?
Candidate: should this be <UNK>
Reference: 1. i would expected this kind of code to be in the parent component. 2. at first sight, it seems that the **basegridwidgetkeyboardhandler** may handle operation that happens on a
Candidate: this should be <UNK>
Reference: this needs to be mapping.gettargetannotationvalue() instead of mapping.getsourceannotationvalue(). this property is actually not used in java 8, but it is used correctly under java 9, and not because of us,
Candidate: can we use the builder instead of the builder variable?
Reference: interface appended to variable name
Candidate: please move the variable name of the expression is used.
Reference: nit: empty -> null here and in other places
Candidate: should we check if the == null) { throw <UNK> } else { if <UNK> { throw <UNK> }
Reference: discarded non null all the time. you must use !isempty() or ignore it here.
Candidate: please use <UNK> <UNK> <UNK>
Reference: i am concerned about this synchronized code piece, since this will be called on every request. my concern is this will slow down things. do we need synchronized block here
Candidate: why do we need to use <UNK> here?
Reference: don't really like the "continue" keyword but why not. but can you use brackets, i'm not sure it is 100% true but we prefer to not have if without them
Candidate: i don't understand why, but it matters, what is the that the is the that the is is the <UNK> <UNK>
Reference: i personally would prefer to use a dedicated type for the return value. fiddling with multi-dimensional arrays makes the code unreadable and unmaintainable, from very beginning.
Candidate: do we need need to use the <UNK> <UNK>
Reference: just minor q - if you remember, from some last task, we updated the [resourcetype](<link_0> to add the bpmn-cm extension as well as the bpmn/bpmn2 already existing ones, you remember?
Candidate: why do we need to check the <UNK> here?
Reference: why did default change?
Candidate: please use <UNK>
Reference: i don't think this is the reported issue; the problem is result.getreturnvalue() can return null, which is not allowed by the handleresult contract.
Candidate: please use <UNK>
Reference: superinjectiontarget.injectionmap.isempty() always false
Candidate: i don't understand why, but it is be the to the <UNK> the <UNK> is the
Reference: technically bind has exactly the free variables that are in the "toreplace" part. the inexpr can use varname, and nothing else.
Candidate: this should be the <UNK>
Reference: setted is typo
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ? <UNK> : 2; thanks!
Reference: is 30 correct here?
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the <UNK> <UNK> <UNK>
Reference: actually this prevents passing durable=false to any binder, including rabbit.
Candidate: this should be the <UNK>
Reference: similarly to the static enum thing, i subjectively like to make enum constructors explicitly private even though there's no practical difference. any particular rationale for this change?
Candidate: why do we need to permission?
Reference: you shouldn't need .tostring() here...
Candidate: should we use the <UNK> here?
Reference: p3: "jenkins tfs plugin" -> "tfs plugin for jenkins" ?
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: why boolean, not boolean?
Candidate: this should be setemptyelement().
Reference: you should return the object returned by the saveandflush method here.
Candidate: why do we need the <UNK> here?
Reference: if there is no particular reason to make anything public then it should be private (or package-private in case)
Candidate: this should be setemptyelement().
Reference: we can remove this soft assert as well as this path will definitely get hit for someone using this functionality,
Candidate: do we need need to do we need this?
Reference: shouldn't this use one of the guard methods?
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: remove "this."
Candidate: this is overwrites the <UNK>
Reference: can this method be private?
Candidate: this should be the <UNK>
Reference: did you just mean to use loggerrule? or are you doing it the hard way specifically to capture agent logs?
Candidate: why do we need to here?
Reference: nit: you can use collections.emptymap() here.
Candidate: please use <UNK>
Reference: delete the file afterwards
Candidate: why do we need need to the <UNK> here?
Reference: again i would prefer systemutils.is_os_mac_osx
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i think this doesn't need to be checked. circuitbreakerregistry create or get when you request a circuitbreaker. therefore, it cannot be null, and it must be the same as the
Candidate: can be simplified to <UNK> <UNK> ?
Reference: shouldn't be here null instead of string relating to the name of violation?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: prop: i would not add the client if it is already contained in the set.
Candidate: this should be the <UNK>
Reference: with this change, the put order is not guaranteed any more. let's say a sequence of put event: 1. put(1, 10) 2. put (2, 20) 3. put(1, 5) the 1st
Candidate: please use <UNK> instead of <UNK>
Reference: should we just always cast to mutableyamlmapping without instanceof?
Candidate: why do we need the <UNK> here?
Reference: what about collections.emptylist(); which don't need to create new instance
Candidate: can be simplified to return <UNK> <UNK> <UNK>
Reference: maybe use zlog so that we receive the error in crashlytics? this might be too noisy tho :)
Candidate: why do we need to permission?
Reference: is it possible for this token to be an instance that is not assignable from baseauthenticationtoken at this point? should its class be checked first?
Candidate: suggestion if <UNK> <UNK> <UNK> new <UNK> point of <UNK>
Reference: you need to take into account that the default is fs, and can be omitted. so having 2 entities with one of them pointing to local-heap, would cause only 1
Candidate: can we use the get* <UNK>
Reference: redundant else
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: omit assert. ?
Candidate: should be username?
Reference: could we please use field instead of f to be consistent with line below?
Candidate: i don't understand why, but it matters, what is the that the is is the <UNK> the <UNK> is the
Reference: suggestion double[] offsets = getoffsets(minrange, maxrange);  might be a better name?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: why initial? does 1 work? 1 should be the default (i.e. opaque) value of opacity.
Candidate: should this be <UNK>
Reference: static import
Candidate: should we be the <UNK> here?
Reference: is there a reason we wouldn't fix this one also? or is it not possible?
Candidate: should we be <UNK> here?
Reference: as far as i remember, stream.append is an o(n) operation, so the whole op will be o(n^2). i believe you should use two java's arraylist objects to partition.
Candidate: i think <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this would continue to attempt to lock regardless the lockacquisitiontimeout (if any): i suppose it would be more robust if you will check the timeout anyway. there are tests that
Candidate: do we need to catch interruptedexception here
Reference: suggestion system.out.printf("requisition import triggered asynchronously for url: %s\n", url);
Candidate: use <UNK> instead.
Reference: speedcontroller not customspeedcontroller
Candidate: why do you need to assert the sizes of the sizes of the sizes
Reference: remove blank line.
Candidate: super() should be spared
Reference: passing in this looks ugly.
Candidate: please use <UNK>
Reference: this method and logic seems to assume that the list that's being passed in meets the following criteria: * the list is never smaller than previous invocations * the new
Candidate: i don't understand this matters, if we matters, but if you do, but it is be the <UNK> <UNK>
Reference: do we need a null check here?
Candidate: please use <UNK> <UNK>
Reference: remove
Candidate: please remove the method("post")
Reference: make this an else-if instead checking that it is a charelement. then add an else case that logs an error and returns some itohex that doesn't do the conversion (like
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: maybe we should refactor it . i mean... it seems little complicated :) i mean this big stream pipeline.
Candidate: this should be an empty() if <UNK> { <UNK> } <UNK> { return (long <UNK> { return <UNK> }
Reference: this code looks chaotic. please simplify. boolean result = verifier.verify(); boolean timeout = (system.currenttimemillis() - start) > timeout; if (result || timeout) { if (timeout) { log.error() } return result;
Candidate: the syserr should be be the
Reference: it is preferable to use something like : manifest manifest = new manifest(is); attributes attributes = manifest.getmainattributes(); string eeversion = attributes.getvalue("bundle-requiredexecutionenvironment"); instead of a bufferedreader that reads each line...
Candidate: we don't need to synchronize on the exception
Reference: we should add also persistcommandifneeded() to keep the parameters update
Candidate: if oldvalue != null && <UNK> || <UNK> && <UNK> { return; }
Reference: remove whitespace
Candidate: <UNK> "config job.name is missing"
Reference: (nit) the wording of the exception may mislead some end users into thinking that they have forgot to do something when in fact this is an error on the developer's
Candidate: why do we need the <UNK> here?
Reference: nit: final here. and the following variables.
Candidate: please use <UNK> <UNK>
Reference: besides just checking whether the exception is thrown, is it possible for you to check the error message? this is because even with actionfactory.java, there can be actionmappingexception thrown for
Candidate: nit: 49
Reference: indentation (and rest of pr)
Candidate: do we need need to throw an error type instead of the set?
Reference: a note here about why the exception is being swallowed and null returned would be useful to the reader.
Candidate: why do we need to here?
Reference: can we report this to the ui in a more ux way: i'm thinking about reporting an info status to the databinding framework would be more user friendly
Candidate: should we be an empty() if it is be null? if we { null) { throw new <UNK> { <UNK> } <UNK> { <UNK> (long <UNK> { <UNK> }
Reference: if we want to limit maximum percent of heap to be used for the cache, it should be done in the preference page, not here.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: use a constant
Candidate: please use <UNK>
Reference: what was the bug here ? can you file it in issues and separate out from this pr ?
Candidate: why do we eating the exception here?
Reference: this would look more readable to me as return isgenotypeintransition(g, transition) || is genotypeintransition(g, transition.complement()).
Candidate: this should be the <UNK>
Reference: i do not see such test which especially covers the zk case
Candidate: <UNK> *= 2;
Reference: this is the only usage of the repowalkscache and it show that we only need the revwalk object (not the repowalk). change the return type of repowalkscache.get to revwalk?
Candidate: please use <UNK> <UNK> <UNK>
Reference: final
Candidate: i don't think that this is work on the <UNK>
Reference: should put a null object in the cache if the model was null. otherwise repeated cache misses will result in going to file system again and again.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: this will be needed in all binder tests. create a base test class for all binder tests that initializes the injector variable in a @beforeclass method, so tests can just
Candidate: formatting
Reference: the space on the following line should be added to this append. it will be cleaned up by the trim at the end in the current code, but the space
Candidate: can be replaced with <UNK>
Reference: is it guaranteed this method is going to be called only once? imho it would be safer to perform clear on mocklocationproviders first
Candidate: should we throw an exception here?
Reference: add here: string contributorname = "<unknown>";
Candidate: why do we need this?
Reference: ![major](<link_0> 'severity: major') use "java.nio.files#delete" here for better messages on error conditions. [![rule](<link_3>](<link_4> ![minor](<link_1> 'severity: minor') do something with the "boolean" value returned by "delete". [![rule](<link_3>](<link_2>
Candidate: i don't understand this matters, what about moving this to a bit?
Reference: the idea here is to wait for at least 1 second. 2000ms is used to be safe. is at most 2 seconds safe here?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this variable isn't being used anywhere, is this db access requires then ?
Candidate: @happy-neko same here, let's refactor the 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
Reference: can it happen here that null is returned when current scene = null and project = null? can this be a problem?
Candidate: can we return <UNK> <UNK> ?
Reference: this might throw nullpointerexception. we don't want unnecessary crash if we can avoid.
Candidate: we should need to check log.isdebugenabled() here in the software error message should be the software exclusively validationexception. software error.
Reference: maybe it would be more robust to check just by ids, to reduce possibility of bugs
Candidate: i don't think we need to do we need need to check the <UNK> <UNK>
Reference: i think a try-with-resources would be better, in case we raise an exception for instance.
Candidate: please remove the method("post")
Reference: why did we change it on 1? it doesn't work with multiple partitions?
Candidate: why do we need to <UNK> eq here?
Reference: this should either be a **protected/private/or default** constructor, and the **list** should be copied so the pointer can't be modified outside of the class.  java this.reftokens = reftokens.clone(); 
Candidate: this should be <UNK>
Reference: trace this one?
Candidate: please use <UNK>
Reference: this api is deprecated. i would just rely on the onconnected callback which duplicates this logic anyhow.
Candidate: should this be the fixture.
Reference: i think this will fail if the field is nullable. you will need to check and get the simple type. an example can be found here: <link_0>
Candidate: the syserr should be be the
Reference: nit picking here, but why wrap all of these exceptions in runtimeexception if the method is throwing exception anyways?
Candidate: we should have a <UNK> here here
Reference: in rw, key serializer, value serializer and transform serializer can be evolved.
Candidate: should we move this to <UNK> mapping?
Reference: **usb**
Candidate: this should be setemptyelement().
Reference: the properties from the base are null even before the mapping. to show what you want i presume they need to be non null before the mapping?
Candidate: please use <UNK> <UNK> <UNK>
Reference: the cyrillic letters should be removed from the message.
Candidate: nitpicky can be replaced with <UNK>
Reference: new arraylist<>(numtrainingdatainstance);
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why not use constructor drepresentationquery.drepresentationquery(drepresentation, session) and directly call drepresentationquery.getrepresentationdescriptor()?
Candidate: this should be the <UNK>
Reference: when logging, the format should be "some_message: " + ... notice the colon, and the space after that. this must be consistent, fix in all the places.
Candidate: should be precise, we print an exception here?
Reference: channelcount -> decodedblocks.length for consistency with the next loop
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: there is no need to be explicit with these type arguments. jvm can infer them so they can be omited. java collections.emptyset()
Candidate: minor nit: minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor minor
Reference: commons:deletion_requests seems to be used multiple times throughout the code. perhaps a there should be a constants file defining these strings.
Candidate: use <UNK> <UNK> <UNK>
Reference: rather than catch the exception, you can add an annotation which tells junit to expect an exception and fail if it isn't thrown.
Candidate: should we throw an exception here?
Reference: it would be better to wait for "table properties" modal
Candidate: should this be <UNK>
Reference: why wouldn't we want to be able to follow renames for a pair of files? i might be able to live with the restriction if there is a good reason
Candidate: this should be the <UNK>
Reference: this should probably also check for active proxy support and fetch the uuid if it's enabled using glowserver.getproxysupport().
Candidate: i don't think we need to check for the <UNK>
Reference: you don't really need a list here. you can just update it as context = context && node.istypeonly() assuming context is boolean.
Candidate: why do we need the tear to <UNK> the <UNK>
Reference: could we rename to something like isfirstpacketofnewframe maybe? also, if we initialize it to false we can get rid of the else block below
Candidate: shouldn't this be the segment <UNK> segment and <UNK> <UNK> segment and <UNK> segment <UNK> <UNK> <UNK> <UNK> segment and <UNK> segment
Reference: :scissors:
Candidate: why do we need to here?
Reference: getactivity().findviewbyid(r.id.tabs) should work here.
Candidate: this should be <UNK> the presenter.
Reference: sometime, idps uses samlp2 and saml2 as prefixes instead of samlp and saml, we should be compatible with that fact.
Candidate: should we use the <UNK> properties?
Reference: @ikhvostenkov you shouldn't leave the parameter in the same line as ( if ) is not there. so this line should be more like:  pslinkedin.parse( this.luserjson.fetch( new href( "...
Candidate: the syserr should be <UNK>
Reference: should be all instance config. even it is not live, we will calculate the baseline with the instance config.
Candidate: why do we need need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: windup/discover/java ?
Candidate: please remove the <UNK>
Reference: that's a bit unusual approach for testing data to use stringbuilder. typically we rely on the atomicreference. but let it be.
Candidate: i don't think we need to do we need need to wait for the exceptions?
Reference: this is a little roundabout, right? the conditions where ids == null is where either !endpoint.equals("followers") or !endpoint.equals("friends"). really the preconditions should be checking _that_, and throwing a more verbose
Candidate: should we use the getconnection here?
Reference: for now we should keep this method package visible only
Candidate: this should be the <UNK>
Reference: again: missed math.abs() and {} arround procedure.appy(...).
Candidate: the syserr should be be the <UNK>
Reference: you should use the getpropertyastype method to get a boolean <link_0>
Candidate: why do we need the <UNK> here?
Reference: you should agree with me that the casting here is a redundant silly work...
Candidate: should this be <UNK>
Reference: do we need arraylist or an empty list ?
Candidate: this fail()?
Reference: this if should not depend on webdav vs. dokany. windows drive letter selection should always be possible
Candidate: this should be the <UNK>
Reference: the ones that you just moved here (from being defined as constants) don't have the line break indentations. don't forget to add them.
Candidate: please use <UNK>
Reference: consider renaming splitedurl to spliturl
Candidate: why do we need the exception here?
Reference: style nit: no braces here
Candidate: the syserr should be replaced by <UNK> <UNK> <UNK>
Reference: will take a look at it today
Candidate: if we { } { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { if <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> {
Reference: this requires that an export decoder is only used for one stream which is the current behavior of e3 but was not the original implementation so this a good limitation
Candidate: please use <UNK> <UNK> <UNK>
Reference: if two threads call update with different bytes, but the same path, there is a race condition here where they both might end up calling announce(). we can either make
Candidate: the syserr should be be the
Reference: i'd correct also the local variable name
Candidate: this should be the request?
Reference: it would be great if we could stick the messages to the original location that led to the creation of the forged method.
Candidate: please remove the log.
Reference: we should either do this check for all updated limits or none.
Candidate: i don't think we need to do we need to the the anywhere, but it should be the
Reference: why did the name change to "gmsmember" here? it was "memberdata" which kinda made sense because gmsmemberdata isa memberdata. i could see leaving it alone or maybe making it gmsmemberdata.
Candidate: can we use <UNK> objects.tostringhelper() also?
Reference: please rename the setter and the datamember too
Candidate: use <UNK> <UNK> <UNK>
Reference: these properties had better go into a default instance of config implementation. sqltoconverter constructor without config should use the default config instance. this(viewexpander, validator, catalogreader, cluster, convertlettable, default_config) move line
Candidate: why do we need the <UNK> here?
Reference: warning: sometimes in the existing code there is a check of getmodelaccessor() != null .
Candidate: why do we need the lock here?
Reference: do all calls to this method are result of invalidation events? there can be also _local_ invalidations triggered after calling methods like imap#remove, imap#put?
Candidate: what happens if the is is the
Reference: it looks like, when the measurement system is changed, then this image is not updated. tourchart has a pref listener net.tourbook.ui.tourchart.tourchart.addpreflisteners() which already checks the measurement system, there the action
Candidate: this should be the <UNK>
Reference: nationkey % 17 = bigint '44' and nationkey % 15 = bigint '43'
Candidate: please remind compensation?
Reference: setting the submit enablement should be in the method buttonsenablement
Candidate: why do we need to check for the scale entries?
Reference: is the replacedsql.replaceall needed for postgresql?
Candidate: should we catch <UNK> here and throw an exception block?
Reference: please use stringutils.empty or stringpool
Candidate: should this be <UNK>
Reference: jdt core used a = b and not a=b. use the formatter if in doubt.
Candidate: should we be the <UNK> here?
Reference: given that this method is already dedicated to the issuer claim, calling string.format is redundant. please rollback
Candidate: why do we need to check the <UNK> here?
Reference: i recommend keeping a reference to the client. the previous implementation appears to have omitted request management on activity destruction but a future patch could add it
Candidate: why do we need to the <UNK> here?
Reference: what does this false -> true change do?
Candidate: please use <UNK>
Reference: this test could be a little more concise by using instance of invocation.builder request object in // given block and then in // when it could be just posted in
Candidate: if we is the software <UNK> is the software <UNK> but i don't think it does)
Reference: line-break
Candidate: can be replaced with <UNK> reference: <UNK>
Reference: would it be make sense to add a sanity check that the key is >= than the previous lastfoundkey?
Candidate: can be replaced with <UNK>
Reference: for better performance, check it at line 86
Candidate: should we use the <UNK> here?
Reference: @ikhvostenkov why this?
Candidate: @hdouss let's use system.currenttimemillis()
Reference: conditions -> breakpointconfiguration
Candidate: can we use <UNK> to arraylist?
Reference: if both multiplication operands are ints the result will be an int. if at least one of them is floating point the result will be floating point. request.getspeedformode returns a
Candidate: why do we need to use the <UNK> here?
Reference: why do we need it here
Candidate: <UNK> *= 2;
Reference: ... the whole point of chunkgc being separate class was that the unloading logic was in that class. now you moved it to cubecache.
Candidate: why do we need to check for the <UNK> ?
Reference: let's use the old cleanup method as i have modified it to support latest rest api calls. sorry for the confusion.
Candidate: should be be <UNK>
Reference: this statement produces compiler warnings:  [info] [...] fruitdaoreactiveimpl__mappergenerated.java uses unchecked or unsafe operations. [info] [...] recompile with -xlint:unchecked for details. ---  would it be possible to extract the
Candidate: this should be the <UNK>
Reference: is catch block needed after this change or is it redundant?
Candidate: this should be the <UNK>
Reference: you meant !equals ?
Candidate: why do we need to use <UNK> here?
Reference: what if you query on a single timestamp.
Candidate: we should need to check for the <UNK>
Reference: is this possible? also, whystartkey.length > 0? maybe !=hconstants.empty_start_row?
Candidate: what about returning a local date pattern too. date date date date date date date date date date date date date date date date date date date date date date
Reference: this stack trace, and all the other ones like it in this file, will never get printed because the fail(string) method itself will cause an exception to be thrown. personally,
Candidate: what happens if the is is the
Reference: the else statement could be removed.
Candidate: why do we need to use <UNK> here?
Reference: consider adding a timeout
Candidate: why do we need the fully-qualified properties?
Reference: i would prefer to use standard java api instead and minimize dependencies usage when possible.
Candidate: this should be the <UNK>
Reference: rm line now that it is deprecated and does nothing?
Candidate: should we throw an exception here?
Reference: cosmetic: please, re-indent all these parameters according to our coding convention.
Candidate: please remove this method("post")
Reference: do we want to lose the cause here?
Candidate: should we use the exception here?
Reference: ?actually this is a bug. when *encryption* fails you're not allowed to store the value in the db. this is not the same as decryption failure, where you can use
Candidate: this should be the feedid
Reference: i think it should be a static private field, for the sake of performance
Candidate: can be replaced with <UNK> ?
Reference: i think assertequals parameters are inversed
Candidate: can we use the iae ?
Reference: maybe suggestion log.warn("application failed unexpectedly: ", t);
Candidate: should we be the specific?
Reference: no timeout?
Candidate: looks bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad
Reference: you will need null checks here. systemsettings or procedure can be null since minoccurs is 0 for those. if those are null, we need to use the default value of
Candidate: this should be the fixture.
Reference: this should not happened if there is not a bug but should we ensure that deferredrecordssize is not less than 0 ?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: 1. maybe rename to blobidsafterput 2. not sure if i missed anything, just wonder why this is not a concurrent list?
Candidate: should we class" be encrypted,
Reference: can we do this outside of the try/finally that has the database reviewdb open? that way the connection can be returned to the pool and reused for the recursive lookup
Candidate: can be simplified to <UNK> <UNK> ?
Reference: please, add non-nls tags
Candidate: you can use the <UNK> here as well
Reference: i would put them mandatory by default. i don't think you do anything about it yet, but without those events there is no analysis. same applies to lttng kernel analysis.
Candidate: why do we need need to <UNK> the <UNK> <UNK>
Reference: is coalesce(type, 'api') necessary given that there's a default on the column and all existing rows have been backfilled?
Candidate: why do we need the <UNK> here?
Reference: this variable should be moved closer to its first usage. (to have first to deal with return types then params)
Candidate: why do we need need to check the <UNK> the <UNK> scenario?
Reference: suggestion if (cmds().isempty()) {
Candidate: the syserr should be be the <UNK>
Reference: uuidfactoryfast should be used in production. collision risk is too high. (and this create a static binding, which should be avoided) a uuidfactory instance is available from the pico container
Candidate: why do we need this check?
Reference: rather than using a pair, getconnectioninternal() could become getdatasourcepoolinternal() and then call getconnection() explicitly here (i think this is a little bit cleaner than making and unpacking a pair)
Candidate: why do we need to here?
Reference: does it make sense to hide the not startable embedded server and keep the osgi framework informed that the activation has been done successfully? other services that rely on this
Candidate: why do we need the <UNK> here?
Reference: be consistent -- either all stdout or all logger. please look at where this method is called from and decide whether usage indicates stdout or logger should be used.
Candidate: rename <UNK> <UNK>
Reference: @franz1981 i feel like you're the man to look into this... can you look into this one?
Candidate: i don't think we need to check if <UNK> == null) { <UNK> = <UNK> }
Reference: good idea to setfilterpath, but i don't think using the platform location is the best start... not sure what is that is accessible? perhaps the binary file location is a
Candidate: i don't think we need to throw an exception
Reference: i think if we go down this path, we shouldn't take in an httpclient as an argument, and probably have the sitestreamhosts host list as a default argument.
Candidate: <UNK> *= 2;
Reference: please replace this with return geturlforwiki(wikiname) + wikipath
Candidate: why do we need to use <UNK> here?
Reference: maybe extract the test string?
Candidate: why do we need the <UNK> here?
Reference: take a look at multivaluemaputils - it will save you this if statement
Candidate: consider changing this (up to <UNK> <UNK> && <UNK> || <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> {
Reference: i would even "warn" as this is not a quite valid state, so we warn that action should be taken. also i think the mac would be also nice information
Candidate: should we throw an illegalargumentexception instead of returning null?
Reference: what happens if return null ? is null valid? shouldn't it be an exception?
Candidate: why do we need the <UNK> here?
Reference: similar
Candidate: this should be the the enum?
Reference: you can use return checknotnull(collections.empty_list); the empty_* static definitions do some sort of type inference, whereas the older .empty*() methods don't.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: i would have grouped this with the leftside.setvalue above on line 154.
Candidate: why do we need the <UNK> here?
Reference: i think we should future-proof this by using equals instead of the != operator.
Candidate: i think this should be if (state == null) { .. } else { if <UNK> { return false; }
Reference: you can reduce this to map("id", auser.getuserid(), "type", user_type_value ....) from collectionutils.map
Candidate: can you move this to the 83 <UNK> mapping?
Reference: this could be instead be "[abc, bcd, cde]" with the changes i suggested
Candidate: please remove the method("post")
Reference: you don't have to set the properties manually here as you call the propertyhelper.copyproperties later - the properties have identical name, therefore, these are set automatically (then you probably won't
Candidate: i don't think we need to hide the exception if the threw an exception if we don't want to throw an exception, it will be cleaned up the cause.
Reference: add some message info
Candidate: i don't think we need to throw an exception
Reference: no it test? we can create a separate ticket for it at the very least
Candidate: why do we need the <UNK> here?
Reference: can be simplified to:  e.printstacktrace(listener.error("unable to send to address: " + address));
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: i think the filter should be part of the tmftracecontext. please move it there.
Candidate: why do we need need to the <UNK> here?
Reference: please implement as: java return ioutils.readlines(in, standardcharsets.utf_8).stream().collect(collectors.joining(system.lineseparator()));  also i think we should apply this for: org.drools.workbench.services.verifier.plugin.client.testutil.testutil#loadresource
Candidate: should we throw an exception here?
Reference: space after "enabled" please.
Candidate: why do we need need to check the <UNK> here?
Reference: notice there's another getconfig some lines below this code. also notice that this client's execute method already uses a sphereapiconfig. why don't we better save the config as a class
Candidate: should we throw an exception here instead of the exception?
Reference: you should ideally make these values different in case you're reading the wrong one accidentally somewhere
Candidate: this should be (throwable <UNK>
Reference: any synchronous exception in this code block will cause the semaphore to leak leases, and eventually lock up. i'd suggest using a helper function that catches these, and releases the
Candidate: can you use the builder variable?
Reference: there should be an appurltest class? i was looking for the test case that verifies the trimming of trailing slash but couldn't find it.
Candidate: should we use the <UNK> here?
Reference: could replace with addall: allrepartitionsourcetopics.addall(topicsinfo.repartitionsourcetopics.keyset());
Candidate: <UNK> *= 2;
Reference: i mean there is no need to get a boxed boolean either, boolean.parseboolean() is a direct equivalent which returns a primitive.
Candidate: why do we need this?
Reference: the naming here makes me a bit confusing. this message is updated as new because it is cannot be processed right? maybe call it messageupdatedasnew or something.
Candidate: why do we need to check on the sides of the <UNK>
Reference: same here. we should keep scopedobjects_ since scopeobjectsimpl would be weird.
Candidate: unused
Reference: could have used actionparameters#requireadminuser(); also could move the userservice == null check from handleget() to preprocess()
Candidate: you don't need to use the <UNK> <UNK>
Reference: no need to define it here - it is runtime exception.
Candidate: why do we need to check the <UNK> here?
Reference: checkstyle: ',' is not followed by whitespace. <review,layout
Candidate: why do we need to use the <UNK> here?
Reference: needs a newline before the }, see section 4.1.3 of the style guide. (the one-line style makes it harder to see where blocks begin/end, so it is not allowed).
Candidate: this fail()?
Reference: unsupportedoperationexception is probably a better fit
Candidate: should we use the exception here?
Reference: do you think creating a noopcheckpointhandler makes sense rather than have this null possibilities and null checks?
Candidate: i don't think we need to check the <UNK> the <UNK> is the
Reference: perhaps we should rename the xxxseealsodetails to xxxcrossref to be consistent.
Candidate: should we use the <UNK> here?
Reference: the name says "greaterthan" but the operator used is "less than"
Candidate: why do we need to use <UNK> here?
Reference: how do you know that the buddies collection is not empty here?
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: or, assertthat(category.getattributes(), hasentry("title", "the title")) (this will print a more useful message when the test fails).
Candidate: can you use the fqns here as well?
Reference: missing localrootid
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: there is a bug with read() that we doesn't remove the unused bytes if the buffer is large that needed. it could be fixed by add something like this: 
Candidate: this should be the <UNK>
Reference: it might be better to do assertthat(constraintviolations.isempty(), is(true) as the previous test uses this. thoughts?
Candidate: why do we need the <UNK> here?
Reference: so i was going to say - if both excludefields and includefields are set, then an exception should be thrown, which is what resourcefilenamefilter does. i think that behavior makes
Candidate: should this be the specific?
Reference: inline method body to one line.
Candidate: objects.hash()
Reference: i think the 2 sql statments can be combined into 1 command
Candidate: i don't understand why, but it matters, what is it mean?
Reference: suggestion return apiver.equals(sjsapiversion);
Candidate: this should be the <UNK>
Reference: order of operands
Candidate: why do we need to use <UNK> here?
Reference: why not try-with-resources for this one?
Candidate: can we use static"
Reference: what if the connection actually fails? i think in that case you should reset the just initialized connection info in the catches below.
Candidate: do we need need to use the <UNK> <UNK>
Reference: this and the previous line are not aligned.
Candidate: why do we need to permission?
Reference: remove this shit
Candidate: nit: you can use the payload?
Reference: add body check.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this can return a short read. we should use a loop to try and get the full buffer length or eof before we enter into the isbinary logic.
Candidate: i don't understand this matters, if you matters, this matters, but i don't understand why, but it matters, but it seems to me if the do, but i'm not sure
Reference: why do we need to care about the callback here?
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: those strings are for accessibility so especially the close string makes no sense here. i suggest something like "open drawer" and "close drawer"
Candidate: this should be <UNK>
Reference: it's time starting to use spring build-in json converter
Candidate: why do we need to check the <UNK> <UNK>
Reference: no need to collect it: asserttrue(alldevs.stream().nonematch(dve -> dve.getdiskid().equals(fixturestool.floating_disk_id)
Candidate: why do we need to check the <UNK> <UNK>
Reference: use string.format()?
Candidate: should we be the <UNK> here?
Reference: keep field name
Candidate: why do we need to use <UNK> here?
Reference: add synchronized to this method
Candidate: this should be setemptyelement().
Reference: it is enough to clear caches just from one node, loop is not needed here.
Candidate: why do we need the viewer here?
Reference: i don't see where result is ever getting set to anything or updated after is created, so i don't think this status check would work, and the metadataresponse returned from
Candidate: feedid should be used from <UNK>
Reference: lots of duplicate code in here again, see if you can pull stuff in a common class for smeltery and furnace
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: instead of returning false throw the errror
Candidate: if <UNK> != null && <UNK> { return false; }
Reference: could we use overloading here for buildpropertyisfiltertype so that the method uses the default_match_case if it isn't specified?
Candidate: i don't understand this matters, this matters, if you matters, this matters, that this is is the that the <UNK> is the
Reference: adjust this test to use form
Candidate: i am redundant, redundant, redundant, redundant, redundant, redundant, redundant, redundant, redundant, i am not sure if we encounter the children parameter, so it will be more readable if you touch
Reference: string.valueof(gettenant().getid()) ?
Candidate: please use <UNK>
Reference: should also read data in this case
Candidate: i don't think we need to check if the is { return; } if <UNK> { <UNK> { <UNK> { <UNK> } } }
Reference: is it impossible for getlabel to return null? please use strings.isvalid(getlabel) instead.
Candidate: should we expecting the id here?
Reference: one() should suffice. side-effects are aggregated internally to the returned resultset and only return one result object.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can you add a break for the default case in order to keep consistency in the code
Candidate: should we use the getconnection here?
Reference: also some oses don't support 0 or 255 well, so they should be excluded
Candidate: we should need to the the ls directory, directory, so we don't need to throw an exception).
Reference: can you elaborate on this change?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: suggestion: else-if and else not needed when you use return in the if-blocks.
Candidate: if (state != null) { return null; }
Reference: brackets please - part of our code convention to always use them :-)
Candidate: this should be the <UNK>
Reference: is getview() != null required since showquickstartdialogtaskprompt(boolean) has if (!isadded() || getview() == null) as an early return?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: this appears very complicated. this if and all code below (with this if and the next if swapped) essentially boils down to:  if (!partitioningscheme.ispresent && redistributedwrites) { partitioningscheme =
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: should so much precision be lost at formatting time instead of during conversion?
Candidate: can you rename the <UNK> to <UNK> <UNK>
Reference: extraction to a separate method.
Candidate: why do we need to check for metadatastore ? <UNK> : <UNK> : <UNK> <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> : <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: null check not needed with instanceof
Candidate: we should need to do we need need to check the the <UNK> <UNK>
Reference: although logging is nice in production, it should be implemented with a logger class, instead of just printing into the standard output.
Candidate: why stepverifier <UNK> request?
Reference: throws restapiexception not necessary.
Candidate: this should be the <UNK>
Reference: please change es_inst to externalserach. i know we have some "_" in our code but camelcase is a more common java convention.
Candidate: please use <UNK>
Reference: check for delta kind at first, then for equality of resources. it will be faster than this condition.
Candidate: why do we need need to the <UNK> here?
Reference: use old name? s/usermetareplicas/usemetareplicas/
Candidate: why do we need to synchronize on the <UNK> request?
Reference: perhaps break this up into 3 append calls, instead of creating an intermediate string.
Candidate: should we use stringbuilder?
Reference: i think the previous code returned [noresultexception](<link_0> and now returns null is this what we want?
Candidate: this should be the kubernetes reference: kubernetes reference: kubernetes reference: <link_0>
Reference: we want to verify that executesql is never called at all. the parameter i told you to use was wrong please replace with verify(admindao, never()).executesql(anystring(), anyboolean()); this way we ensure
Candidate: "with class" afaik.
Reference: since we don't rethrow here, is it maybe valuable to print more than the message and include the stack trace?
Candidate: should we throw an exception?
Reference: didn't understand this - why do this?
Candidate: should we be the <UNK> here?
Reference: btw, you should test directly the method validatequestiondetails. extractquestiondetails is deprecated in v7 now.
Candidate: we should need to evict the in the presenter.
Reference: [optional] since changeid can now be null, i wonder if it makes sense to check here for it: if (changeid == null) { throw new invalidchangeoperationexception("changeid is required"); }
Candidate: formatting
Reference: nit: why call the method name data , instead of, say, joinbridgeandlifecycle or getjoinbridgeandlifecycle ? :)
Candidate: why do we need to use the <UNK> here?
Reference: vdslist cannot be null by the contract of the dao for fetching collections. please replace with if (!vdslist.isempty())
Candidate: we should need to do the tear down the <UNK>
Reference: in my opinion, this approach of for loop can lead to making mistakes. i would use classic for loop. what do you think?
Candidate: please use the feedid
Reference: may be this needs to be an info log? wdyt?
Candidate: this should be <UNK>
Reference: this method should probably not be removed. it would be used by the annotation methods
Candidate: why do we need the <UNK> here?
Reference: brrr, why so complicated? why not just for (string key : params.keyset())
Candidate: why do we need to use <UNK> here?
Reference: need to check latch here too
Candidate: i don't think we need to catch the exception here and then you don't need anything.
Reference: space before "was"
Candidate: i assume that this is is the the timer is the
Reference: i think you make this section of code more neat  java if(!showappwithads || (showappwithads && map.get("summary").length > 0)) { itemlist.add(map); }
Candidate: why do we need to <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: suggestion && (alias.child().resolved() == true)) {
Candidate: if the == null) { return false; } else { if (...) { <UNK> } } } } } } else { } else { } else { <UNK> }
Reference: this won't work if ... is specified after the parameterlist
Candidate: this should be <UNK>
Reference: s/entity/entity's s/will be/are sorry about the latter, just noticed this.
Candidate: should this be the <UNK>
Reference: if (bytesavailable >= count) looks simpler?
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: even though this is a test, required fields should not be null. if this does not throw errors, it may well be a sign that the "required" fields are not
Candidate: could be replaced with <UNK>
Reference: why? it should fail otherwise there's a bug here.
Candidate: use <UNK>
Reference: hi @mernst, thank you for your update to this pr. the new unit test indeed tests that the ctor does not blow on a null charset but it does not
Candidate: why do we need to use the <UNK> here?
Reference: renamed segments -> segmentstore in next patch
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: @ramindu90 if we are making it generic, i think the output can be something other than latitude, longitude. shall we rename additional attributes to be more generic (e.g. something like
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: what if target file already exists? should we handle fileexistsexception here? thanks.
Candidate: use map<> on rhs
Reference: i'm only mentioning this, because this kind of pattern is common in the parser (maybe it's not relevant here). in the parser when we have an attribute like "ininterface", which
Candidate: please use <UNK>
Reference: nit: such casts don't always behave well at runtime and can hide some cryptic bugs. although it's probably not an issue here, i would suggest rewriting it:  for (final
Candidate: why do we need the <UNK> here?
Reference: i think these can be supported if the booleans arte false
Candidate: should this be the
Reference: maybe add a helper that takes a single stack and just forwards the call?
Candidate: <UNK> *= 2;
Reference: i think it would be much better to test the expected error message in the case when connector does not support this feature
Candidate: should this be <UNK>
Reference: maybe an intent revealing name would be even better than setup().
Candidate: why do we need to use <UNK> here?
Reference: this "patch" is also needed for methods that return individual files.
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: why catching a generic exception
Candidate: why what? this eating the exception here?
Reference: this will probably not work with native compilation. can you please create a ticket to track it so we will verify?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: we might also want to verify if this active source is fully correct active source. except for the source and destination address we are checking right now, also want to
Candidate: you don't need need to use the in the same as above.
Reference: enhance exception handling by providing a better error facade in new tweet api
Candidate: should we print the exception here?
Reference: if you want to support windows, use file.separator. you don't need a regex.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: we can log the error here. wdyt?
Candidate: should we use the exception here?
Reference: isn't one method with a boolean parameter a better choice? why create 2 methods? and why is the preference read in a ui class, shouldn't the clientupdateservice just read the
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: prefer not having to modify this test. i actually wanted these apis to preserve order.
Candidate: why do we need the <UNK> here?
Reference: btw, i thought it was only supported from version 12c in oracle?
Candidate: please use <UNK>
Reference: can we use a nodeid string that's not nodeid so that we know this actually gets rendered?
Candidate: should be replaced by bigdecimal.valueof( long.max_value )
Reference: i think if you use -ddocker.verbose=false then verbose logging should be disabled as well. please add a check for "false", too.
Candidate: this should be setemptyelement().
Reference: rename to rpackagename?
Candidate: should this be the <UNK>
Reference: is it okay to aquire lock on each of every read of this property?
Candidate: if (args.length == 0) { <UNK> }
Reference: unless there are performance considerations, otherwise i feel like it's better to call with createactionblocker.
Candidate: why do we need the <UNK> here?
Reference: i'm not sure that using that much lines is required here. if it is, cg mandate the use of curly brace here: if body longer than one line.
Candidate: why do we need to check on line 110 here?
Reference: nit: window and join are interesting not because of their identities, but because of their behavior; that they both depend on the "window" phase of the event loop. if there's
Candidate: why do we need to check the <UNK> <UNK>
Reference: does the code test still work if you revert the change?
Candidate: i don't think we need to check if the is is null.
Reference: typo here. should be "owner is non-null but lacks an id"?
Candidate: we could use <UNK> here instead of relying on an error.
Reference: /*error = */ null
Candidate: the syserr should be be <UNK>
Reference: i'd log.warn here - this isn't an error per-se
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: what's the policy on curly braces in jface? in egit we would require them.
Candidate: should we be <UNK> here?
Reference: loadjsplugin does not need thmp so why did we make it above?
Candidate: i don't understand why, but i am not sure why, but it will be good to to the amounts of the amounts of the <UNK>
Reference: suggestion if (null != getunit()) {
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: mismatch count in the error message. you can leave the number out of our error message. it will automatically say expected 6 actual w/e
Candidate: can you use the <UNK> constructor?
Reference: instead of throwing webapplicationexception should we exit the jvm? webapplicationexception should be effect of client request, here its during server startup itself.
Candidate: do we need the <UNK> more?
Reference: in abstractpropertysource there are already some methods, that may help here (or need to be adjusted to do a real deep copy): copypropertydescriptors, hasdescriptor.
Candidate: why do we need the layout here?
Reference: can also add a getdriver() override that returns a cast of super.getdriver() to make this look neater
Candidate: i don't think we need to log.isdebugenabled() check log.isdebugenabled() for the the <UNK> is the software <UNK> <UNK> software <UNK>
Reference: nit: session established -> session has been established
Candidate: why do we need to use <UNK> here?
Reference: please, let's put the sceneopaquefbo line after this line. and let's add a newline to separate it from the material-related lines, below. it somehow feels more related to the line
Candidate: please move after... after... after... =)
Reference: why do you check if session != null? if you have enginesessionid you must create the session. request.getsession(true).setattribute...
Candidate: this should be null if <UNK> != null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: why change it?
Candidate: can we be simplified to:  java actionreturnvalue <UNK> == null) { <UNK> = <UNK> } else { <UNK> { return <UNK> { <UNK> } <UNK> { return <UNK> }
Reference: let's propagate the cause here. also, i believe json is the correct term, not json.
Candidate: i don't think we need to throw an exception
Reference: this line should be:  java if (!elt.isabsolute() && (buf.length() == 0 || buf.charat(buf.length() - 1) != url_path_separator_char)) {  otherwise the behavior of the function is not the same
Candidate: should we throw an exception here?
Reference: return an immutable singleton instead of a fresh object for null?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: nit: instead of storing session, how about we only store getmaxconcurrentmaterializations(session)?
Candidate: prefixing the <UNK> of the <UNK> <UNK> <UNK>
Reference: let's log the requestdetails object directly using its tostring() method, so adding/removing attributes in the future won't require updates to all log statements.
Candidate: i don't understand what the reason behind the change?
Reference: reversed way? managing connection should fire handle new session events.
Candidate: should we be the <UNK> here?
Reference: i'd consider making new listtablesoptions() a member variable so we don't have to allocate a new object to it for every call.
Candidate: why do we need to check the <UNK>
Reference: i think that it will be good to log both exceptions. please remove this check.
Candidate: if we is software software software software software software exception software software software software software software software software software software software software software software software software software software software software
Reference: nit: make this final
Candidate: can be replaced with <UNK> ?
Reference: do we really want to skip assignments that we've already completed? i reckon they should just be at the bottom.
Candidate: why do we need need to the <UNK> here?
Reference: move this method below getnextrecord so the class could be read top to bottom?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: create a static string variable for deactivated
Candidate: i don't think we need to check the <UNK> <UNK>
Reference: does this risk that we only log the exception at debug and nowhere else? or can we rely on the task that we did task.get() on having done a log.warn?
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: edited. @perezp
Candidate: <UNK> *= 2;
Reference: can probably keep this view permanently visible now.
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: applying the tags and returning the entitymap can be moved outside if-else to avoid code repetition. also, not related with patch, but, getentitylist method itself can be re-organized a little
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: this way it won't return any templates unless unregister param is provided, no good...
Candidate: please remove the line
Reference: can you check whether this is o(n)?
Candidate: can be replaced with <UNK> ?
Reference: @paulodamaso the braces and return are not needed here
Candidate: stringutils.isnotblank()
Reference: collections.empty_list (assuming the caller won't try to modify the list afterwards)
Candidate: rename <UNK> <UNK> <UNK>
Reference: this could be setid(actionid)
Candidate: @unyoungwax, do we need to check for the part, but it should be the if the vm is the
Reference: we could make this final and put current path assignment into else statement. @romani would you prefer it this way?
Candidate: why do we need the <UNK> here?
Reference: 2 things: 1) if a dataexception is thrown is it a good idea to go on? 2) did this kind of error logging work with casting exception object to string
Candidate: this fail()?
Reference: ![major](<link_1> the cyclomatic complexity of this method "getdeviceipaddressfromsessionprovider" is 12 which is greater than 10 authorized. [![rule](<link_2>](<link_0>
Candidate: please remove the <UNK>
Reference: before removing from storage, should we check whether triggers are fired and data is send to downstream for window that is too late?
Candidate: the syserr should be be the <UNK>
Reference: can use 8 space indentation here.
Candidate: @unyoungwax, can you use the <UNK> first?
Reference: should probably be targeteobject (the iteration variable) instead of target (the method parameter).
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: is this not exactly string.replaceall("^/|/$", "");?
Candidate: this should be <UNK>
Reference: ... specified. allowed values are " + joiner.on(", ").join(delimmap.keyset()).
Candidate: should we be the <UNK> here?
Reference: this should probably go on a new line.
Candidate: i don't understand this matters, this matters, if we matters, but you don't need to use the <UNK> <UNK> <UNK>
Reference: i think you mean current_account_version. current_prefs_version should be irrelevant to the pickling code - it doesn't need to read prefs. and see below
Candidate: why <UNK> <UNK> ?
Reference: same as above, can we have this blocksdir parameter configurable?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: i agree that this is the right thing to do. thanks for catching this and fixing this. one concern i have is with the change of the exception type. i
Candidate: this should be <UNK>
Reference: nit: if its more than once, should we create a variable that casts it to authenticationexception
Candidate: this should be <UNK>
Reference: maybe should check for >= 5.6.4 if [this](<link_0> is correct?
Candidate: i don't understand this matters, if we matters, but we don't need to do we need to check whether the <UNK> is the <UNK>
Reference: system.currenttimemillis() ?
Candidate: please use <UNK> <UNK> <UNK>
Reference: to make it easy to use, probably construct the map<string, pattern> here and throw a runtime if a pattern doesn't compile?
Candidate: i don't think we need to use the <UNK>
Reference: if we don't actually care what format the hostname has (which this error message kind of suggests we do), i'd make this message be endpoints must be of the form
Candidate: why do we need to check the <UNK> here?
Reference: this is fragile for jenkins... could you make this code more flexible? what we use to do is create in the bean a constructor that get a map as parameter,
Candidate: please remove the <UNK>
Reference: should use assertthat
Candidate: you don't need to use the <UNK>
Reference: suggestion .getstore(300_000l, storename, streams, queryablestoretypes.keyvaluestore());
Candidate: why do we need the <UNK> here?
Reference: final?
Candidate: why do we need to use the here?
Reference: incorrect exception message.
Candidate: do we really care about the here?
Reference: shouldn't it check if it returns a provisioning script file ?
Candidate: why do we need need to the <UNK> here?
Reference: this one too.
Candidate: the syserr should be be <UNK>
Reference: this can throw an npe if the localmediaid doesn't exist in muploadingmediaprogressmax (hashmap.get() will return a null float, which will crash when unboxing into a float).
Candidate: what happens if the is is the
Reference: i am just wondering we can only trim the first and last interval? i guess there are only possible overlaps in the first and the last one because intervals returned
Candidate: you could use <UNK> <UNK> <UNK>
Reference: if my consumer has had a service level set by a previous key, this will unset it if the next one is null/empty.  java if (!stringutils.isblank(servicelevel)) { servicelevelvalidator.validate(toupdate.getowner(), servicelevel);
Candidate: should this be <UNK>
Reference: we want to set the depth and the number of channels here instead of just "1, 1"
Candidate: why do we need this?
Reference: this will never succeed, because createsymlink run only if oc binary file does not exist and thus removing such file is pointless, if it does not exist.
Candidate: do we want to use the here?
Reference: this change can be skipped till we handle individual errors.
Candidate: can be simplified to: <UNK> <UNK> = <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : <UNK> : ""; <UNK> : <UNK> : <UNK> <UNK>
Reference: the pattern to take/release a lock should be: lock.lock() try { // do stuff } finally { lock.unlock(); } this way you guarantee that you release the lock, even in
Candidate: why do we need to the <UNK> here?
Reference: i think we can use the @jvmoverloads annotation in the aztec method in kotlin to allow the java side to call the method without the new extra parameter). check out
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: what happens when you try to add a channel twice? i think you should return an boolean to indicate success/failure here. res: done, a return type of boolean to indicate
Candidate: hmm. this should be the <UNK>
Reference: it is not cleat why you generate id here
Candidate: why do we need to use the <UNK> here?
Reference: any reason to change value from 10 to 100?
Candidate: please use <UNK> <UNK> <UNK>
Reference: if a common interface like catalog info was used this if could be avoid i think.
Candidate: this should be the <UNK>
Reference: try-with-resources
Candidate: the syserr should be be <UNK>
Reference: if this is only at startup, i think people talking about this will want it to be something higher than debug, like warn
Candidate: why do we need to use <UNK> here?
Reference: what's the reason for defining this as three string literals?
Candidate: why do we need to here?
Reference: shouldn't this be calling unbindconsumers?
Candidate: should this be <UNK>
Reference: can remove else clause here.
Candidate: the syserr should be be <UNK>
Reference: invert the condition in the if: suggestion if (hastabschanged) { setuptabs(); } else { if (viewpager.getoffscreenpagelimit() != tabslist.size()) { viewpager.setoffscreenpagelimit(tabslist.size()); } }
Candidate: why do we need to check for the <UNK> <UNK>
Reference: i'm just being really picky, but can you swap this with the line above? so that for option and childoption it sets send buffer then receive buffer
Candidate: why do we need to use the <UNK> here?
Reference: and i think using fine would be enough.
Candidate: what happens if the is is the
Reference: you're not using the return value shouldn't it be... if (!super.equals(obj)) { return false }
Candidate: should we use the object object object object object object object object object object object object object object object object object object object object object object object object object object
Reference: does not work correctly if the command does a remove, or keeps the value unchanged.
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. [![rule](<link_1>](<link_2>
Reference: minor: it's better to include the value of propertykey in the message since it's not always equal to hazelcast.config.
Candidate: should we throw an exception here instead of returning an error?
Reference: same here, needscomma seems like a better fit.
Candidate: use <UNK>
Reference: you can use simple method "valueaslist".
Candidate: should be be the <UNK>
Reference: @kevinoliver sorry for nit-picking but if you would fold this method into translateheaders you could just have the stringbuilder as local variable and remove the declaration of private stringbuilder cookies.
Candidate: this should be <UNK> <UNK>
Reference: nit: suggest "job id" and "filename" without capitalization
Candidate: what happens if the exception is is the
Reference: rename var to instanceinzone? then instanceinzone.getinstance(). reads a little more clearly?
Candidate: why do we need to use the <UNK> here?
Reference: don't initialize to null - the value is set in both paths and not setting it to null would correctly cause a compile error if it was used before set.
Candidate: can we move this into a separate method?
Reference: should we also clean the dataidscache?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: any reason not to do: this(replication, null_id)?
Candidate: please use <UNK> <UNK> <UNK>
Reference: couldn't we request it in earlier time like in the phase of ps setup, and just check and wait here?
Candidate: the syserr should be be the
Reference: line too long
Candidate: should this be the fixture.
Reference: this as well
Candidate: this should be repelaced e1 && <UNK> { <UNK> } else { <UNK> }
Reference: maybe go with static finals and more meaningful names, like expected_num_of_media ;)
Candidate: please verifying asserts on the element? element?
Reference: iterate through entries instead
Candidate: we should need to specify the schema for k8s properties?
Reference: you should use the readfully[2] because the read[1] does not ensure that you read all length bytes. [1] <link_0>[], int, int) [2] <link_1>[], int, int)
Candidate: should this be <UNK>
Reference: add confirm dialog
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: no need to new each time. make it a static
Candidate: should we be schedule() here?
Reference: i'd prefer using g.allgrids and iterating thru it here.
Candidate: this test overflows?
Reference: this is a pretty vague name
Candidate: rename to iu
Reference: this changes the state of the instance so that calling addnode would be illegal after this. would it make sense to prevent that? either by api or by adding a
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: another option would be to return an sourcedebugextension object from ifiltercontext.getsourcedebugextension(). such an instance would do the string parsing lazily and only once.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: since you are building this map in only one place (correct me if i am wrong please) then please use immutablesortedmap from guava. this way you are returning an unmodifiable
Candidate: this should be <UNK>
Reference: if you set it directly in editorsite/viewsite, why is it needed here?
Candidate: if the is is right...
Reference: ![critical](<link_0> 'severity: critical') the cyclomatic complexity of this method "insertitem" is 11 which is greater than 10 authorized. [![rule](<link_1>](<link_2>
Candidate: bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit bit
Reference: another case of it being closed before it is being used. i think switching to more try-with-resources syntax in these cases would fix a lot of these kinds of errors.
Candidate: i don't think we need to throw an exception
Reference: this could be done within the previous loop for loop, c.f. <link_0>
Candidate: you can use the <UNK> here
Reference: please, log warning in such case. warning should contain info about failed node
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: from @tvhung83 (extracted from <link_0> suggestion return exec.newconfigsource() .set("guess_plugins", immutablelist.of("jira")) .set("guess_sample_buffer_bytes", guess_buffer_size);
Candidate: thank you appreciate that the vars for you.
Reference: why does caching determine the behavior of the fetch? why not handle the trimmed exception on the higher level. this seems like overloaded semantics to me.
Candidate: should this be the <UNK>
Reference: could we change to list<properties> or is this api fixed?
Candidate: can be simplified to: java results.stream().anymatch(entry -> value.getk1().equals(entry.getkey()) ?
Reference: minor: could make it optional<integer>
Candidate: should this be <UNK>
Reference: what is this guard meant to protect against? i don't see any code path where activity == null is possible.
Candidate: why do we need the <UNK> here?
Reference: is nt sorted always false here? can you remove the variable?
Candidate: why do we need to use the <UNK> here?
Reference: since it's a query, use publiccontract.truck_uri. the internal ones in the contract class are only there b/c we can't do a write against a sql view
Candidate: why do we need need to use <UNK> here?
Reference: could we use a switch statement here?
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: the bitmap config is also used below, it may be moved to the interface
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: the part i meant to extract was the index...refseqwalker.getsequencedictionary().getsequenceindex(record.getreferencename())
Candidate: why do we need need to evict the <UNK> here?
Reference: put node.get(i) in a local variable.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i don't think we can remove type only casts (if the value is an expression). i think it's purpose is to preserve type information for the execution and operators. also,
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this value should be 1024
Candidate: why do we need to use <UNK> here?
Reference: delay is already completed; no need to wait :)
Candidate: please remove the <UNK>
Reference: need to ensure the offset inserted into the queue is increasing and equals to last message offset + 1 otherwise, poll logic will be impacted
Candidate: should this be the <UNK>
Reference: should be list.
Candidate: why do you need the payload?
Reference: categories can be null here based on the old code.
Candidate: should we use the <UNK> here?
Reference: how about put this line in the synchronized (mscaninfo) { } too? to eliminate another possible race condition that the callback arrives earlier than the requestnetworkscan() at the caller.
Candidate: this should be the <UNK>
Reference: readkeydata would throw out the ioexception, i think we should also catch the exception here.
Candidate: why do we need the getconnection here?
Reference: so only the utf-8 version will be supported? what about the version with the given charset name?
Candidate: please use use <UNK> <UNK>
Reference: why are we doing this conversion?
Candidate: can we throw an exception instead of returning null?
Reference: is this change here necessary? it is new ioexception, not logger.
Candidate: typo: <UNK>
Reference: this log statement i believe is also relevant when we're not sure if the connection from one client to a server is established. it is useful, i think we should
Candidate: should this be the specific?
Reference: need {} even for single line.
Candidate: i don't think we need to use the <UNK> of the <UNK>
Reference: i believe we can achieve the same thing with this: suggestion } else if (site.isjetpackconnected() && site.isusingwpcomrestapi()) {  alternatively we can just add the site.isusingwpcomrestapi() but also keep !textutils.isempty(site.getframenonce()).
Candidate: can you be replaced with: <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: check args?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: in the spirit of defensive programming, i think it would be easiest to have this reset() call to right before checkpacks. (fewer hard-to-reproduce issues due to a caller leaving some
Candidate: i don't think we need to do we need need to check whether the <UNK> is the software <UNK> but we don't need to check whether the is the software
Reference: extract this to a method in the [testutils](<link_0> class, similar to what we already do with osx.
Candidate: i don't think we need to throw an exception if we don't want to re-throw the exception
Reference: what is the use of this? a user changes their own password
Candidate: why do we need need to the <UNK> here?
Reference: good idea , but this checking should imo be moved to appcredentials. the os<x> classes should generally just expose the os interface and then we do the mapping on the
Candidate: why do we need to check for the <UNK> ? <UNK> : <UNK> ? thanks!
Reference: the logic using maxunwrittenrows is confusing to me. what does it mean for a row to be "unwritten"? i think this should calculate the next size check row count more
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: individual conditions also must not be null. for that we should add a check with org.junit.platform.commons.util.preconditions.containsnonullelements(t[], supplier<string>) in order to avoid a subsequent nullpointerexception.
Candidate: why do we need this?
Reference: try-with-resources block instead of manual close
Candidate: why do we need to check isempty()?
Reference: how about calling this(context, type.loading_non_cached); from here, making tasktype final, and centralizing the initialization logic in one constructor?
Candidate: why do we need the <UNK> here?
Reference: i think there should be some kind of custom error message for providing a realmlist<? extends realmmodel> that is not realmlist<dynamicrealmobject>. currently it'll just throw a classcastexception
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: suggestion return "entitlement";  by default sp translate attribute edupersonentitlement to entitlement and such name must match perun attribute friendly name.
Candidate: please use <UNK>
Reference: unrelated change?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: we already have a trace statement inside secretmanager. shall we skip this debug statement?
Candidate: should we log the error message in the messages.properties case where we are expecting an exception when expecting an invalid error scenario?
Reference: missing new line.
Candidate: unrelated map?
Reference: it took me a moment to understand this. i think it would be more clear to write if (port1.isconjugated() == port2.isconjugated())
Candidate: wouldn't it be sense to make sense to use the <UNK> id and label?
Reference: i think it would be more suitable to have a package-private constructor to inject the mock so we don't rely on reflection.
Candidate: trivial: i found: <UNK> = <UNK> <UNK> <UNK> <UNK> 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
Reference: probably better to return list<garbagecollectionstatus>?
Candidate: this should be <UNK>
Reference: please don't hide any exception with logs... you could log the exception as well which would show callstack for debugging purpose...
Candidate: should this be the <UNK>
Reference: !(a && b) is clearer than (!a || !b) (to me anyway)
Candidate: why do we need to check for the <UNK> <UNK>
Reference: the change in this class can be removed now that the test are moved to a dedicated class
Candidate: please use <UNK>
Reference: validate & assert call is repetitive, so this could be extracted to validateandassertfailure method
Candidate: iterable<integer> <UNK> = <UNK> <UNK> iterable<string> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: do these paths have to be manually removed using a zookeeper client after the decommission is complete and all replicas have called removeoldreplicainfo()? what if, instead, helixbootstrapupgradetool created a znode
Candidate: why do we need need to check the <UNK> <UNK>
Reference: so the problem with using this watcher is that the ability can't be copied. if you were to clone this creature, the ability wouldn't work since the watcher wouldn't be
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: is this hyphen required?
Candidate: should we throw an exception here instead of exception?
Reference: make this the very first condition so that mule startup doesn't go through unnecessary processing.
Candidate: <UNK>
Reference: we can get rid of the type argument in the class as part of this change
Candidate: the label should be the label in the label
Reference: i forget - will this automatically serialize and deserialize the fields of the dbxpkcemanager class? iirc this approach has compat issues if you change the class on an update and
Candidate: this should be the <UNK>
Reference: if the fullpath is really full path, then the file(parent, fullpath) construction does not make much sense. maybe use just file(fullpath) ?
Candidate: why do we need to use the payload?
Reference: i don't recall. @stustison could you weigh in?
Candidate: please use readasstring(...) instead of <UNK>
Reference: what if return type is java.sql.timestamp, and java.sql.time i think we should do timestamp timestamp = timestamp.valueof(zdt.tolocaldatetime()); time time = timestamp.from(zdt.toinstant()).gettime();
Candidate: <UNK> *= 2;
Reference: why did we remove this assertion? it should remain true or some other state... we should evaluate the transition, as that is the purpose of these tests.
Candidate: remove the method("post")
Reference: line#179 should move in this if block.
Candidate: why do we need the <UNK> here?
Reference: a few of those are only used in their respective compute* methods. i suggest that they are moved and there instead, to make the constructor a bit shorter (it's still
Candidate: why do we need need to evict the <UNK> here?
Reference: should you keep a ref to the conn.getproperties instead of keeping the conn around?
Candidate: i don't think we need to throw an exception
Reference: please directly update the expected value (in its file)
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: nit: if 'builderledgerid' is of type long, then let the received arg type be long instead of primitive long
Candidate: this counter?
Reference: this does not handle classifier and type, not sure it was intended
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: please remove.
Candidate: is this needed here?
Reference: yes, definitely should be a constant
Candidate: if we is software software software software software software software software software software software software software software software software software software software software software software software software software software <UNK>
Reference: either no brackets or put return on its own line.
Candidate: i don't understand this matters, if this is matters, but if the is is the
Reference: why move this block down? seems to me like it could stay up there.
Candidate: hmm. this should be the <UNK>
Reference: string[] synonyms = new string[]{ "maven 2", "buildr", "gradle", "ivy", "leiningen", "sbt" };
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: actually i think you might be able to straight up use cryptutil here, but the file/cipher input stream would still be good to refactor
Candidate: should we throw an exception here instead of eating the exception?
Reference: you can move this line outside of the try block. sorry. i just saw that now
Candidate: should we be <UNK> to <UNK> <UNK>
Reference: illegalstateexception
Candidate: can we use the <UNK> here?
Reference: properties is good enough for logs
Candidate: nit: 49
Reference: i understand the necessity to convert between bytebuf and bytebuffer here, but we should add a todo to later to clean it up.
Candidate: this should be the feedid
Reference: i guess we should check for maybeprojectid.ispresent() here as well
Candidate: why do we need the getconnection here?
Reference: this would be easier to read if collapsed
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: this is a general question for all policies which mutate the request, should this just insert the header value? @jonathangiles @srnagar
Candidate: should be schedule() { <UNK> }
Reference: nit: is there a way to merge this line and the installcomponentspath.createextra(...) line below?
Candidate: please use <UNK>
Reference: your friend here is the joda periodformatter. you can tell it how a given format is structured, and then just call formatter.parseperiod(timestring).tostandardduration();. have a look at <link_0> for more info.
Candidate: why do we need the <UNK> here?
Reference: log this error
Candidate: i don't understand this matters, this matters, but you can use 'final'
Reference: as in places above, use  if (zone == null) { return null; } return createsecuritygroup(name, zone);  ?
Candidate: why do we need to <UNK> stuff?
Reference: can this be in a try with resources block to guarantee it is closed?
Candidate: if we is the software <UNK> software <UNK> should be be the
Reference: there's no need to find the metadataschema object first, you can just use the other findbyelement() method which takes in the metadataschemaname: <link_0>
Candidate: the "used" should be be the
Reference: illegalargumentexception
Candidate: what happens if the overflows?
Reference: should we rename access_type to token_type to better match the code?
Candidate: typo: <UNK>
Reference: would this be better as a clone method inside of rtpdescriptionpacketextension?
Candidate: should this be <UNK>
Reference: suggest mentioning the exact class(es) rather than the the possible choices.
Candidate: should we use the getconnection here?
Reference: doesn't code rely on this semantics? can't constraint be none? shouldn't callers be fixed too?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: the one below will be more brief:  java return sponge.getregistry().createbuilder(builder.class);
Candidate: this should be <UNK>
Reference: i think that 500 deserves a static variable :)
Candidate: i don't think we need to call the <UNK>
Reference: this boolean value is there twice. i would add a variable with good description in name. something like: boolean dataexceedmaxlength = maxlength < data.length; and then use this variable in
Candidate: why do we need to the the payload?
Reference: this change looks 95% great, but i think there's a mismatch here. iirc the object passed to anymatch() will be of type notificationattribute, and as such it is tremendously unlikely
Candidate: nit: 49
Reference: we should use guavas moreobjects to generate tostring() implementations like we have with other code.
Candidate: can we use the <UNK> here?
Reference: log.trace
Candidate: should we throw an exception?
Reference: for brevity, declare a local ret = getreturntype(). order the comparisons in the natural way: if (variable == constant)
Candidate: rename to iu
Reference: you may remove this.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why?
Candidate: why do we need to check for the <UNK>
Reference: this sentence is wrong. "claim processed ok" seems better.
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: could we please use objects.equals ?
Candidate: why do we need the <UNK> here?
Reference: this should be in a separate patch
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: would be better if we check accountservice == null because accountservice is directly passed to getblobstorageservice method.
Candidate: please use <UNK>
Reference: can we refactor above statements, they contain similar functionality. additionally assigning and setting the click listener can be done in one line instead.
Candidate: nit style
Reference: should we be using getter method for metadatastore incase we move the classes in different packages later ? also do we require to add metadatastore as private member here ?
Candidate: nitpicking: can we evict need to evict the <UNK> to evict the them, so we don't need to evict the them, so we should need.
Reference: @philsttr i've been giving this some further thought and i agree that we should make it easier for users to leverage an existing basic (default) implementation. so let's say we
Candidate: this should be the <UNK>
Reference: we check that request == currentrequest. this happens only for blockwise transfer. for block2 it's ok as this avoid to set context for each block2 request. for block1 this means
Candidate: if we is the software exception here but we don't need to throw an exception if it is the software exception, so that it will throw an exception
Reference: make sure this is the correct exception
Candidate: should we throw an exception here?
Reference: - better with \n otherwise the string is too long with many contexts or with lengthier names. - could use method reference context::getname.
Candidate: we should need to move this logic outside of the the packet: try { try { <UNK> } <UNK> e) {
Reference: did you consider using java.nio.file.filesystem instead?
Candidate: why do we need the exception here?
Reference: i think we should crash here by throwing illegalargumentexception.
Candidate: please use the syserr
Reference: must be aidontuseit. same effect as outcome.discard (no cards selection by ai), but useful to find ai unsupported cards in the future.
Candidate: consider using <UNK> <UNK> <UNK> <UNK>
Reference: it might be cleaner to pass a type and not an instance. <link_0>
Candidate: should we be <UNK> here?
Reference: instead of sending another variable to snapshot save, can it leverage the uri template variable?
Candidate: i'm not sure that this fixes this, but i am not sure that this fixes the <UNK> fixes the <UNK> fixes the <UNK> is not better.
Reference: shouldn't this lifecycle listener be removed in a finally block?
Candidate: why do we need need to the <UNK> request?
Reference: nickpicking - if you use 0.0 instead of 0, you'll save the promotion from int to double.
Candidate: this should be the <UNK>
Reference: do we really need messageformat? slf4j supports parametrized logging. (<link_0>
Candidate: this should be the <UNK>
Reference: isempty()
Candidate: rename to |= <UNK>
Reference: similar question here -- when will this get thrown and what will happen when it gets thrown?
Candidate: i don't think we need to include the e.getmessage() in the issue?
Reference: casting to view before checking instanceof is highly suspicious
Candidate: use <UNK> objects.tostringhelper() instead.
Reference: minor: you could avoid calling getsize() multiple times
Candidate: do we need the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: there's no need to use a regular expression here, nor remove whitespace; the parser will do that. return input.replace(",", " or ").replace("-", " not ");
Candidate: should we use the string concatenation instead of stringbuilder?
Reference: do you want to keep outputting ^^?
Candidate: @exper0 let's use try-catch-fail
Reference: please keep existing unit tests
Candidate: please use <UNK>
Reference: we may need to broadcast the alter_stats messages to invalidate the plans based on that stats too and remove the entry from the dictionary cache. see statisticsadmin.ddlnotification().
Candidate: can you check if <UNK> == null) { <UNK> |= <UNK> }
Reference: imho it would be better not to wrap pushresponse dto but create missing methods in the dto and place the logic inside the method in jgitconnection.
Candidate: can you rename this to <UNK> <UNK>
Reference: maybe you could add a log message here to confirm the creation of the object.
Candidate: should this be <UNK>
Reference: this implements java's comparable. take a look at the flow/flow-math implementation (it can be found in the target generated source).
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: this log message lacks the context to be actionable by a sysadmin as an info message. either add the context necessary for actionability by a sysadmin and change to debug.
Candidate: we should software software software software software software software software exception software software software software software software software software software software software software software software software software software software software
Reference: in general i prefer using magickeys, so that the primary owner is always the same.
Candidate: we should need to do we need need to check the the <UNK> <UNK>
Reference: suggest leaving as final and assigning values in both cases of the if statement.
Candidate: this should be the <UNK> <UNK> the <UNK> is the <UNK> and the the vdsid will be an arrayindexoutofboundsexception if <UNK> { <UNK> }
Reference: don't return null. throw new resourcenotfoundexception() instead
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: with the change suggested above, this can be simplified to just throw controllerlogger.root_logger.unsupportedcharset...
Candidate: should we throw an exception?
Reference: this is not testing the new method for the relative path and i'm not confident that the new method is working properly for the relative paths. could you please use
Candidate: why do we need to use <UNK> here?
Reference: @droneboost what about the rotate field from mapstatus?
Candidate: this should be the <UNK>
Reference: assertthat(somecontainer).hassize(4) is shorter and gives better error message. the same 15x in this pr: ctrl + f ".size()).isequalto("
Candidate: use iu
Reference: i'd say we should do it the other way, enumerate the "good" states. looking at the list of host states i'd guess "up" and "maintenance" only? roy?
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: i think that this method would be a bit more readable and concise if it was written as follow:  private void refreshnotifications() { list.setvisibility(view.gone); progressbar.setvisibility(view.visible); getpageandnext(1) .flatmap(page -> observable.fromiterable(page.items()))
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: testng uses assertequals(boolean actual, boolean expected), so assertequals(groups.size(), 1);?
Candidate: please remove *both* <UNK> expected)
Reference: can we get stringindexoutofboundsexception here for some malformed json? do we need to handle it?
Candidate: should we be the <UNK> here? if we { null) { throw new <UNK> { <UNK> } <UNK> { return (long <UNK> }
Reference: can you add some initial random delay. if not, every node during deployment will try to collect the stats at the same time.
Candidate: use getclass().getsimplename() instead of stringbuilder?
Reference: all channels already inited after initclient, what else do we wait here?
Candidate: is this the fixture.
Reference: suggestion out.message("i'm no longer managing the everyone team. please add committers to specific repos.");
Candidate: do we need a <UNK> here
Reference: use a camelkieconstants class declaring those headers. the convention is using *camel* case (of course :d) for the values. so camelkieconstants.response_type --> "camelkieresponsetype".
Candidate: can we use static"
Reference: no use doing this.game...
Candidate: this should be <UNK>
Reference: questiontype is shown here, but in the test files, they show up as questiontype. i think we can go with data-questiontype here instead, to be consistent with the test files
Candidate: why do we need the <UNK> here?
Reference: this does not do what you believe it does :wink: also, you need to take a copy when assigning it to the field during construction to protect against mutation from
Candidate: can we return null?
Reference: may want to consider making the "protocol" to be the first line to match params order
Candidate: this should be the <UNK>
Reference: suggestion assertmessageeventexecutionset(emptysubprocess.getexecutionset(), empty_value, non_interrupting, empty_value);
Candidate: suggestion <UNK> empty_value, non_interrupting, empty_value);
Reference: unsupportedoperationexception seems reasonable here.
Candidate: this should be the <UNK>
Reference: maybe use this((e, ctx) -> fn.apply(e)); instead?
Candidate: why do we need the <UNK> here?
Reference: i get an ide warning suggesting this: suggestion return collections.unmodifiablelist(collections.singletonlist("<unistd.h>"));
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i would eliminate the eventtype variable, since it's only used once and doesn't add to readability.
Candidate: i don't think this should be the <UNK> so we don't need to check whether the result is null. if it's null.
Reference: do i read this right, that we're doing the exact same thing twice?
Candidate: why do we need need to check the <UNK> here?
Reference: @ptirador you can use repositoryfiles.relativizepath here and below
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: doesn't this have to be unsafesubscribe?
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: this should be inside the for loop otherwise failure to close one socket will cause all other sockets not to close
Candidate: this we remind me nervous if we is expecting the exception on the <UNK>
Reference: i think it could be benefitial to have two overloads (jsonobject, jsonarray), very similar to what the sdk has
Candidate: this should be the fixture.
Reference: we actually want to do this as part of trysetbytes so that we compact the index if needed. i would recommend having an overload of trysetbytes and setbytes (and then
Candidate: why do we need to check the <UNK> here?
Reference: if distribution target is null, maybe makes sense not to emit this dimension at all.
Candidate: the fixme fixme <UNK> to be the <UNK> <UNK>
Reference: execute the search code system request synchronously on the current context.
Candidate: why do we need the <UNK> here?
Reference: is this used anywhere?
Candidate: if <UNK> == direction.incoming) {
Reference: this was really puzzling. extracting it to a "packonlycontainsreftable()" function would make it clearer.
Candidate: if <UNK> != null && <UNK> && <UNK> { return; }
Reference: pushcontext(lcc)
Candidate: why do we need to synchronize on the <UNK>
Reference: why not throw t?
Candidate: should we throw an exception?
Reference: @mswiderski could you move this string to _perspectiveids_ file and i think its also missing to create the actual perspective to link in here instead of the screen directly. i
Candidate: i don't think we need to check the the <UNK> the <UNK> is the
Reference: please bring the braces back.
Candidate: why do we need to use the <UNK> here?
Reference: maybe could be nice having a similar behaviour of the corresponding js file: __resultsetprocedure.js__. in term of write and read data from a real cache.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: that's not best practice. we don't care if it's the same object.... this is just a boolean, we need to test for equality. also you should use asserttrue...
Candidate: why do we need to use the <UNK> here?
Reference: how about making this exception message a little different than the below one. suggested: no token generated from gsscontext for request %s
Candidate: should we be schedule() here?
Reference: we should use the assertequals which includes a message argument so we can log a failure reason instead of just the exceptions stack trace.
Candidate: this should be the <UNK>
Reference: similar thing here: summary is not added to the end but is replacing the existing rows.
Candidate: i don't understand this matters, this matters, but i think this matters, that the <UNK> is the <UNK> <UNK> is minimized to itemstack.
Reference: rename to event
Candidate: please use <UNK> <UNK> <UNK>
Reference: it can't be null, by construction.
Candidate: why do we need the <UNK> here?
Reference: licences is misspelled here - intentional?
Candidate: should we be <UNK> here?
Reference: should this have some sort of explanatory text to indicate that these are suppressed exceptions? we don't do that above for the getcause() handling, but now with 2 possible types
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: remove
Candidate: i don't think we need to log.isdebugenabled() for the
Reference: could be an else if here as if we went into the if block lazyavrocoder.threadschemasupplierfactory.get() will return null
Candidate: this should be the <UNK>
Reference: it allows 0.0 and 1.0. what each value means for decay rate?
Candidate: <UNK> *= 2;
Reference: you can use writetrashfile to shorten this: file readme3 = writetrashfile("nested-repo", "readme3.md", "content");
Candidate: please remove the unused line.
Reference: if locationlistpreference implements onitemclicklistener these lines would be cleaner. what do you think?
Candidate: i don't understand why, but it is be the if you do, can you move this into a separate method?
Reference: assertequals("int", bert.gettypenamegenericsed()); what does sed stand for? genericseed or genericset?
Candidate: [minor] don't need to _parallel to immutable.
Reference: it would be good to set to null the toolkit
Candidate: this should be <UNK>
Reference: java final int checkeditem = math.max(0, cachetypes.indexof(settings.getcachetype());  should convey the intention more clearly (imo).
Candidate: this should be the <UNK> <UNK>
Reference: transaction_time_zone
Candidate: can you use the <UNK>
Reference: * style nit: move static method to beginning of the class * visibility can be reduced to private
Candidate: why do we need to check on the sides of the
Reference: s/header was/headers were
Candidate: recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery recovery
Reference: what is the difference from this getconnection and other getconnections ?
Candidate: should we use the <UNK> properties?
Reference: this check can be moved prior to class targetclass = (target != null ? target.getclass() : memberclass); - like 2.6.
Candidate: please use <UNK> <UNK> <UNK>
Reference: return an empty list instead of null (same for l77)
Candidate: should we use <UNK> here?
Reference: don't seems to send the latest patch set here !!
Candidate: this is be <UNK>
Reference: minor code style improvement: java deadline deadline = optional.ofnullable(context.current().getdeadline()); if (usetimeout) { deadline = deadline.or(deadline.after(requesttimeoutms, timeunit.milliseconds)); } return deadline;
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: why not just folder.delete(true, null) ?
Candidate: should we be the <UNK> here?
Reference: instance?
Candidate: please use <UNK> <UNK> <UNK>
Reference: style fix suggestion public void setignoredplayertimeout(iuser user, long time) {
Candidate: why do we need the <UNK> here?
Reference: the exception message should be improved to print a proper function name.
Candidate: <UNK>
Reference: let's keep that block where it was before. the idea is to emit items which arrived before an error occurred and then terminate with a call to onerror. streaming output
Candidate: this should be the <UNK>
Reference: could we also test the case when the same report is mentioned in only typescript property?
Candidate: i don't see the reason that this used?
Reference: shouldn't the fail be outside the for-loop? current impl runs at most 1 iteration (either exit through break or fail)
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: i think this should be ok as it should get encoded. it should point to the newly created role.
Candidate: i don't think we need to check the the <UNK> the <UNK> <UNK>
Reference: these will generate 2 transactions, making the operation non-atomic. i think it would be better to aggregate this in a single transaction if possible
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK> the <UNK> is the
Reference: safer to split on \w+
Candidate: why do we need to check the <UNK> here?
Reference: actually i find this highly confusing. "checkwidget" left me puzzled -- why should we check a widget if we're going to create it? oh wait, we're checking the parent. but
Candidate: why do we need to check for the <UNK>
Reference: the value should be a constant ;-)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: unfortunately this test is flaky. it will sometimes fail for the 1st time and almost always will fail for 2nd run.
Candidate: the syserr should be the <UNK>
Reference: should the value be 5 (seconds)?
Candidate: why do we need need to evict the <UNK> here?
Reference: is null correct here? that seems weird...
Candidate: can we be simplified to <UNK> <UNK> ? <UNK> : <UNK> : <UNK> { <UNK> <UNK> : <UNK> }
Reference: we need to check whether debug is enabled here
Candidate: should we catching the exception?
Reference: won't this be a double-decrement?
Candidate: why do we need the <UNK> here?
Reference: this looks like all evaluators are treated equal. we wanted to have weights for combining the scores. wouldn't that be done here?
Candidate: i don't think we need to do we need need to do we need need to do we need need to <UNK> the <UNK> <UNK> <UNK>
Reference: rename to listiterator
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: is it possible for this to remain a collection/set instead of being copied into a list? i think there are a few methods in this class that take in the
Candidate: can be replaced with <UNK> <UNK> <UNK>
Reference: with the exception of constructors, non-static inner classes and setters the this key word isn't usually needed.
Candidate: <UNK> -> <UNK> <UNK> <UNK> -> entry.getkey(), <UNK> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: may be this should go into the method which is actually doing the job. also one log.info for the entire gc should be good enough; others may be downgraded to
Candidate: log.isdebugenabled() we don't need need to do we need need to wrap the lock in the finally block
Reference: pass settingsrepository as argument to downloadlanguagetranslationusecase is not necessary
Candidate: do we need need to log first?
Reference: why is this returning null? shouldn't it return the azureleaderelector ?
Candidate: unsupportedoperationexception should be an empty array.
Reference: this particular test doesn't need this header, right? if so, please remove it. also, there are a few more tests that don't need the header. please update them.
Candidate: whitespace will end up will end up will end up will end up will end up will end up will end up will end up will end up will end
Reference: why we need these extra brackets?
Candidate: can be replaced with <UNK> <UNK>
Reference: this would force the dse driver to use the oss lbp. i think instead we would like to make this test work with the dse driver using its default lbp
Candidate: why do we need the <UNK> here?
Reference: same here, this cast shouldn't work. you'll need to expose it using an additional interface (check org.spongepowered.common.interfaces for some examples)
Candidate: the syserr should be be the
Reference: should this be "object name required"?
Candidate: please use stringbuilder?
Reference: why do you need to return a boolean from processentityinfo? could you not handle the adding of the new entityinfo list in processentityinfo directly?
Candidate: you can use the <UNK> here.
Reference: if we specify a cluster size for this test of 3 (i.e. without using the cluster_size constant), we can write a single assert to verify that arguments.containsexactly(1l, 1l, 1000l) (pseudo-test-code,
Candidate: use <UNK> <UNK> <UNK>
Reference: timber.e :)
Candidate: should we throw an exception here instead of returning an error?
Reference: let's make a static util method to return the corresponding lock in the lock array based on block id. e.g.,  private static reentrantreadwritelock getblocklock(long blockid) { return block_locks[(int) (blockid
Candidate: i don't think we need to close the exception in the finally block.
Reference: is this to avoid the method being called more than once? if it is not an expected behavior, shouldn't we raise an exception?
Candidate: i don't think we need to check if the is { return; } <UNK> } }
Reference: i suggest a name to structure map to speed up lookup
Candidate: this should be the <UNK>
Reference: i suggest to avoid the negation as there is anyway an else block.
Candidate: this should be the <UNK> <UNK>
Reference: the essence of this assert is not clear for me. can you, please, clarify it?
Candidate: we should need to use the in the
Reference: could we define 0 as a constant (e.g., retry_timeout_ms)?
Candidate: what happens if you want to do the getcredentials here?
Reference: expected value should always be the first parameter, and the actual value second, e.g. assertequals("<p>_foo bar_</p>\n",html)
Candidate: why do we need the <UNK> here?
Reference: if (shouldcopyrequestheaders() && !this.copynoheaders) {...
Candidate: why do we need to use <UNK> here?
Reference: typo: success
Candidate: should we be the getconnection here?
Reference: this is already done by the setuiforinteraction(false).
Candidate: can we move this into the messages.properties method?
Reference: can we set as a constant?
Candidate: you don't need to use the <UNK>
Reference: if we're returning a new writable for each evaluation anyways, cannot we defer the wrapping to hive by simple adjusting the return type, and return ispageview right away? also ...
Candidate: why do we need to mock here?
Reference: the truncation handle is already updated above, i think you can ignore it here.
Candidate: why do we need the <UNK> here?
Reference: you should use static definitions for these, not "magic numbers": private static final int start_time_col_pos = 0; etc.
Candidate: please use <UNK>
Reference: perhaps "offer was already..." or "offer has already been..."
Candidate: why do we need need to check the <UNK> <UNK> the <UNK> <UNK>
Reference: can we abstract this description as a tool method and reuse that ? something like reloptutil#generatesdescription(stringbuilder builder, int relnodeid, string digest)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: please, always use braces in cycles and conditions.
Candidate: why do we need the <UNK> here?
Reference: i think this one should be exactref.
Candidate: should we throw an exception?
Reference: why is it always partition 0?
Candidate: can we move this to the <UNK> <UNK>
Reference: i don't think we should check if writing is permitted only if we actually detect that an update is necessary. even if no upgrade is necessary that the system is
Candidate: should we throw an exception here instead of returning an exception?
Reference: this one and the previous test can be refactored into a private method taking a location of the config file on classpath as a parameter.
Candidate: why do we need the <UNK> here?
Reference: perhaps this should be instantiated with the urlmap rather than setting static maps here
Candidate: why do we need the <UNK> here?
Reference: glustertasktype should be validated as well.
Candidate: if returnvalue && <UNK> && <UNK> { return; } <UNK> super.candoaction() && <UNK> && <UNK> && <UNK> { return; }
Reference: better print mcurrentdownload.getaccount().name in the log, instead of calling tostring().
Candidate: do we need to <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: why the parameter here is query but it is milestonequery in the togglemilestone method?
Candidate: why do we need the <UNK> here?
Reference: ![major](<link_1> refactor this code to not nest more than 3 if/for/while/switch/try statements. [![rule](<link_2>](<link_0>
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: you don't need to divide the block size by 2 here for the latter case. that was done in the previous query because it had two in-blocks, so we needed
Candidate: the syserr should be the
Reference: i think we should probably make this a protected method on abstractbamfileindex and implement it there for bai and here for csi. or we maybe make it abstract and pull
Candidate: i don't think we need to do we need need to the the in the presenter.
Reference: is that a valid behavior?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: this seems dangerous because it may impact many other test cases and introduce different behaviors depending on the order of execution of the tests. you probably should save the hooks
Candidate: why do we need the <UNK> here?
Reference: isn't this wrong? it should either be attributes[attributes.length-1] (and overwrite the last entry in the array, which is probably equally wrong) or it should extend the array. the old code
Candidate: please use <UNK> <UNK>
Reference: add debug logs in each block and add a newline at the end of each block to improve the readability
Candidate: why do we need to check the <UNK> here?
Reference: you don't need this factory, you can use mockito to mock url.openconnection method
Candidate: this don't need to check for the <UNK>
Reference: please add a new newlinkedhashmap method to our collectionhelper. i'll work on pushing the changes we made in hv regarding the sizing. (with the current code, you always undersize the
Candidate: should we be schedule() here?
Reference: please use here getpackagename() instead of "com.owncloud.android", the package name might change in brandable solutions
Candidate: why do we need need to override the <UNK>
Reference: how about a oneliner? return intstream.range(0, num_of_snapshots_to_create).map(i -> createdisksnapshot(diskid)).collect(collectors.tolist());
Candidate: please use <UNK>
Reference: this breaks compatibility.
Candidate: change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change, change,
Reference: should message be "progress response received" ? also this: + (progressresponse == null ? "null" :" progressresponse.tostring()) can be replaced by: + progressresponse they are equivalent, if the variable is
Candidate: why do we need to here?
Reference: can we make this method return a collection of config.encryptionlevel? i think it'll make code simpler - no need for ignored testname constructor argument and flat list of config.encryptionlevel can
Candidate: 49
Reference: in reviewing this we were concerned about the scenario where position legitimately throws an exception causing mark to remain un-updated. in this cas, due to the catch, it will lead
Candidate: i don't think we need to throw an exception if the exception occurs, so we will throw an exception
Reference: i think we could get rid of both the constant and the local variable and just write e.g. 2 instead of offset+1.
Candidate: why do we need this?
Reference: please indicate possible values in exception message
Candidate: please use syserr
Reference: wouldn't it be more expressive in functional form? clusterfeaturedao.getsupportedfeaturesbyclusterid(clusterid).stream() .filter(supportedadditionalclusterfeature::isenabled) .filter(f -> f.getfeature().getname().equals(featurename)) .findany() .ispresent();
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: recommend to use stringbuilder to concatenate string
Candidate: this catch (throwable e) { throw nosuchalgorithmexception { throw exception } catch (throwable e) { thread.currentthread().interrupt(); throw { thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw ioexception e) { throw exception } catch (ioexception e)
Reference: should this line assign the field instead of a local variable so the csvconverter.getbytecount() method calls this instance of countinputstream?
Candidate: please use <UNK>
Reference: nit: this can be a one line log.tracef("%s %s", this, satisfied);
Candidate: why do we need the <UNK> here?
Reference: as discussed, here we can just use the same high watermark as the low one - it will make the buffer's size more constant, instead of varying between 2 sizes.
Candidate: i don't understand this matters, but this is the the <UNK> is the <UNK> the <UNK> is the
Reference: could do  java set<fileref> smallestfiles = new hashset<fileref>(filestocompact.keyset()); filestocompact.clear(); return smallestfiles;  slightly easier to read than for loop
Candidate: why do we need need to the <UNK> here?
Reference: please reduce allocations here. default arraylist size is 10, it's pretty unlikely that we get more than 2 cookies for a given domain. also, it can be allocated lazily on
Candidate: why do we need to use <UNK> here?
Reference: do you know what scenarios would result in the nosuchalgorithmexception or the keystoreexception? it looks like you essentially disabling hostname verification if either of these excecptions occur, by using a
Candidate: why do we need to use <UNK> here?
Reference: this is missing an .in(scopes.singleton).
Candidate: should be be the <UNK> ?
Reference: you handle all these exceptions in the same way so you can use multi-catch: } catch (revisionsyntaxexception | ambiguousobjectexception | incorrectobjecttypeexception | ioexception e) {
Candidate: why do we need the <UNK> here?
Reference: never return null. instead throw an exception, like: throw new oauthexception("echo api only supports two legged oauth calls");
Candidate: this should be <UNK>
Reference: shouldn't you shutdown the daemon thread before trying to stop the task threads?
Candidate: should this be <UNK>
Reference: this throws an npe when originalcontenttype is null and setoriginalcontenttype is false.
Candidate: this should be the division for the <UNK>
Reference: please do *not* leave authorization turned off across test methods. this can result in unexpected behavior. it should only be temporarily turned off to create (or delete) test content.
Candidate: should we use the <UNK> here?
Reference: we only need to log this if partition handling is enabled, else we will get a lot of warning spam i would think.
Candidate: i don't think we need to synchronize on the <UNK>
Reference: this will lose the original cause of the error.
Candidate: why do we need to use <UNK> here?
Reference: this is getting quite expensive. let's just change this to gettaggedmemoryallocations(queryid) instead. if tests are not easy to fix, introduce a separate function instead so this one (with the old
Candidate: i don't understand this matters, if we matters, but we don't want to use the <UNK> <UNK> <UNK>
Reference: continuing
Candidate: should we be the getconnection here?
Reference: then i would turn this in a one-liner.
Candidate: should we throw an exception?
Reference: needs asserttrue(...).
Candidate: this fail()?
Reference: the cda messages of the extend won't be displayed in the cda phase.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: intellij warns that 00 is octal. shouldn't be a problem but maybe we can avoid the warnings by just writing a single 0
Candidate: why do we need to use the here?
Reference: passing null rather than exceptionhandler argument.
Candidate: should this be the <UNK>
Reference: the original file appears to have a call to "setbankdataviewcode" in this method, but i don't see that call in this overlay. can you please add that back in if
Candidate: i don't understand why, but it matters, but it is be the
Reference: should this still include the key's hashcode as well as adding the sequence hashcode?
Candidate: objects.hash()
Reference: why is the usedelimiter("\\a") needed here? or why not use the good old bufferedreader.readline()?
Candidate: why do we need to <UNK> here?
Reference: you can probably declare the field directly as a cachingfield if that is going to be enforced later anyway
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: just a note that this (existing) use of index strikes me as fragile. if we put constants in for all of these indexes the code would be clearer and we
Candidate: can be simplified to <UNK>
Reference: under which case, you get an ntlm challenge but you have a null ui event? #resolved
Candidate: this should be <UNK>
Reference: looks like this is already called from within locks, so you might want to just mark it @guardedby(rwlock)
Candidate: should we use the exception here?
Reference: classcastexception! you already have ftracewithsize, use it!
Candidate: i don't understand why, but i don't understand why, but i don't understand why, correctly, but i don't understand why, correctly, but i don't understand why, but i think why,
Reference: you don't need the group-id bit here, servermanager will include it automatically since you passed in it via the constructor
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: but it's also weird, because workerglobalbarrier is already initialized by itself.
Candidate: do we need the log the log
Reference: you can replace 15 with n.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> { return; }
Reference: the only user of fieldformatter is dbasefilewriter, which in turn cannot possibly be used by multiple thread in parallel because it keeps state about its position inside the dbase file.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: shouldn't it be according to the feature-supported?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> }
Reference: i know this can be kind of a pain, but we need to assert the sent payload too for all requests that have a body. this *really* helps future maintenance
Candidate: use gender here instead of <UNK>
Reference: while this works, we can just define another small data structure with 3 fields for this. that way we also don't need the info_* variables.
Candidate: if you can do we need to hide the overall the overall correctly, but this overall is the overall correctly, if the is correctly, but i said correctly, correctly, correctly,
Reference: this breaks the current handling of binary payloads (invalidutf8exception is no longer thrown so we end up replacing its contents, with potentially malformed data). when the view is editable we
Candidate: should we log the error message in the messages.properties case?
Reference: if (!disableacl) { copyreqbuilder.acl(objectcannedacl.bucket_owner_full_control); } copyobjectrequest copyreq = copyreqbuilder.build();
Candidate: why do we need to here?
Reference: pls. use collections.emptylist() instead.
Candidate: can we move this logic into the <UNK> (my if <UNK> { return false; } else { if <UNK> { return <UNK> }
Reference: remove map and put time
Candidate: why do we need the <UNK> here?
Reference: this logic doesn't seem right. what we want to support is running a particular check if its name was specified as a path token. this classes param should indicate the
Candidate: i don't understand if we matters, but if you do, but it is the software <UNK> <UNK> is not the software <UNK> but i don't think we need to check
Reference: how about adding the possible type of sinks here? (text_socket_output, mqtt_output)
Candidate: use <UNK>
Reference: the three inner blocks make the code hard readable, but i was not able to come up with more readable code. so probably we can keep as it is with
Candidate: if getstate() != null) { return; }
Reference: nit: given you're already using assertthat below, using hassize here would yield a clearer message in case of failure.
Candidate: why do we need need to the <UNK> here?
Reference: if this returned an instance of location, then presumably it could be automatically converted to json etc.
Candidate: this should be <UNK>
Reference: objects.hashcode ?
Candidate: use objects.hash()
Reference: failed to send this message [{}] to sns queue at {}, sending asynchronously -- should this be logger.info? or maybe we should have same format in all these logs for
Candidate: can we use snapshotid in the constructor?
Reference: why not set these attributes on the command itself?
Candidate: what happens if the exception is the
Reference: this return is redundant and should be removed
Candidate: why do we eating the exception here?
Reference: freeipa or freeipa just asking because in this pr both word were used.
Candidate: please use the <UNK> <UNK> <UNK>
Reference: this needs to be a formlabel. the label class, despite the name, creates a div instead of an html label, and there is a significant difference for accessibility. you can
Candidate: can be replaced with <UNK> <UNK>
Reference: same as before: please use unchecked and consider a private method ref instead of a lambda
Candidate: should we be the <UNK> here?
Reference: this was for: commit 99562fbbb40c72722468e5dc8c84b3e28494a20f author: alan viverette <alanv@google.com> date: tue oct 14 14:48:52 2014 -0700 check type resolution on declared methods and fields in viewdebug bug: 17375269 change-id: i8a74dfab1a1cf11b4240afb011d2729beea307c5
Candidate: why do we need the <UNK> here?
Reference: if we add the mipv6defaultgateway member then we'll need add a corresponding ipv6 route here as well.
Candidate: the syserr should be be the
Reference: this test should check the specific number that applies to the test dataset, otherwise a wrong positive number could be returned and we wouldn't notice.
Candidate: why do we need to use <UNK> here?
Reference: this log message is probably missing some context?
Candidate: this should be the <UNK>
Reference: this is not multithread safe
Candidate: please use <UNK> <UNK>
Reference: better to use stringbuilder.append() rather using string contact()
Candidate: why do we need the <UNK> here?
Reference: you forgot to remove character encoding setting here
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: if treating as singleton (with static instance field etc), then should constructor be private?
Candidate: why do we need to <UNK> here?
Reference: i like this test, makes sure that a users data will not be dropped if they accidently init. after the init call, could make a call to accumulo to ensure
Candidate: why do we need to mock here?
Reference: :-1: ;p
Candidate: this should be the <UNK>
Reference: s/getinstance()/instance/ ?
Candidate: should we use the <UNK> here?
Reference: lol this is one of the things that pmd will catch once it's in recipientteam.isempty() (oh no that means this will conflict with #5268)
Candidate: why do we need need to clone on the loop?
Reference: not currently used
Candidate: why do we need the <UNK> here?
Reference: do we have any unit tests for this logic?
Candidate: why is this the feedid
Reference: minor: may want to log when artifactslocation is not a directory.
Candidate: why do we need the <UNK> here?
Reference: this could be changed for consequencetypes.foreach(consequence -> this.consequencetypes.add(new consequencetype(consequence))); which i believe required less overhead.
Candidate: can we use checkargument here?
Reference: do you need to pass constant string_index_is_byte_quick_fix as argument?
Candidate: why do we expecting the checkcanceled on the <UNK>
Reference: there could be a separate method here to get screen name against datatype to keep case statement area smaller and more readable.
Candidate: rename to iu
Reference: style: static import geometrytype.geometry, geometryserde.serialize and geometryserde.deserialize
Candidate: the syserr should be be <UNK>
Reference: its a wrapper for all functions in functionregistry. what name do you suggest - scalartransformfunctionwrapper
Candidate: do we need need to use <UNK> anywhere else?
Reference: i wonder about this : this can become really tricky in case of parameterization with wildcard and raw type...
Candidate: i don't think we need to check for the <UNK>
Reference: path::of and also below
Candidate: please remove this line
Reference: this method will always fail if the impl is not httpcommandresult, but command result is not abstract and can be returned from the fwk. if someone uses this method in
Candidate: should this be <UNK>
Reference: typo
Candidate: i don't think we need to throw an exception if invoked?
Reference: suggestion toolprovider.getsystemjavacompiler() == null ? "are you running a jre instead of a jdk? the inline mock maker needs to be run on a jdk.\n" : "",
Candidate: should we use the <UNK> here?
Reference: how about booleanutils.tobooleanobject()?
Candidate: why do we need to use <UNK> here?
Reference: suggestion virtualfile work = virtualfilesystem.resolve("/work");
Candidate: if <UNK> == null) { return; } <UNK> } <UNK> { <UNK> }
Reference: can line 154 and 155 be done in one state to pipelinemetrics ?
Candidate: do we need need to be the here?
Reference: was this for http and https?
Candidate: should we throw an exception here instead of returning null?
Reference: try-with-resources
Candidate: i don't think we need to do we need need to print the exception here.
Reference: entry
Candidate: did you need to the
Reference: i hate to creep the scope here, but it would be super useful to capture execution site, e.g. pg wire, http etc
Candidate: <UNK> --> <UNK>
Reference: > maybe we could just throw an exception instead. you can try to do it but i think it might be difficult with current classes hierarchy > change the meaning
Candidate: should we use the exception here?
Reference: this assertion is no necessary as it is tested in assertallinformationmatch
Candidate: why do we need need to the <UNK> here?
Reference: can this exception be a static field somewhere, with the exception overriding fillinstacktrace to not capture a stack trace? the message is also not needed.
Candidate: this should need to encapsulate this into a catch block and catch <UNK>
Reference: assertion seems to be missing?
Candidate: please use <UNK>
Reference: i wonder if the static methods should have been left as deprecated in case someone is still using those. but i don't know if there is ever such a case
Candidate: why do we need to use the <UNK> here?
Reference: i think using a well-named constant e.g. default_move_thread_buffer_size is preferable.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: should we throw an error or atleast log this at info/error level.
Candidate: rename to <UNK> <UNK>
Reference: since handletimeout() and handleexception() are called by a single thread sequentially, does this method needs to be synchronized?
Candidate: should we use <UNK> here?
Reference: actually we need three parameters: 1. if we use external authentication, redirect to the external url, this can be anything externally set. default: yes 2. if we want to accept
Candidate: should this be <UNK>
Reference: here there are some duplicate code, please review it
Candidate: can be replaced by: <UNK> <UNK> { <UNK> = <UNK> <UNK> <UNK> }  ?
Reference: this may be overkill, but this seems like it's suited for using an arraylist + textutils.join().
Candidate: why do we need to check the <UNK> here?
Reference: @vbradnitski will be better to use pattern.compile and then matches
Candidate: do we need need to be <UNK> here?
Reference: ok i thought about this some more. i think it actually makes more sense to make this method only take parameters that allow thumb and alpha jump. then in the
Candidate: why do we need to assemble the <UNK> here?
Reference: i don't think we should escape on this level, we should explicitly escape title of a video when passing to a method, not in here. let's move it to verifyvideoadded(string
Candidate: please use <UNK> fail(); here instead of <UNK>
Reference: this.
Candidate: i don't think we need to check if <UNK> { <UNK> } else { if <UNK> { return false; }
Reference: can you make the underlying block synchronized rather than the method ? is it really needed ?
Candidate: why do we need to <UNK> here?
Reference: retrieving
Candidate: why do we need the <UNK> here?
Reference: looks like the worst that could happen is that the values in the log message are not precise
Candidate: i don't understand this matters, if we matters, but you don't want to check if the is is the
Reference: we usually use a lambda expression rather than anonymous class.
Candidate: why do we need to the <UNK> here?
Reference: use _int_ to allow for values > 127
Candidate: should we be the specific?
Reference: assert only the values you set. not the database generated ones like the id
Candidate: why do we need need to the <UNK> here?
Reference: @tsr-thulio please show @felipeaziz how we do that using enum abstract method
Candidate: can we move this to the 83 <UNK>
Reference: test data shows encoding issues. possibly using .build(true) helps here (might have side effects)?
Candidate: why do we need to use the <UNK> here?
Reference: aren't you decrementing the queuedqueries twice? first the query will get queued (queryqueued will get called), then the query will start running (querystarted  gets called and decrements), then query
Candidate: should this be <UNK>
Reference: should we move all these != null && !empty checks into a helper, where we simply pass the collection in ?
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: close the result set
Candidate: i don't think we need to print stack trace to the log.
Reference: - this em still can be null - in that case i would not do the logic below. - please move the content of this method into the updateemulatedmachines()
Candidate: the syserr should be the
Reference: you will get an npe if user is null. it shouldn't ever happen, unless the user gets deleted after it has been cached in simpleauthenticator, and given that we make
Candidate: if we is the software <UNK> <UNK> is the software <UNK> but i don't think it should be the to <UNK> the <UNK>
Reference: this seems a bit dirty - parse and register an xpathexpressionfactory but then only use the factory method constructor args. perhaps we need to refactor the logic into a utility
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can you declare exactly what exceptions are thrown? i suppose ioexception only?
Candidate: should we throw an exception here?
Reference: should assertopenblock(); here, and have a test that fails without it
Candidate: should this be <UNK>
Reference: this should really be done by separate catch clauses above line 364, e.g.  catch(abfsauthexception | abfsauthunhandledexception ex) { throw ex; }
Candidate: should be be info level here?
Reference: -1 the migrate operation should not add reference to unexisting socket-binding. the correct way to migrate such a resource would be to migrate the messaging subsystem, add the socket-binding resource
Candidate: can be replaced with <UNK>
Reference: does this need to be initialized here and closed in the coordinator? would be better if a single class was responsible for the lifecycle of this object.
Candidate: this should be <UNK> overflows?
Reference: instead of counting forks by iteration, better to make an assertion like the following:  java matcherassert.assertthat( forks.iterate(), matchers.not(matchers.emptyiterable()) );
Candidate: @paulodamaso the same as above.
Reference: i would use java.util.function.supplier<sslcontext> instead of your own zkclientsslcontext type here
Candidate: why do we need the <UNK> here?
Reference: could we add some logging when this happens?
Candidate: use <UNK>
Reference: let's mark all of the threadbound methods as final, so long as nobody else is overriding them. the whole point of deriving from this class is to allow the base
Candidate: this should be setemptyelement().
Reference: values put into positions never fetched back.
Candidate: what is a reason to use <UNK> <UNK> <UNK>
Reference: use the logger if you want to print something.
Candidate: should we be <UNK> here?
Reference: like gilad bracha's quote: "live is better than death", i would say "positive is better than negative" :) how about replacing it with: if (unmanagedcontrollers.isempty())
Candidate: is this needed here?
Reference: should this also check the derbydialect?
Candidate: should we be the <UNK> here?
Reference: not sure if this is the right thing to do. the channel is non blocking. if the write wrote partially, flush would return false and this will throw.
Candidate: do we need to here?
Reference: i think you probably want false here. true appends one of "created", "fast forward", or "forced-update" to the message. considering this is basically an unconditional copy, i don't think this
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: could you use strings.lenientformat here?
Candidate: why do we need the <UNK> here?
Reference: i think we should clean that up in a different way: afaik we do no longer have a difference between "add to index" and "track", so i think we should
Candidate: can you call <UNK> <UNK> <UNK>
Reference: why are we returning the boxed double?
Candidate: should this be specific?
Reference: doesn't work without this line? -- it's already registered as a pre-result.
Candidate: you should need to check for the <UNK>
Reference: local size sounds better to me than "entries"
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: style: can you inline this? multiple rectangle creation makes debugging a bit more difficult. instead, let's do: rectangle eventbounds = dpiutil.autoscaledown (new rectangle (rect.x, rect.y, rect.width, rect.height));
Candidate: if <UNK> == null) { <UNK> groupname = <UNK> } <UNK> -1); } else { if <UNK> == null) { <UNK> }
Reference: unrelated
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i'd use equals to make it clear we don't care about identity semantics (readers won't have to verify the value that is being set), but it's fine either way java
Candidate: ![major](<link_0> 'severity: major') remove this method and invoke conditionally. [![rule](<link_1>](<link_2>
Reference: what happens if daily is enabled and hourly is not?
Candidate: <UNK> *= 2;
Reference: btw, this is another potential npe and "implicit statement" to rework.
Candidate: please extract this into a local variable, store date creates several times. also, extra common pattern creates several common pattern creates several times. also, extra common pattern creates several times.
Reference: why is this loop necessary? don't you just need to click a single element? however, i could be wrong since i'm not 100% sure what is being checked.
Candidate: click on element? element? element? element? element? element? element? element? element?
Reference: since admin has everything, i believe it's pointless to wrap it by authorizedaccessmodel
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this template also needs a version check
Candidate: <UNK> *= 2;
Reference: this needs to also check if the individual components of the pair are null, because whenever httprequestgenerator.buildnoauthgenerator() is used to generate a request, it results in a call to commcareapplication.buildhttprequester()
Candidate: the syserr should be be <UNK>
Reference: no need to call load here
Candidate: i don't understand why, but it deserve the fixture.
Reference: please revert these changes. while we build locally on java 8, we target java 6 and i would like to make sure it keeps compiling on these older jdks. our
Candidate: why do we need need to the <UNK> here?
Reference: could you please change it to the lowest supported version now?
Candidate: this should be null if (state != null && <UNK> { <UNK> }
Reference: do we need to test counter reset case after this? e.g. makednssuccess(...) assertfalse(...)
Candidate: you don't need to use the <UNK> <UNK>
Reference: you can avoid the duplication of that line if you simply add this to the first if: && (((memberproposalinfo) getproposalinfo()).fproposal).issuffixproposal()
Candidate: if <UNK> != null && <UNK> { <UNK> } else { if <UNK> == null) { <UNK> }
Reference: cluster could not be resized?
Candidate: please remove the method("post")
Reference: shouldn't e be wrapped in a cucumberexception also in this case. the construct throw new cucumberexception(e); seems to be pretty common in the code base.
Candidate: you can use the <UNK> here instead of rules.
Reference: do these need to be synchronized?
Candidate: why do we need need to be <UNK> here?
Reference: this should probably reject nulls unless you want to have the compareto deal with them.
Candidate: why do we need to check for the sides of the <UNK>
Reference: shouldn't this be last.arrival_time - first.departure_time? i wouldn't consider layover at first and last stops to be revenue time.
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: @jesuino it might be possible to have more than one editor opened at same time, so it's possible than more than one editor are going to get that event at
Candidate: the syserr should be be <UNK>
Reference: @narakim i don't think we should do this. this api specifically expects a valid account instance. why are we substituting it with currentuser if an account isn't passed in? i'm
Candidate: if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: the problem i have with this change is you now need two plugins: * one to load jquery. that's all it can do. * one to load your code. which
Candidate: we don't need to wait termination (after <UNK>
Reference: i know this was already like this, but it is weird we are dropping the view before creating. if the goal is to assert that it throws an exception, then
Candidate: please remove the method("post")
Reference: maybe consider string.valueof() to circumvent npe.
Candidate: if <UNK> == direction.incoming) { <UNK> }
Reference: could not perform live snapshot due to error, vm will still be configured to t he new created snapshot: {}
Candidate: why do we need this?
Reference: execution service usage wrong here too.
Candidate: this don't need to call the <UNK>
Reference: if the function is allowed to return null, perhaps it is better to use ints.tryparse instead of parseint to avoid throwing an exception and return null instead.
Candidate: please use <UNK> <UNK>
Reference: this will just prolong the execution of the command by including the thread.sleep() in it. i think we discussed change on the line 664 that we need >= there, didn't
Candidate: why do we need to use <UNK> here?
Reference: i had to look at this for a couple minutes to realize that buildfsoptions is mutating the fsoptions. the .checkforscheme method doesn't return fsoptions or do anything else with it,
Candidate: why do we need to check the <UNK> here?
Reference: delete elements
Candidate: please use [our <UNK>
Reference: i'd prefer it as it increases readability imo
Candidate: this is the cheapest check) why, on the look, i am not sure why, but i am not sure why, but i am not sure.
Reference: method run has 33 lines of code (exceeds 25 allowed). consider refactoring.
Candidate: we should use the <UNK> in the <UNK>
Reference: this will incur a complexity of o(n). would it make sense to work with a set/map to make that test?
Candidate: i don't understand this matters, if you want to check the on the username?
Reference: the test 'null != importedpackages' must be with the second one (the second manage the 'importedpackages'
Candidate: do we need to check the <UNK> <UNK>
Reference: dimensions are not restricted to relationships. they can also be non-metric attributes.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: what is the value being multiplied by 0.2?
Candidate: should we use <UNK> <UNK> <UNK>
Reference: is simplename really what we want here? should we use type name (which can be different)
Candidate: do we need to use the <UNK> here?
Reference: why not pass exception e into storeexception constructor?
Candidate: could we use the foreach here too?
Reference: similary
Candidate: why do we need the tear to the <UNK>
Reference: @override
Candidate: @exper0 let's use <UNK> objects.tostringhelper()
Reference: so this checks if it is delete or create action. however, you already did check it when you created the action. getvalue(action.selected_key) will return you true if resource is assigned
Candidate: i don't think we need to check the <UNK>
Reference: definitely wrong. the implementation in storm-mesos is better than what you are copying into here. the existing implementation is more generic. please revert.
Candidate: why do we need to use <UNK> here?
Reference: sorry, null would be better: list<vds> result = dao.getalloftype(null);
Candidate: why do we need to use the <UNK> here?
Reference: does this inequality work with a non_address
Candidate: why do we need to check the <UNK> here?
Reference: the disk existence is already validated, please remove
Candidate: please use <UNK> <UNK> <UNK>
Reference: i think what's left here (besides nit on formatting) is to simplify the code and remove the wait loop. for example, if we use a countdownlatch instead of atomicboolean for
Candidate: this should be the fixture.
Reference: @llorllale let's use isiterablecontaininginanyorder here
Candidate: @exper0 let's move the meaningless here and stop meaningless to
Reference: so i see why you need the publisherclient.... i think you should take a repositoryfactory and a publishersession here, where repositoryfactory has a method to open the repository. it is
Candidate: why do we need to check for the <UNK> <UNK>
Reference: this should be done using the enumtranslator. for example, see vmgeneralmodel - > updateproperties(). in addition, add the appropriate values to localizedenums.java an localizedenums.properties.
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: shouldn't the exception be passed all the way up? we need a build failure to happen if an exception occurs. no one will be looking at the console for a
Candidate: i don't think we need to print the exception here?
Reference: looks like this explicit cast was done to prevent overflow, hence i am not sure if it is safe to remove this cast same question for the other occurrences below
Candidate: nit: you can use <UNK> <UNK> <UNK> ethernet kind. you can use division explicitly)
Reference: log
Candidate: should we be the <UNK> here?
Reference: is there a better solution to this? maybe throw a new noopnamefoundexception? it auto skips in the first place when you do that.
Candidate: please use <UNK>
Reference: first condition is redundant with the second.
Candidate: why do we need the fully-qualified properties? here?
Reference: as discussed should we change the interface to this method to not give the impression that it would validly return an empty result? potentially the code would be read clearer
Candidate: can we use the <UNK> here as the ethernet headers, so far. it might be easier to read if someone wants to maintain the
Reference: remove -- we cannot spam system.err. optionally introduce a logger instead.
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, but it matters, but it is be the
Reference: invoking with null argument is an evil, please provide another method without arguments if it makes sense.
Candidate: should this be the specific?
Reference: the logic here seems a little over complicated. would iterating over the entryset of the intermediateresult and handle the id and partitions array in another method simpler?
Candidate: this should be the <UNK>
Reference: if i'm not mistaken, the visibility of this method can be restricted to package private
Candidate: this should be <UNK>
Reference: - given that jobregistry really isn't an internal component and - the direction you'd like to take this functionality per the blog post associated with this jira issue i'd say
Candidate: this should be the <UNK>
Reference: any time you have a constructor or method which is private but called from a nested or enclosing class, the compiler has to produce a "fake" member with package-private access
Candidate: can we use static"
Reference: did you miss correcting this and below?
Candidate: please use <UNK> <UNK>
Reference: any reason not to use testutils.tempfile?
Candidate: why do we need the <UNK> here?
Reference: this needs the same fix as in my change <link_0>
Candidate: this should be the <UNK> of the <UNK> <UNK>
Reference: might be unrelated to this pr, but is it possible to make isgroupedbyteam() a field instead of a method?
Candidate: why do we need need to evict the <UNK> here?
Reference: @guiseco what's the bundle args for here, since no arguments is being added to it?
Candidate: should this be <UNK>
Reference: nit: is it possible to show the name of the type here? now that the exception type is unsupportedoperationexception, the string doesn't add any additional information.
Candidate: why do we need the <UNK> here?
Reference: if deletionmeta is used outside directorycleaner, i think it belongs in its own file.
Candidate: why do we need to use <UNK> here?
Reference: use parent.getfs() instead
Candidate: google file name is overkill - google google google google google google google google google google google google google google google google google google google google google google google google
Reference: who will call circuitbreaker in this case?
Candidate: why do we need to <UNK> the sizes of the <UNK>
Reference: this is not a correct behavior for a missing feature just leave the default implementation in such a case however getticker is such a basic functionality i think we should
Candidate: this should be <UNK> to "ignired" we don't need to cast.
Reference: should we move an assert to the top?
Candidate: i don't think we need to evict the the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK> <UNK>
Reference: is this needed?
Candidate: curlies not needed
Reference: simplify this by using .putifabsent / computeifabsent?
Candidate: should be nice to overload of the <UNK> overload of the <UNK> <UNK>
Reference: change to "the allow partial"
Candidate: i don't understand why we need to check the if the is the <UNK>
Reference: call rxjavahooks.onerror so no exception is lost.
Candidate: i don't think we need to evict the the exception if it is the software exception but we don't need to throw an exception if it is the software exception
Reference: when you are calling validate during runtime. containsmacro("port") will still be true even and you wouldn't check port if its negative or not.
Candidate: this should be the <UNK>
Reference: accessinner -> getupcallresultinner, this seems to be incorrectly copy-pasted.
Candidate: this should be <UNK>
Reference: is this a more appropriate place to call mmediationrewardedadcallback.reportadimpression()?
Candidate: this should be the <UNK>
Reference: use repository.isvalidrefname(final string refname) to check if a given name is a valid branch name
Candidate: i don't need to check the <UNK>
Reference: the flow with nullable timingcontext concerns a bit. it should not happen, but assuming it does, we are going to record effectively zeroed samples (since start and stop time would
Candidate: why do we need the <UNK> here?
Reference: catch checkarg()
Candidate: what happens if the exception is expecting an exception when expecting an exception is expecting an exception when expecting an exception). expecting an exception when expecting an exception). expecting the
Reference: format
Candidate: i b/w <UNK> of the
Reference: the factory methods should be moved to datamanipulator and be renamed. e.g. datamanipulator.immutableof instead of datamanipulator.immutable.of. imo it feels cleaner. also applies to the mutable one.
Candidate: why do we need to check the <UNK> here?
Reference: out-of scope, but for future discussion: this technically only performs in-memory delete, whereas the modschema is a database-centric action, if we move this to only performing the check, we may
Candidate: this should be the <UNK>
Reference: we really should not need to check for null (we don't do the check in the save method so it would npe in the end). worth creating it in the
Candidate: this should be the 4.2 <UNK>
Reference: check your indentation/formatting settings. fyi i'm using eclipse with sun java conventions.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: magic constants...
Candidate: can we calculate the scale of the the scale manager?
Reference: remove this
Candidate: why do we need to assemble the layout here?
Reference: i propose to deal with this in a new static method asciilinereader.from(inputstream is) and deprecate the constructor. this will be safer for the users of asciilinereader and will simplify the
Candidate: the syserr should be the
Reference: no need for 0l, 0 is enough.
Candidate: why do we need the <UNK> here?
Reference: missing this. and potential npe on type.
Candidate: why do we need to use <UNK> here?
Reference: assertnotnull("root plan graph is null", compiledplan.rootplangraph);
Candidate: can we make this private?
Reference: no, i didn't
Candidate: should this be the <UNK>
Reference: suggestion // minecraft client can take some time to switch protocols. // sending the wrong disconnect packet whilst a protocol switch is in progress will crash it. // delay 250ms
Candidate: should we use the <UNK> here?
Reference: this doesnt account for the older explicitly set delivery annotations in the same way the standard message send process does. seems like they should behave the same?
Candidate: we need to mark the such such such as such as such as such as such as such as such as <link_0>
Reference: how about passing this color to the activity as well? on my device i see the primary color briefly when opening a task, we could avoid that by passing the
Candidate: oncreate() is is redundant, so we should need to bail twice.
Reference: remove this?
Candidate: please use <UNK> <UNK> <UNK>
Reference: any reason not to include bypassretry in the information with tostring()?
Candidate: <UNK> *= 2;
Reference: also remove these defaults if they don't apply to this provider.
Candidate: this should be the <UNK>
Reference: i dont think this will ever return null for env vars, but its worth keeping the check. what about a check or empty too?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: can you try to force all the segments instead of short-circuiting and exiting on the first failure?
Candidate: i don't understand why, but it matters, but i don't understand why, but it matters, but i don't understand why, but i am not sure why, but i
Reference: missing final
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: wouldn't collections.emptylist() be better than creating a new list?
Candidate: please use the <UNK>
Reference: execute that if block first so that we handle the case when both are null. after that execute the other if that checks if any of them are null and
Candidate: can be replaced with <UNK> <UNK>
Reference: should we use index + 1 to set the priority value?
Candidate: this should be the <UNK>
Reference: use the builder pattern: builder.topicname().subscriptionname()
Candidate: should we be <UNK> here?
Reference: instead of system.out.println you should use a logging framework. check the other patterns for examples.
Candidate: rename to iu
Reference: we should not use constants for these values. better to have a method return value as otherwise everything have to be recompiled to pick up a possible change
Candidate: why do we need to check for the <UNK>
Reference: i still see it.
Candidate: i don't understand why, but it matters, but why do we need to <UNK> the <UNK>
Reference: replace with a linkedhashset
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please add also voobserver.
Candidate: please fix.
Reference: useless for two reasons: synchronizing on a field that changes doesn't do anything, and setting the value of something doesn't need to be synchronized (what matters for synchronizing is blocks
Candidate: this should be <UNK> if (state { <UNK> } } }
Reference: no need to use uribuilder
Candidate: no need to use uribuilder
Reference: remove space after .tag and add space after the comma: notificationmanager.notify(mixpanelpushnotification.tag, 0, notification);
Candidate: if we is software software stripe { <UNK> <UNK> } } } } } } }
Reference: we don't really use final notation for local variables. i also think that this case might be shortened by moving value and actual value directly to assertequals statement - exactly
Candidate: please use gender here
Reference: why this change?
Candidate: shouldn't this be the
Reference: i think this white line can be removed.
Candidate: i don't understand why, but it matters, but it is be the <UNK> <UNK>
Reference: if available, you should always include the name of the variable which is causing the problem.
Candidate: i'm not sure if we agree. this is a <UNK> (?)
Reference: will this test pass after the year 2100?
Candidate: why do we need the sizes of the sizes of the sizes
Reference: please use computeifabsent instead to not allocate concurrenthashmap on existing key.
Candidate: should we log the error message in the messages.properties case?
Reference: should you verify that the management node operation was called?
Candidate: why do we need the <UNK> here?
Reference: same as above. use getandset(boolean)
Candidate: if notifying the check?
Reference: collections.singletonmap("dist", base) is better.
Candidate: i don't think this is be the the <UNK> is the
Reference: might be more clear to just reimplement this without using closeables... it's not gonna be a very long function.
Candidate: why do we need to here?
Reference: move into if statement here as above.
Candidate: you should want to print <UNK> here to print the warnings.
Reference: shouldn't you use ogmtablegenerator.segment_value_param instead of haveing a duplicated copy in segment_value_param?
Candidate: should be be <UNK>
Reference: we should probably protect log.v with vdbg and log.d with dbg
Candidate: ![major](<link_0> 'severity: major') either remove this log or rethrow [![rule](<link_1>](<link_2>
Reference: this may be too broad an swallow other things, such as io exceptions?
Candidate: do we need to catch interruptedexception here
Reference: maybe, you should give back temptvp
Candidate: why do we need to the sizes of the sizes of <UNK>
Reference: can you extract this to abstractdiskvmcommand for reusability in hotplugdisktovmcommand?
Candidate: this is the cheapest check)
Reference: this should always be the case. we don't need to expose a setter method.
Candidate: nit: this brackets is needed
Reference: use @slf4j in lombok.
Candidate: :disappointed:
Reference: somehow it should be initialized by ancestor generic resolver (method or class)
Candidate: please use map<> <UNK>
Reference: if calling shutdown() rather than shutdownnow(), then previously submitted tasks will be executed. is that wanted here? should it call executor.awaittermination()? i suspect probably not; not sure what synchronization it'll
Candidate: should this be <UNK> <UNK>
Reference: i think registry1 and registry2 should be two different instances, but still don't know why it failed.
Candidate: why do we need the exception here?
Reference: i would inizialize this in the declaration and make it final.
Candidate: the syserr should be be <UNK>
Reference: no need to close this reader as the underlying input stream is closed
Candidate: i don't think we need to hide the exception in the <UNK> we don't want to hide the exception in the
Reference: rather than having methods to modify createdat and updatedat, would it be possible to modify their json representation here instead? this would avoid having methods solely for the sake of
Candidate: why do we need to use the <UNK> here?
Reference: java.net.httpurlconnection.http_not_found could be used
Candidate: you don't need to use the
Reference: in case showerrordialog=false since the messages are aggregated, the fault is not localized (the localization of the fault is part of runactionexecutionfailed(..)). consider removing the showerrordialog from the 'if' and
Candidate: the syserr should be be <UNK>
Reference: this can be a static member of the class.
Candidate: please use <UNK>
Reference: when will the end method will run? if there are no tasks created you should run it yourself.
Candidate: if we is the software <UNK> software <UNK> should be be the
Reference: are these log debug messages useful to retain after you've finished your testing?
Candidate: why do we need to use <UNK> here?
Reference: expiration
Candidate: why do we need to here?
Reference: use  cteprovider provider = providers.get(clazz); if (provider == null) { cteprovider provider = new simplecteproviderfactory(clazz).create(); providers.put(clazz, provider); } managedviewtypeimpl.this.cteproviders.add(provider);
Candidate: why do we need to use <UNK> here?
Reference: why is there an array of sortfields with null in it?
Candidate: the syserr should be be <UNK>
Reference: is this needed? i thought the instructor remains on the same page after clicking publish or unpublish now.
Candidate: why do we need the <UNK> here?
Reference: there are a lot of getdefender().getability() here. how about just get them at the beginning
Candidate: why do we need to check for the <UNK> <UNK>
Reference: requirenonnull
Candidate: this should call this(...) call to this(...)
Reference: if your new conditional above on 339 evaluates to false we can't skip lastidx here.
Candidate: storagetype can be replaced by <UNK>
Reference: i think its better we throw a unsupportedoperationexception here.
Candidate: we should need to do we need to do we need need to do we need need to do we need to do we need need to do we need
Reference: constant
Candidate: why do we need to <UNK> the <UNK> here?
Reference: checked that this should get retried both by atlasdb-proxy and atlasdb internally.
Candidate: if you is the <UNK> the <UNK> is the <UNK> the <UNK> is the
Reference: use a significant name.
Candidate: this this be nice to use the <UNK> <UNK> <UNK>
Reference: would you mind removing this manual setting to null? environment will produce null if nothing with that key is set anyway. thanks!
Candidate: groupname ??
Reference: i think you need to pass the server_id which you want to update the status.
Candidate: should this be null? if <UNK> == null) { throw <UNK> }
Reference: should be probably stringutils.isnotempty because non empty string signifies inserted cd.
Candidate: rename to iu
Reference: merge these two if statements.
Candidate: formatting: } else { if <UNK> { return; }
Reference: application/json is used in multiple files and tests, maybe use a constant to replace it?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this should get called at the time of deserialization. use jackson properties to call this at the time of deserialization. certificateproperties does it as an examples.
Candidate: please use <UNK>
Reference: suggestion g.drawstring(text, x- (metrics.stringwidth(text) / 2), y + g.getfontmetrics().getheight());
Candidate: storagetype can be replaced with <UNK> <UNK>
Reference: nit: the scheduler understands negative intervals as "disabled", so you don't need to have this extra check here. just have syncgroupoffsetinterval return -1 if it's disabled.
Candidate: why do we need to use <UNK> here?
Reference: extraneous new-line
Candidate: i don't think we need to do we need need to check the <UNK> <UNK> the <UNK> <UNK>
Reference: nit: can't you just return rm unconditionally?
Candidate: this should be the <UNK>
Reference: minor thing: i think it's better if "columnresizepersistenceenabled" comes first in this expression (but it's not a big deal since initializedcolumns is empty when columnresizepersistenceenabled==false): if (columnresizepersistenceenabled && !initializedcolumns.contains(column)) ...
Candidate: i don't think we need to check for the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: add full link please <link_0>
Candidate: why do we need need to the <UNK> here?
Reference: why we need to change this?
Candidate: this should be <UNK>
Reference: you can remove the explicit type argument. it's unnecessary. thus the new code is new arraylist<>(); < layout
Candidate: why do we need need to the <UNK> here?
Reference: part2, right?
Candidate: why do we need to use <UNK> here?
Reference: space in between { and catch.
Candidate: should we throw an exception if we { null) { throw null; }
Reference: eh? we aren't literally sending the span in headers, right? that's basically the opposite of the intent of the in-band/reporting duo of dapper systems
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: the thread name shall be fixed, you can just regenerate the name according to our name convention.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do the getcredentials getcredentials
Reference: question - should we just use the value of user.skinid as the token id instead of adding another claim on the token? i think that might be best - less
Candidate: i'm unnecessary unnecessary <UNK>
Reference: this creates a properties table. copy'n'paste? ;-)
Candidate: <UNK> evidence, you can use <UNK> the fixture.
Reference: snappy?
Candidate: can we use the <UNK> here?
Reference: why don't we check for this case? could you please elaborate a little bit more what does the schema evolution mean? is it the table -> partition schema migration? (changing
Candidate: why do we need need to the <UNK> here?
Reference: better to always use {} imho.
Candidate: please use map<> <UNK>
Reference: why if and not just: options.add(vdsproperties.includepartitioned, filteringlunsenabled.tostring());
Candidate: we don't need to use the log.
Reference: license?
Candidate: this should be setemptyelement().
Reference: do we need to differentiate between ioexception and storeexception with ioerror?
Candidate: why do we need need to the <UNK> here?
Reference: what might we be ignoring here? debug?
Candidate: we should need to catch (throwable e) { throw fail(); } (throwable e) { throw fail(); } (throwable e) { throw fail(); } (throwable e) { throw fail(); } }
Reference: why do you need this? i$
Candidate: can we move this into a separate method? if <UNK> { null) { <UNK> <UNK> { <UNK> } <UNK> } <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> }
Reference: suggestion "joining against a multi-value dimension is not supported.",
Candidate: why do we need the <UNK> here?
Reference: why is the special casing for and/or/not needed rather than always taking the complement of the field's rangeset?
Candidate: can we move this logic into the <UNK> method?
Reference: name change
Candidate: i don't need to evict the <UNK> <UNK> the presenter.
Reference: it would be simpler to get tmftimestampformat.getdefaultimeformat() and set its time zone to utc, here or perhaps in the setup method.
Candidate: please remove the <UNK>
Reference: it looks like /dataset/ should be plural /datasets/ ?
Candidate: we should need to log the exception
Reference: this looks like a static method.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: exception is never thrown
Candidate: should we use the exception here?
Reference: typo: "not a join stream" actually, this sentence is incorrect: "parent ... must not be null, or not join stream." implies "parent is not a join stream", while it should
Candidate: rename to iu
Reference: return (splittime > ftime ? new timeevent(fentry, ftime, math.min(fduration, splittime - ftime)) : null); }
Candidate: should we be the <UNK> here? if we == null) { return; return; }
Reference: shouldn't we throw an exception and halt the execution here? if we can continue with a null url then instead of print stack trace we should log
Candidate: can we use the <UNK> here?
Reference: this could be protected (more an internal detail than for external consumption.)
Candidate: this should be setemptyelement().
Reference: i don't think we have conventions around this, but this. is used inconsistently here to reference member variables. (ie. partitionmanager doesn't have this). i'd prefer it without this. if there
Candidate: do we need to use getcredentials here?
Reference: as the rsdl is useful in many context i think that it deserves a class to manage it. would do you agree to add a rsdlmanager class? something like this:
Candidate: should we throw an exception here instead of returning null?
Reference: this isn't necessary anymore as soon as we use slf4j.
Candidate: let's bind time i.e. i.e. the call <UNK> and bind the <UNK>
Reference: still i claim that trim is not needed :)) per above split.
Candidate: please use <UNK> instead.
Reference: please add "this." to numstreams, indexinstream, numberofvalues to be consistent for all the fields.
Candidate: this should be the fixture.
Reference: this block is the same as updateassignment; can you just call that?
Candidate: <UNK> *= 2;
Reference: how about  return int_to_version.get(asint - 1);
Candidate: can we use <UNK> <UNK> <UNK>
Reference: i think we can still leave this as max index -1, as we would only have one snapshot id here.
Candidate: can be replaced by: <UNK> <UNK> input.entryset().stream.collect(collectors.tomap(entry -> entry.getkey(), entry-> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: suggestion if (!rootbasedir.getroot().equals(basedir.getroot())) { log.warn("unable to analyze module " + basedir + " that is not in the same root"); continue; } path newbasedir = rootbasedir.getroot();
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please use brackets, even for one-line blocks
Candidate: this should be <UNK> to iterable<integer>
Reference: out of curiosity, what was this actually doing before when update et al were passed? what was the cursor?
Candidate: should we be the <UNK> here? if we { return; } <UNK> } } } } } }
Reference: these debug statements should either be changed to trace or removed.
Candidate: i don't think we need to check for the exception if the is is the
Reference: suggestion "32767," +
Candidate: why do we need to use <UNK> here?
Reference: we need a test with number of resources with group message enabled > threapool size. this is the scenario where current code deadlocks. this test case does not cover that
Candidate: the syserr should be be <UNK>
Reference: i'll kick off the review then. it's better to have these protected, since templates should report whether they support forshare or not
Candidate: should this be <UNK>
Reference: given that other logic still leverage max weight, will this work for targettasks.size() == 1? if it works, it may be ideal to have test on this case to clear
Candidate: we should use the <UNK> here in the same as the other places as well.
Reference: why changing to a file if you load it fully anyway?
Candidate: why do we need the test properties? for the
Reference: shouldn't this be true? by default, multi-world commands should be true.
Candidate: why do we need need to the <UNK> here?
Reference: can't we rely here just only on the messageheaders.<t> t get(object key, class<t> type) ? right, that one is about illegalargumentexception, but at least we will be consistent with regular
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: perhaps this is an illegalstateexception
Candidate: nit <UNK>
Reference: is expectednodecount needed to be updated here? if the transaction is restarted upon node failure, expectednodecount should be updated.
Candidate: should this be specific?
Reference: null check in the full file.
Candidate: the syserr should be be the
Reference: {}
Candidate: why do we need need to the <UNK> here?
Reference: change to isempty, see below also, just for consistency with the condition above.
Candidate: i don't understand this matters, this matters, this matters, but i think this matters, that the <UNK> is the the <UNK> <UNK> the <UNK> <UNK>
Reference: what about a direct update to a recurring instance? wouldn't that lead to here and by simply changing it, braking the data consistency of the recurrence set? shouldn't that be
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: it is better to either throw an exception or return optional for such case. i see no good handling for null values in invocations of getfirstchildoftype method
Candidate: can be simplified to <UNK> <UNK> ?
Reference: i really don't want to be nitpicking, but to mitigate false positives i would add there also .isinstanceof(illegalargumentexception.class) and possibly even .hasmessage("runtime exception occurred") or .hasmessagecontaining(...) edit: it is also
Candidate: why do we need to wait for the clients?
Reference: when is this jmxreporter ever stopped? it's lifetime should be tied to the lifetime of the vert.x instance, and when the vert.x instance is closed it should be closed and
Candidate: the syserr should be be <UNK>
Reference: the contract of list isn't compatible with what sortedlistmodel is supposed to do, due to methods like add(item, pos). sortedlistmodel maintains data that's constantly and consistently sorted according to the
Candidate: if <UNK> == null) { getparameters().getstoragedomainid() actionreturnvalue == null) { <UNK> = <UNK> } { return <UNK> }
Reference: i think we should add the left join fetch for contact methods and home_address for all of these impacted *.jdbc classes with an hql query. by not doing so, each
Candidate: why do we need need to the <UNK> here?
Reference: where is this stream closed again?
Candidate: remove the unused local variable, given member member member member member member member member member member member member member member member member member member member member member member member member
Reference: nonrepeatabledirectivesbyname will travel directives three times. the code below seem to be faster: java public static map<string, graphqldirective> nonrepeatabledirectivesbyname(list<graphqldirective> directives) { // filter the repeatable directives list<graphqldirective> singletondirectives = directives.stream()
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please use openmrs code formatter. need space beteen passing parameters
Candidate: i don't think we need to be the <UNK>
Reference: should we perhaps call node.dispose() here?
Candidate: i don't need to check if the != null && <UNK> != null) { <UNK> }
Reference: this business rule should be part of the backend, not of the restapi.
Candidate: the syserr should be be the
Reference: this doesn't look right. the only call to kem.print() should be in frontend.java when execution ends. why was this done?
Candidate: should we be <UNK> here?
Reference: a candidate for runmultiplequeries? i'm not an expert on that... maybe you've chained them for a reason
Candidate: please use runquery()
Reference: you do peek twice (next line), i'd either move it to a variable or use isempty
Candidate: can we use the get* <UNK>
Reference: nit: is there a reason to change this from null? i find null to be more intuitive (in java) to represent no string, rather than a present string that is
Candidate: can we use the <UNK> here?
Reference: i just realized there is an issue with the serialization of the collection<? extends v> value here: - collection<? extends v> is serialized to data - it will then be
Candidate: use <UNK> <UNK> <UNK>
Reference: this is not very good, it is bad practice to use instanceof in this case. we should have a common interface
Candidate: do we need to catch the exception block?
Reference: i wonder whether this could be simplified with util.fixnull(andtrim) or what they're called.
Candidate: can we throw an exception?
Reference: what about just using arrays.aslist() here? no reason (at least none that i can think of) for the resulting list to be mutable.
Candidate: this should be <UNK> iterable<integer> here
Reference: the variable is not required
Candidate: why do we need the layout here?
Reference: please change this loop to do { ... } while(). it is strange to see node != null after node.getlineno().
Candidate: please use <UNK>
Reference: permission. -> "permission denied."
Candidate: why do we need to mock <UNK> here?
Reference: i am finding it hard to follow the code here. what was an example value for redirect before and after this change?
Candidate: please use <UNK>
Reference: remove whitespace
Candidate: please use braces around single line blocks
Reference: bernoulimatrix should have the same # rows and # columns with the input matrix. more precisley, it should have "the number of outputs of preceding fullyconnectedlayer" rows \* "the number
Candidate: why do we need to use <UNK> here?
Reference: i think we should throw an exception if casting is not ok. else the description will be empty and further no notification is send to the user. except that an
Candidate: how about the location location location location location location location location location location location location location location location location location location location location location location location location location location location
Reference: instead of asserting not null, let's better just check if the image we're interested in is in the list.
Candidate: why do we need to use the <UNK> here?
Reference: should this still set response = failure? seems like an important logical change
Candidate: should we use the <UNK> here?
Reference: optional: it would be clearer to assign directly 'agent = cap.substring(...)' since that makes it more obvious what's happening (setagent can't be overridden since the class is final, but it's
Candidate: nit: injects this feature here.
Reference: you expect no response key but in storagedevicelistreturnforxmlrpc you look for 'deviceinfo'. please be sure that vdsm sends properly build dictionary.
Candidate: why do we need the <UNK> here?
Reference: nit: log.info("executing {}", mountcommand);
Candidate: should we throw an exception here?
Reference: why we still have other exceptions declared while in kafkaproducer only producerfenced is declared?
Candidate: should we call <UNK> <UNK>
Reference: why check for numberformatexception removed ?
Candidate: :cry: use <UNK> to use the constructor: new <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> }
Reference: since you use builders and you may not want to have external code create new entries, just use the content, you can make the constructor private or protected.
Candidate: the syserr
Reference: used multiple log's parameters here
Candidate: why do we need need to trim entries?
Reference: refactor to generate searchsourcebuilder only in one place
Candidate: why do we need the <UNK> here?
Reference: we should assert that the message was sent in the request.
Candidate: if the == null) { return; } else { if <UNK> == null) { <UNK> }
Reference: this can/should be outside the lock in general, anything that can be done outside locked sections should be. putting it into the critical section implies that it is thread-unsafe.
Candidate: why do we need to synchronize on the lock on the username?
Reference: this logic seems to be inverted
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: could return early instead of nested conditionals? suggestion
Candidate: should we move this to onto the line 110 at the end of the packet <UNK>
Reference: these asserts will only work on debug builds, can we put in a different check?
Candidate: i don't think we need to check if the is is the
Reference: this should be done in ctor and not every time during search.
Candidate: <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: return results == null ? collections.emptymap() : results;? the same for exceptions()
Candidate: i don't think we need to do we need need to use the anywhere, so we don't need to cast.
Reference: maybe just set this as this.urn = "java:" + clazz.getname() then you dont need the transient java type
Candidate: please use assertequals
Reference: the meaning of this info log seems to be not clear, shall we please review grammar?
Candidate: ths should be the
Reference: magic number
Candidate: why do we need to use the here?
Reference: is there corresponding release ?
Candidate: please use the exception here instead of the try-catch-fail try-catch-fail
Reference: do we want to .trim() the 2 parts to avoid possible problems if an authorization header comes like <key> : <signature> ?
Candidate: if the == null) { <UNK> |= filter; } else { if <UNK> { <UNK> { <UNK> { <UNK> }
Reference: afaict you need to declare a future variable, but you don't need to return future, you can also return future.whencomplete(...)
Candidate: could you refactor this code in the following, java <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK> <UNK> { <UNK>
Reference: perhaps return boolean to say if the id was found (similar semantics to set.remove)?
Candidate: please remove the <UNK>
Reference: it is a simple change that doesn't change the logic. i prefer that we change it now and then think of a way how to make the method more efficient
Candidate: rename <UNK>
Reference: could change the name to sdbglauncher
Candidate: why do we need to check the <UNK> here?
Reference: shouldn't all of this be remove too - we aren't really attaching the domain to any pool in this command, are we? moreover - now that you removed the previous
Candidate: why do we need to evict the again?
Reference: i think this would be easier with new handler().postdelayed(() -> ..., 800)
Candidate: why do we need the <UNK> here?
Reference: shouldn't you also set broadcastreceiver and settingscontentobserver to null, to prevent memory leaks?
Candidate: this should be the <UNK>
Reference: do we need to check doestemplateexist(cruiseconfig) as at the controller we are doing a load_template before destroy same check doing twice
Candidate: this should be the <UNK>
Reference: i think it should return array here.
Candidate: i think it should return array here.
Reference: suggestion objects.requirenonnull(elementtype, "list element type cannot be null");
Candidate: can we use the builder object object here instead of <UNK>
Reference: just let exceptions that would fail the test also escape the test give us some more information, such as stack traces and the original error message. never drop the original
Candidate: no, this should be simplified to: java private boolean <UNK> { return <UNK> } { return <UNK> }  });
Reference: can you please create a function for this condition, instead of copy-pasting it?
Candidate: should this be null?
Reference: you will have a npe here if associationtype is null whereas before the code would support a null associationtype.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: since the headers are coming from the config are such as inmutable, probably you can load the headermap as an immutable map on a static block or so when the
Candidate: the syserr should be be <UNK>
Reference: that can't compile anymore.
Candidate: why do we need need to the <UNK> here?
Reference: to be consistent we should introduce constant for kie-deployment-descriptor.xml and possibly also use it in the tests
Candidate: this should be setemptyelement().
Reference: this is syntactically correct but it would be best to use curly braces for consistency
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: empty() instead of empty for consistency.
Candidate: this should be <UNK>
Reference: string tableid
Candidate: please remove the method("post")
Reference: wouldn't it be an improvement, if you also extract all the code clones into a private method like illustrated in the following?  private result visitelement(tinterfacetype node, p parameter) {
Candidate: this should be the <UNK>
Reference: the entity should be vm (var__type__vm)
Candidate: should be the counterparty that the super, we need optional.ofnullable()
Reference: seems like a copy-paste. can you refactor skipping logic to a separate method?
Candidate: this should be <UNK> <UNK> <UNK>
Reference: this can potentially cause npe, @anuragaw can you check who are the users of the method and potentially what must be the ideal return value? the createcountselect and its indirect
Candidate: h should be setemptyelement().
Reference: i think we should either use logger debug message for this or just remove and assert message text like we do one line bellow.
Candidate: this should be the <UNK>
Reference: redundant, the call to this(vdsid, bondname, network, nics) already handles it
Candidate: the syserr should be be <UNK>
Reference: can be shortened to if previous != visible
Candidate: please remove this line
Reference: it's not *being* re-run, it needs to be rerun
Candidate: please use <UNK>
Reference: one of the coding styles we try to adhere to is to always use braces for conditional bodies. though more verbose it makes it easier to add else statements and
Candidate: why do we need the <UNK> here?
Reference: is it right to assign an empty string as the default value of the response? what complications do we have if we let it be "null"?
Candidate: :disappointed:
Reference: why are all unchecked and checked exceptions being caught? it seems like we should only be catching the expected checked exceptions, and allow unchecked exceptions simply bubble out.
Candidate: why do we need to <UNK> here?
Reference: nit: ... only once
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: if (um != null) { framework.doprivileged(() -> createusersandgroups(um)); }
Candidate: nit: 49 probably?
Reference: might be good to rename distance to "meters"
Candidate: why do we need the <UNK> here?
Reference: same. no "else"
Candidate: should be be null?
Reference: why assign the throwable to ignored in the first place? also in completesterminationfutureexceptionallyifactorstopsexceptionally()
Candidate: why do we need the <UNK> here?
Reference: this might not be able to be a constant if salt_len is different for the different algorithms
Candidate: can we use getconnection here?
Reference: here should be a space after for
Candidate: why do we need to evict the exception here too?
Reference: wouldn't it be better to use a stream here, instead of a loop? due to the operations done inside the loop, i think this is a perfect candidate for streams
Candidate: do we need to throw an exception if <UNK> != null) { throw null; }
Reference: unget service again after usage
Candidate: should this be allowed?
Reference: why do we need this? isn't the default already 0?
Candidate: why do we need the <UNK> here?
Reference: maybe change to debug level and wrap in if statement for isdebugenabled ?
Candidate: should we use the exception here?
Reference: we deprecated port recently (host is a (list of) host/port tuple(s) now). we should not add it to new data stores.
Candidate: please use <UNK>
Reference: string rule = ruletext; if (rule.startswith("%") rule = substring(1); if (rule.endswith("%") rule = substring(0, rule.length() - 1); return rule;
Candidate: why do we need to use <UNK> here?
Reference: i take it that this could not be simply "exists = (results != null) && results.next() && (results.getint(1) > 0);"
Candidate: do we need to use the <UNK>
Reference: bit of duplication here.
Candidate: this fail()?
Reference: please limit the visibility of the constructor
Candidate: this should be <UNK>
Reference: how about using file.createtempfile() here? you can also combine that with file.deleteonexit()
Candidate: why do we need the <UNK> here?
Reference: @ikhvostenkov please use splittext here
Candidate: why do we need the <UNK> here?
Reference: awesome work so far, eli!
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: nit: there's no value to using stringbuilder here. just exit early then retain existing logic if not present
Candidate: can we use <UNK> <UNK> <UNK>
Reference: do not return null, use optional
Candidate: why do we need the <UNK> here?
Reference: can you explain under which circumstances this happens?
Candidate: i don't understand why, but we do, but i don't understand why, but we do, can we move the logic into a separate function, so we don't need to the
Reference: replaces #339
Candidate: what is this happen if the <UNK> is the <UNK> <UNK>
Reference: this should be before the callback i think
Candidate: can you use division for the <UNK> <UNK>
Reference: likewise. extract "limit" out of the for int limit = math.max(1, columncount);
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: hmm, really? i think aggregation may fail on other cases such as oome.
Candidate: we should need to hide the threw an exception
Reference: why do you get the session here? move into condition where you actually use them.
Candidate: please import?
Reference: this should go to info if the loggin below is in info
Candidate: why do we need to use <UNK> here?
Reference: why not just this.gender = student.gender?
Candidate: can we decided to use the <UNK>
Reference: i know we already reached an agreement not to keep the old method signature, but let's double check - users shouldn't be extending this class, right? should we still try
Candidate: please use the exception here instead of <UNK>
Reference: nice, i like it! one suggestion though: i believe you can can do a logical or in ldap queries. i think that would be preferable to making multiple queries in
Candidate: should we use the <UNK> here?
Reference: this breaks the public api of httpmessage. but in this case, we have to break the api so that the returned value is able to represent the query parameter content
Candidate: this should be setemptyelement().
Reference: better use #getdescriptorordie() that would throw an exception.
Candidate: @ivange94 please remove the exception
Reference: there are still a lot of calls to this method, resulting in errors that will not reference any bpmn element. from a quick look, many of those do have an
Candidate: this should be the <UNK>
Reference: this will blow up the entire read. with smallrye i believe if a metric throws an exception it is caught and logged but the loop reading all the metrics continues,
Candidate: i don't think we need to check if the == null) { return false; } else { if <UNK> { return <UNK> }
Reference: 10s is a lot! :sweat: can we reduce it to 1.1s?
Candidate: why do we need the <UNK> here?
Reference: this means a single "-1" will close this listener -> messages from other workers will be ignore -> test failure
Candidate: the syserr should be be the
Reference: are there chances that status remain null. if yes, then we should have a check for status is null or not.
Candidate: do we need to check the <UNK> <UNK>
Reference: if/else block seems to be exact same as onerror(), let's just call it here?
Candidate: if you shoud be the
Reference: someone switched into french part-way through this error message.
Candidate: looking at the <UNK> at the looking at the looking at the looking at the looking at the looking at the looking at the looking at the looking at the
Reference: [question] why are we casting here? isn't it project an instance of project?
Candidate: if <UNK> != null && <UNK> { <UNK> }
Reference: since we already synchronized on it, maybe should just as well put assignmentfailurewindow.putall(this.assignmentfailures); inside the block and then it doesn't need to be a concurrenthashmap. to reduce two synchronization mechanisms
Candidate: i don't think we need to check for the <UNK>
Reference: confused by the chosen date? should it be 2011 instead? also, this should probably be static final, and with a timezone.
Candidate: i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering i'm wondering
Reference: use configuration.gettimeduration()
Candidate: i don't understand this matters, what about moving this to the <UNK> the <UNK> the the <UNK> of the <UNK>
Reference: can you remove this?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this test seems good, but can't we test whether the globalschedeventprocessor consumed sufficient time period also?
Candidate: do we need to use the too?
Reference: not sure how this class is used but... can we have an npe here? you are setting tracksegments before instantiating keyonlytracker
Candidate: i don't understand this matters, if we matters, this matters, but i don't understand this matters, if we matters, but i don't understand why, it matters, but it is be
Reference: should we log errors?
Candidate: wouldn't it be better to use the <UNK> <UNK>
Reference: it's probably better to check variable for null before calling this method.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: wondering if the array elements should be casted if they are not longs.
Candidate: why do we need to use <UNK> here?
Reference: maybe rather collections.singletonset( )?
Candidate: why do we need to use <UNK> here?
Reference: null check?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: ouch.. but if this is the only way.... then so be it!
Candidate: i don't understand this if we want to have the same here as above. i haven't checked :(
Reference: this introduces a bug. revert.
Candidate: why do we need to here?
Reference: fix this method with the prefix.
Candidate: why do we need the <UNK> here?
Reference: spaces before and after - you can use ctrl+shift+f to auto-format the selection (or the whole file if there is no selection)
Candidate: this should be the getallregistrations() actionreturnvalue <UNK> { <UNK> = <UNK> } <UNK> <UNK> { <UNK> }
Reference: maybe channel.close().sync()? channel#close() is async and returns a future.
Candidate: can be replaced with <UNK> ?
Reference: if we compile the pattern we should also store it in a hashmap. otherwise dont compile it (costs more resources, but if we dont reuse it we do not have
Candidate: why do we need to use <UNK> here?
Reference: can you define constants for these versions?
Candidate: please use the syserr
Reference: or just call ignorefailure(true) for consistency?
Candidate: i don't think we need to check the <UNK>
Reference: won't this method modify fname, which is a string builder, so that whenever this is called it will just be appended to? you'll get name_prefix_firsttime_secondtime_thirdtime, or am i mistaken? i
Candidate: this should be the <UNK>
Reference: this will receive null as fillcolor which is used as a param for replace("$fill", fillcolor). maybe it should use a default color instead or is "null"/unrecognized color black or something
Candidate: can be replaced with <UNK>
Reference: nit: this should be a different test, right? something like versiondoesnotupdateifsupplierisnotcalled
Candidate: shouldn't this be <UNK>
Reference: should the shutdown happen after the event thread is interupted? in other words, could we get an event after we shutdown the producer
Candidate: if we is the software exception but we don't need to throw an exception if the exception occurs, then we will throw an exception
Reference: constant ?
Candidate: can you use the payload?
Reference: doesn't match coding conventions: shoud be  try { ... } catch { ... }  (spacing and bracket location)
Candidate: should we be the <UNK> here?
Reference: yeah i think it's fine
Candidate: why do we need the <UNK> here?
Reference: this code would have to keep being updated every time there is a newer version of the library. would it be possible to improve this so that it could be
Candidate: why do we need need to the <UNK> here?
Reference: checking up just one block is probably not enough. think of something such as:  if (checkperms()) { if (myothercondition) { // dml here } else { // dml here
Candidate: why do we need to check for the <UNK> ?
Reference: we should do these in a directory other than the system temp directory.
Candidate: why do we need need to the <UNK> here?
Reference: instead of 'invalid_network_filter_id' you should pass null.
Candidate: this should be <UNK>
Reference: only print if != default
Candidate: can be replaced with <UNK> <UNK> ?
Reference: nit: failure -> error
Candidate: can be simplified to <UNK> <UNK>
Reference: line length
Candidate: this should be setemptyelement().
Reference: let's do it using lambda approach
Candidate: what happens if the is is the the <UNK> is the
Reference: for instance, in interpret, it will be much nicer to return the message in interpreterresult than throwing exception
Candidate: should we throw an exception instead of returning null?
Reference: (int) would be sufficient.
Candidate: the syserr should be be <UNK>
Reference: i would expect preference listeners to process the selection. also this code may be shoter if we have a "function" (button, string) - it may be used both here and
Candidate: this should be <UNK>
Reference: can we just make a object column selector? it'll clean a lot of this code up
Candidate: minor nit pick: let's use <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> clazz, <UNK> <UNK> clazz, <UNK> <UNK> clazz, <UNK> <UNK> clazz, <UNK> <UNK> clazz, <UNK> clazz, <UNK>
Reference: final
Candidate: true true true true true true true true true true true true true true true true true true true true true true true true true true true true true true
Reference: if there is no slash then start index is -1 and then i think we should make it more clear that we dont substring it then, eg if (startindex !=
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: extract this into a new method. also, check if using <code>apppage#changepagetype</code> is more suitable here.
Candidate: this should be <UNK>
Reference: rename c to contentlet
Candidate: i'm registered out of scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene, scene,
Reference: @gaurav-deshkar having hibernate in the service layer instead of the data access layer does not look sweet. :) can you point me to a failing unit test and i see
Candidate: should this be <UNK>
Reference: we should not need to call this, the optionsparamcertificate already enables the certificate.
Candidate: this should be the 'final'
Reference: @ketan rethinking this, i'm not sure if this is a good idea. can't calls [such as this](<link_0> affect the db, while a backup is in progress?
Candidate: should we be the <UNK> here?
Reference: you could deallocate in catch (throwable) and remove shouldfree, but the method is just doing more than it used to (the old version didn't free the allocated memory if performput
Candidate: i don't think we need to use the <UNK>
Reference: please use {} placeholders here
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: this method is so long, can we divide it to smaller more readable parts ?
Candidate: use unmodifiableset instead of <UNK>
Reference: any chance you can be more specific?
Candidate: why do we need the <UNK> here?
Reference: this can be executed concurrently.
Candidate: why do we need need to the <UNK> here?
Reference: nice catch
Candidate: should we throw an exception?
Reference: nit: outside of helix-core module, we should try to use zkclient instead of basedataaccessor.
Candidate: i don't think we need to check for the <UNK>
Reference: not sure why we need to do this
Candidate: what happens if the exception is is the
Reference: please move menu into arguments
Candidate: this this repelaced e1 && <UNK> { return false; }
Reference: number "of"
Candidate: should we use unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not implemented") as well?
Reference: should be "valid" instead of "valide". should use nls.bind() to construct the message.
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: please move else branch to the start of the method.
Candidate: should we use the <UNK> here?
Reference: i took a poll (@domoritz and @7andrew7 present) and it was voted that this code is not good code. suggest a series of if statements instead:  java if (castto
Candidate: why do we need to use <UNK> here?
Reference: same functionality, consider moving pricelist.add() and history.put() below the if else statement
Candidate: should we throw an exception?
Reference: sorry missed that in my first review. i would say here (i did this in my gerrit review for this issue): the org.eclipse.ui.istartup extenstion instead of "the startup extension".
Candidate: should this be the <UNK>
Reference: no method should complete() a context that it does not create. this could have unintended consequences (as a completed context can no longer be used).
Candidate: please use <UNK> <UNK> <UNK>
Reference: use getandremoveparameter(parameters, "xxx") instead which comes ootb
Candidate: please use <UNK> <UNK> <UNK>
Reference: @dmzaytsev better to use paths.get("sub", "file").tostring()
Candidate: why do we need to call <UNK> here?
Reference: please be consistent with names: operands are x and y, result is z. the suffixes i and l denote int and long.
Candidate: i map<> <UNK> <UNK>
Reference: can we leave list<string> as return type ? all the other methods in runimageconfiguration return a list for collections, and also it is not the most generic type which can
Candidate: this should be setemptyelement().
Reference: remove validation on client
Candidate: why do we need need to the <UNK> here?
Reference: you will have different errors for different api versions, i spent a lot of time in this place
Candidate: why do we need the <UNK> here?
Reference: nit: just noticed there's also received * datagramsize above on line 586, could do it once
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this.partitionkeypathindomaintype = getpartitionkeypathindomaintype(domaintype);
Candidate: should this be <UNK>
Reference: every time we call getusagerefresherlistener(), it instantiates a new storageusagerefresher.listener, is this intended?
Candidate: the syserr should be <UNK>
Reference: please use try-with-resource on the input stream - this code opens a stream but does not close it. better yet - use files.readalllines(file, standardcharset.utf8)
Candidate: please use <UNK>
Reference: why is the asserttrueallthetime used? isn't it sufficient to use a single check instead of 5 checks with 1s delay between them?
Candidate: you don't need to subdir <UNK> <UNK>
Reference: please be consistent with the command names. you could just use camelcase
Candidate: why do we need the the payload?
Reference: please replace with stringutils.isnotblank()
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: no need to change savings_account_submitted_for_approval to savings_account_submitted because there is two type of saving account submission. 1. submitting saving for creating a new one. 2. submitting for approval.
Candidate: i don't think we need to throw an exception
Reference: ![critical](<link_1> 'severity: critical') refactor this method to reduce its cognitive complexity from 16 to the 15 allowed. [![rule](<link_2>](<link_0>
Candidate: why do we need this?
Reference: i'd rename paths to types or subfieldtypes because this variable holds a list of types, not paths.
Candidate: can we use the feedid
Reference: i'm a bit concerned about this. in order not to flood - let's just remove this enum constant at all?
Candidate: why do we need to use <UNK> here?
Reference: i'm not sure about this if block. why do we need it? can we just store only the fboname and then get the fbo itself only when we need it?
Candidate: why do we need to use <UNK> here?
Reference: gets appended even if capacitytypes.length == 0. please guard it
Candidate: please use <UNK>
Reference: this is a bit double negativey wouldn't  if (cryptoenablepgpinline) { composecryptostatus .... } else { return false; }  be more readable.
Candidate: this should be the <UNK>
Reference: wrong return type in cachemode(), transactional() and lockingmode() methods.
Candidate: i don't think we need to check the <UNK>
Reference: shouldn't the write_only check be part of the allowload method?
Candidate: i don't think we need to check if the is is the software <UNK> so we don't need to check the
Reference: doesn't qulice complain about this indentation?
Candidate: @hdouss why 16?
Reference: did you want to remove legacy from this name also?
Candidate: why do we need need to the <UNK> here?
Reference: for performance reasons, it would be better if this clearcache() was moved down 5 lines next to the instance.usagecount = 0;. as 'close()' may be called by multiple threads -
Candidate: should we log the stack trace be debug level?
Reference: here is where appendtourl method should be used
Candidate: typo: <UNK>
Reference: this is a situation where i would like to see something like java logger.error(e.printstacktrace());  or java logger.catching(e);
Candidate: log too, too, too, too, i think.
Reference: are you sure about that cast operation? you are asking for a service interface and cast it to a concrete implementation without instanceof check. you perform that check in the
Candidate: if <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK> != null && <UNK>
Reference: !stringutil.isemtpy(typename) could be a better choice.
Candidate: please use syserr
Reference: this means that we can't build interfaces with builders right?
Candidate: why do we need the <UNK> here?
Reference: nit: according to l.403, you want to use comma to seperate every fields. so, it seems like you lost a comma here, do you want to unify the format?
Candidate: the syserr should be be <UNK>
Reference: i guess we don't need to put "string" before this variable, maybe cuz it's already assigned? i put "string" in front of it when i used it but i noticed
Candidate: please use <UNK>
Reference: i would not use vc.createextension like it is. i would refactor this method, separate a past which returns the uri from the rest and call just the extracted method because
Candidate: why do we need this?
Reference: remove
Candidate: why do we need the <UNK> here?
Reference: update index counter?
Candidate: i don't think we need to throw an exception if (state { <UNK> }
Reference: static
Candidate: please remove the method("post")
Reference: you can join the ifs. there's a content assist for that, it's awesome.
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: should the new constant be used here?
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: thank you for so fast turnaround @neetkee ! well, this assertnotnull() must be first any way. otherwise we end up with npe already on a first binding.getexchange(). please, fix that
Candidate: this miss?
Reference: where is this being used?
Candidate: can we use the builder instead of <UNK> builder variable?
Reference: should we make it isbuilder?..
Candidate: this should be the <UNK>
Reference: might be better to have a check for not null as first thing in this method.
Candidate: please use <UNK>
Reference: can this response be read and verified?
Candidate: why do we need the <UNK> here?
Reference: if
Candidate: @unyoungwax, do we need to check the <UNK> <UNK>
Reference: i think we need to handle partitioned columns in orc and avro.
Candidate: why do we need to evict the <UNK> here?
Reference: not needed
Candidate: wouldn't it be nice to assert that assert that the ones that contain non-null sizes
Reference: remove space.
Candidate: should this be private?
Reference: @pettyjamesm why is this call needed?
Candidate: why do we need the <UNK> here?
Reference: .tostring() is not needed here.
Candidate: the syserr should be be the
Reference: please throw an exception rather than returning if the chat color is not found.
Candidate: why do we need to check the the enum?
Reference: this needs to return a completable future, not null
Candidate: should we throw an iae if (state != null) { throw null; }
Reference: this looks like an often reused check, would it make sense to make it part of the type?
Candidate: please use the syserr
Reference: no need explicitly open transaction, only one save to db, transaction will be open automaticly
Candidate: i don't understand why we need the lock on the disk, scenario?
Reference: the above line parameterset paramset = task.getparams(); is not used.
Candidate: you don't want to use <UNK> <UNK> <UNK>
Reference: this name looks more as some internal method name than test name, i suggest renaming it to something like activerequeststest or something similar.
Candidate: rename to <UNK> <UNK>
Reference: shorten to boolean hasdarktheme = getthemes().stream().anymatch(t -> t.getid().startswith(e4_dark_theme_id));
Candidate: please use <UNK> <UNK> <UNK>
Reference: why is while used here?
Candidate: this should be the <UNK>
Reference: please remove this statement or enhance it to something more context/meaningful
Candidate: this should be injected, via: <UNK> <UNK> { <UNK> <UNK> }
Reference: this seems like an even odder test than before. a schedule from july to july will handled differently to one from july to august. maybe keep the existing code, but
Candidate: can be simplified to <UNK> <UNK> ?
Reference: can you pelase change the header to: " * copyright (c) 2011, 2020 eurotech and/or its affiliates"
Candidate: this should be the the presenter. on the presenter.
Reference: just as a hint: we also have assertnonull
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: [optional] s/commitsha1/headcommit [optional] just compare the objectid's directly, then you don't need to invoke 'getname()'.
Candidate: should we be the exception here?
Reference: in the remotespawncache, the equivalent condition was moved before the concurrent modification check. it probably doesn't matter, but it doesn't hurt to be consistent either way.
Candidate: nicer: should be nicer: nicer: nicer: <UNK> { <UNK> }
Reference: this is a tiny micro-optimization but i'll mention it since it might add to readability: sets.newhashset(s.split(",")
Candidate: why do we need to check for the <UNK>
Reference: should there be a case for arrays, too (this would be either non-primitive arrays, or multi-dimensional primitive arrays)?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: @srinivasantarget i would like to advive you to  java asserttrue(!stringutils.isblank(driver.switchto().alert().gettext()));  what if the empty string would be returned? :)
Candidate: why do we need the fixture.
Reference: while updatecounter is in await, applyupdates can be called again, causing updatecounter to reference a new countdownlatch. then, finishmigration will update the new one and not the old. maybe this
Candidate: why do we need this?
Reference: do we want + "/*_/_.xml" here instead?
Candidate: please use <UNK>
Reference: since a logger instance is there, shall we use that?
Candidate: this should be org.eclipse.sirius.common.tools.api.util.stringutil.isempty(string)
Reference: rename ctx -> context
Candidate: we should use slf4j string concatenation instead of string concatenation string concatenation string concatenation string concatenation string concatenation string concatenation string concatenation string concatenation string concatenation string concatenation string concatenation
Reference: missing {} in the if, so you are breaking the statement there. that's exactly the main reason why i *hate* the if without brackets if that code bug was not
Candidate: why do we need to use <UNK> here?
Reference: missed this one in the previous review, needs updating as well!
Candidate: can we use the <UNK> <UNK>
Reference: please do not use "blablabla" as a string literal. instead, name it after the thing you reference. use "invalid_type_url_example" in this case.
Candidate: rename to <UNK>
Reference: else empty ?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: nit extra line
Candidate: newing location location location location location location location location location location location location location location location location location location location location location location location location location location location location location
Reference: shouldn't headers be added irrespective of post/get?
Candidate: this should be if (context { <UNK> = <UNK> } { <UNK> }
Reference: please use hamcrest matchers
Candidate: please remove this method("post")
Reference: npe should not be catched btu the case where it might appear should be checked with if (smth != null). we definetely don't want to ignore every npe.
Candidate: we should need to check if (throwable <UNK> null) { return; }
Reference: shouldn't we use assert.assertequals(math.round(val),rs.getlong(1)); instead here, as both math.round() and round() with 1 parameter returns bigint?
Candidate: the syserr should be replaced with <UNK>
Reference: shall we send a 404 when the registry cannot be found for the given uuid?
Candidate: throw nullpointerexception if an exception is null.
Reference: can you use instanceconstants.container_like?
Candidate: i don't need modifier) instead of <UNK>
Reference: i don't think we want a warn log for user-specified readonlyheaders on every build of a message. perhaps it would be better to put the warn log in the for
Candidate: i don't think we need to check if the is is the
Reference: is there a need to check the action for null?
Candidate: use <UNK> objects.tostringhelper() to <UNK>
Reference: requirenonnull
Candidate: unsupportedoperationexception should be null.
Reference: what if we instead change this to be list<function> and have the code below run in a loop until the last function added was noop? this would enable a pattern
Candidate: if you use null?
Reference: why create a variable for this?
Candidate: this should be the <UNK>
Reference: why didnt you prefix this with shadow like you did everywhere else?
Candidate: this should be setemptyelement().
Reference: technically the email hint is provided by smartlock, so this would make the api somewhat dishonest. although i agree with you that enabling the hint for everyone may be a
Candidate: wdyt about returning null?
Reference: is this system.out.println leftover from debugging?
Candidate: the syserr should be be <UNK>
Reference: if ((maiddo == null) && (mhashdo != null)) { or if (maiddo == null && mhashdo != null) {
Candidate: <UNK> *= 2;
Reference: i think flipping the key (string) and the function params for "read*" methods would make their usage more readable.
Candidate: this should be the <UNK>
Reference: why not append up to 10 sitemaps, versus appending nothing if there or more than 10?
Candidate: we don't need to include the exception message explicitly)
Reference: at a glance this looks good. another approach would be to swallow every exception at the sethamaintenance command and translate it to error. that will make error handling even better
Candidate: should we throw an exception here instead of an error?
Reference: is it an issue that in case the decorator fails (i.e. exception thrown in onerror) that we never gonna call span.finish()?
Candidate: why do we need to use the <UNK> here?
Reference: i'd personally do a 'timetonextrotate' method, then you don't need the +1 each time, but that's just me nitpicking
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: sout ;) ...and my question if this try/catch here is needed? if yes can we move this logic from test side?
Candidate: please use <UNK>
Reference: should also check for configuration "spark.executor.instances"
Candidate: if the != direction.incoming) { <UNK> }
Reference: @dogeared rather than doing authentication authentication = new preauthenticatedauthenticationtoken(account.getemail(), null, authenticationprovider.getgrantedauthorities(account) you should do  authentication authentication = new preauthenticatedauthenticationtoken(account.getemail(), null, account); authentication = authenticationprovider.authenticate(authentication);  this way you leave
Candidate: should we be the <UNK> here?
Reference: i think the reason this doesn't sync over to the model is that setvalue doesn't fire events by default. does it work with .setvalue(sourceonsave, true)?
Candidate: this should be <UNK>
Reference: let's move this down to be after the peak stats. also, surround it with blank lines since it is a separate stat.
Candidate: why do we need the <UNK> here?
Reference: - this has to be the main method to do all the magic of setting up the values etc. it needs to be called both when the getdatacenterwithclusterslist() changes and
Candidate: can be simplified to <UNK> <UNK> ?
Reference: are system.out statements still actually useful? shouldn't they be removed or replaces by some more configurable logging?
Candidate: we should need to do we need need to check the <UNK> <UNK> the <UNK> is the
Reference: magic numbers
Candidate: what is the magic number mean?
Reference: why having this print? is doesn't seem relevant to the user.
Candidate: why do we need the <UNK> here?
Reference: not necessary to check if font file exists
Candidate: if <UNK> != null) || <UNK> && <UNK> { <UNK> }
Reference: seems like an extraneous line to me?
Candidate: can you use <UNK> <UNK> <UNK>
Reference: maybe it makes sense to add some meaningful prefix like "tooling"
Candidate: why do we need need to the <UNK> here?
Reference: can this move to abstractcontrollerservice? it would be nice if the clear() method wasn't public.
Candidate: this should be the <UNK>
Reference: need for this method? construct file directly using  file = new file("target", "bigfile.txt"); inputstream teststream = randomstream(0, 256); fileioutils.copyinputstreamtofile(teststream, file);
Candidate: please use <UNK> <UNK> <UNK>
Reference: use identitydbutils to get the db connection
Candidate: should we throw an exception here?
Reference: why do you need the gtkthemename string? it looks useless to convert the buffer to string, not use the string and convert it to buffer to pass it to gtk_css_provider_get_named
Candidate: indentation?
Reference: i might be wrong but i am really wondering if you did not, somehow shortcut erasure by relying on fully qualified name and therefore hacked a solution instead of fixing
Candidate: this should be the <UNK> <UNK> <UNK> contents?
Reference: is this log really needed? i also feel like this is left over from some debugging session. if you think we really need this then: - tostring is redundant -
Candidate: can be replaced with <UNK> <UNK>
Reference: the result variable should named as result
Candidate: should be be the <UNK> <UNK>
Reference: instead of an empty arraylist, i would use collections.emptylist().
Candidate: why do we need the <UNK> here?
Reference: possible npe
Candidate: @gunnarmorling gender should be the enum?
Reference: shall we re arrange this conditions, else this will throw npe
Candidate: <UNK> *= 2;
Reference: we should also check if the xml file is the current app. i.e. check if the filename starts with devmojo.this.project.getartifactid()
Candidate: you don't need to use the <UNK>
Reference: extract to top as constants. (alt-shift-t in eclipse)
Candidate: why do we need need to the <UNK> here?
Reference: can you put an explanation why this number 5 for the test so that test maintainer can understand better the significance of this number?
Candidate: why do we need the <UNK> here?
Reference: we do not use single line if-statements throughout the project. yes it's a nitty point, but i'd prefer you change it to curly braces.
Candidate: why do we need the <UNK> here?
Reference: methods? this check is only about fields.
Candidate: why do we need to check on the <UNK>
Reference: do we want to allow being able to turn off polling by specifying a polling interval of "0"
Candidate: the syserr should be be <UNK>
Reference: can we pull this into a static var at least. should probably be configurable no?
Candidate: i disagree with the commit inspections disagree with the main commit inspections
Reference: start argument is not actually used. is it meant to be?
Candidate: why do we need need to the <UNK> here?
Reference: i would prefer this to use utils.ishammer(itemstack), however you will need to check the ctx to be entityselectioncontext and then retrieve the main_hand item of the entity involved. that is
Candidate: why do we need this cast.
Reference: it will cause ontrackschanged to be called twice. l1187 of mediacontrollerimplbase (in the same patch set) might be enough.
Candidate: this should be <UNK>
Reference: check code style for building mvc test rules on my latest commit on pr #556
Candidate: code style code style code style code style code style code style code style code style code style code style code style code style code style code style code style
Reference: can you only add try-catch without changing the if style to elif? previous variant is more readable for me
Candidate: should we be the <UNK> here?
Reference: why this extra condition here? if there is no manager, shouldn't we always clear annotations?
Candidate: if oldvalue is null, so we don't need to check the
Reference: can't we throw something more reasonable? also, i'd add a log here.
Candidate: the syserr should be an exception
Reference: i don't know if they should be put inside this method or not. should temp table be considered as staging directories?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: if the idea is to get clear and index to be happening parallel, this may not guarantee that. there is a indexmanager.testhook that can be used to control index creation.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: whoops, i didn't think through this before! tostring should not have side effects. could you do this in setnewvalue instead and maybe change the name to setnewvalueorclearifunchanged? that's a mouthful,
Candidate: if oldvalue is null, so we don't need to check if the is is the <UNK> bottleneck.
Reference: minor: use study.create() instead of new dynamostudy()
Candidate: this should be <UNK> station via:  <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: i was thinking more about this, it might be better to just use gettokens(httpmessage) (with requestmessage) instead of making public. this allow us to use the same method for json
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: should we check that the attribute does not already exist on the updatemetacard before setting it?
Candidate: why do we need to check for the <UNK>
Reference: will be never executed? factory.runnow throws exception if result nok
Candidate: why do we need need to the lock on the <UNK> ?
Reference: it would be nice to rethrow some trace of e when check fails like  catch (prestoexception e) { try { ... the checcks ... } catch (throwable failure) {
Candidate: i don't think we need to print the stack trace trace, since it was interrupted.
Reference: use "return stringutils.equals(...,...)" instead of the if-else cascade.
Candidate: objects.equals()?
Reference: tests directly against the service don't need to assume json is involved, only the controller needs to be aware of the serialization format. so i'd suggest skipping this step and
Candidate: why do we need the <UNK> here?
Reference: you can use the size of the referenced mappers as initial size of the list
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: stringutils.substringsbetween(path, "[", "]")
Candidate: should this be <UNK>
Reference: please switch these to keep the setresult -> notifystatuschanged order consistent every time we do that. i think this matters because setresult is what updates taskstorage (through a callback) and
Candidate: use <UNK>
Reference: could we please use objects.equals ?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: could be simplified.
Candidate: can we return <UNK> <UNK> <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: perhaps use startswith to match <link_0> ?
Candidate: this should be the <UNK>
Reference: this type definition is not needed.
Candidate: what is the access the access of the access of the access of the access of the access of the access of the access of the access of the access
Reference: if there is an ioexception or any other problem copying the files the folder will be still deleted. there also should be some information for the user if there is
Candidate: i don't think we need to throw an exception if invoked?
Reference: wrong formating?
Candidate: can we throw an exception instead of returning null?
Reference: since this is inside the same class, i think just "super(float_size_in_bytes)" should work;
Candidate: please use <UNK>
Reference: minor typo
Candidate: can we move this to the <UNK> <UNK>
Reference: two important things: - do not use absolute paths - never use / or \ in paths use paths.get(...) instead or file.separator  java // replace "./foo/bar" with path p
Candidate: this should be setemptyelement().
Reference: why not make the whole class final?
Candidate: should we call <UNK> <UNK>
Reference: the block from line 254 to 258 could be extracted in a method readmodel(modelpath) and reused in the next test.
Candidate: i don't think we need to print the stack trace trace, since it was expecting that the output of the output of the
Reference: handle duplicatekeyexception
Candidate: please add an exception here as well.
Reference: we can apply wsutils.wrapwithstreamingoutput() here, too.
Candidate: log.debug probably?
Reference: shall we throw exceptions with the error information here?
Candidate: the syserr should be be the
Reference: use json here too.
Candidate: can we make this the private?
Reference: minor style issue, but please move this next to textindexluceneassembler a few lines up, because they're similar
Candidate: please remove the method("post")
Reference: shouldn't it be done only when disk is active?
Candidate: can we remove this part,
Reference: the code will never go to the else statements?
Candidate: i don't understand this *= 2;
Reference: oups, can we remove such "null" argument?
Candidate: this should be the <UNK>
Reference: i still don't think this should be a fatal error _for the producer_. as long as we can still abort the transaction, it should be an abortable error. it's similar
Candidate: why do we need the <UNK> here?
Reference: maybe rename the variable from _mesosstormscheduler to _stormscheduler?
Candidate: please use <UNK>
Reference: you can use method geturlforwiki (so you don't need to add empty string for article path)
Candidate: this should be the fixture.
Reference: nit: switch statement would be more natural here  switch (withnulls) { case all: return null_values; case partial: return intstream.range(0, rows).maptoobj(i -> i % 2 == 0 ? createvalue() :
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK> <UNK>
Reference: i don't think you meant to change this to notification_approved, unless i'm missing something.
Candidate: why do we need the <UNK> here?
Reference: let's be a bit more verbose here. and while at it, place this inside the jettylogger as well please (here is [another logger](<link_0> as an example)
Candidate: we don't need to use the <UNK> <UNK>
Reference: do we need to specify all these properties. if yes can we && these values
Candidate: should we use moreobjects here?
Reference: could we sort in an existing one in such a way that it appears on top of the list?
Candidate: you can use <UNK> <UNK>
Reference: in -> input?
Candidate: i don't think we need to throw an exception
Reference: i could also live with this solution. as long as i don't have to hard code it :-)
Candidate: why do we need the exception here?
Reference: we can simplify the long build block here. you can pass a parameter called tobuilder to readoption builder: builder(tobuilder=true), then here you can simply use: java readoptions options = readoptions.tobuilder()
Candidate: i think we should be the to the the <UNK> the <UNK> the <UNK>
Reference: what about other error messages from server side (like 404, 500, ...) ?
Candidate: why do we need the <UNK> here?
Reference: formatting error.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: intuitively i would rather do html escaping in the frontend. the backend should just expose the database credentials in their true form, it is the frontend's job to render them
Candidate: why do we need the getconnection here?
Reference: import static assert.assertequals()
Candidate: please remove the method("post")
Reference: create the map here only when needed
Candidate: this should be upgraded to check for the itunes check for the the username?
Reference: nitpick: instead of -1, stateless.windowid
Candidate: why do we need need to the <UNK> here?
Reference: it says "cb.id" but i don't think "cb" is anything in this query. so i think either change the hql or if the code is not being called maybe we
Candidate: should we be the <UNK> here?
Reference: iterable doesn't give us a .size() method, but you could check asserttrue(requirements.hasnext()), since (i assume) there should be actual requirements being sent?
Candidate: you can use <UNK> <UNK> <UNK>
Reference: needs quote escaping
Candidate: why do we need the <UNK> here?
Reference: another good candidate for computeifabsent.
Candidate: please use <UNK>
Reference: i believe it should be moved to test file
Candidate: this readasstring(...) instead.
Reference: these lines can come after l128 and the first line becomes modelnode modelnode = resource.getmodel(); the resource from context.readresourceforupdate includes the data that you need to restore.
Candidate: we should need to do we need to do the getcredentials in the getcredentials
Reference: do we need this anymore? can't we just send back the empty string as a default?
Candidate: this should be <UNK>
Reference: we prefer use result to name the result variable
Candidate: please use <UNK>
Reference: this message should be externalized in mondrianresource.xml
Candidate: rename <UNK>
Reference: do we have positive parsing tests to ensure that all arguments are parsed well? as well as tests that ensure the wrong argument types are handled gracefully?
Candidate: the syserr should be eating the error message.
Reference: this number will likely increase to test new features, breaking this test. check that there are at least 4 tools, 1 from dockstoretestuser2, etc.
Candidate: please remove this method("post")
Reference: need braces around statement as per the style guide
Candidate: should we throw an exception instead of returning null?
Reference: please revert this change.
Candidate: can be replaced with <UNK>
Reference: we can throw a exception here rather than return null
Candidate: use e2 e1 { return <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> }
Reference: i think we could probably run into the same issue as in #5566 in this line. maybe checking ! textutils.isempty(mediaid) before attempting to run it through integer.valueof would prevent it
Candidate: should we use <UNK> <UNK> <UNK> <UNK>
Reference: i think it would be nicer if the header extraction was implicit, i.e. it magically happens when you call addrowsfrom  and you do not need to manually extract the
Candidate: i don't understand this matters, if you matters, this matters, but you don't need why, it matters, but it matters, afaik.
Reference: how about adding monitoring.broadcast_interval_ms to streamsconfiguration and parse/load during setup?
Candidate: why did we added to <UNK>
Reference: feedback session's course id -> feedback question?
Candidate: <UNK> *= 2;
Reference: now that you have cached keybytes at the instance level, can we get rid of the local keybytes byte array?
Candidate: use <UNK>
Reference: spaces before and after "+" (i think it's my favourite thing :p)
Candidate: this should be <UNK>
Reference: you can use objects.equals() and save the null checks
Candidate: can be simplified to return <UNK> == <UNK> == objects.equals(name, <UNK>
Reference: use optquarkrelative and the use and if (attributequark != itmfstatesystem.invalid_attribute). it's better than relying on exception handling for normal cases.
Candidate: i'm not sure what about the exception message.
Reference: suggest using an executor vs native thread creation.
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: add a check here to verify that the serialdatareceived method was not called.
Candidate: why do we need need to the <UNK> here?
Reference: nit: capitalize f in "falcon" in all the occurrences.
Candidate: let's use fail() to "ignired" please use fail()
Reference: we should chat about this return type...please file a github issue so that it may be part of a post-preview 1 api review discussion.
Candidate: please use <UNK> <UNK>
Reference: maybe just change it to this.interrupt(), since we're not overwriting it.
Candidate: why do we need this?
Reference: in the current version of the code, the result is reported regardless of which branch is taken here. i recommend you keep the semantics consistent and move the call to
Candidate: can we be repelaced by userreportingsettingshelper userreportingsettingshelper ?
Reference: i think this sort is not in place on master, would be good to send this pr in there as well.
Candidate: likewise..
Reference: this method should be static and static methods typically go at the bottom of the class.
Candidate: i don't think we need to check if the != null && <UNK> { <UNK> } <UNK> { <UNK> }
Reference: at this point, why not make these registrations method calls instead of repeating the same field access over and over again with the same strings being used?
Candidate: why do we need the <UNK> here?
Reference: this.m_
Candidate: this should be setemptyelement().
Reference: throw npe
Candidate: should we be the <UNK> here?
Reference: we should pass the compensation context when calling this command
Candidate: use <UNK> instead of <UNK>
Reference: same here. pattern can be static to the class.
Candidate: this should be the fixture.
Reference: stringformat
Candidate: should we use the <UNK> here?
Reference: we should explain in a message that signed isn't supported.
Candidate: i don't understand why, but it matters, but if you want to trim the <UNK>
Reference: hmm i think you forgot to push the change here :)
Candidate: can you add <UNK> <UNK> <UNK>
Reference: why calling concat here? i would worry this would prevent stringbuilder optimization for +'s.
Candidate: why do we need need to be <UNK> here?
Reference: better to use the map type for the declaration. and the diamond <> on construction should work. so i suggest map<string, string> requirementsvalues = new linkedhashmap<>();
Candidate: this should be <UNK>
Reference: since isdclassinitialized actually should hold whether or not initialization worked, what do you think about trading dclass_index!=0 for isdclassinitialized ?
Candidate: why do we need the <UNK> here?
Reference: an undeclared exception type should always be wrapped with undeclaredthrowableexception.
Candidate: should this be <UNK>
Reference: if there is an interrupt, the thread will not wait for count down of the latch and proceed. it would be safe if we assume that thread interrupt can suddenly
Candidate: i don't understand why, but it matters, what is the that the is is the that the is is the
Reference: same here, why not use flavored classes to do this instead of class.forname based on a build flag?
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to check the the <UNK>
Reference: might have been more readable to simply use a mock callback?
Candidate: why do we want to use the here?
Reference: not required, but fine :p
Candidate: should this be <UNK> blah connection, instead of <UNK> thread?
Reference: hardcoded, this should be done in a better way. <bug
Candidate: should be username?
Reference: tosca.template.id should be a constant in applicationspecsbuilder. (there are two mentions in this pr and three existing.)
Candidate: do we need to make this a <UNK> (instead of <UNK> (instead of <UNK>
Reference: not that exhaustive that 'a' is the right password.
Candidate: why do we need need to the <UNK> here?
Reference: don't we have two separate arguments for log file and log level? why do we create relationship between them?
Candidate: should we throw an exception here instead of returning an error?
Reference: missing uninstall "ws.jar" bundle code
Candidate: this should be <UNK>
Reference: you should externalize the string
Candidate: ![major](<link_0> 'severity: major') either remove this rethrow or rethrow [![rule](<link_1>](<link_2> or rethrow [![rule](<link_1>](<link_2>
Reference: exsusts abd hem.... (typos were not there in the original exception)
Candidate: why do we need to use the <UNK> here?
Reference: 1. better to log it in warn or error level instead of info? 2. typo, creat -> create. better to have full sentence e.g. create sftp connection was failed: {}?
Candidate: why do we need to here?
Reference: in this case the isempty check is redundant i think
Candidate: do we need to catch interruptedexception here
Reference: not required unless for test.
Candidate: i don't think we need to check if the is is the
Reference: same as before. unnecessary extra operations for minimal gain.
Candidate: should this be <UNK>
Reference: maybe call this once and store into a variable since it is currently being called multiple times.
Candidate: can you use the payload?
Reference: if we store the idtokenprovider rather than googlecredentials, we can implement this whole thing as: java return idtokenprovider.idtokenwithaudience(targetaudience, options);  i would expect the idtokenprovider to know how to refresh
Candidate: why do we need the <UNK> here?
Reference: if there is no san list in the cert then this would return null which would lead to an npe. need to add a ... !=null check and if null
Candidate: do we need a <UNK> of <UNK>
Reference: well, you just verified three lines up that authentication is equal to acl.system so this seems redundant to me.
Candidate: can be replaced with <UNK> ?
Reference: you made this projected, but never call it outside of this class. it should remain private.
Candidate: i don't think we need to check if the is is the
Reference: break?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if we matters, but i don't understand why, but it matters, but it is be the
Reference: do we need this check. groupname starts with dn + "/" so lastslash will never be -1. please correct me if i am wrong
Candidate: should we be <UNK> here?
Reference: variable name should be currentapiversion
Candidate: please use <UNK>
Reference: changing from false to true is even more breaking. we need to avoid it unless we can really prove that it's safe.
Candidate: iterable<integer> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> *= 2;
Reference: why we still need field "presenter" if you use provider ?
Candidate: should we be <UNK> here?
Reference: also, when inserting a multitree, you need to set the 4th arg which is the container instance on the page, e.g.:  new multitree(pageid, containerid, contentletsids.get(0),"uuid-1");
Candidate: you don't need to use the <UNK>
Reference: the block of if...else if...else if... is hard to understand. i see you were trying to parse the jsonpath specification by your self. can we avoid such a implementation? or
Candidate: <UNK> *= 2;
Reference: the user can call getaccesstoken()
Candidate: why do we need to synchronize on the <UNK> ?
Reference: seems like the formatter did not format these line, please apply it
Candidate: why do we need the <UNK> here?
Reference: this should be promoted to static or an enum or something
Candidate: should be be <UNK>
Reference: i'd like to raise this point again: since we changed the nature of composeobjectid to be static, we need to access auditlogdirector statically. this is unwelcome and could be spared
Candidate: if oldvalue is is not the
Reference: i thought we did not have the processdefinitionid in the extensions json i thought we had only the process definition key in the extensions json and that's why yesterday in
Candidate: should this be <UNK>
Reference: map should not be static. there us only single instance of jsonrpcserver so we can pass it around and call instance methods.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: instead of return, make it an else
Candidate: this should be the <UNK> <UNK>
Reference: is this range meant to be hardcoded?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: no no! there can be any exception. and since we're not using transactions here, we *need* to do db cleanup in case of failure and if we fail doing so
Candidate: why do we need need to the <UNK> here?
Reference: it would be more clear if to put here instead of system.out some assertequals and check either it equal to expected string.
Candidate: why do we need to mock <UNK> here?
Reference: why is this 30 seconds buffer added?
Candidate: why do we need to <UNK> the <UNK> here?
Reference: this must be based on plugins capabilities instead of version 2.0 ?
Candidate: beware that this is be the <UNK> <UNK>
Reference: isenabled() not needed for simple strings.
Candidate: why do we need to use the <UNK> here?
Reference: ?grant_type=authorization_code looks redundant it's standard oauth2 param, it will be added here <link_0>
Candidate: please use <UNK>
Reference: i think it was better with the old static imports.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please add error handling. we should not crash the whole service if the input is incorrect
Candidate: if (args.length == null) { throw new <UNK> }
Reference: don't think it's a good idea to have two repositorymanager classes.
Candidate: why do we need the <UNK> here?
Reference: oh! i really have a bad memory... <link_0> never mind.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: didn't see this earlier, but it should probably be deleted.
Candidate: suggest using <UNK> <UNK> <UNK> <UNK>
Reference: this statement could be moved to outside the then/else blocks (it's done always). we just need to invert the expression (and delete in the then block).
Candidate: please use <UNK> <UNK> <UNK>
Reference: is details
Candidate: should this be <UNK>
Reference: oooh, the "exception message affects control flow" isn't limited to test code! this smells.
Candidate: this this embedding driver enabled, driver enabled, driver driver enabled, driver driver enabled, driver enabled, driver enabled, driver enabled, driver enabled, driver enabled, driver enabled, driver enabled, driver enabled, driver
Reference: drop this change, i think. we have already peeked at the type. why throw it away and peek again?
Candidate: why do we need the layout here?
Reference: this should be error level, shouldn't it?
Candidate: i don't understand why, but i am not sure why, but i am not sure why, but i am not sure why, but i am not sure why, but i
Reference: this and m_
Candidate: should this be <UNK>
Reference: this is the wrong index if the method parameter 'columns' is not in the table's creation order. it can cause a returned string to be blank for a column that
Candidate: why do we need to check for the <UNK> <UNK>
Reference: this is java 7's feature. we should use old convention because not all users upgraded to jdk7. so, please change to  try { ... } catch (jsonexception e) {
Candidate: this should be injected, if (context { <UNK> } <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> } <UNK> { <UNK> { <UNK> { <UNK> }
Reference: the return value is never used.
Candidate: ![major](<link_0> 'severity: major') remove this method. [![rule](<link_1>](<link_2>
Reference: how about create tojson in interpretersetting.java, so that you don't to create tojson in dependency and interpreteroption ? i believe we may need to serialization interpreter setting elsewhere, although now
Candidate: i don't understand why, but it is be the if the is is the
Reference: strings "level1.fofn" and "level2.fofn" can be factor out (static or within the test) to re-use here and in the returned array.
Candidate: you can use static"
Reference: should not have to throw these exceptions
Candidate: if this { <UNK> } <UNK> { return <UNK> } { return false; }
Reference: afaik best practice for apis that return collections is to return an empty list / map / set rather than null; can we do that here?
Candidate: why do we need need to the <UNK> here?
Reference: debug/trace/remove?
Candidate: why do we need the <UNK> here?
Reference: suggestion assertthat(got).contains("description");
Candidate: why do we need the <UNK> here?
Reference: without a tostring() implementation the reference to the handler isn't that user-friendly; i would instead suggest to use untypedresponsemessageheaders.gettargetrestendpointurl. something along the lines of the handler for the url ({})
Candidate: can we use the <UNK> permission?
Reference: typo => create
Candidate: use map::computeifabsent instead of clazz,
Reference: @tmjee there is not a big sense declaring one-time variable (especially with such names). it's better to inline them all and put checkstyle suppression.
Candidate: equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals equals
Reference: type is still a valid field on files.
Candidate: this should be the if the is is the
Reference: @anki2189 pls add a @transactional annotation here and below as well.
Candidate: can we use <UNK> permission?
Reference: :pencil2: inline metadatareader
Candidate: should we be the if <UNK> != null) { return <UNK> } <UNK> { <UNK> } <UNK> { return false; }
Reference: hi @jsoltes you can use assert#assertnotnull(java.lang.object) method here.
Candidate: should we be <UNK> here?
Reference: can't we save off the arguments here as well so they don't even need to configure the arguments call?
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: positive test is better (isnestedloadenabled). i think default should be disabled (for now). another alternative is to have 'nestedjsonloader()' which just extends jsonloader. working through pig properties is not very
Candidate: should we be the <UNK> here?
Reference: this logic has been used in different methods of this file. perhaps we could create a private method, that handles that logic.
Candidate: i don't understand why, but it matters, but why do we need to check the <UNK>
Reference: maybe use specifictype.isarray()? and add a specifictypereference.isexpr() and isrest()? they end up checking the type name as well, but it's a bit clearer in the code, and it centralizes such
Candidate: i don't think we need to check if the is is the <UNK>
Reference: why a new string() here?
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: we need to keep public, right?
Candidate: can be replaced with this(name, <UNK>
Reference: @fabriciofx this method is not defined in any interface, and i think that we don't need it: we should use cactoos' teeinput to write it to any output source. you
Candidate: this readasstring(...) instead of <UNK>
Reference: could this be synchronised using uitest.waituntilnodedisappears? as in waiting for the notification ui to go away. also, could you see if the tests work with waitonfxthread?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: you can use sagatype.isinstance(...) instead.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: please use assertnull instead.
Candidate: why do you need to <UNK> the <UNK> <UNK>
Reference: true. we can remove it.
Candidate: why do we need need to check the <UNK> here?
Reference: why not just thisrow-- instead? clearer that you're just subtracting 1.
Candidate: we should use the <UNK> <UNK> <UNK>
Reference: ![critical](<link_0> either log or rethrow this exception. [![rule](<link_1>](<link_2>
Candidate: please use <UNK>
Reference: worth a warning somewhere incase both cpu and vcore set?
Candidate: can we use getconnection here?
Reference: no need to put __ts if there is only one case in the method as the method name can describe the case. check other methods and remove them.
Candidate: why do we need to use <UNK> here?
Reference: i'm confused; why do you think we need to synchronize on a [blockingqueue](<link_0>
Candidate: should we move this to debug level?
Reference: @leexgh personally find it easier to read when gettranscriptconsequences() is assigned to a variable and then used in this null check and subsequently to iterate over instead of calling the
Candidate: the syserr should be be <UNK>
Reference: it wouldn't a bad idea to set this as parameter, eventually someone might need a diff charset
Candidate: use <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: typo: has
Candidate: why do we need to <UNK> the <UNK> here?
Reference: these asserts don't look quite right, a translation flag in a test string, now two copies of long verbose strings that would need to be kept in sync or tests
Candidate: please use <UNK>
Reference: is this needed?
Candidate: why do we need to use the <UNK> here?
Reference: this map is private, static and intended to be immutable. don't change it!
Candidate: should this be <UNK>
Reference: this blocks, so it isn't async, you could just remove the future and call the code inline if you want to make it eager.
Candidate: should we use the <UNK> here?
Reference: can we first try with standardcopyoption.atomic_move then fallback with no option?
Candidate: should we use the exception here?
Reference: maybe we could use [collections#emptylist](<link_0> here? > returns the empty list (immutable).
Candidate: <UNK> tablets can be replaced with <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = viewmodelprovider <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK> = <UNK> <UNK> <UNK>
Reference: do we need to run it sequentially? can we use stream api?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: add null-check for method parameter.
Candidate: should this be <UNK>
Reference: what about operationstatus case failure? there are other retriable exceptions other than regiontoobusyexception, aren't there?
Candidate: i don't think this matters, but we don't need to do we need need to check the <UNK>
Reference: nit: consider prepending "i_" and "d_" to names
Candidate: shouldn't this be <UNK>
Reference: how would this parse data?
Candidate: should this be <UNK>
Reference: please add to this method the check for the cluster feature compatibility: return ishotplugsupported() && osrepository.hasnichotplugsupport(getvm().getos(), getvm().getvdsgroupcompatibilityversion());
Candidate: this should be the <UNK>
Reference: it's not a tree node.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: wouldn't we want the old plug-in configuration to remain in the plug-in config history page of the resource? it seems that a configuration update/merge would not result in an orphaned
Candidate: should we be the <UNK> here?
Reference: can be private, and i think this would make it clearer what the interface is given all these proxy methods
Candidate: rename <UNK>
Reference: could you apply the evidence/other info assertions in these tests as well?
Candidate: use <UNK>
Reference: @arthur236 did you intentionally leave out the first three lines in the original save method of the emrapi module?
Candidate: why do we need need to the <UNK> here?
Reference: looks like a constant
Candidate: <UNK> *= 2;
Reference: should we care about mutability of the map?
Candidate: why do we need to check for the <UNK> ?
Reference: unmap should not generate an error.
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. 'severity: major') invoke "tostring()" method. [![rule](<link_1>](<link_2>
Reference: i'd at least use a constant instead of that hardcoded 16.
Candidate: why do we need to permission?
Reference: make storedworkdlowdefinition.state implement comparable?
Candidate: why do we need to synchronize on the <UNK>
Reference: can you use minitialslistview and others defined in the init method?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: would be better to extract the condition in a separate helper method
Candidate: the syserr should be be <UNK>
Reference: <link_0>
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: check for isempty instead.
Candidate: why do we need need to the <UNK> here?
Reference: these printed messages should be cleaned up in both samples.
Candidate: you can just use the <UNK> here as well
Reference: can we use constant instead of -1, e.g. isodomainlistsyncronizer.size_is_not_available? probably means that the constant should live elsewhere so both classes can us it.
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: it would be better to do it inside org.carlspring.strongbox.services.impl.configurationmanagementserviceimpl#saverepository inside modifyinlock block
Candidate: should we move this to debug level to debug level
Reference: let's add to vmmapper a method that maps: (restapi) vmpayloads--> (backend) vmpayload then reference it from here and from backendvmsresource
Candidate: the syserr should be be <UNK>
Reference: i don't think this'll fix stuff, because foundmatchingrule will still end up false and the alerts will still get triggered. we should bail out and not do anything if the
Candidate: what do we want to do the <UNK> of the <UNK>
Reference: i bet we should add some restrictions here as * or whitespace is not allowed as well.
Candidate: <UNK> evidence, overflows?
Reference: as first partitioning can be null, but the 2nd one can be default_partitioning, i believe you need to check both values before returning.
Candidate: why do we need to check the <UNK> here?
Reference: the exception is never thrown.
Candidate: we should need to evict the to the the <UNK> <UNK>
Reference: final . cachestorageimpl cache -> cachestorage
Candidate: please use <UNK>
Reference: the message may be confusing as it talks about pushing and submitting. perhaps for this class use: " to submit changes you need 'submit' rights on " + ref_config"."
Candidate: should we be the <UNK> here?
Reference: the filter().findany().ispresent() chain can be replaced with 'anymatch' it avoids creating redundant temporary objects when traversing a collection.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this seems like it's going to make this pretty hard to debug if there are any issues
Candidate: why do we need the <UNK> here?
Reference: we need this to return epoch in milliseconds (java date interpretation) and not unix epoch (in seconds), so gui will interpret this correctly. try it like this: genendtime.atzone(zoneid.systemdefault()).toinstant().toepochmilli(); with all
Candidate: can we return <UNK> <UNK> <UNK> ?
Reference: negation missing? if (!cluster.issetrequiredswitchtype()) {
Candidate: this should be the <UNK>
Reference: should this be using azureresponse now instead of creating another response instance inline?
Candidate: hmm. this should be the <UNK>
Reference: i suggest putting this if statement after computing all (line 613) since previous computations are redundant if this is true
Candidate: i map<> on the lhs
Reference: should subclasses be allowed to override this method?
Candidate: wouldn't it make sense sense to override the <UNK> <UNK> <UNK> subclasses haven't checked in the method?
Reference: would a not_found be more helpful?
Candidate: i map<> <UNK>
Reference: please reuse the code in abstractvmpopupwidget somehow. i guess that it will change here/there we'll forget the other one.
Candidate: why do we need to <UNK> stuff?
Reference: i'd be consistent with the naming of objc-module-overlay.yaml and name this testing-overlay.yaml.
Candidate: why do we need need to the <UNK> here?
Reference: please put all the setters underneath each other for better readability.
Candidate: why do we need to use <UNK> here?
Reference: [minor] move this to directly after files.delete, for clarity?
Candidate: should we catch (throwable e) { return; } catch (interruptedexception e) { thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); throw new <UNK> e) { thread.currentthread().interrupt(); throw new
Reference: can we remove the explicit setting of purgelessthanequalto?
Candidate: why do we need the fully-qualified properties?
Reference: what happens if status is false? i think we should set isleader state to false, irrespective of whether release was successful or not.
Candidate: we should need to check if (throwable stripe { return; }
Reference: can you move new code to a separate method?
Candidate: why do we need the <UNK> here?
Reference: in the event the client is trying to initiate an aia, but is not permitted to do so an error page should be displayed rather than redirecting back to the
Candidate: use readasstring(...) instead of <UNK>
Reference: please use org.wildfly.extension.microprofile.opentracing.subsystemdefinition#microprofile_config_capability_name instead and make it public.
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: why catching exception here? do not forget <link_0> :)
Candidate: should we use the payload?
Reference: even simpler: message = validategroupidinput(pomcomponent.getgroupid());
Candidate: can we add the exception here instead of catching an additional additional additional additional additional additional additional additional additional additional additional additional additional additional additional additional additional additional additional additional
Reference: there may be a race if a user deletes this file manually - should we handle such cases as regular io exceptions rather than assertions?
Candidate: why do we need the <UNK> here?
Reference: this endpoint needs to consume the whole stream in order to test properly
Candidate: please use <UNK>
Reference: i think it makes the code cleaner and short if you don't have the function call and just have two if statements like the following: if (args[0].gettag() != valuetag.node_tree_tag) {
Candidate: this should be repelaced e1 && <UNK> { return false; }
Reference: wonder if we wanna put this check only in islowmemorymode just in case we may miss something and give false alert. for example (the metadata reader strips out string stats
Candidate: let's print stripe id + id + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: do we need to null check malign here?
Candidate: this should be the <UNK>
Reference: i think it should be viewmodel's responsibility not to return null, so this check should be moved there and here you should just call viewmodel.getdate();
Candidate: should be be <UNK>
Reference: this is a concern to me as it overwrites the value of value and as such due will no longer work.
Candidate: why do we need the <UNK> here?
Reference: why waste time whitelisting it?
Candidate: why do we need the exception here?
Reference: please use for the negative tests the following convention: assertthat(validator.validatestatusforactivation(), failswith( vdcbllmessages.vds_already_up));
Candidate: why do we need to check the <UNK> here?
Reference: i understand the isopen issue, but why you removed this.target = null; ?
Candidate: why do we need to here?
Reference: what about a return if this is true. this is what happens anyway and you do not have to indent the whole method.
Candidate: should we be the <UNK> here?
Reference: add verify or assert
Candidate: why do we need to use <UNK> here?
Reference: don't we have to stop it?
Candidate: should we print the exception here?
Reference: we should be able to use slice.getint(0) here.
Candidate: why do we need to use <UNK> here?
Reference: the process has been killed.
Candidate: what happens if the exception is is the
Reference: <link_0>
Candidate: we should need to throw an exception if we don't want to re-throw the exception?
Reference: call its own method like zkclient to reduce maintenance effort.
Candidate: please import?
Reference: checking this (and subsequent) changes to the conflict detection manager are intentional - looks like these tests are still passing, but would like to verify this
Candidate: i don't understand why, but it matters, but what happens if the is is invalid?
Reference: pull in master. i've merged in a change that has the budget constructor taking in a localdate instead of a long. then you just parse the "start_date" string with localdate.parse(string,
Candidate: do you need need to use <UNK> <UNK> <UNK> <UNK>
Reference: use getaddress to get a byte array instead - prevents the confusion on the other end that maybe the string is a host name and maybe it's an ip addr.
Candidate: why do we need the <UNK> here?
Reference: it is not clear to me why you are not passing the ssl context to the constructor. *(even of the test pass in my environment, it looks odd to me..)
Candidate: if the == null) { return false; } else { if <UNK> { <UNK> { <UNK> { <UNK> = <UNK> oldvalue, <UNK> } else { if <UNK> { null) {
Reference: you have not changed to use commonutils.loadresource() as requested. i still think it is rather important to do so.
Candidate: why do we need the exception here?
Reference: should this be initialport + porttrialcount - 1?
Candidate: the syserr should be be the
Reference: name generation and validation should be moved to service layer
Candidate: if we is the software <UNK> software error, so we don't need to use the <UNK>
Reference: like with the outputformat, i think this should be done as soon as possible in a method that is called to setup the job. it looks like createrecordreader might be
Candidate: please consider moving this method to a method, since we are expecting an empty on the <UNK>
Reference: please rebase on top of latest master, this is related to recent changes in <link_0> if (host != null) { event.setvdsname(host.getname()); }
Candidate: why do we need to check the <UNK> <UNK> <UNK> ? <UNK> : 2; thanks!
Reference: not crazy about having to do this null check as it may cascade to a lot of places. you may be able to create a phoenixconnection from indexmaintainer if need
Candidate: if (state != null && <UNK> && <UNK> && <UNK> != 0) { <UNK> }
Reference: put the magical constants into real constants pls :-)
Candidate: you need to use the schema object object object object instead of the object object object object object object object object object object object object object object object object object
Reference: to be more explicit, should we throw an error here if "clean-on-flush" is specified without neither "flush" nor "flush-size" being present?
Candidate: please use the enum?
Reference: remove the modifier to make the constructor package private, and remove the null check.
Candidate: this should be schedule()
Reference: the single-step probing used in this method for updating the local association cache gives me pause. i can envision situations (for example, some other client has added a batch of
Candidate: we should catch (throwable e) { blah <UNK> blah } blah { blah blah <UNK> blah } blah } blah { blah blah <UNK> blah }
Reference: add another relationship with a type outside of the characteristic type hierarchy. the rule should not report that as an error.
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: suggestion .filter(slaveinfo -> labelname.equals(slaveinfo.getlabelstring()))  should avoid the null pointer exception.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: should we keep this void method if there's another clickundeletelinkinbannernotification method returning specialrestorepageobject ? also name could be a bit more precise ;)
Candidate: why do we need the layout here?
Reference: what about properly remembering original value and putting it back after tests?
Candidate: i don't understand this matters, this matters, this matters, but you don't want to use the <UNK> <UNK>
Reference: how about turning drawglyphvector into drawcomponent and just pass down the component instead of spreading the metrics computation around?
Candidate: what is this happen if <UNK> is the <UNK>
Reference: instead of returning null please use throw unsupportedoperationexception("mkfork#json()")
Candidate: should this be <UNK>
Reference: indentation here seems a bit inconsistent. personally i'm fine with the style the way it was (with leading periods) but in both cases the indentation seems off (4 spaces instead
Candidate: i don't think this <UNK> is the <UNK> <UNK>
Reference: a notifydatasetchanged() call is made in loadsitestask.onpostexecute from loadsites() just below this line. we can remove this since it's redundant.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: add the following cleanup here:  functions.clear(); methods.clear();  "functions" because you forgot to clean it somewhere. "methods" it's a corner case, but in case of exception, we could enter
Candidate: this should be <UNK>
Reference: delete ____ts as your method name already tells the story.
Candidate: can you hide the student here?
Reference: use constant
Candidate: why do we need to use <UNK> here?
Reference: sorry i was wrong before, after checking the original bug and talking with eric, the version guard should be >= 3.20.0.
Candidate: the syserr should be the lhs
Reference: this should use an actual charset rather than just a string identifier. similar throughout.
Candidate: why do we need the <UNK> here?
Reference: system.out.println(string.format("find by footer locators: %s", locators));
Candidate: the syserr should be be <UNK>
Reference: just use foreach
Candidate: should be be the vdsid == <UNK> ? <UNK> : <UNK> { <UNK> } <UNK> <UNK> { <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> }
Reference: this parameter shouldn't be necessary, now that we have split the variants and the header loading. this applies to the instantiation of the dbcollectionsfilesnamevalidator object below.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: could we initialize the exchangeurichecker instance in a different line, it seems too much for an if condition
Candidate: please use <UNK> <UNK> <UNK>
Reference: can you move this code inside the if (isresultset) so the headers is only pass through if we set some data because there was a result set.
Candidate: use <UNK> + <UNK> + ", " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> +
Reference: combine if clause
Candidate: the syserr should be be <UNK>
Reference: it doesn't seem like you're popping the cause after pushing. you need to ensure that the cause stack is stack neutral after the method is completed, so either popping the
Candidate: the syserr should be be the
Reference: nit: streamid
Candidate: <UNK> <UNK> inspections
Reference: note that in order to be sync'd with the rest-api, the "size" text should be mapped to the "size" property (instead of the "actual_size" property).
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: accidental box?
Candidate: please use <UNK>
Reference: btw same true for fetchcreatedentity() which is triggers mapentity()
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: please remove this extra blank lines
Candidate: why do we need to here?
Reference: defensive copy here, this.objects = immutablelist.copyof(objects); or this.objects = new arraylist<g>(objects); as appropriate
Candidate: please use <UNK> <UNK>
Reference: add preconditions.checkargument checks to verify that the passed engine and buffer are not null.
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: just curious. why we set the visibility of footerlayout to "visible" if it does not set to "gone" in view_wiki_error.xml
Candidate: i don't think we need to check the <UNK>
Reference: nit: can we make this a constant?
Candidate: why do we need to use <UNK> here?
Reference: we should be using timeservice.
Candidate: why do we need to check the <UNK> here?
Reference: this is just a failure in parsing the timestamp and it doesn't affect much. message should be modified accordingly.
Candidate: can we use the payload?
Reference: just curious. would using jobid here work for high level api job? besides functionality it will be better to not use jobid here. it's looks odd to use jobid in
Candidate: why do we need the builder here?
Reference: this database query executes, and does nothing. did you mean to return its result?
Candidate: can you use <UNK> <UNK>
Reference: attribute value was removed is more concise than "attribute (its value) was removed"
Candidate: @unyoungwax, do we need to trim entries?
Reference: would be more consistent to use this.fileexclusionmanager here
Candidate: this should be the <UNK>
Reference: as with the other suggestion i think you could unify something here. i.e. move both cases into one if block that checks if the user is in the scriptfragment and
Candidate: this should be the username?
Reference: _minor_: somehow i find it weird to keep a lambda here when the other cases delegate to an actual method.
Candidate: if we is the software error, so we don't need to do the <UNK> the <UNK>
Reference: int?
Candidate: can we use the <UNK> here?
Reference: component type for the inactive device exception should be domain_tariff_switching here.
Candidate: i think the exception is the exception is the the exception is the <UNK>
Reference: is it necessary to introduce dependency on sets?
Candidate: why do we need to check the <UNK> here?
Reference: would it be more broadly useful to have a boolean getter on operator indicating whether an operator had ever returned any results (i.e. nextready() != null)? if that could be
Candidate: i disagree with the kubernetes reference: <UNK> <UNK> <UNK> { <UNK> <UNK> } <UNK> <UNK> { <UNK> }
Reference: probably should assert that linkiterator.hasnext returns correctly here.
Candidate: should be setemptyelement().
Reference: return c != null && c.ismergeable();
Candidate: why do you need to <UNK> the <UNK> <UNK>
Reference: spell out buffer
Candidate: the syserr should be be <UNK>
Reference: no need for the extra variable here
Candidate: why do we need the <UNK> here?
Reference: if you think there's gonna be more rendering way in the future convert to a switch block, makes it more readable
Candidate: why do we need to use the <UNK> here?
Reference: this is a member of the class... this never should be happened...
Candidate: this should be the <UNK>
Reference: i think you should factor out the common code this test shares with the previous one
Candidate: i don't understand why, but i understand why, but i don't understand why, but i think why, but it should be the
Reference: make an injectable "hreftomessageid" function?
Candidate: this should be <UNK>
Reference: should add parentcommandid here since hashcode() now relies on it
Candidate: please use braces around single line blocks
Reference: return m.method.equals(method);, instead of this line and next?
Candidate: why do we need to check here?
Reference: does it matter that we no longer increment the second parameter?
Candidate: why do we need to assert that the that the is is the *both* <UNK> and the the implicit test that verifies that the <UNK> completes on the
Reference: is it fine to have less bytes than the optimal if optimalnumofbits % 8 != 0?
Candidate: why do we need to permission?
Reference: no need to make this default in a test actually using per workspace services.
Candidate: can you move this piece of this piece of this piece of this piece of this piece of the piece of this piece of the piece of the piece of
Reference: this is window-specific stuff. a better idea would be to use file.separator instead of the \'s
Candidate: should this be <UNK>
Reference: the method can declare "throws urisyntaxexception, ioexception" and the extra try/catch/log can be removed.
Candidate: why do we need the layout here?
Reference: the enable and disable diversity code seem pretty much the same apart from minor things. is it possible to optimise the code?
Candidate: can we use the <UNK> too?
Reference: it is already set in this method, three lines up.
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: this defines what we are migrating from, and we are migrating from boxc3 data which currently uses the normalization event, so you'll need to leave it as normalization in this
Candidate: i think this should be the <UNK> in the messages.properties
Reference: most important is to create elements with the same xmi-id as the elements in the fragment. elements are compared by xmi-id, not by element id
Candidate: assertnull
Reference: @landreev and i talked this out in slack and decided to go with switching from created to ok in 471dd25 (which is how this pull request started.
Candidate: why do we need to evict the <UNK> request?
Reference: do we need spy in this case?
Candidate: this should be <UNK>
Reference: someone else has come up with a similar solution. i'm not sure it's the way to go - what's special about 1000ms?
Candidate: <UNK> *= 2;
Reference: no need to break line
Candidate: can you use the <UNK> <UNK> ethernet headers, the <UNK> and <UNK> the <UNK> <UNK>
Reference: it was like this, but it's confusing to me why it's calling super.getname() and super.getreference, because 1. this class doesn't override those methods 2. if it did override those methods,
Candidate: this ides should be the same as above.
Reference: what about kind.long_literal, kind.boolean_literal, or kind.null_literal ?
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: what if the id is not found? it would be better to have protective code instead of creating a connection to "http://x:-1/killexecutor".
Candidate: do we need need to print the normalization here
Reference: the plugin now requires newer jenkins core version than in 2016, maybe this check is not required anymore
Candidate: this should be <UNK>
Reference: maybe you can do a getall here and assert the returned list is empty just to cover the basis.
Candidate: nit: can you migrated to the the vars to the <UNK> <UNK> the contents?
Reference: address was nulled out above. maybe move physicaladdress up above
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: this code is unreachable because assert.fail() throws an exception.
Candidate: :disappointed:
Reference: use an overridable getoperationtimeout() method instead
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: @fanifieiev the same above.
Candidate: @fanifieiev the same above.
Reference: assertthat("notification type", ordernotification, instanceof(orderstatuschangenotificationpayload));
Candidate: why is this <UNK> overflows?
Reference: if authorizer is null, then we should put a warn log. logger.warn("no authorizer is configured for '{}' app.", appname);
Candidate: should we catch exception specific?
Reference: java if (activity instanceof fragmentactivity) { showratedialog((fragmentactivity) activity); }  i think it is better because not all developer use fragmentactivity even if sdk_init under honeycoms.
Candidate: the syserr should be be the
Reference: please use builder.xxx(...) instead of new ....
Candidate: why do we need need to the <UNK> here?
Reference: if you put it the other way around java if (configuration.getquartzconfiguration().isempty()){ scheduler = stdschedulerfactory.getdefaultscheduler(); }  you avoid the double negation - i find that a lot easier to read.
Candidate: do we need to the exceptions?
Reference: i wonder if its better to just use setheight("" + delta + "em") once and have a single dom element cover the entire span.
Candidate: why do we need to mock <UNK> here?
Reference: if getvm().getdiskmap() == null or getvm() == null, you have npe here? is this ^ possible?
Candidate: this should be repelaced e1 && <UNK> { return false; }
Reference: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Candidate: i
Reference: very nice!
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: inline to avoid the reassignation? this.metadata = metadata == null? maps.newhashmap() : metadata;
Candidate: why do we need to use <UNK> here?
Reference: logging.
Candidate: should we use unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not unsupportedoperationexception("not implemented") here?
Reference: we are not really using casedbtransaction here for anything, are we?
Candidate: we should need to do we need to do the getcredentials here?
Reference: don't just throw exception. this is too general.
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: is runtimeexception the correct exception to throw? can we provide more information in the message?
Candidate: if we is the software exception we should do we want to do we need to check the <UNK> <UNK>
Reference: we should check whether the abssendtimeengine is configured with an extension id (e.g. getextensionid() != -1).
Candidate: should we throw an exception?
Reference: sb.append(fispic ? "pic" : "non-pic"); ?
Candidate: should this be <UNK>
Reference: remove this empty line.
Candidate: use iu
Reference: notificationbuttonview.setvisibility(shownotificationbutton ? view.visible : view.gone) seems more safe to me in case seterrormessageui gets called twice with different values for shownotificationbutton
Candidate: should be setemptyelement().
Reference: why not returning the list type? your removing the possibility to use list methods without a cast. don't see the point.
Candidate: the syserr should be be the <UNK>
Reference: i suggest to externalize this constant like the one above.
Candidate: can be simplified to:  <UNK> <UNK> = <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> ? <UNK> : <UNK> : <UNK> : <UNK> : <UNK> :
Reference: how aboot math.round?
Candidate: i don't think we need to check if the is is the
Reference: this constructor does nothing.
Candidate: can we use optional?
Reference: i see that spring-cloud supports only the single role per candidate, but should we really be restricted as well? i mean comma-separate value for the role attr and array value
Candidate: this should be <UNK>
Reference: this shouldn't be this way. in tablets in landscape mode, when a file is shown in the right pane, the options for the current folder still make sense. please, undo
Candidate: should we be the if <UNK> != null) { return; } <UNK> } <UNK> { <UNK> }
Reference: i removed the empty constructor because (0|0) doesn't make sense here. so there are two possibilities: - set valid coordinates (preferred) - set gp to null and check it later
Candidate: why do we need the <UNK> here?
Reference: mob: check if it's an instanceof number first, then possibly throw an illegal argument exception.
Candidate: please use <UNK> objects.tostringhelper() anywhere else.
Reference: i wonder if we should have a better error message here. it seems like a sqlexception here means that one of the objects listed in the uri-list is not found.
Candidate: why do we need to use <UNK> here?
Reference: what's the rationale for this vs. just using a concurrent set implementation and adding the elements directly? i'm worried about the number of set iterators we might have sitting with
Candidate: should this be <UNK>
Reference: thinking from the point of view of a developer implementing a client for nakadi subscriptions, how is it possible for me to detect that this scenario is happening? should i
Candidate: can be simplified to <UNK>
Reference: seems rather complicated to me; any reason why we aren't just using a fixed length here (e.g. tv.ten)?
Candidate: this should be <UNK>
Reference: it depends on how it is accessed by concurrent writers ie handleresponse and add could be accessed by different threads concurrently? dealing with concurrent accesses here could be dangerous: if
Candidate: the syserr should be null?
Reference: rename tempvar
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: this is a good example of how the original way of using indexes to access the list is better for performance.
Candidate: why do we need the <UNK> here?
Reference: maybe use otherthreadrule class? it allows running things in a different thread and has ability to check thread state.
Candidate: the syserr should be be the <UNK>
Reference: make this method synchronized.
Candidate: should this be <UNK>
Reference: extra trailing comma.
Candidate: why do we need to use the here?
Reference: this should be a call to the logger and not to system.err (throughout this class).
Candidate: :disappointed:
Reference: given the text, this should be outside of the loop
Candidate: we don't need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: declare final
Candidate: can you use <UNK> <UNK>
Reference: should this not be && previewslideshow != null, not ||
Candidate: why do we need to evict the <UNK> here?
Reference: is this the only reason update can fail? if we run into datasource issues, connection problems, constraint violations (excluding name uniqueness), we will see "duplicate domain" as the reason in
Candidate: should we be <UNK> here?
Reference: @dgutierr - same here, try to avoid external iterations as soon as possible and do an incremental replacement by internal iterators / use of streams...
Candidate: why do we need to call <UNK> here?
Reference: i'd move this to a method (create storage domain) that accepts the three arguments and replace all those creations with a call to it.
Candidate: this should be the fixture.
Reference: why is a logger in the upper case?
Candidate: why do we need to here?
Reference: take care not to include client id/secrets in commits. because this is now in your git history -- you will likely have to squash your commits into one and submit
Candidate: i don't think we need to check if the is is the <UNK>
Reference: these two statements could be simplified just to return overlap <= getmaxoverlap() (no need for if/else). better still, return overlap <= maxoverlap (no need for getter).
Candidate: why do we need to check the <UNK> <UNK>
Reference: if you use charsetdecoder rather than charset then there's more control. i don't think we should re-implement a special codec - we shouldn't be spending our time implementing extreme edge
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: any better way to check if the text is a valid url other than converting it to string?
Candidate: can you access the symbol symbol symbol access to access symbol symbol symbol symbol symbol symbol symbol symbol to access symbol symbol symbol symbol symbol symbol symbol symbol symbol symbol
Reference: suggestion log.debug("it took {} attempt(s) to find {} open wals", attempts, open);
Candidate: why do we need to use the here?
Reference: this can be a list
Candidate: the syserr should be be the
Reference: remove this empty line?
Candidate: can we be simplified to <UNK> <UNK> <UNK>
Reference: so we assume all the soft constraints will use this formula? i don't think it will fit the partition movement constraint. my suggestion is that, keep the scale (max and
Candidate: minor finals
Reference: this case is impossible afaik. shall we throw an error instead?
Candidate: why do we need to check on the username?
Reference: why do we need to check the paragraph start pattern here? this seems like the wrong approach to me, since it introduces unnecessary coupling between paragraphblock and definitionlistblock.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: i think we have an stringutils.isjson method. maybe it needs a null check and a trim() but those would be good to have.
Candidate: this should be the <UNK>
Reference: can we move these strings to variables? and reuse everywhere
Candidate: i don't think we need to do we need to check for the <UNK>
Reference: why not using the same try-with-resources block for in and out?
Candidate: why do we need need to the <UNK> here?
Reference: maybe log the exception. will help in understanding what went wrong here.
Candidate: should we throw an exception here?
Reference: ideally, this method generates a report that includes counts of the annotations that were generated (e.g. # of nes of each type; # of coref constituents and # of gold
Candidate: i don't think we need to synchronize on the so we don't need need to do we need to synchronize on the <UNK> hand,
Reference: would be nice to give the threads unique names. we use guava's threadfactorybuilder to help with this for other thread pools.
Candidate: why do we need to mock <UNK> here?
Reference: format your code, pls.
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: not sure about all the usage, but if all test code is passing null, we can just remove this parameter from this constructor.
Candidate: please use <UNK>
Reference: this line should be removed. given that its pass i guess this is not covered by any test, could you write a quick one john?
Candidate: why do we need to check for the <UNK> <UNK>
Reference: nit: might be a display of better craftsmanship/readability if you could explain why you're adding 1 here. i believe you're just trying to use a value that's not 40?
Candidate: i don't see the reason to clean up with the <UNK> of the the properties?
Reference: it looks to miss null handling.
Candidate: should we be the <UNK> <UNK> <UNK>
Reference: this should take in the keeper org's organizationinfo, and the duplicate's id. looks like we're passing in the duplicates organizationinfo as well as the id.
Candidate: why do we need this?
Reference: would a assert minlength >= 0 (or something similar) make sense?
Candidate: why do we need to check the <UNK> here?
Reference: replace the lossy conversion with a static util function. failwithinvalidconversion(class<?> class, bigdecimal bigdecimal);
Candidate: why do we need the exception here?
Reference: can getsamzaproperty (here and below) be private? could you please move these helpers further below in the class file so that they are not in between some of the public
Candidate: can we return null?
Reference: suggestion .maxcharspercolumn(4097)// .files(csvfile.toabsolutepath().tostring())//
Candidate: why do we need to assert that the <UNK> is the <UNK>
Reference: it cost a lot of code in other places, but this looks much nicer to me now.
Candidate: i don't think we need to check for the <UNK>
Reference: that's a massive chain. it's fugly. not sure it can be made less so though.
Candidate: <UNK> *= 2;
Reference: only link detailed report, please :)
Candidate: why do we need to wait for the <UNK>
Reference: doh! thanks! please leave it as cannot_...
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: super.teardown should be called last. also this method usually comes right after setup() before the tests
Candidate: why do we need the <UNK> here?
Reference: encapsulation
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: just wonder why only for db scheduled scheduler the existence of the class should be examined ? either it should be able to resolve the correct class by the value
Candidate: we don't need to throw an exception
Reference: we do have to copy, otherwise the view might change when someone calls the method again
Candidate: if you is the <UNK> <UNK> is the <UNK> <UNK>
Reference: require non null
Candidate: this should be <UNK>
Reference: let's use lightstatuslisteners.isempty() :wink:
Candidate: should we throw an exception here instead of returning null?
Reference: you might want to check if there is at least (and at most as well) one value in the collection, this will throw an exception if the values collection is
Candidate: this readasstring(...) instead of <UNK>
Reference: i guess, if we want applicationstartupdependentresource to be generic (an interface) with different implementations, we should avoid logging database here, because we might be waiting on other things
Candidate: if oldvalue is is not released anywhere, then it will be easier to read if someone wants to understand what someone wants doing.
Reference: we have a potential npe there unless we can do it?
Candidate: if the vm != null ?
Reference: we don't need to pass the labels in.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: my concern here is that these methods start to grow in their parameter numbers each time we add some new config property ... but i guess <link_0> should help with
Candidate: why do we need to use the <UNK> here?
Reference: nit: fix indentation. also, what is this change for?
Candidate: should we be the get* the get* methods?
Reference: can use a stringjoiner to avoid creating array  final stringjoiner barcodeq = new stringjoiner("~"); for (int samplebarcodeindice : samplebarcodeindices) { barcodeq.add(samutils.phredtofastq(cluster.getread(samplebarcodeindice).getqualities())); } return barcodeq.tostring();
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: hmm, so i thought about this when doing the initial implementation. i avoided using any timestamps from the node running this since then we're susceptible to time sync issues between
Candidate: this means indicating that means that means that means that means that means that means that means that means that means that means that means that means that means that
Reference: why have you moved field initialization from declaration to constructor? i think we should leave it in declaration for uniformity.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: you can make this an "else" after the "if (foreditor)" block.
Candidate: why do we need need to the <UNK> here?
Reference: is there a reason we aren't linking these up with the @uielement syntax? would save a minor amount of code. i assume it's because the locale strings are required? we
Candidate: i don't think we need to use the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: this is a bit puzzling. is instanceof really necessary?
Candidate: why do we need to check the <UNK> here?
Reference: consider using a hashset instead of an arraylist - this way you don't have to do the contains invocation in the if clause because sets don't allow duplicates.
Candidate: why do we need need to the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: you can use predicates.equal here
Candidate: can be replaced with <UNK> <UNK>
Reference: no need to check isenable() here. its checked in identityprovidermanager before invoking the listener. that's the contract of the interface - to say whether the listener is enabled or not.
Candidate: please use <UNK>
Reference: possible npe. in line 340 we could return null which would blow up here.
Candidate: should this be <UNK>
Reference: find english word for dach in mathematical symbols
Candidate: do we need need to the <UNK> <UNK> <UNK>
Reference: same here. the true should probably be encoded in the method name.
Candidate: i don't see the username?
Reference: same here. the binder should be able to decide how they implement this.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: you can use org.springframework.util.stringutils#haslength to avoid the two checks.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: the code should also be modified to not have an empty if.
Candidate: this should be the <UNK>
Reference: can endpoint.getparametersmap() be null? if so, shall we do a null check for that too?
Candidate: we should need to hide the exception here in the presenter.
Reference: i think we could get the same effect without as much repetition, by writing functions called 'isoctalorseparator', 'isdigitorseparator', and 'ishexdigitorseparator', and using those functions instead of 'isoctal', 'character.isdigit', and 'ishexdigit'
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: spelling - cipher
Candidate: why do we need the <UNK> here?
Reference: shouldn't it be in onepochfinished?
Candidate: i don't think we need to do we need need to check the getcredentials for the getcredentials
Reference: can you switch this to:  java this(new persister());
Candidate: why do we need the <UNK> here?
Reference: generally try to keep hubspot-specific things out of singularity, even for tests ;)
Candidate: can you use <UNK> <UNK> <UNK>
Reference: allocating a new buffer for each read will have visible performance consequences (this code is key to most benchmarks against shapefile data), please undo this change
Candidate: what happens if the exception is the software exception we don't want to throw an exception
Reference: nit: add string message (containing checkpoint id for easier debugging).
Candidate: this should be the <UNK>
Reference: generally you don't sort the vms, and in the one case where you do - you don't really sort them either, but just move one to the top of the
Candidate: i don't think we need to check if the == null) { <UNK> = <UNK> } { return false; }
Reference: i think that it would be worth doing a logger.warn() after this line if someone tries to "useepoll" but are not on linux. i'd further add a logger.info() to indicate
Candidate: i pagelogging
Reference: inline all the requirenonnulls in a separate commit
Candidate: rename <UNK> to <UNK>
Reference: it would be better to evaluate gitsystemconfig lazily in getgitsystemconfig(), so a call to discovergitsystemconfig() can be avoided completely if gitsystemconfig has been set 'manually' before. discovergitsystemconfig() is possibly slow
Candidate: this should be the <UNK>
Reference: i would call the related method instead. (e.g. call hash(int) for integer).
Candidate: if we is the software stripe { <UNK> } else { if <UNK> { <UNK> { <UNK> { <UNK> }
Reference: see previous about in vs out
Candidate: we should want to release the monitor on the monitor
Reference: closing the file?
Candidate: should we be the specific?
Reference: you should already compute the qualified names here in order to not stream 3 times for the same data: java set<string> symbolsqualifiednames = getcontext().symboltable().symbols(node).stream() .map(symbol::qualifiedname) .collect(collectors.toset()); isusingdjangomodel = symbolsqualifiednames.contains("django.db.connection"); isusingdjangodbconnection
Candidate: nextvalueindex should be the fixture.
Reference: this one should be called after oncomplete.call().
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: it doesn't look like this test tests anything.
Candidate: please use <UNK>
Reference: multiple method(*) methods
Candidate: multiple method(*) method("post")
Reference: very minor, but these two lines could be combined together
Candidate: you don't need to use <UNK> <UNK> <UNK>
Reference: we should take setenableasciionlystrings as a dataprovider param
Candidate: this should be the <UNK>
Reference: i forget if compute.randomint gets you a number between 0 and x inclusively or excludes the upper bound.
Candidate: why do we need the <UNK> here?
Reference: there is already a patientservice available for you. no need to get it from the context
Candidate: please use syserr
Reference: @netudima can you create a new pooledbytebufallocator instance in a @setup method and use it ? otherwise it may not produce fair results as it may have already stuff cached
Candidate: this should be be !isempty()
Reference: it could be protected better
Candidate: should we be the <UNK> here? if we { null) { return; } <UNK> { <UNK> } <UNK> { return; }
Reference: it is better to pass serializer here
Candidate: typo: <UNK>
Reference: ok... that's a way to make sure the test passes without fixing anything... :p
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please fix setupnetworks -> remove
Candidate: <UNK>
Reference: the pathmanager should be used for this sort of thing.
Candidate: why do we need to use the <UNK> here?
Reference: are those jacoco methods by any chance "synthetic"? if so, please simply filter out synthetic methods instead of checking if the method name contains "jacoco". in any case, please go
Candidate: <UNK> *= 2;
Reference: should move the instantiation of usreceiptitem outside of the inner for loop, this will construct it when the entire entryset has been processed and will churn a lot of short
Candidate: <UNK> *= 2;
Reference: or old-style positions.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: use collection.emptylist() instead which is type safe. will the unit tests cover that we handle empty list properly?
Candidate: storagetype can be replaced by <UNK>
Reference: yeah... what i don't like here that null as a message argument for the shouldflush:  filewritingmessagehandler.flushifneeded((fileabsolutepath, lastwrite, filtermessage) -> ...);  that filtermessage does not make sense in this
Candidate: should this be <UNK>
Reference: should this be starttarget + 1?
Candidate: i'm not sure if this is a <UNK> 96 on the 96
Reference: line 109 till 112 are the same in both updateplayer1button and updateplayer2button and can be put in a different method.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: should be "breakpoints"
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: solid improvement for sure, no need to re-figure this out every time!
Candidate: can we use the <UNK> <UNK> <UNK> <UNK> ?
Reference: what if partitionwrapper is null? if not doing anything, remove if, npe is better than skip silently (i see couple of places like this).
Candidate: why do we need the <UNK> here?
Reference: this may likely break in the future if the config becomes unparsable. see goconfigmigrationintegrationtest, but basically you'd do this: java string migratedcontent = migratexmlstring(configxml, 126); cruiseconfig cruiseconfig = loader.deserializeconfig(migratedcontent); approval
Candidate: you don't need to manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually
Reference: \r is for windows only. don't do that.
Candidate: should we catching the exception here?
Reference: that's really ugly. there's no way for you to know what these parameters are about without getting to the method and reading what it really does.
Candidate: should we be the <UNK> here?
Reference: should we just wrap this whole method in a local transaction? i am asking becuase what happens if this method is getting called in another api that has already started
Candidate: why do we need to use <UNK> here?
Reference: @bokyoungbin a single query is partitioned to operatorchains, and each operatorchain can be executed in different threads. the stateful operators in the operatorchains can access ssm so multiple threads can
Candidate: this collectionutils.isempty collectionutils.isempty
Reference: when executed alone it takes < 300ms (a lot of that could be overhead in the framework though). makes sense to lower the max though just to verify the behavior
Candidate: why do we eating the exception here?
Reference: it doesn't seem to be a typo.
Candidate: i don't think we need to check for the <UNK>
Reference: by looking at this, maybe another good metric to expose is in average how many opaque entries are sent per message... opaqueentrylist.size()
Candidate: if we is software software <UNK> software <UNK> software <UNK> <UNK> software <UNK> <UNK> software <UNK> software <UNK>
Reference: debug level?
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, if the matters, but it matters, but i don't understand this matters, if the matters, but
Reference: maybe you can add also check on group-resource.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: copying from.startdate instead of from.completiondate
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if startoffset is negative here, this should return false. in other words, it is always impossible for a string to be a suffix of a shorter string.
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: i think you meant to return mainactivity.getselectedsite() here.
Candidate: this should be if (state != null) { <UNK> } else { if (context { <UNK> { <UNK> { <UNK> }
Reference: do you really want it to throw ioe?
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: it's a minor thing, but i'd say it would be nice if instead of true, you'd have a constants local_member in this constructor.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: i'm hesitant to use empirically tuned unitless multipliers to keep the isochrone edges from extending out into the water. they would probably work in one place and not another, and
Candidate: why do we need the <UNK> here?
Reference: what about an @after that stops the scheduler, closes the log etc?
Candidate: do we need to log the exceptions?
Reference: shouldn't this be cross-platform?
Candidate: use readasstring(...) instead.
Reference: how does this.chunkbody[this.chunkpos++] evaluate? does it return the value at index this.chunkpos before the increment? is it non-idiomatic to do the increment and indexing in separate statements?
Candidate: should this be the <UNK>
Reference: i would add a new constructor call to check that we are new raising issues in newclasstree as well.
Candidate: shouldn't this be an <UNK>
Reference: if you have problems with locale-specific numbers, maybe explicitly add a locale to the printf here?  system.out.printf( locale.italian, "the date is %tc\n", date );
Candidate: should we throw an exception?
Reference: column headers is first line and not line after skip. column header must be first line.
Candidate: why do we need the <UNK> here?
Reference: we don't search for primary email anymore
Candidate: please use <UNK>
Reference: variable_identifier is too restrictive. it should include: * variables, ex: [$a] * indexed array, ex: [$a[$i]] * object property, ex:[$a->name] this is some valide php code that sonarphp doesn't parse:
Candidate: should this be <UNK>
Reference: please use sl4j logging to format the message instead of stringbuilder.
Candidate: why do we need the <UNK> here?
Reference: shouldn't the suggestions be returned here? it looks like this method always returns an empty list.
Candidate: the syserr should be an array.
Reference: this whole test should use core api imho. or if we really want to test the cursor it should live in kernel api.
Candidate: do we need to <UNK> the <UNK> <UNK>
Reference: it would be better if the storage name is printed with this exception.
Candidate: why do we need the vector here?
Reference: - no magic numbers: what's -0.80f? - you might want to store the result of getplayer() somewhere, so that you don't have to get it through the context every time
Candidate: can we make sense to use the <UNK> of the contents.
Reference: i think this change may not be correct. the spec says that for aes_128_cbc_hmac_sha_256 the input key must be 32 bytes, and the test in jwejsonproducertest.testmultiplerecipientsa128cbchs256givencek is passing in a
Candidate: why do we need the <UNK> here?
Reference: here we should ask the user, where to save the file. one thing, we did not consider yet is the file extension (not every driver outputs gcode). to make it
Candidate: if we is the software <UNK> is the software <UNK> but i don't think it should be the if it is the software <UNK>
Reference: better to pass in the build directory (e.g. as a system prop) and don't use a literal slash to concatenate paths, especially after you went to the trouble of being
Candidate: why do we need need to be the <UNK>
Reference: minor thing, we miss ending apostrophe in the exception message.
Candidate: the syserr should be the
Reference: true, now.
Candidate: this is overwrites the <UNK> costs the is overwrites the item.
Reference: you may only call the c'tor here w/o assignment. then you dont have to suppress the warning.
Candidate: why do we need to mock <UNK> here?
Reference: the method name is islambdaparameter, but the return variable is returnvalue.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: why force jpeg? webp and png are also possible.
Candidate: should we be schedule() here?
Reference: prefer isempty to test emptyness :)
Candidate: the plans to be the <UNK> <UNK> <UNK> the presenter.
Reference: needs quotes to be added around deploycmd.getabsolutepath() otherwise it fails to find the executable
Candidate: please use <UNK>
Reference: are you sure these any() calls mean what you think it means?
Candidate: <UNK> *= 2;
Reference: nits: 1: space before %s 2: 'view index table' or 'view index'? 3: deleteall instead of 'delete all' to match the option name 4: do we use indexes here or
Candidate: why do we need to here?
Reference: you are always overwriting the configuration here? what if the user has already manually configured a username/key?
Candidate: we should need to throw an exception block?
Reference: unwanted change.
Candidate: should this be <UNK>
Reference: no need to make new set object every time; change the variable type to set
Candidate: this should be <UNK>
Reference: please use slf4j parametrization instead of string concatenation
Candidate: i don't think we need to check if the <UNK> is the <UNK> <UNK> is the <UNK> <UNK> <UNK> is disabled.
Reference: this is already implemented on ios. check out: <link_0> please use the same name rawdata instead of rawvalue. what happens if the barcode does not contain a raw value? will
Candidate: please rename the <UNK> to <UNK> <UNK>
Reference: a bit more optimized would be using stream::findfirst. for large sets, it stops immediately when it finds the item, instead of iterating over the whole set. this solution of course
Candidate: why do we need to use <UNK> here?
Reference: this "if" is not needed, the "putifabsent" method already performs the check, and it doees it in a atomic way, so the "synchronized" modifier is not required.
Candidate: i don't think we need to check the <UNK> <UNK>
Reference: could we please introduce a constant date_portion_length and then use date_portion_length + 1 in extracttime? feel free to use any name of the constant but i think it will make
Candidate: this should be <UNK>
Reference: we can get to this block even if logchannel is null. so add that aswell to the reason string.
Candidate: why do we need to synchronize on the lock on the lock again?
Reference: is the c supposed to stand for celsius or would this make more sense as "temperaturef" or "temperaturefahrenheit"?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: this test case has the same description as one already implemented. try and think about what this new test case is doing that the other isn't already and rename accordingly.
Candidate: you don't need to repeat the 6 again?
Reference: this should use the jface shared text font which is configurable by the user in the preferences and defaults to a platform-appropriate monospaced font intended for use in text/code editors.
Candidate: should we be the <UNK> here?
Reference: i don't think we have to worry about / support the case where the call to super has mucked with jedispool (it's deprecated), in other words can probably just eliminate
Candidate: why do we need the <UNK> here?
Reference: assert it
Candidate: i don't think we need to check the if the is is the
Reference: should this be "unfiltered"?
Candidate: do we need to do we need need to throw an exception
Reference: this implementation sounds very complicated. and doesnot seem efficient. esseentially it is a solution prior to java 8.
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: i thought about throwing a fetcher exception as well. but on the other hand we have optional for those cases. so i would not throw an exception. @tobiasdiez
Candidate: why do we need to use <UNK> here?
Reference: s/commands/command
Candidate: why do we need to check the <UNK> here?
Reference: is this not better to do in dostart instead?
Candidate: should this be <UNK>
Reference: this cast feels a bit out of place but i don't really have a better suggestion - maybe where this is autowired we could add a separate bean that has
Candidate: why do we need this check?
Reference: maybe jvm/heapalloc/bytes/delta
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: this should not be here - it was replaced by commonlogger.log.archiveisolationenabled() / commonlogger.log.archiveisolationdisabled()
Candidate: can be simplified to: java return <UNK> <UNK> <UNK> = <UNK> arrays.aslist(new <UNK> (state != null) { <UNK> }
Reference: user_id and is_filtered parameters not required
Candidate: if (state != null && adsize && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK>
Reference: return asynchttpclientmap.putifabsent(name, ahc) == null;
Candidate: this should be <UNK>
Reference: do you have to reset the matrix otherwise? i.e. does this work if you switch from a complex to the circular case?
Candidate: i don't think we need to check for the <UNK>
Reference: do not set the correlationid for the request. it is only applicable for the reqeust of the response.
Candidate: this doesn;t be the <UNK> of the <UNK> <UNK>
Reference: i would expect this to just be defined in terms of inspect, to avoid duplicating the details of launching the command.
Candidate: you can use the <UNK>
Reference: inline these into declaration
Candidate: <UNK> evidence, overflows?
Reference: this change is completely unrelated to this pr. any particular reason for adding it?
Candidate: i don't think we need to do we need to check whether the <UNK> is the <UNK> <UNK>
Reference: @yesamer i think that's to be removed. synchronizefactmappingswidths put the current columns widht inside factmappings, but we decided it should happen **only** when the user saves the scenario - otherwise
Candidate: this should be the <UNK>
Reference: i don't understand what this whole check is about.
Candidate: rename to iu
Reference: please add a space before and after the +, to be consistent with the rest of the file.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: /nakadiexception/exception/
Candidate: typo: <UNK>
Reference: why did you move the if from here? should be- if (scheduledstatuscheckinprogress || retrycount > max_retry_counts || reportswebappdeployed) { return; } it is better to keep the if here over
Candidate: why do we need the <UNK> here?
Reference: this if-else is very readable and i'm not asking you to change it, but for fun and curiosity i'll note that countofareacodesforyear.merge(year, 1, integer::sum); would've done the same thing.
Candidate: the syserr
Reference: unnecessary boolean field. just call the method inline below, the variable doesnt add any value for the reader since it literally has the same name as the method.
Candidate: i don't think we need to check if <UNK> { return; } <UNK> } <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: zoomoutenabled = true; without if will do the same
Candidate: please use the same for <UNK> as above.
Reference: authorization token is missing
Candidate: why do we need this?
Reference: this will be a little bit flaky. there will still be a small chance the thread set to interrupted state after downloadallserverchanges(). actually the interrupted state can be set inside
Candidate: should we be the specific?
Reference: we don't need to print the full stack trace if we're catching exception that we threw in this very same function. i'd prefer to use blocks like:  if(sample==null) {
Candidate: typo: <UNK> -> <UNK>
Reference: unnecessary whitespace?
Candidate: why do we need the <UNK> here?
Reference: this check shouldn't be necessary any more as we are using an enum
Candidate: i don't understand why, but it matters, but why do we need to check the <UNK> <UNK>
Reference: what's the purpose of fail? i don't see anything in the tests below that checks for this exception to occur. i'm confused by the fact it's an illegalstateexception (vs a
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: missed this?
Candidate: why do we need to check for the <UNK>
Reference: same here, make this package private.
Candidate: this should be <UNK>
Reference: these 2 lines can be removed.
Candidate: please use <UNK>
Reference: think you can use just %s instead of %[*]$s for these
Candidate: please use syserr
Reference: the class is named echoapi but here you use echoapi. this code won't compile
Candidate: i don't understand why we need to mock here?
Reference: can't this be simplified using math.ceil()?
Candidate: you don't need to use @test(expected = <UNK> <UNK> <UNK> <UNK> <UNK> outputstream = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> outputstream = <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: do a stringutils.isnotblank(...) check before setting
Candidate: use <UNK>
Reference: i'm not entirely clear on how this is going to be called, but it has me concerned because this action is going to re-process a csv file, rewrite a new
Candidate: why do we need need to the <UNK> here?
Reference: @unyoungwax, are we able to make this private too?
Candidate: i don't think we need to check for the <UNK>
Reference: @danielezonca this is missing the crucial test, i.e. the migrated version should contain "1.2"
Candidate: why do we need the <UNK> here?
Reference: please change it to a normal null check and throw a illegalargumentexception. this is more meaningful than throwing an npe here.
Candidate: should we use the exception here?
Reference: can you please use @injectmocks instead
Candidate: please use the exception here instead of the try-catch-fail try-catch-fail
Reference: is it something that you write by hand or use "generate equals/hashcode" in the ide? it is strange that you consider "different class" objects to be equal.
Candidate: should we be the <UNK> here?
Reference: setpushsetupalarm should be tested on an e-meter device_identification_g_label -> device_identification_e_label getdeviceidg -> getdeviceide
Candidate: should be tested on the e-meter device_identification_g_label -> device_identification_e_label getdeviceidg -> getdeviceide
Reference: is this here for testing? we might want to use some logging library
Candidate: please use <UNK> boolean.class)
Reference: this isn't null safe.
Candidate: this should be the <UNK>
Reference: i don't think you can be sure that the server returned the content in utf-8, use the content type from the response instead.
Candidate: buffer? validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation validation
Reference: nit picking, only mentioning it because we were speaking about different collection types, using a set rather than list might be more appropriate since it holds unique values and being
Candidate: this should be <UNK>
Reference: is there a race here where one query is killed an the other finishes immediately, so the general pool reservation is empty?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: same here. assert.assertequals(patiententities.get(0), expectedpatiententity2);
Candidate: why do we need to use the here?
Reference: wrong error constant suggestion super(mediawikiapierrorhandler.error_assert_user_failed, errormessage);
Candidate: no, this should be setemptyelement(). if the is { <UNK> } <UNK> { return false; }
Reference: <link_0> it looks better to mock logchannel and check whether mock logbasic was called, not getexception from entry
Candidate: <UNK> *= 2;
Reference: minor typo in variable name.
Candidate: why do we need this check?
Reference: should probably actually check the results here, not just the size
Candidate: why do we need the <UNK> here?
Reference: return optional.of(new relation());
Candidate: why do we need need to the <UNK> <UNK> <UNK>
Reference: how about doing a tolowercase here. that would essentially make column names case insensitive. cql3 does this.
Candidate: why do we need this?
Reference: replacing this with helper method would be great
Candidate: this should be the <UNK>
Reference: completestructure doesn't do anything anymore, still needed?
Candidate: hardcoded boolean[] hardcoded boolean[] ??
Reference: again, use ioutils.
Candidate: why do we need to permission?
Reference: null check?
Candidate: should we be the exception here?
Reference: i'm getting a npe here, processmodel.trademanager is null
Candidate: should this be <UNK>
Reference: i would rather have something like java serverenv.usestoragefactory(factory).intests();  that's a lot closer to the way we speak.
Candidate: why do we need to check the <UNK> <UNK>
Reference: did you mean to get the name?
Candidate: i don't understand why, but it is be the if the is is the
Reference: keep indentation as it was; no new lines after blocks. more at <link_0>
Candidate: i don't think we need to throw an exception
Reference: better results can be achieved with code similar to line 60 of org.eclipse.ui.internal.monitoring.defaultuifreezeeventlogger.
Candidate: why do we need the <UNK> here?
Reference: please mention that this feature is a "teach preview"
Candidate: should be be allowed?
Reference: could specific exception be used here?
Candidate: we should need to do we need need to the the <UNK> <UNK> the getcredentials should be a software software software software software software software software software software software software
Reference: nit: i think this'd be more intuitive/straightforward if expressed as: java if (isleaderevent(event) && !isleader) { _log.info(...); return; }
Candidate: i don't think we need to do we need need to check the <UNK> <UNK> the <UNK> is the software <UNK> but we don't need to check the
Reference: you might want to store the view as a field in your class if used multiple time. findviewbyid has a non negligible cost.
Candidate: i think we should be <UNK> to the <UNK> <UNK> the presenter.
Reference: objects::nonnull could be used here
Candidate: i don't think we need to do we need need to check the <UNK>
Reference: why did you change this? this won't work when running the tests from the published test jar
Candidate: i don't understand this matters, but i think this matters, that this will be an arrayindexoutofboundsexception on the <UNK>
Reference: why a check for the viewer here? shouldn't this be the dropdowntable? now that we keep the table.
Candidate: shouldn't this be the dropdowntable? dropdowntable? dropdowntable? now that we keep the table.
Reference: this.value = value;
Candidate: this should be <UNK> <UNK>
Reference: tostring() is missing the name of the class
Candidate: use <UNK> objects.tostringhelper() to <UNK>
Reference: i think it looks good now. just change 100 to args.hits.
Candidate: should this be null? if we { null) { throw new <UNK> } else { throw <UNK> } else { if <UNK> { throw <UNK> } } } } }
Reference: check if message it's a valid string
Candidate: should we throw an exception instead of returning an exception?
Reference: should this and other numbers be assigned a constant with a meaningful name to identify how they came to be and for future maintainability?
Candidate: i don't understand this matters, this matters, but you can use the <UNK> <UNK> the <UNK> is skipped, expectations
Reference: again same thing here, row vector/column vector explicitly? make sure vector cases are handled.
Candidate: i don't understand why, but it matters, but if you do, but it would be nice to move the code into a separate method. [![rule](<link_2>](<link_0>
Reference: @govind-menon maybe we can replace the "wait(1000)" with a thread.sleep(100), the '100' instead of '1000' will lead to faster shutdown. does it sound good to you ?
Candidate: why do we need to wait for the clients?
Reference: should we have minimum? a limit of 1 byte doesn't make sense.
Candidate: please use <UNK>
Reference: replace first with parts.isempty()
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: rename to numberofmissingfiles, missingfilecount or something like that? using both missingfiles and filesmissing (for completely different purposes) is a bit confusing.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: we cleared it here, later only time we change it is where you add locations. so numberfound==ftaglocations.size() i don't see how its possible that this is not equal
Candidate: why do we need to here?
Reference: i would call this "tablecount" and do also make a equals to 1, since you might encounter schemas without tables.
Candidate: i think this should be the if the is is the <UNK> <UNK>
Reference: please use parameterized logging here.
Candidate: this should be the islocal as well as well as well as well as well as well
Reference: strictly speaking, that is not robust, as it would also break the outerloop if there is a fastening element within a fastening element. i know, this is very unlikely, but
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: ironically, this is only painful for the open source servers. basically everyone other than me. i can rename a field pretty much at a whim, provided the column id stays
Candidate: why do we need to the the payload?
Reference: wrong place. this should be done in the setsamplepurposedao method, where it was originally
Candidate: why do we need this check?
Reference: should this be an untypedutils thing (or something not defaultgroovymethods anyways)
Candidate: can we return <UNK> <UNK> <UNK> ?
Reference: so, i think we can miss this bit out?
Candidate: the syserr should be be <UNK>
Reference: collections.addall()?
Candidate: please use <UNK> <UNK> <UNK>
Reference: you should have the same treatment here, the operation saves 2 disks in the same sd
Candidate: storagetype should be replaced by <UNK>
Reference: you could also use immutablemaps.builder<string, string> envmap = immutablemaps.builder() which might be nicer than wrapping your said map in the collections unmodifiable interface
Candidate: why do we need to use <UNK> here?
Reference: why is this final and the rest are not
Candidate: <UNK> *= 2;
Reference: >credentials [](start = 26, length = 11) static
Candidate: this fail()?
Reference: we may be better off to return null instead of an empty string here.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: not important at all, but you can just return jobdate.after(searchedtimestamp) directly.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: a bit nit-picky, but i'd fix the indentation here and give the variable p a proper name.
Candidate: why do we need to use <UNK> here?
Reference: this line needed to be reset every time? looks out of scope for this method.
Candidate: why do we need to check for the <UNK>
Reference: you shouldn't have to do this, instead make cohortmember implement comparable
Candidate: this should be <UNK> <UNK>
Reference: i think it would be reasonable to put any operations which are not expensive and can't fail into the constructor, which would allow you to eliminate the randomseed instance variable
Candidate: why do we need the <UNK> here?
Reference: maybe a more meaningful exception?
Candidate: do we need to re-throw the exception here?
Reference: why the change to replicate region type as the default? should it be partition_redundant, perhaps?
Candidate: why do we need the <UNK> here?
Reference: protocoladapterexception is not thrown in method. could be removed
Candidate: why do we need need to check the <UNK> here?
Reference: please reverse the if condition
Candidate: rename to <UNK>
Reference: investigate on why we need hashcode for this class.
Candidate: use objects.hash()
Reference: ditto about message
Candidate: can be simplified to <UNK> <UNK> <UNK> ?
Reference: need spaces after the 'if' here and above (and remove the space after the parens)
Candidate: if this chunk is skipped, chunk of the skipped, chunk is skipped, chunk is skipped, <UNK> skipped, the skipped, chunk of the skipped, chunk of the skipped, chunk of the
Reference: can you just do new jsonarray("{" + registrationid + "}") or something
Candidate: if the != null && <UNK> && <UNK> && <UNK> { return; }
Reference: there is an issue here. since this updatecloudletsprocessing is called multiple times, the number of free pes will keep decreasing, even if no cloudlet has finished. you can implement like
Candidate: i don't think this is the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: doesn't uniqued imply sorted?
Candidate: unused line.
Reference: nice job
Candidate: this should be setemptyelement().
Reference: this could be lists.newarraylist(deviceid);
Candidate: why do we need to use <UNK> here?
Reference: java8-isation [foreach][methodreference]
Candidate: java8-isation [foreach][filter]
Reference: why don't we throw unsupportedoperationexception for these three methods? i think that would prevent users from falsely assuming there is support for it.
Candidate: this should be <UNK> overflows?
Reference: nit: maybe toolchaininfo.skylark_name?
Candidate: this should be injected, so we don't need to permission?
Reference: this check leads me to expect that getorderedpropertyvalues will return null if the node does not have all the properties required by the index, but no such check seemed to
Candidate: why do we need to use the here?
Reference: .tostring(); is redundant here.
Candidate: why do we need need to check the <UNK> here?
Reference: configuration files are relatively small. will this stream ever be sufficiently large to warrant this bufferred reading approach, rather than simply reading the whole stream in? we're eventually reading the
Candidate: why do we need need to the <UNK> here?
Reference: this method will be executed although parametervalues0 has elements, won't it?
Candidate: i mentioned mentioned mentioned mentioned we mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned that mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned mentioned
Reference: anything to worry about if an exception arises during handlemessage()? right now that would cause any other messages in the same batch to be skipped
Candidate: why do we need to use the <UNK> here?
Reference: consistency?
Candidate: should we call <UNK> here?
Reference: shouldn't need to try catch here given the overload being called already does this.
Candidate: the syserr should be be the
Reference: seterrormessage
Candidate: why do we need to here?
Reference: service can be injected.
Candidate: should we be schedule() here?
Reference: test is not working properly (passes whatever value the timer is updated: 10, 2, etc.) slaviolated is always false due to count of the latch never reaches zero, because countdown
Candidate: why do we need to test eq here?
Reference: new xmlcontext() can happen above the for loop so we create less objects.
Candidate: why do we need to use the <UNK> here?
Reference: is this now guaranteed to be called from the event loop? i think so but just to double-check...
Candidate: should we be <UNK> here?
Reference: since only expectedconceptentity1's uuid matches, why is expectedconceptentity2 listed here?
Candidate: why do we need the <UNK> here?
Reference: new line
Candidate: why do we need the <UNK> here?
Reference: info message is a bit confusing, maybe something like "configuration is not clustered, clustered locks are disabled" or something like that.
Candidate: i don't think we need to check if the is is the
Reference: nit: can decrease indentation by avoiding this 'else'. if (contentlength == null) { return -1; }
Candidate: should this be the specific?
Reference: there is a matcher that already does this: org.fest.swing.core.matcher.jbuttonmatcher.
Candidate: why do we need to ack the getcredentials
Reference: ![major](<link_0> 'severity: major') invoke method(s) only conditionally. [![rule](<link_1>](<link_2>
Candidate: why do we need the <UNK> here?
Reference: i think is clearer the defensive approach:  if (requestcode != shared.request_code) { ... }
Candidate: should this be the <UNK>
Reference: @diegolovison the warning should be logged when setting the queue size, not when reading it. this is what i had in mind: <link_0>
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: wording wise i think it makes more sense to formulate it like: "sign in to datacloud"
Candidate: shouldn't this be an empty set?
Reference: static import for is
Candidate: please use <UNK>
Reference: this means it will not be cache. is that what we want?
Candidate: why do we need the getconnection here?
Reference: can we have this as below as created instance is not used else where?  new customprocessorinfo().fromtopologycomponentbundle(customprocessorbundle);
Candidate: should we be the <UNK> here?
Reference: this could be a one liner if you never need to access date or time again.  timestamp now = new timestamp(new date().gettime());
Candidate: should be be the <UNK>
Reference: should we make this method final? i think it is used to be called by sub classes, not to be overridden?
Candidate: the syserr should be be the <UNK> <UNK>
Reference: typo
Candidate: i this collectionutils.isempty collectionutils.isempty collectionutils.isempty collectionutils.isempty encrypted, the <UNK> is encrypted, if you encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted, encrypted,
Reference: we can't do these like this - this convert every bit of the buffer to a string, even if trace is off, which will be a big performance overhead. i'd
Candidate: this will throw an npe if an npe if <UNK> is valid, it will make sense to throw an npe if someone will throw an invalid invalid invalid invalid server
Reference: it seems redundant for defining this variable
Candidate: please use <UNK>
Reference: the problem here is that you're using fixed ids for the child processes, that won't work when persistence is used. try something like this: suggestion collection<processinstancedesc> instances = runtimedataservice.getprocessinstancesbyparent(parentprocessinstanceid, arrays.aslist(processinstance.state_active),
Candidate: i think we should be in the messages.properties check?
Reference: might as well use log with debug.
Candidate: if we notice, a lot of a lot of a lot of a lot of a lot of a lot of a lot of a lot of a lot of
Reference: why does this have to return the file?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: you should tolowercase the material name.
Candidate: i don't understand this matters, this matters, but you can use the <UNK> <UNK> the <UNK> is the
Reference: when an exception is caught, it is expected one of the two behaviors: - log the exception (in this case: silverlogger.error("look named '"+lookname+" not found", e), see the exception e
Candidate: should we throw an exception here instead of returning null?
Reference: how about removing setinstancetypeid(..) (and the class member maybe) and then drop the second part (vmstatic != null) ?
Candidate: i don't think we need to do the streaming uribuilder
Reference: you could remote @suppresswarnings("null") for the whole method implementation using e.g. java final inetaddress address = cidr.getaddress(); assert address != null; // networkinterface.getinterfaceaddresses() should return only non-null addresses interfaceips.add(new cidraddress(address,
Candidate: can we use the <UNK> here?
Reference: what about using stream api and directly have a return from the first line?
Candidate: why do we need to here?
Reference: also probably need to do difference on taskid instead of task object here as well, unless we make sure each task has a proper hash and equals.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: isn't it simpler/nicer to create two static listeners in advance and use them accordingly?
Candidate: i don't think we need to check if the is { return; } if <UNK> { <UNK> { <UNK> { <UNK> } <UNK> { return; }
Reference: a get request to generate identifiers?
Candidate: why do we need to the the payload?
Reference: when you send a pr don't rename a method and add changes in the same commit. it makes it harder to figure out where the important changes in this commit
Candidate: should we throw an exception here?
Reference: i am a bit confused by this logic. why do we need to cleanshutdown only when it comes to testing? also, we register the shutdown hook earlier before the while
Candidate: this should be <UNK> to the presenter.
Reference: i was not thinking of something dynamic like that. given that the other parameters are not dynamic, can we remove those replace and just have the default prefix?
Candidate: please remove the <UNK>
Reference: it would be useful log a warning if the method has any annotation but is non-public. it will let the users know that the visibility of the method is the
Candidate: can we use stringbuilder?
Reference: shouldn't it be styledtext.iswordwrap() ?
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ? <UNK> : 2; : 2; thanks!
Reference: nit: streams.stream(tokenizer).collect(toimmutablelist()); is good enough. (assignment to pathelements is not necessary)
Candidate: should we use the token token token token token token token token token token token token token token token token token token token token token token token token token token
Reference: this function will only be called when the marker is present, so in practice the input parameter won't be null. remove the @nullable annotation (apply this to all parser classes).
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please fix formatting in this method.
Candidate: please use readasstring(...) instead of @test(expected = <UNK>
Reference: this is not locking on key level but set object level.
Candidate: please remove method("post")
Reference: better appendtomailbox(msg)
Candidate: why do we need to check for the the username?
Reference: please use frameheaderflyweight .frame_length_size instead of hardcoding
Candidate: i don't think we need to check if the is { <UNK> } <UNK> { <UNK> } } } } } } }
Reference: ![minor](<link_2> 'severity: minor') remove this unnecessary cast to "stringterms". [![rule](<link_1>](<link_0>
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: might be worth adding an isfinishing() check before updating the views. wdyt?
Candidate: why do we need to check for the <UNK>
Reference: can we make this as warn
Candidate: do we need to catch <UNK> <UNK>
Reference: can you instead fetch this again with diagnosisservice.getdiagnosisbyuuid()
Candidate: the syserr should be be <UNK>
Reference: oops?
Candidate: why do we need this?
Reference: what if "_" string is part of the path?
Candidate: the syserr should be be the
Reference: from the first glance changed behavior of this method looks counter intuitive: if a passed argument is lesser than 0 a default timeout from a configuration is used. for me
Candidate: why do we need to check if the != null) { <UNK> }?
Reference: as i mentioned in the previous patchset, while this should work due to type erasure, i think this cast is rather confusing because you're not actually casting to businessentity<? extends
Candidate: should be setcontext
Reference: the id is used to restore old files (from an older release) so this must not be changed!
Candidate: why do we need to brackets?
Reference: 1. if the user wants to delete the kit, they want to delete the kit. i don't see why they shouldn't be able to delete the kit just because they
Candidate: why do we need the <UNK> here?
Reference: rename to child
Candidate: rename to childitem
Reference: additionally (and this applies for both vnc urls), the colon character must be escaped, as the url will be passed to another url as a parameter
Candidate: should this be <UNK>
Reference: again, should check response code.
Candidate: do we need to call <UNK> here?
Reference: i don't really like this. i understand using a filter/concat/take wouldn't work if we want the favourite ids to be a hot observable, but this seems wrong too. @dorvaryn any
Candidate: this should be the <UNK>
Reference: can you wrap that into a method with an integer parameter for the warning number to return?  collection<fileannotation> warnings = new iarparser().parse(openfile("issue8823.txt")); iterator<fileannotation> iterator = warnings.iterator(); for loop: iterator.next();
Candidate: why do we need the <UNK> here?
Reference: unnecessary variable
Candidate: why do we need to tear down the <UNK>
Reference: imo, it's better to look this up by interface.
Candidate: why do we need need to be <UNK> here?
Reference: i think here is return strings.format("%i/%s/%s", task.getid(), language, filename)
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: i agree this is very clean, but getnetworks() isn't a simple getter and shouldn't be called if you fail beforehand. i'd separate into two ifs.
Candidate: can you use the <UNK> of the names?
Reference: you should use bl layer to prevent unnecessary nested transaction creation. like this: ((perunbl)ldapcmanager.getperunbl()).getattributesmanagerbl().getattribute(...)
Candidate: should we move this try/catch creation of the top of creation of creation of creation of creation of the creation of the creation of the creation of the creation of
Reference: this will end up in the users logfile who does not know what this is... either change the severity to debug or if you want to let the user know
Candidate: the syserr should be be <UNK>
Reference: reuse foldername
Candidate: why do we need the <UNK> here?
Reference: we should never catch throwable. we should change this to exception.
Candidate: why do we need need to the <UNK> here?
Reference: if i'm not mistaken this method is deprecated and we should use org.eclipse.che.api.promises.client.promiseprovider#reject(org.eclipse.che.api.promises.client.promiseerror), no?
Candidate: this should be null if <UNK> != null && <UNK> { return <UNK> }
Reference: can you swap the conjuncts, i.e (protoinfo == null && ...). this way in case protoinfo is not null, configuration fragment is not required. probably it would also be best
Candidate: why do we need the fully-qualified name here?
Reference: notice that what you call "fileformat" in the classes undeline is not actually a format -- it is file extension. this kinda smells. i suggest creating enum spreadsheetformat with format
Candidate: why do we need to use <UNK> here?
Reference: this validation will be better implemented with findany, we dont need in this case to know the number of invalid notes.
Candidate: can we remind this if the is already?
Reference: isnullorempty ?
Candidate: this should be setemptyelement().
Reference: oops
Candidate: why is this the <UNK> <UNK>
Reference: suggestion return new hashmap<>(connectorconfigcallback.get(herderrequesttimeoutms, timeunit.milliseconds););
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this line should be removed
Candidate: should this be <UNK>
Reference: you better prefer string concatenation here
Candidate: can we use the <UNK> here?
Reference: in all these checks, why not just compare to a list? e.g., in this case:  assertequals(collections.<string>emptylist(), clazznames);  you could also use arrays.aslist for the other tests that actually
Candidate: can we use <UNK> <UNK> <UNK>
Reference: we're duplicating it in the constructor and wrapping it here in an unmodifiable list on every call? can we do that in the constructor then too? still not sure if
Candidate: this should be <UNK>
Reference: couldn't this call be more fine grained? it sounds weird we need to run all the configure code in a privileged block?
Candidate: should we catch (throwable e) { throw exception } catch (ioexception e) { throw (long <UNK> } } } }
Reference: @aschworer dash used only here, you can inline it
Candidate: @hdouss you need to use the exception here?
Reference: do you think we should avoid introducing another virtual/interface method call here, and another object instantiation for the lambda argument capture, or is that not important at this point? maybe
Candidate: please remove the <UNK>
Reference: @arunmahadevan my bad. i closed the other pr thinking you had also updated linkedhashmap to immutablemap in convertvalue method. but here i see only dodeserialize being updated from linkedhashmap to
Candidate: do we need this string's
Reference: better to keep a map of (delimiter -> splitter) to avoid creating a splitter per key.
Candidate: use map<> division on unmodifiableset
Reference: so this behavior isn't quite right. we need the buffering of data to only happen on when a marker is set (for reading the image metadata) but to not happen
Candidate: nitpicky import?
Reference: can we name this something else? it's confusing to see field(field...)
Candidate: can we make this private?
Reference: remove this change
Candidate: i don't think we need to do we need to <UNK> the <UNK> <UNK>
Reference: could be in else
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: should this do something like } else { warntmpl = "pack file {0} now inaccessible; removing it from pack list" } ?
Candidate: what happens if the exception is is the
Reference: a better variable name than along is actualconceptscount
Candidate: why do we need to mock <UNK> here?
Reference: if newvalue == oldvalue i think we shouldn't call the notifier nor update the entry.
Candidate: i disagree with the <UNK> of the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> software <UNK>
Reference: java for (string msqchoice : msqchoices.size() {
Candidate: why do we need need to be overridden?
Reference: misspelling
Candidate: should we be an exception here instead?
Reference: it implies that the file is being read lazily by netty to apply the zero-copy transfert, but it means also that we need to be sure that the file won't
Candidate: this should be the <UNK> <UNK>
Reference: i don't think you need to call serialise anymore when you've got proper dtos to return - should be able to just return the dtos directly and let it serialise
Candidate: please remove this method("post")
Reference: 4 -> size_wkid
Candidate: please use setemptyelement().
Reference: here we're actually looking for stars count...
Candidate: can we use the builder instead of <UNK> builder variable?
Reference: could use var here too. :smiley_cat:
Candidate: this should be the <UNK> <UNK> the presenter.
Reference: @exr0n call super().
Candidate: please use the syserr
Reference: can we change the name of this variable? it's a little confusing to read usage.usage and think about it as a type usage. maybe storageused?
Candidate: can be replaced by: <UNK> <UNK> { <UNK> = <UNK> <UNK> }
Reference: right now setpgstatupwait(duration.ofseconds(-1)) throws nullpointerexception, when it should either silently replace with a zero duration, or throw illegalargumentexception.
Candidate: i don't think we need to check for the situation. if the == null) { return <UNK> }
Reference: is the null check still required when you turn around the equals call?
Candidate: <UNK> *= 2;
Reference: since starttime is changing i would suggest to rename it to currenttime to make the loop condition more clear.
Candidate: do we want to the exception here?
Reference: redundant, right?
Candidate: typo: <UNK>
Reference: these paths and file names should be extracted as constants, specially if they are reused in more places.
Candidate: please use <UNK>
Reference: static
Candidate: why do we need to check here?
Reference: these is ugly, also sometimes create a strange errors when working with java.uitl.date please think about using system.currenttimeinmillis (whatever) + minutes * 60 * 1000 and after that new date(value)
Candidate: why do we need the <UNK> here?
Reference: - how is the max depth related to "adding follow symlink option"? - why do we need to restrict the depth of the abstract watch service? isn't it a specific
Candidate: why do we need to use the here?
Reference: how about we print out the actual values of the arguments here?
Candidate: can we move this into the methods?
Reference: a better name would be "savebuttonenabled". when it is true the button is then obviously enabled, when it is false it is clearly diabled.
Candidate: please use pair.of
Reference: if you want to go for a bit more type safety you could encode the url as actual url. this is probably not needed when the main goal is to
Candidate: should this be <UNK>
Reference: the !query.getcontextboolean(scanquery.ctx_key_outermost, true) needs to be flipped to just query.getcontextboolean(scanquery.ctx_key_outermost, true)
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i think the travis build failed because you have a typo. the method is called getbytelength() (no 's'). if you can fix that and update the pr, i can merge
Candidate: please remove the method("post")
Reference: slf4j logging please.
Candidate: @exper0 we don't need to use the
Reference: firing an event wrapped in try block... never saw it before in our codebase. that's interesting. can you explain, please, what's the motivation of this
Candidate: why do we need to use the <UNK> here?
Reference: this code should go to onsaveinternalwithmodel() method. and since there it is not a multipleaction, you can avoid the .get(0). call.
Candidate: i think why, the right why, but the why, right why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, why, right why,
Reference: nit: hconf.set
Candidate: should we throw an exception here?
Reference: if we change linkedhashset to linkedhashmap with access order (check lrucacheevictor), don't we have a lru bucket in that case? @calvinjia
Candidate: can we use <UNK> enummap instead of .map(x -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> <UNK> -> <UNK> -> <UNK> -> <UNK> <UNK> -> <UNK>
Reference: since this can return null, you should add the @nullable annotation to the method.
Candidate: nitpicky <UNK>
Reference: please, proof-read your code before submitting pr. you probably meant something like "lindad".
Candidate: should we be the <UNK> here?
Reference: null or empty is technical. we can just say something like: schema must be provided.
Candidate: why do we need to use the here?
Reference: out of curiosity, where can this npe come from? netif is known not to be null at this point.
Candidate: we should throw an exception if (state != null) { throw null; }
Reference: same kind of thought here, i would negate this if condition and get rid of the else block... but i guess it's a matter of taste really ^^
Candidate: why do we need to use the <UNK> here?
Reference: you could use one of the existing care settings in the test dataset
Candidate: <UNK> *= 2;
Reference: encrypted password matches regexp and regexp require 1+ symbols in each group. it looks like null checks are not needed.
Candidate: why do we need to synchronize on the lock on the process?
Reference: consider moving the if to the addvmcinderdisks method.
Candidate: i don't think we need to check if the is is the
Reference: maybe remove wildcard import javax.swing.* ? i know idea adds it automatically but there must be a setting for that (let me know where it is ;)
Candidate: please use syserr
Reference: check false condition here and we can save one level of indent
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: minor point; ignore if you want -- this l435-437 block duplicates l423-425 and could be dropped if this entire new code block from l426 was moved above l423.
Candidate: can you be simplified to:  java return episodes = <UNK> <UNK> <UNK> (state != null) { return null; }  ? <UNK> : null; ?
Reference: yuck to auto-generated hashcode and equals methods! understand that it required less code for you to write, but it's certainly more code to maintain. i like return objects.hashcode(additionaloptions, commands, hardware,
Candidate: can you use <UNK> <UNK> <UNK>
Reference: space after if, and before {
Candidate: why do we need need to the <UNK> here?
Reference: not the same code style. use ("save.file", true);
Candidate: please use syserr
Reference: double-conditional?
Candidate: do we need to <UNK> <UNK> <UNK> <UNK>
Reference: magic constants
Candidate: this fail()?
Reference: similarly, will this(toentity()) work?
Candidate: please import?
Reference: how to process the version like 1.11? i think it have problem. can you use org.talend.commons.utils.version, it implements the interface comparable.
Candidate: can be simplified to <UNK> <UNK> ?
Reference: could rename pair to useridpair or usersessionpair
Candidate: why do we need to permission?
Reference: scalerfunction is not used?
Candidate: we should need to do we need need to do we need to do we need need to do we need to do we need need to do we need
Reference: this seems wrong. it's not about whether the field is an alias, but whether its name refers to a column in the source table (vs a column in the output
Candidate: we should need optional.ofnullable()
Reference: i know we haven't been entirely conistent, but repeating the writer. reduces the noise of these lines  writer .emitstatement("...") .begincontrolflow("...") // instead of writer.emitstatement("...") writer.begincontrolflow("...")
Candidate: should this be <UNK>
Reference: this appears to already be visible in the xml.
Candidate: <UNK> costs {this}
Reference: register receiver here if isreceiverregistered is false
Candidate: this should be the <UNK>
Reference: perhaps you can use static imports for everything form assertion?
Candidate: please remove the method("post")
Reference: shall we use a logger?
Candidate: should this be the specific?
Reference: indentation here is fucked up
Candidate: what circumstances?
Reference: same as in non-buffered aggregator
Candidate: should we be schedule() { <UNK> } (throwable { null) { <UNK> }?
Reference: nice error handling here!
Candidate: why do we need to use the here?
Reference: if we go for supporting 3 kinds of test runtime (minimal tp, provision product or pre-existing provisioned product, it would be interesting to factorize installation of tests on a provisioned
Candidate: why do we need to use <UNK> here?
Reference: feel free to use assertions.fail() for this purpose. also, i would say something to the tune of "environment mode not covered: {}".
Candidate: why do we need the <UNK> here?
Reference: there is no reason for these formatting changes
Candidate: can you use <UNK> <UNK> <UNK>
Reference: if in line 202 we set patchtable in the else block to null, could we then remove this if block? if a patchtable exists it would simply be always visible.
Candidate: if we is the software <UNK> <UNK> is the software <UNK>
Reference: java doesn't have string interpolation, i assume you mean something like: suggestion log.warn("could not delete service account user {}", sa.getid(), re);
Candidate: should we be the <UNK> here?
Reference: style-nit; no braces for simple single-statement constrcuts
Candidate: i don't understand why this the <UNK> is the
Reference: rebase error - should be used helper.getcurrentuser.
Candidate: why do we need to use <UNK> here?
Reference: @bhavik3 i don't think we should have empty space here, as it should be as close to case as possible
Candidate: <UNK> *= 2;
Reference: better make these methods protected and move the algorithmgroup soly to the algorithmgroup class and override the methods where it is used here
Candidate: why do we need to check the <UNK> here?
Reference: it's going to be slow to do the merge each time we call getdescriptor. i would prefer if the merge result was cached and the cache invalidated if there's a
Candidate: the syserr should be the <UNK>
Reference: can you use dataconstants for the default values?
Candidate: should this be <UNK>
Reference: i would suggest answer.tolowercase() to make secret answer validation case insensitive.
Candidate: i don't understand why, but it matters, what is the that the is is the that the is is the
Reference: exception is redundant
Candidate: why do we need need to check the <UNK> here?
Reference: would be logic the same if you rewrite code as  for (workspaceimpl workspace : workspaces) { normalizestate(workspace, includeruntimes); }  ?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: i think the below logic is not very easily to understand and also has some overheads in practice.  if (!sortbuffer.hasremaining()) { // the record can not be appended to
Candidate: this should be the <UNK>
Reference: do we need a copy of the data?
Candidate: can be simplified to <UNK> <UNK> ?
Reference: should we copy the source stacktrace of the original timeoutexception?
Candidate: why do we need this?
Reference: better: throws exception since it simplifies future evolution of the code.
Candidate: why do we need to the the payload?
Reference: remove synchronized
Candidate: should this be the <UNK> ?
Reference: why is totalpartitionids needed? could you just use partitiontoreplicamap.keyset() to iterate through partitions? if you only need the map you can just do java partitiontoreplicamap = replicaids.stream().collect(collectors.tomap(replicaid::getpartitionid, function.identity()));
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you could add instanceof additional check, and return result.error if failed to avoid classcastexception
Candidate: why do we need need to the <UNK> here?
Reference: it will never be null
Candidate: can we return <UNK> <UNK> ?
Reference: must check isdebugenabled() before any debug log as a best practice.
Candidate: if <UNK> { return false; } <UNK> { return false; }
Reference: i know why but can you please explain why you need a loader-writer here?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: where is this constructor called?
Candidate: please remove the try/catch please.
Reference: could you please always use curly braces around the bodies of if statements, even if they're one-liners?
Candidate: please use object.equals <UNK> == <UNK> && <UNK> && ...?
Reference: you need to add the annotation here as well, as otherwise the delegate (i.e. the actual mapper implementation) for a decorator does not get the @singleton annotation.
Candidate: i don't need to check for the <UNK>
Reference: why would summaries by null when you "new" it up above
Candidate: change has has has has has has has has has has has has has has has has has has has has has has has has has has has has has
Reference: can we say show_notification instead of allow?
Candidate: this should be <UNK>
Reference: make sure that the order of the plugininfos is same in all scenarios otherwise etag will change event if plugininfos is same
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: please inline this variable.
Candidate: why do we need to check for the <UNK> ?
Reference: this if clause can be removed if the path in open on construction as a seekablestream
Candidate: i don't think (actual == null) { throw <UNK> } catch (throwable e) { .... }
Reference: please make this final. a lot of methods in this class should have been final but aren't, but since this is a new one let's lock it down.
Candidate: i don't think we need to check if the is is the
Reference: please reimplement with invoking isdot and isforsideeffects on imports.next() object
Candidate: should be be <UNK>
Reference: why is this null (although i guess it doesn't matter)
Candidate: why do we need to use <UNK> here?
Reference: a http header named "" should probably be treated as invalid, i think we should refuse it at construction, not try to coerce it here.
Candidate: this should be the <UNK>
Reference: nullable
Candidate: can be simplified to <UNK> <UNK> ?
Reference: or false?
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: the pattern that we've used so far is for the builder to emit content as well as possible, rather than failing. consider doing something like: characters(format("{0}({1})",text,definition));
Candidate: should we use the <UNK> here?
Reference: the same piece of code is used multiple times, let's refactor it into a common method.
Candidate: do we need to print the exception here?
Reference: requesttranscation  => requesttransaction  transcation  => transaction
Candidate: the syserr should be the <UNK>
Reference: why is this no longer static?
Candidate: why do we need the <UNK> here?
Reference: @happy-neko variable type can be relaxed to collection
Candidate: this should be the <UNK>
Reference: this is sensible... if the resource could be deleted without generating a task (200 response) this will actually be null but the delete operation succeeded. we should only do the
Candidate: please remove the log.
Reference: again drop assertion on operation results when expecting resilience strategy to be called.
Candidate: i think the others, the assert that resilience strategy matches the few of the the others, the result of the the others, the result of the others, the others, the
Reference: throw exception here instead
Candidate: if <UNK> == null) || <UNK> == null) || <UNK> || <UNK> == null) || <UNK> || <UNK> || <UNK> == null) || <UNK> || <UNK> || <UNK> || <UNK>
Reference: it might be better to use default values that are not equal to the java defaults (e.g., -1)
Candidate: should be be the <UNK>
Reference: use this utils method to show error <link_0>
Candidate: use use utils method to show error error <link_0>
Reference: should we avoid searching the map 3 times for the "id" entry?
Candidate: this should be the <UNK>
Reference: simply use arrays.aslist(). the list will be immutable but i don't think we add element to the column names afterwards?
Candidate: consider extracting this into a local string, except creates an array creates objects objects objects objects objects creates additional objects objects objects objects objects creates additional objects objects objects objects
Reference: it should use the ctx1
Candidate: i expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting expecting
Reference: requirenonnull
Candidate: should this be <UNK>
Reference: in this case, all keys above should be found in the status_map, so it might be more appropriate with a checknotnull()?
Candidate: i don't think we need to check for the <UNK>
Reference: @heejeongkim why do you want to quietly ignore malformed max-age and expires attributes with strict rfc 6265 policy? that does not look right to me.
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: this could also benefit from inilne examples (takle the values from the tests)
Candidate: why do we need to use <UNK> here?
Reference: handle this inside getexceptionsaslist(me), so adding unwanted elements to the list is avoided from the start
Candidate: i don't think we need to check if the is is the
Reference: you need to add the 'throw' keyword.
Candidate: i don't think we need to throw an exception if we don't want to throw iae
Reference: is it really necessary to change the return type? copyrepresentation still return a drep and createrepresentation(final string name, final eobject semantic, final representationdescription description, final iprogressmonitor monitor) returns a drep
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: @psytester can you change it to: string respbody = response.getentity(string.class);
Candidate: the unmodifiableset should be be the <UNK>
Reference: please add .setverifymode(openiabhelper.options.verify_everything)
Candidate: do we need need to display the here?
Reference: why do you need to change the values? testclasswithconfigskipandfailuresample was 3 => has_skipped + has_failure and is now 6 => has_skipped + has_fsp. is it expected?
Candidate: please use <UNK>
Reference: just because the code resembles c doesn't mean that you have to adopt horrendous naming standards ;)
Candidate: why do we need to check for the <UNK> <UNK>
Reference: fixme: i get "android system" as an option to choose photos. i don't think that should happen (?)
Candidate: why do we need the <UNK> here?
Reference: i think that we should remove process if kill succeeded. there is one branch that leaves stale consumer that cannot be supervised anymore cause we removed it.
Candidate: why do we need to check for the <UNK>
Reference: return super.getservicename().append("config");
Candidate: please use <UNK>
Reference: you should do this via the mocking api, otherwise this call is just being sent to the mock which doesnt do anything with it..
Candidate: should this be <UNK>
Reference: imo you should always pass the scanpackagevalues to one method and if it is empty check the default package.
Candidate: can you use the <UNK> <UNK> <UNK> <UNK>
Reference: probably doesn't matter as much in tests, but this isn't closed
Candidate: typo: <UNK>
Reference: if you want to check if video is playing i would not rely on video feedback element. there is special css class added to one of divs related to player
Candidate: this should be setemptyelement().
Reference: should this also use the read option like the other iterator?
Candidate: why do we need need to the <UNK> here?
Reference: can it be null?
Candidate: if (state != null) { return null; }
Reference: l182-185 can be moved below first if condition.
Candidate: why do we need to use <UNK> here?
Reference: does the same cost lead to the change?
Candidate: why is the fixture.
Reference: this is just syntactic sugar, doing so will make this line a bit shorter. return collections.singletonlist(preconfiguredtokenfilter.singleton("homoglyph_norm", will become return singletonlist(singleton("homoglyph_norm", it sometimes helps readability and is accessible easily in intellij
Candidate: this should be setemptyelement().
Reference: seems what this boolean flag does is the opposite of what the variable name means. if the response is a "ask" response, we want to keep the session open (set
Candidate: please use <UNK> <UNK>
Reference: val baby.
Candidate: we should use the <UNK> in the same as the other places.
Reference: should this be if (!strings.isnullorempty(link)) { ?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: > ... as the more important one. is there any particular reason why is it so? usually, it is the less important one and attached as suppressed.
Candidate: should we catch (throwable e) { throw } catch (throwable e) { <UNK> e) { .... }
Reference: - instead of ! anymatch you can use nonematch. - this would be more readable if you extracted a variable for the condition.
Candidate: rename to var
Reference: i'd either remove this message or expand on it a bit (i.e. "refreshing info for server x").
Candidate: this compensation?
Reference: could you explain why we set this here?
Candidate: i think this should be the <UNK>
Reference: why do you think this is better than collections.empty_list? it doesn't look like a necessary change.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: see see getalllifelines remarks
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: asyncpagetransportlocation.orelse(location)
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: enforce null when false?
Candidate: please remove this line
Reference: make these string values as constants
Candidate: why do we need the <UNK> here?
Reference: maybe introduce a utility method that returns this factory; it is easy to miss that the list of arguments is part of the factory, and not the constructor.
Candidate: hmm. this should be the fixture.
Reference: it is possible for jdbc.query to return null?
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: make these methods final so they can't accidentally be overridden
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: we are passed in an abfsinputstreamcontext. we should hold onto that instance instead of creating member variables for each of the members of abfsinputstreamcontext.
Candidate: you should be <UNK> <UNK>
Reference: hm, shouldn't this be switchmap()?
Candidate: should we be the specific?
Reference: why are you using standardexception.newexception while throwbadtype("left", receivertype.getsqltypename()); above?
Candidate: i don't think we need to check if <UNK> != direction.incoming) { return; } if <UNK> { return; } if <UNK> { return; }
Reference: this should not be a hardcoded constant ("value"), but simply name. i know this won't change anything in practice, but it's just in case people copy/paste this code.
Candidate: please import?
Reference: @merciesa maybe matter of taste, but why not i-- instead of i -= 1?
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> { scale return; }
Reference: this should use the declared return type, not the instance type. otherwise you can't use multibindings to create a set<set<string>>.
Candidate: why return <UNK> != null ?
Reference: is it ok that this may return null and nothing be done about it?
Candidate: should we be the getconnection here?
Reference: this code should be removed. executebatch is missing a call to closeresultsets, which would close all activeresultsets, at the outset of the method; which all executexxx methods are required to
Candidate: why do you need the access modifier in the <UNK> <UNK>
Reference: it would be good to have a unit test for this method
Candidate: i don't understand this matters, if we matters, but i don't understand this matters, this matters, if you matters, but it is the <UNK> the <UNK> is the the <UNK>
Reference: i think it would be interesting to test not only the status code but also the body, as it should contain the list of commit results.
Candidate: please remove the unused line.
Reference: this changes the semantics of comparison. use sameelements (instead of objects.equals) in this class.
Candidate: this should be <UNK>
Reference: try(fsdataoutputstream stream = fs.create(new path("s3n://test-bucket/test"))) { // initiate an upload by creating a stream & closing it immediately } assertequals(s3.getacl(), cannedaccesscontrollist.bucketownerfullcontrol);
Candidate: why do we need the <UNK> here?
Reference: use static import everywhere if you star using it
Candidate: drain **ex** fail() should be drain fail() to catch throwable
Reference: there should be no way to delete an allergy by uuid _without_ also specifying the patient it belongs to. i think you should get rid of this third branch.
Candidate: why do we need the <UNK> here?
Reference: white spaces should be only after the comma, not before
Candidate: you can use the assert that the retired
Reference: i guess you can update the code to use putifabsent() and use the return value to compose the log message
Candidate: should we be the <UNK> here?
Reference: also needs assert.notnull().
Candidate: this should be <UNK>
Reference: why does this allow the requesting thread to drain if requestedcount was already set to long.max_value? doesn't that mean a request was previously made but nothing ever emitted? if that's
Candidate: if we is software software stripe { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }?
Reference: this savedstate constructor can be made package-private to avoid accessing a private member in the createfromparcel method.
Candidate: why do we need to check the <UNK> <UNK>
Reference: i think that this assignment to "guid" already happens in the base class? doesn't it?
Candidate: this should be setemptyelement().
Reference: then use return string.format(url, checkerinfo.getcurrencybaselowercase(), checkerinfo.getcurrencycounterlowercase());, without hardcoding brl here.
Candidate: please use <UNK> <UNK> <UNK>
Reference: what is left unsupported? could you specify why this exception is thrown?
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: this way _all_ columns with double type will be formatted with two decimal digits. it is okay for cost (which is essentially money) but it may not be okay for
Candidate: this should be the <UNK>
Reference: just let it throw the error.
Candidate: why do we need need to the <UNK> here?
Reference: predicate used twice (at least first part), should be method
Candidate: why do we need this?
Reference: per the name, the multiplication should be hardcoded into the variable itself.
Candidate: this we need to calculate the <UNK> to the <UNK> the <UNK> <UNK> the <UNK> is the <UNK> to calculate the the <UNK>
Reference: change s to serviceinstance
Candidate: do we need to call <UNK> here?
Reference: missing @override
Candidate: this should be the <UNK>
Reference: just fyi, i think there's a method scrollandclick()
Candidate: i don't think we need to do we need the future.get() to the getcredentials
Reference: @pinaf oh, sorry. i forgot that we have 2 methods. ok for the second test. and also i wasn't very precise about users docs. what i actually want is the
Candidate: @hdouss why 16?
Reference: have to be specified? argument '%1$s' name not specified?
Candidate: can we use the getconnection here?
Reference: mostly we don't use chain and use only setters. let's discuss it with @ybabak @yuribabak i'd like chain
Candidate: why do we need the optimization?
Reference: please do not go for the suppression of warnings, instead use proper generic information to make it go away.
Candidate: please use <UNK>
Reference: i think this should call getexistedpath(url) (or its equivalent if it gets renamed). the constructor used to call url.getpath() for its parameter, just like this method used to. since the
Candidate: why do we need to use <UNK> here?
Reference: \\n and not \n? interesting
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: no need to remove parentheses here and below to keep equations consistent. please revert the entire file. the final keyword at l69 can be removed though.
Candidate: why do we need the weights *= 2;
Reference: null check can be beneficial here
Candidate: should this be <UNK>
Reference: is an empty itemtype allowed?
Candidate: the syserr should be be called via:  public void <UNK> { <UNK> = <UNK> <UNK> } <UNK> <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: arraylists are great for random reads, not so great for appending. i think by deafult it allocates a length 10 array, then reallocates and copies all the data when the
Candidate: please use <UNK>
Reference: we should be able to return true here immediately after seeing filteredpattern < 0, simplifying the conditional below, avoiding the sourcepatternindex computation, and making it clearer why the iteration is
Candidate: why do we need the <UNK> here?
Reference: why is this included in this pr?
Candidate: why do we need to check the <UNK> <UNK>
Reference: why not use a concurrenthashmap?
Candidate: i don't think we need to check the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: better use double.isnan(double) ;)
Candidate: why do we need the <UNK> here?
Reference: it should be new tajoruntimeexception(new invalidcastexception(...).
Candidate: should we use moreobjects here too?
Reference: drilldown can be specified multiple times, looks like the previous code was incorrect in this regard. it should be uribuilder.query("drilldown", drilldownarray, false) to not replace the parameter. i'm guessing this
Candidate: if (filter.getrelationshipdirection() == direction.incoming) {
Reference: the try-with-resources should close the output stream, why is this necessary?
Candidate: why do we need need to the <UNK> here?
Reference: this stream can probably be created using [try-with-resources](<link_0>
Candidate: the exception message should be thrown in the exception and throw an exception
Reference: ordering here is unpredictable. does that matter? it seems like it might. but i guess that is ok here isn't it, because the database model doesn't store any ordering. i
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: use assert.assertequals instead.
Candidate: please use import <UNK>
Reference: just use normal string concats...
Candidate: unsupportedoperationexception should be <UNK>
Reference: again, this doesn't guarantee index bytes are read. my recommendation is to use okio to reliably skip x bytes.
Candidate: why do we need to here?
Reference: style nit, preferred layout is  predicate ? res1; : res2;
Candidate: typo: kubernetes should objects.tostringhelper() to "...had %s + <UNK> + " + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: public static int hashcode(double value)
Candidate: use objects.hash()
Reference: can you remove this logging statement?
Candidate: please move this line to the <UNK> explained
Reference: please also check the entire file and use injected storagepathprovider instead of new storagepathprovider() like here.
Candidate: can we use the getconnection here?
Reference: you can retrieve all disks for vm
Candidate: if there is no objection for android android device aggregate device will be problematic as well.
Reference: one param a line.
Candidate: i don't understand why, but the tablets should be in the disk, so we don't need need to the the disk,
Reference: let's put the content of waitforanddismissalertmodal here, and let that function call this one instead. the "click ok to dismiss" relationship makes more sense compared to "dismiss to click ok".
Candidate: should this be <UNK>
Reference: that's a hack indeed. there must be a way to trigger a refresh of the list view... (but i don't know off hand sorry)
Candidate: why do we need to check for the <UNK>
Reference: i think we shouldn't add new method into analysisreporter, but just call the existing public one sendreport as we do on line 65, wdyt?
Candidate: why do we need to use <UNK> here?
Reference: sometimes you use "/" and sometimes a variable/constant...
Candidate: can we be simplified to <UNK> <UNK>
Reference: we use a bytearrayoutputstream for other services (e.g., pd) -- any reason we're using a stringwriter here?
Candidate: this should be <UNK>
Reference: delegate to createcloneutils(kryo kryo, ...)
Candidate: why do we need to use <UNK> here?
Reference: the entire onpreferencechangelistener can be avoided now that you have set android:persistent=true.
Candidate: use <UNK>
Reference: these should be internationalized too
Candidate: this should be the <UNK>
Reference: why do you add "tostring()"
Candidate: should we throw an exception instead of the exception?
Reference: imo, to sounds better to me.
Candidate: do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: would be nice to add @return about what kind of values are expected here
Candidate: should be setemptyelement().
Reference: s/pmpption/pmoptions
Candidate: can be simplified to return <UNK> ?
Reference: can you just rename this to cleanuptmp(); ?
Candidate: should we be the <UNK> here?
Reference: it looks a bit odd to me that we finish the operation only if the migration removes a record. why is it so?
Candidate: you should use the <UNK> onto the <UNK>
Reference: getservicepolicy shouldn't ever return null. based on how the python sdk functions we return a policy object every time. in the case that it is in fact empty ({"factors": [],
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: didn't you mean 'typenode == null?
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: add " && tbl.gettabletype().equalsignorecase(tabletype.managed_table.name() . " and throw exception
Candidate: why do we need this?
Reference: translation here as well.
Candidate: the syserr should be be the <UNK> <UNK>
Reference: please use collections.emptymap(), here the static import makes code less readable
Candidate: we can use static"
Reference: i am worried of the 3 here,did you set it as a conceptid any were up for cough syrup
Candidate: can you decide to create a new method?
Reference: there are tons of things that could have gone wrong in this call, and returning null from here will both crash or break other code, and has no clear semantic
Candidate: why do we need the <UNK> here?
Reference: nit: if else may make this easier to read.
Candidate: this should be the <UNK>
Reference: can be simplified to java this.mockmvc.perform(get("http://localhost:543")) .andexpect(redirectedurl("https://localhost:123"));
Candidate: why do we need the <UNK> here?
Reference: not necessary. please remove it.
Candidate: nit: you can use <UNK> <UNK> <UNK> <UNK>
Reference: static imports
Candidate: use <UNK>
Reference: since you've changed method name to clickpublishbutton you can also rename button to publishbutton instead of savepagebutton
Candidate: i don't think we need to use the anywhere, but it will be good idea to be the millisecond
Reference: i want to method accessor to be package private :eyes:
Candidate: can we be null?
Reference: this method could be converted into a single (three-line) boolean statement.
Candidate: should be be <UNK> here?
Reference: why transportfactory was removed?
Candidate: why do we need to the <UNK> <UNK> <UNK>
Reference: not sure why not doing is gracefully by having true instead of false?
Candidate: why do we need the <UNK> here?
Reference: these two lines can be removed.
Candidate: can we be the getconnection here?
Reference: i'd like to be able to configure generation in other worlds, too... like basalt in the nether.
Candidate: we should use the <UNK> <UNK>
Reference: please add an assertion message to the asserequals() call.
Candidate: this should be the fixture.
Reference: one output could be added many times. do we need to prevent that?
Candidate: should this be <UNK>
Reference: this should return empty array
Candidate: this should be <UNK>
Reference: is it neccessary to fetch the serving url, or can we just set the <img> src value to the end point, and have the end point respond with 303 see
Candidate: please use string.format here
Reference: indeed. to the best of my knowledge, static is being deprecated in favor of none.
Candidate: do you || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: it seems like you should synchronized before the while loop to prevent releasing and then immediately re-acquiring the lock as you loop
Candidate: should we throw an exception here instead of returning an exception?
Reference: may not matter, but did you check if this behaviour change has any impact? (the units were not taken into account originally, whatever checkperiod value was passed in at construction
Candidate: should this be <UNK>
Reference: we don't want markdown for debug builds by default. same reason as css.
Candidate: why do we need need to check the <UNK> ?
Reference: style nit: no braces here
Candidate: please use the syserr
Reference: something like this is about 225k+ ops/sec faster java compositebytebuf taggingcontent = allocator.compositebuffer(); for (string key : tags) { int length = bytebufutil.utf8bytes(key); if (length > tag_length_max) { continue; }
Candidate: why do we need the <UNK> here?
Reference: && needs to be || as well
Candidate: if we is the <UNK> <UNK> is the <UNK> the <UNK> bottleneck.
Reference: wrapping so much logic here in a try-catch is excessive and makes it harder to understand. given that the resulting service error says that the error happens because rest.li was
Candidate: please remove the <UNK>
Reference: alter case also we need to set it. if it is bootstrapping on empty db. may be we can remove the flag and just set it to true always.
Candidate: why do we need to here?
Reference: extra space on this line
Candidate: @exper0 use <UNK>
Reference: minor race here, would be better as:  java long lasttime = lastbufferaddfailmsgtime.get(); if (currtime - lasttime > 10000 && lastbufferaddfailmsgtime.compareandset(lasttime, currtime)) { log.warn("failed to add event to buffer with
Candidate: use uri.create here instead of <UNK>
Reference: it would be better if this returned an empty list instead of null if no repositories exist. the same applies for the other methods as well.
Candidate: please use <UNK>
Reference: should be "recoveryrate", not "recovery rate must be between 0 and 1"
Candidate: we should need to do the tear down the <UNK>
Reference: 25 or 35?
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: change from admin@nhn.com to ngrinder-admin@naver.com
Candidate: you can use <UNK> <UNK>
Reference: optional: use parameterized log if possible
Candidate: use <UNK>
Reference: shouldn't we check that the uri is the same one as returned earlier? assertequals(location, manager.locationurifor(project))
Candidate: please use <UNK> <UNK> <UNK>
Reference: i get this if it's closed. we can fix it at the same time org.eclipse.core.internal.resources.resourceexception: resource '/delete-me' is not open. at org.eclipse.core.internal.resources.project.checkaccessible(project.java:150) at org.eclipse.core.internal.resources.project.hasnature(project.java:584) at org.eclipse.linuxtools.tmf.ui.project.model.tmfprojectregistry.resourcechanged(tmfprojectregistry.java:163)
Candidate: repeated, to required.
Reference: the service layer should be responsible for loading these. e.g. defaultrunservice#loadchildentities. getuse and getsize methods will still be required on the dao, but not on the service
Candidate: if we is the software stripe { <UNK> <UNK> } } } } } } }
Reference: why the catch here when you don't catch many of the other ormexceptions?
Candidate: should we be <UNK> here?
Reference: here the preselection should be added.
Candidate: should this be <UNK>
Reference: thanks! please just remove the ': %2$s', no need for the getmessage().
Candidate: why do we need to here?
Reference: i think we should leave this pr open until vector is finished. the master branch should contain production ready code.
Candidate: <UNK>
Reference: nice. how about changing this to apply retries with backoff but use one of the uris at random ? sort of similar to lines 68-77
Candidate: please use <UNK>
Reference: isempty()
Candidate: should we be the getconnection here?
Reference: no potential race-condition but other points from [this bit of feedback](<link_0> apply here too. i don't think there's a need to require the client code to call a separate method
Candidate: why do we need the <UNK> here?
Reference: storedcontext.
Candidate: should this be the <UNK>
Reference: dynamic.equals(jobname)? but, what is wrong on setting initial jobname in uri path? afaik this concept is not used anywhare in camel, so please remove the check for "dynamic".
Candidate: can we use <UNK> <UNK> <UNK>
Reference: it looks like we verify these attributes, and then call the getlocaldbentry(a, b) method below. could we do the verification once instead of twice?
Candidate: why do we need the <UNK> here?
Reference: \n can be removed.
Candidate: you can use <UNK> <UNK> <UNK> <UNK> $l for the situation.
Reference: i would get rid of the jobchangelistener and simply leave the order of execution as it was before since i don't think this is changing anything.
Candidate: i don't understand why, but it is be the if the is is the
Reference: the two calls to repositoryfactory.getobject(); in this method can be extracted to a variable.
Candidate: should this be <UNK>
Reference: @arukshani seems like the test code is completely identical except the different upgradestring. consider moving all the code into an extra method and just pass in the upgradestring from both
Candidate: why do we need the getconnection here?
Reference: use org.assertj.core.test.maps.mapof to make code lighter.
Candidate: why do we need the <UNK> here?
Reference: this is charge_dialog_fragment not change_dialog_fragment
Candidate: why do we need need to check the <UNK> <UNK> <UNK>
Reference: i don't know the aql apis, but is it ok to modify the environement here and not to reset it to its original value once we are done?
Candidate: should this be <UNK>
Reference: static import getinputformatname
Candidate: @unyoungwax, can you explain that: java 8 <UNK> <UNK> <UNK> );  java 8 streams java 8 <UNK> <UNK>  java 8 java 8 <UNK> static final <UNK> <UNK> clazz,
Reference: ticks don't line up. suggest using submonitor.convert(monitor, 1)
Candidate: do we need to the <UNK> <UNK> <UNK>
Reference: null checks for codedtest and secret ?
Candidate: we should need to check the the <UNK> <UNK> the <UNK> <UNK> is the software <UNK> <UNK> software stripe { <UNK> }
Reference: use java.util.objects
Candidate: should this be the <UNK> <UNK>
Reference: ctfexception instead?
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: instead of initializing to getsequencennumber(), you could initialize to (and check below for) -1. it makes it more obvious that it is an invalid value.
Candidate: the syserr should be be the
Reference: so it doesn't a converter anymore as it creates loadbalancers. i liked it when it returned the loadbalancer instead of adding to a list in the parameters.
Candidate: can we use static"
Reference: i would move this code into couldbestring
Candidate: if you is an empty() if there is an npe?
Reference: can be moved to be inside the following "if" statement. not a must. just a minor optimization.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: what if cdpath is already null?
Candidate: please remove the log.
Reference: the exception also needs to be modified a bit.
Candidate: i don't think we need to do we need need to use the <UNK> <UNK>
Reference: if we're going to make a writer around system.err, i think i would prefer to just use that throughout this method. so do this at the start, and replace the
Candidate: why do we need to check the <UNK> here?
Reference: remove instance creation here and other places ?
Candidate: please import?
Reference: this method should not be public because this data source should return only settings domain entity
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: no need to catch the exception here, it was already done in the overload.
Candidate: should we throw an exception here instead of exception?
Reference: in this context, form is available as a final variable.
Candidate: can we move this to the 83 <UNK> <UNK> contents?
Reference: type is only created to retrieve the class from it later. can't we just use hashmap.class in line 211? wouldnt the generics be erased from the type during runtime anyway?
Candidate: why do we need the <UNK> here?
Reference: unnecessary change
Candidate: you could replace the with <UNK> <UNK> <UNK>
Reference: current event row count / queryableindex.getnumrows()
Candidate: why do we need need to the <UNK> here?
Reference: inputstream is never closed, which could leak connections to s3. recommended way in java7+ is to use:  java try(final reader inputstream = new inputstreamreader(s3object.getobjectcontent())) { ... }  it
Candidate: why do we need to re-throw the exception here?
Reference: same here, should be an externalized string
Candidate: why do we need to use the <UNK> here?
Reference: both cases behind if have common logic, you are using if statement only to determine which element use, so let's refactor it
Candidate: please use <UNK> <UNK> <UNK>
Reference: de morgan is really earning his keep this week! java return !getsupportedsearchparams().contains(queryparam.getkey()) && !isblank(queryparam.getvalue());
Candidate: why do we need to check the <UNK> <UNK>
Reference: i know this isn't yours to blame, but while your at it, let's change this to "successfully" :wink:
Candidate: why do we need need to the <UNK> here?
Reference: this may not be the right way to serialize the key. this depends on tostring method which by default (if not implemented) returns address which will never dedup.
Candidate: this should be the <UNK>
Reference: this should be: null == patternfilter
Candidate: why do we need this check?
Reference: as i mentioned, do not catch all exceptions here, just the ones that are thrown in the try block. suggestion } catch (internalerrorexception | membernotexistsexception | wrongattributevalueexception e) {
Candidate: you don't need to use the <UNK>
Reference: for what i can read you only need to set the component key, no need for an internal map on filters objects.
Candidate: fbot can be used anymore.
Reference: would you use arrays.ensurecapacity?
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to check if the is is the
Reference: it is recommended to change addr0 to restserver
Candidate: can we make a string no?
Reference: or suggestion authentication auth = jenkins.getauthentication(); return auth.equals(jenkins.anonymous) ? null : auth.getname();
Candidate: why do we need to use <UNK> here?
Reference: would it be simpler to rewrite this block as just if (subscriptiontrycount != 1)?
Candidate: should we be the <UNK> here too?
Reference: the use of doublesumaggregatorfactory here makes be very nervous. do all postaggregations have to be doubles? the case i have dealing with nested queries certainly needs to deal with complex
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: super nit: suggestion string filepath = "path/to/text/file.txt";
Candidate: if the != null && <UNK> && <UNK> && <UNK> && <UNK> { return false; }
Reference: there are resources without dot in the name. i believe this code will fail in that case.
Candidate: should this be <UNK> <UNK>
Reference: this seems to result in dates that look like 1970-01-01t00:00:00.z. i think you meant to use sss for milliseconds.
Candidate: <UNK> --> <UNK>
Reference: it's a primitive, you can avoid using objectequal
Candidate: please use the islocal as well.
Reference: i'd say it hsould be called listfilenames (with a capital 'n')...
Candidate: please use <UNK> <UNK> <UNK>
Reference: interesting. makes me think we should support env and property replacement in batches
Candidate: why do we need the fully-qualified properties? here?
Reference: correlate must have as jointype one of inner, left, semi, anti (i.e the formerly semijointypes), i think we should probably throw an illegalargumentexception if jointype is not one of those
Candidate: i don't understand this matters, this matters, this matters, this matters, but you don't need why, but you don't need to repeat the <UNK>
Reference: better return file for file path. same for all other methods.
Candidate: why do we need to use the here?
Reference: i don't think this is needed - all the other actions which allow partial success just send all the commands to the server and the server returns error messages for
Candidate: please remove the <UNK>
Reference: there should be character '.' after the word 'totally'.
Candidate: why do we need to the <UNK> here?
Reference: good change making this an instance member, thanks.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: space after if
Candidate: i don't think we need to evict the <UNK> to the the <UNK> the <UNK> <UNK> <UNK>
Reference: you could make the method return the base tmfxychartviewer, and each test class could cast it to the right sub-class.
Candidate: fbot can be used for the checkbox <UNK>
Reference: this line appears twice in the file. as it's effectively the logical opposite of register, i would extract it to a method unregister.
Candidate: this should be <UNK>
Reference: don't hide exceptions - it makes resolving failures hard.
Candidate: why do we need to here?
Reference: this can be instanceof as well.
Candidate: the syserr should be the <UNK>
Reference: typo not important "hotname"
Candidate: this should be the <UNK>
Reference: consider renaming this method: its similarity to increasenumofstudents suggests it decreases the number of students by the integer passed in.
Candidate: why do we need to check the <UNK> here?
Reference: please revert back to argumentpreparedstatementsetter as reading/writing blob is not required on the remove.
Candidate: i don't think we need to throw an exception
Reference: model is already injected and should not be reinstantiated again.
Candidate: why do we need to <UNK> stuff?
Reference: getreviewurls is already an immutableset
Candidate: i don't think we need to trim the buffer.
Reference: here you need to do a mapping as well, can't assume that the values of vdsprotocol and hostprotocol will always match.
Candidate: if <UNK> != direction.incoming) { <UNK> }
Reference: must have exactly one annotation...
Candidate: do you need a parameter instead?
Reference: although 2 will not fail the cs magic number check, it isn't clear why it's needed here. a descriptively named constant would help make that clear.
Candidate: why do we need to use <UNK> here?
Reference: let's not rush for auto registration logic here. we can split it into two prs. for this pr, let's only have the interface and class implementation. move the registration logic
Candidate: can we make this private?
Reference: this should be in the bcrobotics class, in preinit. it should _probably_ look like this:  java bcmessagehandler.addmessagetype(messagezoneplannermapchunkrequest.class, messagezoneplannermapchunkrequest.handler.instance, side.server); bcmessagehandler.addmessagetype(messagezoneplannermapchunkresponse.class, messagezoneplannermapchunkresponse.handler.instance, side.client);  this does require you to change
Candidate: why do we need to use <UNK> here?
Reference: style, structure, assertjunit.
Candidate: this should be the <UNK> probably?
Reference: not sure if path here can be something like "hello.gitattributes".
Candidate: why do we need to use the payload?
Reference: i think this is going too far in the other direction :p. in #121, i'm advocating <var> (or <span>) when we're wrapping phrasing content, and <div> when we're wrapping flow
Candidate: can we use <UNK> objects.tostringhelper() name)?
Reference: add space, use formatter.
Candidate: why do we need the <UNK> here?
Reference: should slack be in here? suggestion return "slack email user id resolver";
Candidate: should be setemptyelement().
Reference: why are you checking build.version.sdk_int >= build.version_codes.p if there is  if (build.version.sdk_int < build.version_codes.p) { return null; }  above?
Candidate: why do we eating the exception here?
Reference: minor nit: hasaccess is perhaps a better variable name :)
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: this is not legal: collections.emptymap returns a non-modifiable empty map (and always the very same empty map). invoking .put on it should fail. for maps with a single element, use
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: it looks like this code should be part of 'general' infra independent provision or maybe installer configurations, so docker and openshift and any other implementation won't need to do it
Candidate: should we be <UNK> to <UNK> the <UNK>
Reference: this should really use regexwithtimeout, for safety.
Candidate: this should be the <UNK>
Reference: in this case, there is no need to explicitly specify the final.
Candidate: the syserr should be the <UNK>
Reference: in general, prefer objects.hashcode(...). here is an example in the nova [network](<link_0> class.
Candidate: <UNK> != null && <UNK> && <UNK> && <UNK> != 0)" null && <UNK> != 0)" null && <UNK> != 0)" null && <UNK> != 0)"
Reference: these functions seem to be deprecated, and also these values are already the default.
Candidate: we should need to use the exception here instead of <UNK>
Reference: please call super.onlogin() here since this is the same code
Candidate: if getstate() != null && <UNK> { return; }
Reference: need to verify that this is always followed by onresume
Candidate: this should be setemptyelement().
Reference: and this active instance?
Candidate: i don't understand what if we do, if we is the software <UNK> <UNK> is the software indication of the <UNK> is the
Reference: omit?
Candidate: why do we need need to <UNK> here?
Reference: chain with previous line's assertion
Candidate: you can use the fixture.
Reference: how about adding a bit of logic that makes it possible for the user to also pass a byte[], without conversion from string to byte[]? this enables the user to
Candidate: this should be setemptyelement().
Reference: please remove. it is provided by different extension.
Candidate: why do we need the <UNK> here?
Reference: since the map is case insensitive why force upper case that isn't necessary
Candidate: we don't need to do we need need to specify the for the request?
Reference: you're sure caching the field isn't needed? it's still done for beforepassivate
Candidate: can we make this private?
Reference: end = math.min(end, interval.get***end***time());
Candidate: why do we need to use <UNK> here?
Reference: i'm not a big fan of array of generic type; could we change the method to be public static <t> list<future<t>> runconcurrentlywithresult(final list<callable<t>> threads), and change the type of threads
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: nit: table variable is unnecessary here
Candidate: why do we need to use the <UNK> here?
Reference: better variable name - ex numwidgets or just widgets or count
Candidate: should we be the specific?
Reference: don't need parens
Candidate: we don't need to declare the filereader throws ioexception
Reference: is -> are ?
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: move forward to line #93 (just before "foundtemplatedisk").
Candidate: if we || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK> || <UNK>
Reference: typo in variable name.
Candidate: please use runquery()
Reference: maybe static import all of these constants
Candidate: should we be schedule() here?
Reference: use parameterized logging, like:  java logger.debug("mapping: itemname={} & property = {}", itemname, property);
Candidate: can we use the <UNK> of the optional?
Reference: same as above; there is no need to make this injector public.
Candidate: please use <UNK>
Reference: listeners that use a ui component should be added in the initialize method.
Candidate: why do we need the <UNK> here?
Reference: would it be much extra effort to include outaveragelinkshare, outaveragerealtime and outaverageupperlimit?
Candidate: why do we need the <UNK> here?
Reference: i would prefer using filteronlyallowedattributes(perunsession sess, list<richmember> richmembers, group group, boolean usecontext) with group = null and usecontext = true. its optimized to check rights for first member and store
Candidate: thank you voobserver for you.
Reference: is this safe to do repeatedly? or do we need to check and no-op if it's already present?
Candidate: we should need to do we need need to do we need to do we need need to do we need to do we need need to do we need
Reference: what's the reason for double.nan setting? you don't use these values below.
Candidate: you don't need to use the <UNK> <UNK>
Reference: please use static import for compressionutils. likewise addfoldertotar above.
Candidate: why do we need to mock <UNK> here?
Reference: there is a reason we were using explicit left and right for the gravity. when the system language is an rtl language, "start" will mean "right", and the position of
Candidate: shouldn't this be the permission here too?
Reference: please add a new line after the assertion to make the method easier to read.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: is it possible to have a totext(text.builder) method? it'd be nice to pass an already-made builder here, if available
Candidate: the syserr should be be <UNK>
Reference: we should also check discoveryscript.canexecute().
Candidate: rename to iu
Reference: islessthanorequalto?
Candidate: you don't need to use the <UNK>
Reference: below we log " response: " + result. which one is **the** response?
Candidate: should we log the exception?
Reference: this will override the system-wide prioritized crypto providers for java set by the system administrator. this may be okay in some cases, but i don't think this should be the
Candidate: nit: this breaks the unit test unit unit tests, but the unit unit unit unit unit unit test.
Reference: nit: serverprops seems to have 3 elements. should not this be 3 instead of 2? 4 instead of 2 for line 85?
Candidate: i don't understand this matters, this matters, if you matters, this matters, but i don't understand this matters, this matters, this matters, but it matters, that it matters, but i
Reference: we should use featuremanager.getfeatures() here instead.
Candidate: should we return the <UNK> ?
Reference: fvaluenumber and fvaluetimestamp are derived from fvalue and ftype so they do not need to be considered for hashcode() and equals().
Candidate: please use <UNK> <UNK>
Reference: it is not slew rate (users/seconds). it is extrauserstep (users)
Candidate: please import?
Reference: in lieu of the validation in develop, maybe we can just say something akin to "syntax error, please check your wdl file" here
Candidate: why do we need need to the <UNK> here?
Reference: this should return list<memberinfo> if multiple members can be put at once.
Candidate: nit: you wanted to evict the on the end of the
Reference: why do we need synchronized?
Candidate: please use <UNK>
Reference: unnecessary?
Candidate: why do we need to use <UNK> here?
Reference: can we use assertj's assertthatcode here instead of the try-catch?
Candidate: why do we need to mock here?
Reference: formatting issues
Candidate: why do we need to use <UNK> here?
Reference: ![critical](<link_0> 'severity: critical') define a constant instead of duplicating this literal "method not implemented for unspecified field" 5 times. [![rule](<link_1>](<link_2>
Candidate: please use the exception here instead of the try-catch-fail try-catch-fail
Reference: split it on 2 lines; = and == are very easy to confuse, especially for someone with little java experience.
Candidate: i'm not sure that this approach is this approach is a bit of this approach is what is is doing. <UNK> is doing.
Reference: preferences.getpreviewpreferences() ? as you already have a jabref prefs object
Candidate: rename to <UNK>
Reference: this is at least the third time in this pr that comparison of two targets' contigs has come up. it's worth extracting a method somewhere.
Candidate: the syserr should be be the
Reference: @exper0 full path hmrsheader.values_str
Candidate: please use <UNK>
Reference: why we disallow a user to set null bookmark? (it does not make many sense, but maybe a user wants to break cc from this tx?)
Candidate: should we be the <UNK> here?
Reference: you need to create own exception, when requires to change the default behavior. please use a standard one for your use-case.
Candidate: should we use the exception here?
Reference: i prefer adding a case for something like json_type(1), which should fail the validation.
Candidate: collections.emptyset()
Reference: @sonalidhome here you can use self-reference setter methods. destination.id(...).key(..).name('..') ...
Candidate: wouldn't it be better to use <UNK> instead of manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually manually
Reference: as far as i know, we do not have an issue on it as we are still trying to finish up detailast support in xpath.
Candidate: why do we need the <UNK> here?
Reference: add newline before return.
Candidate: add newline before return.
Reference: best to log the access value for debugging.
Candidate: the syserr should be be the
Reference: delegate to setbody(publisher, -1)
Candidate: should we throw an illegalstateexception if possible?
Reference: probably should be continue here; we don't want to stop checking players just because of one bad apple
Candidate: do we need to check the <UNK>
Reference: you can collapse the following three lines into one now that we are using java 8 replicationstatus status = keyreplicationstatusmap.computeifabsent(newkey, k -> new replicationstatus(replicas))
Candidate: why do we need to use the <UNK> <UNK> <UNK>
Reference: no longer need concatenation now that it's one line
Candidate: please use the exception here instead of printing the
Reference: yes, this shouldn't be here
Candidate: i don't understand this matters, if you matters, this matters, but you don't need to use the <UNK> <UNK>
Reference: is this method exposed for testing? if yes, should it be marked @visiblefortesting?
Candidate: why do we need need to the <UNK> here?
Reference: are we sure that the value will always fit within a single chunk?
Candidate: this computeifabsent
Reference: is there a question here? or are you answering your own question?
Candidate: why do we need need to the <UNK> here?
Reference: please log the exception.. don't use printstacktrace(). if u found any other place fix them as wel..
Candidate: why do we need this?
Reference: same here, can we input the empty list?
Candidate: i disagree with the previous inspections
Reference: this call can be deleted.
Candidate: we should need to do we need need to do we need need to do we need need to do we need need to do we need need to the
Reference: this class is extremely long anyway. please consider moving this logic to a separate class.
Candidate: can you move the builder into <UNK> builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
Reference: double check that no group has been created
Candidate: no double check that the group has been been anonymous anonymous permission that permission will get permission that permission will get permission permission permission permission permission permission permission permission permission
Reference: why remove the singleton check?
Candidate: this should be repelaced by userreportingsettingshelper userreportingsettingshelper
Reference: will this be more readable with string.format
Candidate: nit: <UNK> highest <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: sql script for recordlocationservice--requestedpatientid are 1, 2, 3, 4, 5 this would fail if records are not in the database testgetallbyrlsid
Candidate: @original-brownbear should be replaced with: <UNK> = viewmodelprovider <UNK> <UNK> <UNK> = viewmodelprovider <UNK> <UNK> <UNK> = viewmodelprovider <UNK> <UNK> <UNK> <UNK> <UNK> viewmodelprovider <UNK> <UNK> <UNK> = viewmodelprovider <UNK>
Reference: @idelcano can you refactor this method extracting logic to new methods exexutedemopull and executeremotepull for have the code more readable as useraccountrepository?
Candidate: should we be schedule() here?
Reference: !strings.isempty(), or even !strings.isblank() to rule out whitespace-only text
Candidate: can we class" be used to purpose?
Reference: --> failed to transform configuration parameter with key '%s' and initial value '%s'
Candidate: please use <UNK> <UNK> <UNK>
Reference: i'd just go for the code below, as it feels a lot simpler to me:  public static predicate<charsequence> containsallliterals(final string... fragments) { list<predicate<charsequence>> fragmentpredicates = lists.newarraylist(); for (string fragment
Candidate: why do we need the <UNK> here?
Reference: just a minor note, this line can probably be removed since this test doesn't actually make use of the clientfactory.
Candidate: this should be the <UNK>
Reference: i would call escape here to be in line with the @deprecated message and to make sure that both escape methods behave the same (someone may update escape(string) without updating
Candidate: why do we need need to the <UNK> here?
Reference: use the constant <code>const.tooltips.feedback_contribution_not_available</code> in fact, this may be better as <code>getpointsascolorizedhtml(const.points_not_submitted)</code>
Candidate: can you use <UNK> <UNK> <UNK>
Reference: set<string> seems more appropriate to me, unless there is some need to have values ordered.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: may want to break; out of the for loop here so it doesn't continue looping over the remaining attributes.
Candidate: what do we want to do we want to do we want to do we want to do we want to do we want to do we want to do
Reference: if the purpose of adding to oclist is only for shutdown, i would recommend against it. since there is only instance of backgrounddeleter, it should be easy to shutdown/wait for
Candidate: can we use objects.requirenonnull be the constructor?
Reference: what happens if id is null? shouldn't you also use tenantid, or is it correct to ignore it?
Candidate: this should be <UNK>
Reference: we don't need this check. better find the luns that need to be resized. if the luns list is empty, we will not find any luns to resize anyway.
Candidate: why do we need the <UNK> here?
Reference: can you simplify by always using second part (after else)
Candidate: the syserr should be be <UNK>
Reference: please move this few lines into new method
Candidate: why do we need to brackets?
Reference: you don't necessarily need constants for these.. plain "" should be fine too.
Candidate: can be replaced with <UNK> <UNK> ?
Reference: lines 1051-1053 are redundant.
Candidate: this should be the stacktrace, so we should have the stacktrace, so we should use the <UNK>
Reference: noticed that in samzasqlqueryplanner.parsequery(), there is already a sqlselect generated for the part does the select statement. following this planner.plan(), in queryplanner, we are parsing the select statement again (as
Candidate: please remove the method("post")
Reference: @nullable annotation implies that the argument could be null. correct fix is to keep the @nullable annotation and do the following: return field != null ? field.getname() : null;
Candidate: why do we need the exception here?
Reference: why linked list? i guess arraylist would be more efficient...
Candidate: why do we need to check the <UNK> here?
Reference: please use windows.ok (which is the default button)
Candidate: if (state != null) { <UNK> }
Reference: this line should go to the css files
Candidate: i disagree with the wording. please move this logic into the messages.properties { <UNK> } { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> { <UNK> }
Reference: shouldn't isrelevancyupdatescheduled be set to true here?
Candidate: why do we need the <UNK> here?
Reference: do we need a try-finally here to ensure any close action gets called?
Candidate: why do we need to synchronize on the <UNK> ?
Reference: as far as i see - this is class for default exception handlers. maybe default one for nosucheventtype is not_found?
Candidate: should we use the exception here too?
Reference: not a deep copy
Candidate: this @since 3.16.0
Reference: please use assertnotnull from testng and fix indents here
Candidate: please use import <UNK>
Reference: this if is unnecessary since it's tested again inside calculateuq()
Candidate: please use the syserr
Reference: all these methods can be package-private
Candidate: this should be <UNK>
Reference: maybe tokenise? gettokens is a bit general for what it does.
Candidate: please use <UNK>
Reference: the check needs to happen for decorators and interceptors also.
Candidate: should we use the <UNK> <UNK> <UNK>
Reference: use fluentiterable.filter() or iterables.filter.
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: would be better to pack the uncommon path into a separate method
Candidate: this should be <UNK> <UNK>
Reference: suggestion return systemutils.is_os_linux && gnomeloginkeyring.ispresent();
Candidate: should this be null?
Reference: i think that the "support" word isn't needed in these names, it is better to name them just "generatestructreader", "generatestructwriter", etc. that accurately describes what they do.
Candidate: please remove the <UNK>
Reference: i think this needs to be on all windows. otherwise, if i quit eclipse with multiple windows opened, when it is restarted, only one of the window will have the
Candidate: why do we need to the <UNK> here?
Reference: == is sufficient.
Candidate: i don't think we need to call the <UNK>
Reference: i think this should not be public, right ?
Candidate: this should be <UNK>
Reference: why are we setting it to new a new empty completablefuture? is removing not sufficient?
Candidate: please use <UNK>
Reference: domainname is not the host name. in addition, the check should be done only if ldapservers is provided. you need to check that for example - ldapserver1.acme.com is indeed resolvable.
Candidate: can we move this to the 83 <UNK> <UNK>
Reference: because $#it happens :)
Candidate: this is the getconnection comparison,
Reference: did you intentionally change this from collections.singletonlist?
Candidate: why do we need to use <UNK> here?
Reference: why not directly assertequals(low, fcondition.min()); ?
Candidate: please remove the unused line.
Reference: even this can be clubbed with above one as there is only one extra property here.
Candidate: i don't think we need to throw an exception
Reference: remove the tostring()
Candidate: do we need to debug here
Reference: is that possible that tethering inactive but tethering restricted is updated to restrict? if yes, the logic here may be not correct? another question is that when tethering is inactive,
Candidate: i don't think we need to check if the is is the
Reference: this could call the one argument constructor instead of this.requestdata = requestdata;. it will make possible future refactorings easier.
Candidate: should this be <UNK>
Reference: any reason you use .compareto() == 0 instead of .equals()?
Candidate: if oldvalue is the <UNK> is the <UNK> the <UNK> is the <UNK> <UNK>
Reference: there is some (mostely) repeated code here between enable and disable debug mode
Candidate: why do we need need to check the <UNK> <UNK>
Reference: shouldn't the interrupt flag be restored here?
Candidate: i don't think we need to do we need need to check the the <UNK> <UNK>
Reference: would prefer new intobjectopenhashmap<>() here. javac will infer the correct generic type, and then there's less work to refactor in the future. (this trick was discovered fairly late in myria,
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: will we even get here if we aren't in discovered hosts mode?
Candidate: why do we need this check?
Reference: this should also use scanner to avoid reading everything into ram.
Candidate: why do we need this?
Reference: you you didn't test nosonar
Candidate: why do we need the getconnection here?
Reference: should this close happen in a finally block?
Candidate: please remove the [] cast:  java return <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> { return <UNK> }
Reference: elapsednanos.
Candidate: should be setemptyelement().
Reference: we will need to call shouldbeequalbycomparingonlygivenfields and give it the fields differences.
Candidate: why do we need to use <UNK> here?
Reference: please consider to use setchangeprohibitionreason instead
Candidate: why do we need to the <UNK> here?
Reference: is it a good idea to throw an exception in a static block? this exception is thrown to the classloader which is hard to find or to detect and can
Candidate: they pain pain pain pain they pain pain pain pain pain pain pain they they they pain pain pain pain pain they they they pain pain pain pain they they
Reference: eventhough not necessary, please add a break also at the default case.. this prevents errors if these case statements are reordered
Candidate: we don't need to pass the <UNK> here?
Reference: invalid blob key format:  + key
Candidate: this should be the if (state != null) { throw <UNK> } else { if (throwable { suitable <UNK> }
Reference: maybe you spend/add a waitforerrorcalls ?
Candidate: why do we need to use the here?
Reference: should use parameterized logging instead of string concatenation.
Candidate: i don't understand why, but it matters, but it is be nice to do, but it will be easier to read if the understand what the doing.
Reference: technically, wouldn't it be class<? extends clockprovider>?
Candidate: should this be <UNK>
Reference: this npes when openrepository fails gracefully when the repository is suddenly torn out from under gerrit (this happens!). i would prefer to return "" in this case.
Candidate: why do we need this?
Reference: can return directly.
Candidate: i don't think this the <UNK> is the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: why any? use miccrecords
Candidate: this should be <UNK>
Reference: no braces.
Candidate: why do we need need to the <UNK> here?
Reference: once this is complete, you should in theory be able to get rid of operation_ flags.
Candidate:
Reference: <rowexpression> is redundant for builder()
Candidate: please use <UNK> <UNK> <UNK>
Reference: i may be wrong, but it looks like we're scheduling all cleanup jobs individually. this also means that cleanup jobs could potentially run in parallel. what happens if there are
Candidate: this should be the <UNK>
Reference: feels like it would be neater to have a single event handler for this which then dispatches to the two methods.
Candidate: please remove the method("post")
Reference: since we are refactoring it, we could be a little bit more defensive. either check the property name with a regex and extract the group we are interested or check
Candidate: why do we need to check the the <UNK> <UNK> <UNK>
Reference: any reason we are not doing flatmap similar to the original asyncreadbenchmark? <link_0>
Candidate: <UNK> *= 2;
Reference: can we add a toast if msite is null? i know such a situation is unlikely to happen, but in that event then no action is performed and the user
Candidate: why do we need to check whether the view is called in the main thread ?
Reference: suggestion checkdeploymentorder(!legacy);  (same elsewhere)
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: shouldn't this be give a higher severity? presumably, if we can't release the lock, it's still there, and processes waiting for it will be stuck.
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: please avoid reformatting like this, there's no code change here
Candidate: we should need to do we need need to evict the exception in the <UNK> we don't need need to do we need to the getcredentials
Reference: nit: import nettymessage.addbacklog because it occurs many times in this part.
Candidate: should we be the specific?
Reference: in the original version, both "in" and "out" were not closed at the end. why do we close them now?
Candidate: i appid
Reference: given the new behavior, maybe renaming this to "trydelete" would make sense?
Candidate: why do we need to use <UNK> here?
Reference: need to format the code, the space not right, see: +elementtype+
Candidate: should we print e1 exception here?
Reference: nit: can be linkedlist since we are adding and removing entries?
Candidate: the syserr should be be <UNK>
Reference: when will this happen ? i like the check but want to know when can this happen ? or is the intention that this can never happen ?
Candidate: please use <UNK>
Reference: if you keep the position relative to the 1st datapage above, you just need add this value to every pageheaderwithoffset here
Candidate: use <UNK>
Reference: collection is not usually returned in these cases. also, sorting each time this method is invoked is not too efficient. maybe we could find an implementation of storagefields, which would
Candidate: can we use <UNK> <UNK> <UNK>
Reference: null check should done for asynctask.gettaskid() as well
Candidate: i don't think we need to check for the <UNK> the <UNK> <UNK> <UNK>
Reference: session could be set to null on dispose().
Candidate: if (actual != null) { <UNK> = null; }
Reference: could we do persistencepath.resolve(key + ser) instead?
Candidate: should we log the exception?
Reference: object
Candidate: please use <UNK>
Reference: i would be tempted to put the code for enabling wire frame mode, along with the next two lines into some flavor of prepareforrendering() method. methods that check and then
Candidate: why do we need this?
Reference: while this may work, it is a very strange formulation. i wouldn't expect two mock components here -- either you're mocking the file component or you're mocking the direct component,
Candidate: why do we need to close the <UNK> here?
Reference: use spring's io utils here
Candidate: should we use the exception here?
Reference: suggestion list<restentry> entries = new arraylist<>();
Candidate: why do we need to use <UNK> here?
Reference: i had a couple of ideas: 1. detect that the flow starts with a gateway and automatically add a bridge to nowhere - i rejected this because someone could add
Candidate: please use the exception without the exception
Reference: ![major](<link_1> 'severity: major') either log or rethrow this exception. [![rule](<link_2>](<link_0>
Candidate: should we throw an exception here instead of eating the exception?
Reference: if it hasn't been set to anything it should be interpreted as true. so } else { navigator.mcached = true; }
Candidate: should we be the specific?
Reference: <= 1
Candidate: please use <UNK> <UNK> <UNK>
Reference: should be named just macpool. also no need to extract to variable.
Candidate: the syserr should be be the
Reference: no longer thrown since modifyattribute() removed.
Candidate: why do we need to use <UNK> here?
Reference: this prefix should probably still be there as it is actually logging in the "correct way" to the actual build log. also should maybe be doing double logging here, once
Candidate: this should be the <UNK>
Reference: nit: space after cast
Candidate: i don't think we need to log the exception if the exception is the
Reference: if (!transaction.allownonrepeatableread())
Candidate: i don't think we need to use the <UNK> <UNK> <UNK>
Reference: as this is single element list we could use: java final list<element> updatedelements = collections.singletonelist(mock(element.class));
Candidate: please use syserr
Reference: please use == when comparing enums
Candidate: you can use <UNK> here as above.
Reference: please remove this empty line
Candidate: why do we need need to the <UNK> here?
Reference: @original-brownbear does it need to be ioutil from plexus? does it have some special property we need?
Candidate: why do we need to use <UNK> here?
Reference: 2 typos milage => mileage and caluclated => calculated
Candidate: why do we need the <UNK> here?
Reference: is it better to use "false" explicitly than the variable "refresh" to force not to use the cache?
Candidate: the syserr should be be the <UNK> <UNK>
Reference: i'm reading this part of the client code <link_0> and trying to understand the change in behaviour with rackawaremode.enforced. do you understand the difference between safe, disabled and enforced? it's
Candidate: why do we need to here?
Reference: do these constants really need to be removed? testcatalogvalidation.java appears to have similar constants. is something in this test impacting the classloader?
Candidate: this is right...
Reference: can't we use objects.equals(value, name.value)?
Candidate: should be be null?
Reference: delete?
Candidate: i don't think we need to do we need need to check the <UNK> the <UNK> is the
Reference: nit: serializables? it is attributevalues or values or something...
Candidate: can be simplified to <UNK> <UNK> ?
Reference: style nit: replace tab after "selection," by a space
Candidate: why do we need to check on the username?
Reference: it's a redundant check. there already exists a stripe size check under the lock.
Candidate: why do we need the <UNK> here?
Reference: hi @nahuel-soldevilla thanks for reviewing this! i agree, pattern.compile will have a performance impact if it is called multiple times. so i decided to improve the code and do literal
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: instead of creating two additional objects, it is preferable to use case-insensitive comparison.
Candidate: you can use <UNK> <UNK> <UNK> <UNK>
Reference: the server acts according to the config it has in its quorum verifier, so if this line is executed when the server syncs with the leader, setting quorum verifier overwrites
Candidate: if we is the software <UNK> software <UNK> is the software itemstack.
Reference: times(0) -> never
Candidate: please import?
Reference: we already have this in tmf.core.activator now. since this plugin depends on tmf.core, it will already be loaded. is this necessary to call this again?
Candidate: this should be <UNK>
Reference: odd indent on line 86 and lack of braces makes this code confusing. better to use a newline and { } around the if body to make the intent clear.
Candidate: why do we need to use <UNK> here?
Reference: i'm not sure if this start() method might throw an exception (or if there is a subsequent close() method), but it might be safer to have a start() method on
Candidate: use <UNK> objects.tostringhelper() to <UNK>
Reference: could this be done within initializedisksandreplicasonnode?
Candidate: please use <UNK> <UNK>
Reference: null email will fail here. lets prevent potential npe, even though theory is ui will never pass it.
Candidate: can we use the <UNK> here?
Reference: could you add the type parameters to the constructor calls here and below?
Candidate: <UNK> evidence, you can use the <UNK> <UNK> <UNK>
Reference: why would that be synchronized? i mean it just executes in site platformrun.later ... that make is synchronized because there is only one ui thread !!!
Candidate: if the != null) { actionreturnvalue groupname = <UNK> } { return <UNK> { <UNK> }
Reference: since collation is a required trait, a condition is useless here.
Candidate: why do we need to here?
Reference: you can spare this call when !result
Candidate: why do we need need to check for the <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: could we use recordbatch.no_timestamp here too?
Candidate: this should be <UNK>
Reference: the constant should be a static variable. it looks like it is converting megabytes to bytes? if so, how about 'mb_to_bytes_conversion'?
Candidate: why do we need to <UNK> the sizes of the sizes capacity?
Reference: requirenn
Candidate: i don't think we need to synchronize on the <UNK>
Reference: add a todo to be implemented in a later patch. i know this is your next task, but other reviewers may not know that ;-)
Candidate: should this be null?
Reference: can we name this more concisely completions, as in the addmacroextensionautocompletions method? also, the redundant type arguments can be removed from the constructor call: suggestion arraylist<completion> completions = new arraylist<>();
Candidate: why do we need to check the getcredentials here?
Reference: could we add another check to make sure that the json exported also has 3 decimal points? for example assert.assertequals(object_mapper.writevalueasstring(compressedview.getbaselinevalues().get(i)), "2.833")
Candidate: why do we need to the the payload?
Reference: magic number
Candidate: i don't understand this matters, if we matters, but this matters, if you matters, this matters, but i don't understand this matters, if the matters, but i don't understand why,
Reference: just millis shoud be enought
Candidate: @exper0 let's use <UNK> objects.tostringhelper() ;p
Reference: imo this would read better with a ternary operator rather than the if (...) { return ...; } return ...; pattern.
Candidate: please use <UNK> <UNK> <UNK>
Reference: this one can be static
Candidate: i don't think we need to throw an exception
Reference: this is consistent with the corresponding code on googlecomputeinstance, but i would probably use || ipmappinglist.isempty() for clarity.
Candidate: why do we need the <UNK> here?
Reference: instead of creating the studentsdata > setting the students > getting the students > setting the institute data, could we do all the data manipulation (setting key and institute) on
Candidate: this should be the stacktrace, no?
Reference: you need to make sure that all webview methods are called on the ui thread. (i know there are many violations of this in this file, but i've recently fixed
Candidate: this fail()?
Reference: message in exception
Candidate: why do we need to use the here?
Reference: this seems redundant, and bad practice to assert based on the text of exception message. the e instanceof myexception assert below should be sufficient.
Candidate: should we be the <UNK> here?
Reference: what if 'data' is null?
Candidate: the syserr should be be called in the <UNK>
Reference: how about integer.tostring(pull.number()) instead?
Candidate: why do we need the <UNK> here?
Reference: i think checkstyle does not enforce it... even if i think it should...
Candidate: if the != null return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return; return;
Reference: right just keep in mind that the filtering will be pretty simple: just enough to distinguish between system templates and user created templates. the security plugins should be preventing templates
Candidate: can be replaced with <UNK> <UNK> ?
Reference: why not adding a addsection method?
Candidate: why do we need to use <UNK> here?
Reference: i think that you should check for fformatteroptions being null and if true, call rewrite.rewriteast() as the old code did. otherwise, make the new call. that may explain your catch
Candidate: rename <UNK>
Reference: how about "testcase name cannot be null"
Candidate: why do we need to here?
Reference: set to final
Candidate: typically, i don't think we need to throw an exception
Reference: same. all these strings are not refactoring friendly. lets address this.
Candidate: should we log the payload?
Reference: imho we should remove this log message at all.
Candidate: should be username?
Reference: maybe rename the readpreferencetype field from readpreference to defaultreadpreference since that's not necessarily the readpreference that's going to be used.
Candidate: this should be the <UNK>
Reference: i guess you can use objects from java 7 here and on equals =)
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: i think adding back the sender.isme() check is the right thing to do.
Candidate: do we need to check?
Reference: is it really so that seed member always chosen as a leader?
Candidate: you can use the syserr
Reference: you can replace it with a direct call to providerdao.get(getcachedvm().getclusterid())
Candidate: i don't think we need to do we need need to be the anywhere, right?
Reference: not sure what information about the value will asserttrue give you in case it's not greater than 0. if you care about the value, there are assertions for numbers. and
Candidate: the syserr should be be the
Reference: invalid_scope in place of invalid_request
Candidate: can we use <UNK> the enum?
Reference: please use the constants defined in commonjobproperties.java: <link_0>
Candidate: why do we need to use <UNK> here?
Reference: looks like a command line app -- print to stdout (or stderr if it's a warning etc)
Candidate: should we throw an exception here instead of an exception?
Reference: this is impossible, blocklength is an int.
Candidate: this should be the <UNK> of pcappacketheader have an int.
Reference: this one is probably redundant now as we already checked for constraints on line 158.
Candidate: this should be the <UNK> <UNK> <UNK>
Reference: does the pagenumber start at 1 or 0? if it starts at one, this conditional could be wrong: pagenumber=1, totalcount=7,pagesize=5 would return false, but there is still a next page.
Candidate: can be simplified to: java return <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: ++ ?
Candidate: why do we need the <UNK> here?
Reference: update this method to return optional<connectortablemetadata>
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: use brackets for single statements (i know we are very inconsitent here but this should be the goal)
Candidate: please use <UNK> <UNK> <UNK>
Reference: this assumes/imposes the same sentence structure and order in all languages. instead we should have 2 templates for the 2 cases, so that each one can be translated appropriately.
Candidate: use iu
Reference: this creates an anonymous class that extends hashmap, and is considered a bad practice. i'd go for a much simpler approach: map<string, string> migrationmap = new hashmap<>(); migrationmap.put("undefined", "true"); migrationmap.put("x86",
Candidate: why do we need to use the <UNK> here?
Reference: nit: logger message should say 'bind' instead of 'bond'
Candidate: i catch interruptedexception here and rethrow interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception interruptedexception exception interruptedexception is redundant.
Reference: just a quick first browse-through: shouldn't notifylistenersaboutremovedelement(...) also be called with existingelement?
Candidate: should we be schedule() here?
Reference: you definitely need a null check on mounted before calling mounted.gettype(). i'd suggest moving the logic from the if statement on line 280 into the if statement on line 276,
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK>
Reference: should the list of required attributes be validated against the list of editable attributes?
Candidate: should this be <UNK>
Reference: use: return optional.fromnullable(request.getentity()).transform(functions.tostringfunction()).or("").getbytes(charset.forname("utf-8"));
Candidate: can we use the get* <UNK>
Reference: exceptions other than lockexception need to be re-thrown. otherwise jobs executing the operation are treated as executed successfully. other question: can a job executing an operation be treated as successful
Candidate: should we throw an exception?
Reference: @thilia can you fix this exception as well?
Candidate: why do we need to check the <UNK> <UNK>
Reference: it looks like the code tries to grab the lock for this event id both here and then, after acquiring it, in the createbooking(...) method which should result in deadlock.
Candidate: please use <UNK> <UNK>
Reference: this init shouldn't happen directly here (see the dependency that's created via the import with the elementsdkmanager). instead of that, i would rely on the elementcontroller for that purpose. the
Candidate: unused
Reference: would be better to use math.tointexact().
Candidate: can you move this into a separate method?
Reference: this is not necessarily only ibm jdk, please improve the message.
Candidate: why do we need to here?
Reference: ![major](<link_0> constructor has 8 parameters, which is greater than 7 authorized. [![rule](<link_2>](<link_1>
Candidate: please remove this method("post")
Reference: never use \n in printed output, because it is not portable across operating systems. use %n instead.
Candidate: why do we need this check?
Reference: don't compare the hash twice, remember the return value and use it within if block. you can do something like this: java int pos; ... else if ((pos = determinismhash.comparehashes(m_responsehashes,
Candidate: i don't think we need to evict the the to the the <UNK> the the <UNK> is the
Reference: what will change about the animation?
Candidate: why do we need to check the the <UNK> <UNK> the <UNK> <UNK>
Reference: logger.debug ?
Candidate: why do we need the <UNK> here?
Reference: why not to include the incorrect pattern?
Candidate: why do we need to use the here?
Reference: move this into sendnewgoalconflictmessage.
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: should we also check task.isactive here?
Candidate: this should be simplified to <UNK>
Reference: maybe rename into suggestion externalresourceinfoprovider.no_external_resources,
Candidate: this should be setemptyelement().
Reference: is this a sufficient test to say its empty? what if a project has commits in one or more branches that were pushed directly into the project and bypassed code
Candidate: please use <UNK> <UNK> <UNK>
Reference: you may want to verify in a scratch area that the dataexception will still be thrown. i do recall that an exception on the finally block will override the one
Candidate: this we remind me :disappointed:
Reference: perhaps pulling the instructiontype int into a variable in the line above would be better for readability. just an optional suggestion!
Candidate: why do we need need to the <UNK> here?
Reference: do we have a good test to confirm that the chunks in the returned filespan are still sorted after trimming? (applies to removecontentsbefore() as well)
Candidate: can we use <UNK> <UNK> <UNK>
Reference: maybe if we pass the repository to the noncegenerator, it can pull out the directory? dfs implementations could then supply a different noncegenerator that can pull out getrepositoryname.
Candidate: wdyt about changing this to: if (state != null; ? <UNK> : null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null;
Reference: this is not going to work. openfile directly delegates to the underlying file system. the input stream does not use cache at all
Candidate: this should be the <UNK>
Reference: wrong formula
Candidate: should we be the if <UNK> != null) { continue; } <UNK> { <UNK> } else { if <UNK> { <UNK> { <UNK> } <UNK> { <UNK> } } }
Reference: is this not now simply standaloneprojects?
Candidate: please use <UNK>
Reference: this should never happen, should it? readpermission should now be evaluated instead?
Candidate: why do we need the <UNK> here?
Reference: suggestion assertfalse("should not resolve model one dialog", resourceexists("/apps/test/model1/cq:dialog"));
Candidate: can we use <UNK> <UNK>
Reference: missing space after if
Candidate: i don't think we need to throw an exception
Reference: redundant else block.
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> && <UNK> && <UNK> { <UNK> } else { <UNK> } else { if <UNK> { return false; }
Reference: for checknonnull, objects.requirenonnull is preferred. and the labels should be externalized
Candidate: this should be the <UNK>
Reference: it should be 10001 instead of 10000 here and below since [the upper bound is exclusive](<link_0>,int)).
Candidate: should we throw an exception here?
Reference: do we want to log more information about what the error that occurred here was?
Candidate: i don't understand this matters, this matters, but i think this matters, that this stubbing is the <UNK> the <UNK> is the <UNK>
Reference: sdkconstants.attr_translatable, sdkconstants.value_false
Candidate: do you need to <UNK> <UNK> <UNK> each time anyway.
Reference: this shouldn't be public.
Candidate: should we use the constant anywhere?
Reference: this will cause a npe. consider returning an empty list.
Candidate: why do we need to <UNK> mapping?
Reference: this is redundant here
Candidate: why do we need need to check the <UNK> the <UNK>
Reference: magic number
Candidate: can we use stringbuilder?
Reference: redundant unsupportedencodingexception
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: a bit of a nitpick but we're creating a hashmap with preinitialized capacity of (at least) 16 to put at most 1 element there.
Candidate: please use <UNK>
Reference: above two if statements are really confusing. are you trying to check if these two checking booleans are not the same? why not use a single if statement like below.
Candidate: i don't understand this matters, if you matters, this matters, but this is is the to the <UNK> <UNK> the <UNK> is the <UNK> the <UNK> bottleneck.
Reference: would it be better to use a mock for this? at the very least, we'd have to write less code.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: nit: not sure how often are these called (if ever) , it might be better to use string.format(..) or equivalent. maybe needed in some other places.
Candidate: nextvalueindex should be be a syserr
Reference: should this really be the case? this seems kind of sketchy - no matter what currency i try to use, ess will have it but not really because all currencies
Candidate: should this be <UNK>
Reference: i suspect the first submission will hold the thread and rest will never have a chance to run.
Candidate: this should be the <UNK>
Reference: this exception message is misleading. the value is not invalid... it is simply null. the message should state "filter value cannot be null" you may also wish to print the
Candidate: should we use the <UNK> here?
Reference: intentional?
Candidate: typo: <UNK>
Reference: sounds reasonable to me. we're not really interested in testing the functionality of environmentvariablepasswordprovider here, that should be done in environmentvariablepasswordprovidertest (but it doesn't look like it actually tested it..)
Candidate: please use <UNK>
Reference: because refcontrol sorts the refrights before use, there isn't a need for list<refright>. so why make the api change from list to collection on these?
Candidate: if <UNK> == <UNK> { <UNK> = <UNK> |= <UNK> |= <UNK> }
Reference: directreplytocontainer might be null. although i agree that this.channel is fully depends of the asyncrabbittemplate.this.directreplytocontainer, but let's modify it to avoid such a noise: ![potential_npe](<link_0> by the way it would
Candidate: i don't think we need to evict the to the the the <UNK> the the <UNK> is the
Reference: unsure about this one, encoding measures makes for invalid or problematic gml in output, i'd do it only if explicitly requested.
Candidate: why do we need need to the <UNK> here?
Reference: name this variable sharedpreferenceseditor for better readability
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: this looks... unnecessary? why don't you just call execute on the work plan? the main advantage is that you would get rid of this weird synchronization map.
Candidate: this should be null if <UNK> != null) { throw new <UNK> } } else { if (throwable { <UNK> { <UNK> { <UNK> }
Reference: allow overload with openengsbmodel
Candidate: can we use <UNK> <UNK> <UNK>
Reference: why not create a hash set directly?
Candidate: why do we need the <UNK> here?
Reference: make an unmodifiable copy here?
Candidate: should we expecting the iae to clients?
Reference: we should not have to set the servlet path for this test to pass.
Candidate: please use map<> <UNK> <UNK>
Reference: add a fixme here?
Candidate: why do we need the <UNK> here?
Reference: this should use a random database based on the temporarymongorule.
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK> <UNK>
Reference: without a retry count here, are we avoiding infinite loops for when we keep getting 401s (e.g. password changed).
Candidate: should this be null?
Reference: can we not have any code that specializes to interactive? ideally, we'd just instantiate the interactivemaster class via reflection which takes care of setting everything else up...this way we don't
Candidate: should we use the <UNK> here?
Reference: please save a string (eg name) instead. it is too easy to unknowingly change the order of the enum items.
Candidate: can we move this into the messages.properties method?
Reference: should we not also send out an even that triggers an alarm when this happen?
Candidate: if we is software software <UNK> software <UNK> software <UNK> software error, but i don't need to do we need to do we need need to do we need to
Reference: can't we use just getmydomainname()?
Candidate: please catch catch try/catch block.
Reference: this could be in the model class
Candidate: should we be <UNK> here?
Reference: use log.e to match the isloggable tag. since it's not technically an error log.debug and log.d would also probably be ok, i don't have a strong opinion.
Candidate: you don't need to check the <UNK>
Reference: really?
Candidate: why do we need to evict the here?
Reference: split this up into well-named helper methods
Candidate: can we check isempty()? if <UNK> != null) { <UNK> }
Reference: i think here we can call setemitevaluators() instead.
Candidate: the syserr should be be <UNK>
Reference: we could regroup elements whose parent is not a tool section (a group or group extension). you should make two methods/services : . one too filter the selection: only abstracttooldescription
Candidate: should this be the <UNK>
Reference: i think you missed this log statement when converting to parameterized logging.
Candidate: do we need to catch the interruptedexception block?
Reference: i suppose this will be configurable later ?
Candidate: this is redundant.
Reference: add empty line below
Candidate: why do we need to check the <UNK>
Reference: this transparent stuff is mainly for handling drawing of states that end up on the same pixel. i think we can treat all < 0 as non-drawable arrows.
Candidate: nicer: <UNK> -> <UNK>
Reference: i think it better throws exception when else, due to it need such properties in request.
Candidate: i don't think we need to check if the is is null.
Reference: should be n/a. also - shouldn't this be localized?
Candidate: why do we need the <UNK> here?
Reference: what is the reason of this empty synchronized block?
Candidate: i don't think we need to check for the the <UNK> the <UNK> is the <UNK> <UNK>
Reference: initialize with roles.length
Candidate: can be replaced with <UNK> <UNK> ?
Reference: i would like to preserve cases. it reduces the possibility of name clashes. in any case i think you should use the package sanitizer utils here too to be sure
Candidate: please remove the method("post")
Reference: we could also just change the querylogger interface to accept query params as a separate paramter so we don't have to reconstruct the path.
Candidate: can you move this to distance mapping?
Reference: if groupid is not specified, this is usually simply the same as id by prior convention. it is possible that a constructor need be added to abstractfixedintervaltask to account for
Candidate: use <UNK> objects.tostringhelper() to <UNK>
Reference: obtaining the reference sequence needs a dedicated method.
Candidate: why do we need to <UNK> here?
Reference: behavior here is a bit different from the docs, which say the value is rounded up. since this allows a lane limit of zero or the total limit, it is
Candidate: this should be setemptyelement().
Reference: @thobe if cluster told you about these fellows, why are you so keen to forget them? if they are not doing their job, send them to the back of the
Candidate: i don't think we need to check for the <UNK>
Reference: perhaps perform the revert through removeimagecommand in reverttask() - that way the image would be removed completely in that case (also from the db) i and we will benefit from
Candidate: the syserr should be be <UNK>
Reference: could you change this to use managedinstance instead?
Candidate: why do we need to use the here?
Reference: i think this migration can't work with empty/context/globalmap/... kinds of value. maybe you can add "-1" after the parameter value. like: if customer fill context.lilimit, it can be migrate to
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: preconditions check that executor services must not be the same
Candidate: why do we need to permission?
Reference: space.
Candidate: why do we need to check here?
Reference: as far as i can tell, this code is run from connectivityservice#systemready(), which is a blocking call from systemserver as part of system startup. that suggests that any time spent
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: the error message should really include the segment identifier. imagine the poor user that gets this error and can't figure out which segment to look at. perhaps we can keep
Candidate: why do we need to use <UNK> here?
Reference: this looks suspicious, since it returns an empty array both times.
Candidate: why do we need to check for the <UNK>
Reference: [nit] file.isfile() instead of file.exists() && !file.isdirectory()
Candidate: why do we need this?
Reference: we missed one :) please make this one a variable as well.
Candidate: extract the building of the responsemessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+l). this will make
Reference: maybe use set<string> instead
Candidate: <UNK> *= 2;
Reference: if for some reason the setup() throws an exception and mtablecontext doesn't get initialized, then the parent class's cleanup() won't be invoked. i don't think mtablecontext != null should be
Candidate: why do we need to tear to the <UNK>
Reference: is the line break between "logger" and ".info" necessary?
Candidate: <link_0>
Reference: is this thread safe?
Candidate: why do we need need to check the <UNK> here?
Reference: no 'limit' parameter here. improvement should track the changes we are making to the generic api? add a method and leave this one for backwards compat?
Candidate: why do we need to check the <UNK> <UNK> <UNK> ?
Reference: if this is an error, we should throw something
Candidate: why do we need the <UNK> here?
Reference: the only option that we should provide is enable/disable soft commit for the indexer consumer. there is no reason to offer an hardcommit option for the consumer
Candidate: we should need to hide the exception here as well.
Reference: this seems like a pretty severe issue. shouldn't this be logged at warn or even error?
Candidate: i think this should be the if the <UNK> is the <UNK> the <UNK> is the the <UNK> <UNK> the <UNK> is the <UNK>
Reference: couldn't we have the timeout check implmented in the osgisurefirebooter (or a parent) instead? it would most likely allow easier reuse.
Candidate: why do we need to the the properties? on the origin of the properties?
Reference: please update and then i'll pull it in. i'd rather not pull in tests that'll fail.
Candidate: why do we need the fully-qualified properties? here?
Reference: why we need try ..catch block here?
Candidate: this should be the <UNK> of the <UNK>
Reference: do you want to fail the test in the event of an exception? the runtimemanager.deploydayasource(...) _could_ be called - and hence pass the assertion, but generate an error that would
Candidate: please import?
Reference: redundant lines
Candidate: should this be <UNK> <UNK> ?
Reference: since this class uses exactly one renderable you might as well create it in the constructor and don't use the pool (or extend it, although i'm not sure that fits
Candidate: why do we need to tear to <UNK> <UNK> <UNK>
Reference: prefer a new overload on money which takes a money object to avoid the doublevalue call.
Candidate: can you rename the <UNK> to <UNK> <UNK>
Reference: why do we need this to be customizable?
Candidate: why do we need need to be <UNK> here?
Reference: this function can be simplified to: java private list<artifact> calculateartifacts(iterable<gradledeploydetails> deploydetails) { return newarraylist(streamsupport.stream(deploydetails.spliterator(), false).map(from -> { publishartifactinfo publishartifact = from.getpublishartifact(); deploydetails deploydetails1 = from.getdeploydetails(); string artifactpath = deploydetails1.getartifactpath(); int
Candidate: can be replaced with <UNK> <UNK> <UNK> ?
Reference: this will need to be revisited to throw proper exceptions.
Candidate: this will need to be revisited to throw proper exceptions.
Reference: i don't think the cast to (boolean) is needed
Candidate: why do we need need to check the <UNK>
Reference: if res is true at this point, can't we return without checking anything else? or, perhaps the remaining if blocks should first check for !res? (imo, the former is a
Candidate: why do we need to use <UNK> here?
Reference: be aware of conflict with #12710 depending on who lands first. cc: @hellium01
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: please limit the visibility of the constructor
Candidate: i pagelogging
Reference: sorry, i didn't notice that before: will this change break already configured layer in geoserver? i'm wondering if the new code running against a .idx being configured by previous code
Candidate: why do we need to use the <UNK> here?
Reference: initialize in field declaration
Candidate: should be be <UNK> <UNK>
Reference: would a forbiddenexception work here or is just a webapplicationexception thrown?
Candidate: throws exception
Reference: now, i think we need a class with constants shared across the package. please consider. we have too many magic constants that are obvious, but still are "magic constants". can
Candidate: why do we need need to check for the <UNK> ?
Reference: this is nice-if you want to micro optimize even more i'm guessing checking the game mode is cheaper than checking the permission :wink:
Candidate: stringutils.isnotblank()
Reference: system.out vs logger?
Candidate: should we throw an exception exception?
Reference: i'm not a parcel expert but i think we want to write this out unconditionally. if we don't, i think the constructor will byte offsets will be wrong for the
Candidate: why do we need the <UNK> here?
Reference: probably a good idea to ignore nonodeexception here since there is a chance that between the exists() call and the getchildren() call above, the node could disappear (if so, ignore
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: i assume you only loaded level3 for testing, right? please change it back to be able to load all 3 levels. <bug
Candidate: <UNK>
Reference: shouldn't this call the other form with payload as the first argument?
Candidate: why do we need to use the here?
Reference: consider extracting the filter logic to an helper method (it's the same as in getclusterswithpermittedaction)
Candidate: please use <UNK> objects.tostringhelper() to <UNK>
Reference: do an equals() instead of ==
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: please put each parameter in separate line :)
Candidate: you can use the fixture.
Reference: nit: earlier you used == for enum comparison, is there a standard for phoenix?
Candidate: can you move this logic into an else if the case?
Reference: this does not look correct in terms of isolation of objects. why is this call needed ?
Candidate: this should be the <UNK>
Reference: will this consistently pass? the sort order of the questions will not be deterministic now right?
Candidate: why do we eating the exception here?
Reference: you use the gameovertext in both branches of your if-statement. also, i think it would be better to just use one variable for this, which you give one of the
Candidate: why do we need to check the <UNK> here?
Reference: i would change the message to something generic like  error while trying to get lookup list from coordinator for tier[%s]  exception would already contain specific details. and remove
Candidate: should we catch (throwable e) { throw { .... } catch (throwable e) { .... }
Reference: use the constant
Candidate: ![major](<link_1> 'severity: major') remove the unused try-catch-fail this method. [![rule](<link_2>](<link_0>
Reference: you should probably put this check above that big ass switch statement, because: - in the case that notification **isn't** one-time and/or already triggered, you need to do the check
Candidate: rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename rename
Reference: i strongly disagree with removing the check for vm is null, can you be sure that there is no case that vm is deleted before getting here? this code is
Candidate: should be be the <UNK>
Reference: 1. please remove the "lun" from the methods name, as this resides in diskvalidator, if you want you can perform the check when the disk.getdiskstoragetype() is lun, otherwise return valid
Candidate: this should be the <UNK> <UNK>
Reference: @ayush2297 are these changes part of the ticket or formatting changes ?
Candidate: i don't understand why, but it matters, but i overwrites the <UNK> is the <UNK> the <UNK>
Reference: what if there is a deadlock? how about timed join?
Candidate: i don't think we need to close the threw an exception if we threw an exception occurs in the finally block
Reference: not sure about purpose of the if here. you are just getting out what you just stored in the last line. also, you could store the show_source_not_found_editor_all_time all the time.
Candidate: i don't think we need to check for the <UNK>
Reference: // something like this... if (op.getvalue(tvpkey3, tvpvalue3)) { // found key }
Candidate: <UNK> + " + <UNK> + " + <UNK> + <UNK> + ", " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + "
Reference: string.format() can make this more readable.
Candidate: should we use the <UNK> here?
Reference: just return optional<string> that way the implementation can decide what to do if the value is not present.
Candidate: please use <UNK>
Reference: i'd add first assertnotnull(entry); which is a proper assumption prior to validating the entry data.
Candidate: can we use checkargument to the constructor?
Reference: suggestion return false;  let's not do unnecessary pulls
Candidate: please use <UNK>
Reference: 1. replace expires to expiry 2. we could have more meaningful message like "expiry must be minimum 1 second to maximum " + timeunit.seconds.todays(default_expiry_time) + " days"
Candidate: why do we need the <UNK> here?
Reference: why this is need? what is the difference with (!flushcount.compareandset(flushcountbeforeread, 0)) interrupt() below?
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: should this be just a regular counter?
Candidate: we should need to use the for the <UNK> <UNK> we don't need to do we need need to restrict the to <UNK>
Reference: you don't need to fill the body of that method, you just need it to use it as lambda.
Candidate: why do we need the lock again?
Reference: nocloneclones sounds a little weird. just name it inputnoclone.
Candidate: this is expecting the input <UNK> is expecting the input is combinations of expecting the combinations of the input is expecting the combinations of the input. please please expecting the
Reference: please add dot at the end of this message, as well as at other similar messages that lack dots at the end
Candidate: why do this change?
Reference: please use a method like createanchorfile and createyearfile
Candidate: typo: -> getcredentials
Reference: i'm new to elide, but would i be right in thinking that it only supports one dialect.. so for users that want to use the legacy dialect, then the rsql
Candidate: can you move this into the foreach method?
Reference: unnecessary parens around return value.
Candidate: i don't think we need to synchronize on the <UNK> side, <UNK> userreportingsettingshelper
Reference: an assign expressions requires a variable to store the value. so the first children will be an ident for sure.
Candidate: please use <UNK>
Reference: should be named ignored to satisfy the "log or throw but not both nor neither, or express decision to omit handling" rule
Candidate: should we throw an exception here instead of returning null?
Reference: you can change this condition to student.isregistered().
Candidate: can we be an exception here?
Reference: is there a reason you cannot use collections.emptylist()?
Candidate: use collections.emptylist()
Reference: shouldn't this be finalize() instead?
Candidate: why do we need the <UNK> here?
Reference: is it really only the route /api/*? could it be as well /foo/*?
Candidate: why do we need the <UNK> here?
Reference: remove this. should be caught by table.remove()
Candidate: why do we need the <UNK> here?
Reference: maybe we can combine two if clause together?
Candidate: why do we need to use the <UNK> here?
Reference: you should use eq(state.leader) instead of the direct value
Candidate: please remove the method("post")
Reference: here we should just throw the exception.
Candidate: can we throw an exception?
Reference: should be reversed: ranger_user_sync_role_type.equals(apirole.gettype())
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: in general, we statically import math.min.
Candidate: why do we need to check for the <UNK> ?
Reference: here i'd assume we'd either call super.tostring() or throw illegalstateexception since it cannot happen.
Candidate: can we use the <UNK> id here?
Reference: shouldn't maxblockid = min_block_id + num_total_blocks -1?
Candidate: can we use the <UNK> <UNK> <UNK> <UNK>
Reference: undo
Candidate: please remove the <UNK>
Reference: did you take a look at this? <link_0>
Candidate: this fail()?
Reference: does archivename here include the path?
Candidate: why do we need the getconnection here?
Reference: here we use it as the same key as we use to create the freviewlist
Candidate: this should be the <UNK> via:  <UNK> <UNK> <UNK> <UNK> <UNK> { <UNK> } <UNK> } <UNK> } <UNK> } } }
Reference: you should be validating here ^ that either id or name is provided
Candidate: this should be null if <UNK> != null && <UNK> { <UNK> }
Reference: returning from the method early if a condition is not met makes reading your code a lot easier. java if (modifierstoken == null) { return; } if (!modifierstoken.branchcontains(tokentypes.literal_public) && !modifierstoken.branchcontains(tokentypes.literal_protected))
Candidate: why do we need to use the <UNK> here?
Reference: mike pointed out to me that this is the wrong thing.
Candidate: can we use <UNK> <UNK> <UNK>
Reference: !this.closestreamaftersend || this.issingleuse ?
Candidate: should we be the <UNK> here?
Reference: this seems a strange way to check if the state is read-only mode. i wouldn't have guess it from looking at the variable name.
Candidate: <UNK> *= 2;
Reference: suggestion throw new unsupportedoperationexception("removenotificationlistener not supported by jolokia");
Candidate: should this be <UNK>
Reference: @ivange94 i dont think we should catch that. you need to make sure that this mrrtreporttemplate = mrrtreporttemplateservice.getmrrtreporttemplatebyuuid(templateid); so add this before the try block  java mrrtreporttemplate = mrrtreporttemplateservice.getmrrtreporttemplatebyuuid(templateid);
Candidate: why do we eating the exception here?
Reference: also please reverse this one
Candidate: do we need to check if <UNK> != null) || <UNK> || <UNK> || <UNK> { <UNK> }
Reference: typo
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: i would prefer to make the prepare exception the cause and the rollback exception suppressed. i'd also rename innert to rollbackthrowable and t to preparethrowable.
Candidate: why do we need to the expectations
Reference: please use { ... } - this increases code readability.
Candidate: please use <UNK> <UNK> <UNK>
Reference: that method became quite long. the two cases it handles are good candidates for extracting two methods.
Candidate: if you is a <UNK> of <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: what guarantees (here and in the other equivalent method for straight line) that the current stroke is the right color and thickness?
Candidate: why do we need to use <UNK> here?
Reference: you can create method integerrange(int min, int max) that create the range and doesn't pollute the test with unnecessary code.
Candidate: should this be <UNK>
Reference: i think catching the exception here and enriching it is too specific. that way we will leave all other places where this can occur out. i believe that a better
Candidate: add a element
Reference: latch
Candidate: why do we need to clients?
Reference: a batch can be large and any command tostring is long due to having 2 sha-1s and a ref name. it might make more sense to format with lfs: r.append(getclass().getsimplename()).append('[');
Candidate: can we make this private?
Reference: so the test will pass in case of ioexception. is this desirable?
Candidate: why do we need to here?
Reference: why this method is not static? just like convert()?
Candidate: let's remove the transactions per line
Reference: typo: nto -> not minor: can you re-format the line in intellij?
Candidate: why do we need this?
Reference: getnameconstantoperand().equals("getpackagename().equalsignorecase") this will not work. when looking at the operation invokevirtual, there can only be one method being called at the time. getnameconstantoperand().equals("equalsignorecase")
Candidate: why do we need to check for the <UNK>
Reference: use mathutil.clamp
Candidate: i don't understand this matters, this matters, but this is interfere with the <UNK>
Reference: why it's appended to the beginning?
Candidate: this should be the <UNK>
Reference: i feel like it might make more sense to use a instanceof check here rather than caching the classcastexception. this means we don't get warnings if we're using the fragment
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: this implementation forces single events to be submitted. i believe other sdks allow _multiple_ events to be submitted using their submit methods. i would check to make sure the semantics
Candidate: why do we need to here?
Reference: null doesn't seem to be proper value for maximised window, can you return calculated real dimensions? or at least information that it is maximised window?
Candidate: should we be the <UNK> here?
Reference: thanks @phillips1021!ccould the change also be pushed to github?
Candidate: can you combine this into the <UNK> clause.
Reference: 1. it will, you'll know which line was broken, 2. you can add a message to asserttrue()
Candidate: should we be the if the is null? if we { null) { return; }
Reference: i think the changes in this file are not needed. probably come from merge?
Candidate: should this be null?
Reference: i think this needs to be a protected localization call with an english fallback. localization might be broken if the app install is broken.
Candidate: why do we need need to the <UNK> here?
Reference: you should be calling 'addlinks(populate(' on the entity you're adding, otherwise it won't have any links and won't call dopopulate() when all-content header on the request path.
Candidate: please use <UNK>
Reference: probably not part of this patch, but imho, we should be pessimistic and use math.ceil and not math.round
Candidate: this should be repelaced on the <UNK> userreportingsettingshelper
Reference: as far as i remember, returning a map was causing errors for swagger api client generator.
Candidate: should be be null ?
Reference: do all versions of ps support these options? just wondering since this monitor will only work on linux.
Candidate: should we log the exception?
Reference: ugly unconditional type casting, i think it would be significantly better if we could check instance type here and throw warning/error/exception if that does not suit our logic instead of
Candidate: i don't understand why, but it matters, but it seems to me to do, but i am expecting that the <UNK> is the
Reference: yes please add a new error code, like permission_not_granted_manifest_error and maybe differentiate the error text between the audio and video case.
Candidate: should we be <UNK> here?
Reference: could be final as well
Candidate: why do we need to use <UNK> here?
Reference: mentioned earlier, it should be some sort of conc. map
Candidate: i don't think we need to check if the is is the
Reference: styling : this can maybe be expressed nicely using streams classsymbol.membersymbols().stream().filter(...).map( ms-> ms.declaration()).filter(..).foreach( //build cfg lva etc);
Candidate: remove this line
Reference: can we just initialize these to the config objects default values in the baseclass and avoid these protections?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: if that's the right fix then the method name is very wrong.
Candidate: should this be <UNK>
Reference: use logger instead for sysout for logging.
Candidate: why do we need the <UNK> here?
Reference: this pattern of code from lines 25:34 appears in several places. i'm going to open an issue to factor this out as a separate method. (that doesn't need to be
Candidate: i don't think we need to check if (state { <UNK> } <UNK> { <UNK> }
Reference: use the root controlmapper instead
Candidate: why do we need to check the <UNK> <UNK>
Reference: lets populate the swagger def from here . this would prevent unnecessary calls
Candidate: warn error.
Reference: too smart :)
Candidate: why do we need to use <UNK> here?
Reference: else not needed here.
Candidate: can be replaced with <UNK>
Reference: 100 chars
Candidate: please use <UNK>
Reference: you should not need to go through getsemanticmodel but you can use directly the getsymbol from methodinvocationtreeimpl (and even the upcoming symbol() method from the interface).
Candidate: no need to cover jdk jdk jdk jdk jdk jdk 1.6 jdk jdk jdk 1.6 jdk jdk 1.6 jdk jdk jdk 1.6 jdk jdk 1.6 jdk jdk jdk 1.6 jdk
Reference: tests should have realistic values: payment amount = -notional \* quantity \* 0.99 or something similar.
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: feel free to change any of these to lambdas too. much of this is pre-java8 code which is why there are callables/runnables all over
Candidate: can be replaced with <UNK> <UNK>
Reference: the two lines are too long... line breaks can be appropriate.
Candidate: i don't think we need to check for the <UNK>
Reference: it should return canopenstate, not enum
Candidate: the syserr should be be the <UNK>
Reference: (minor) could import static org.junit.assert.* to remove clutter and minimize diff
Candidate: this should be the fixture.
Reference: we do not need to create string resources (that will be automatically translated) to log something, you can include the string itself here.
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: i think it's better:  goassignmentstatement assignment = psitreeutil.getnonstrictparentoftype(element, goassignmentstatement.class); return assignment != null && assignment.isvalid() && isassignmentequalssized(assignment) ? assignment : null;  please, use lambdas if it give some
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: should this constructor be protected?
Candidate: please use gender here
Reference: in hind sight we should use a constant here to avoid allocation on each call.
Candidate: why do we need the <UNK> here?
Reference: in order to authenticate requests to amazon when locking down the security on our domain, we will need to be able to add on an authentication header which is a
Candidate: i inspections inspections sure nervous throwable inspections throwable t);
Reference: can we keep the original constructor spliceschemawatcher(string schemaname and let it call spliceschemawatcher(null, schemaname)? maybe we can avoid touching so many its.
Candidate: should be be null?
Reference: perhaps we should guard against getting back null, so can throw exception with the missing name rather than just an npe.
Candidate: why do we need the <UNK> here?
Reference: change to interface list
Candidate: please use syserr
Reference: why do you cast to hostproviderproxy?
Candidate: you can use the <UNK> <UNK>
Reference: minor - you could use foreach to iterate over the map. this makes it much easier, especially in this case where you can even use a method reference instead of
Candidate: i don't understand this matters, if we matters, but it matters, this is is to the <UNK> the <UNK> is the
Reference: can we reference this 500 constant somewhere?
Candidate: is this empty?
Reference: nit: truncate should be faster than delete <link_0>
Candidate: the syserr should be be the
Reference: could we please split this into two lines to avoid so long lines in code? java final double columnxcoordinate = rendererhelper.getcolumnoffset(this) + this.getwidth() / 2; final basegridrendererhelper.columninformation ci = rendererhelper.getcolumninformation(columnxcoordinate);
Candidate: why do we need to check for the <UNK> ?
Reference: you can eliminate these ifs by using string.valueof() below. using string.valueof() where tostring() is used is a nice approach in general, in that it works on objects and scalars alike.
Candidate: this should be null if <UNK> == null) { return; } <UNK> } } } } } }
Reference: ... should **decrease**
Candidate: you can remove the unused line.
Reference: please considert moving this to line 421, and change this to positive condition
Candidate: i don't understand why, but it is be the if the is is the
Reference: regular return is missing
Candidate: if (state != null && adsize == null) { <UNK> = null; }
Reference: rename to now.datetime.sessions?
Candidate: why do we need need to be the <UNK> here?
Reference: debug system out should be removed.
Candidate: why do we need to here?
Reference: remove type casts
Candidate: this is be <UNK> to <UNK> the <UNK> of the <UNK>
Reference: there should be brackets on the preceding while in order to make clear that the new code is intended to not be part of the loop.
Candidate: this should be the <UNK>
Reference: should we use "last index of" or really the first one? here i come up with a question: if i have multiple audio sinks, the one supports mp3 streams, the
Candidate: i don't understand why, but it is be good to do, but it should be the
Reference: what if the nic is null ?
Candidate: do we need to info level here?
Reference: now that project related code has been checked in, can you check if project can be fetched dynamically?
Candidate: should we use the exception here?
Reference: so, you're silently ignoring the requested cachename here? that's not correct. jcache cachemanager seems to support multiple caches.
Candidate: can be replaced with <UNK> ?
Reference: 1. whatever this pattern is (see next item), should be a static, ideally; regexes are relatively expensive. 2. i feel this regex is more complicated than need be -- you're
Candidate: should we use the <UNK> here?
Reference: i know some tools suggest to remove the throws numberformatexception because it's a runtime exception, but this is wrong, it's part of the contract of the method so should be
Candidate: can you move this logic into the loop?
Reference: nullargumentfinder is redundant with the config property arguments.getuntypednullargument(). this config property exists because types.other is not supported by all database vendors. some vendors use types.null (even though null constant is
Candidate: can we use the <UNK> here?
Reference: nit: restapimanager.java has these the in the opposite order. should we make these the same order for consistency? "video,discussion"
Candidate: can be replaced with <UNK> ?
Reference: avoid contractions in error messages
Candidate: i don't think we need to check if the is is the
Reference: throw new unsupportedoperationexception("not supported");
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: why would an empty key be present?
Candidate: why do we need to <UNK> the <UNK> <UNK> <UNK>
Reference: if you passed the issam() method, then it means that the member is necessarily a methodtree. from my point of view, you then don't need to check if it is
Candidate: should we move this to call the <UNK>
Reference: you can do collections.emptymap() instead of creating a new object, unless you're planning to add stuff to the map later. the tiniest of micro-optimizations. :)
Candidate: why do you need a <UNK>
Reference: a method could be introduced to encapsulate repartitioning condition e.g. shouldrepartition(...).
Candidate: why do we need to <UNK> eq here?
Reference: in theory, this is not the jmscorrelationid. the jmsmessagereader generates a new correlationid if none is received via jms. so it is more the scout correlation id.
Candidate: why do we need to clients?
Reference: i thought it nicer to catch it early instead of letting it fail later in some ordering or such. but we can throw a npe instead yeah.
Candidate: let's use <UNK> <UNK>
Reference: the user is trying to access a partition that was not requested. i think we could raise illegalargumentexception directly to the user.
Candidate: please use <UNK>
Reference: this particular bit of loading data can be moved to a separate method, perhaps.
Candidate: ![major](<link_0> 'severity: major') remove this unused method. [![rule](<link_1>](<link_2>
Reference: compare concepts and not conceptids
Candidate: why do we need to the the payload?
Reference: seems like this belongs elsewhere (like maybe in the compiler constructor).
Candidate: why do we need the <UNK> here?
Reference: i'd rather use the same package name as the class to keep the resources in, i.e.: org/biojava/nbio/core/sequence/loader
Candidate: why do we need to here?
Reference: please use a constant for "_original_"
Candidate:
Reference: although currently only virtio is allowed, i think its better to set this from the disk rather than hardcoding it
Candidate: can be simplified to <UNK>
Reference: this doesn't seem right either. consider a source that emits application/json - if the target module supports all, he should get the json, not some object that was decoded from
Candidate: can you use the <UNK>
Reference: why was this swapped from .equals? that makes no sense for a string comparison. also a few other weird formatting changes in this file.
Candidate: i don't think we need the getconnection in the <UNK>
Reference: you're assuming here that at least one gist exists in the account. this assumption is rather fragile. how about creating a new gist in @before annotated method and remove it
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: is this if() needed?
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: nit: i think it would be better to put this and the other methods you added below to after reduce, since merge() and reduce() are very related to each other,
Candidate: can be simplified to <UNK> <UNK> ?
Reference: why not make a new abstracttask constructor that takes a task id and task group, and sets the availability group equal to the task id?
Candidate: should this be <UNK>
Reference: here, after success ',' is not followed by whitespace
Candidate: can we make this private?
Reference: since we create the vectors above from its components, we could just use those directly in the constructor
Candidate: you can use <UNK> <UNK> <UNK>
Reference: another case or just returning the conditional
Candidate: this this repelaced e1 && <UNK> { return false; }
Reference: i don't think this is a valid email address.
Candidate: why do we need this?
Reference: instead of creating a new optional you could return the same one removed: instanceplan.
Candidate: this should be the <UNK>
Reference: this stuff is all just lifted out of hellbender. i was just kind of assuming it's functioning as expected...
Candidate: do you need to use <UNK> <UNK> <UNK> <UNK>
Reference: - this statement could be removed (treecontext is already initialised). - there are some mixed indentation chars.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: make row(...) a single line
Candidate: i don't understand why, but it matters, what is it is the to the <UNK> <UNK> the <UNK> is the
Reference: separator, same for next change
Candidate: please import?
Reference: the joiner can be shared (private static final?).
Candidate: why do we need to use the clients?
Reference: same suggestion as above about using the remove() function to instantiate the local updatehandler variable.
Candidate: why do we need the <UNK> here?
Reference: i'm all for useful logging
Candidate: why do we need need to evict the <UNK> <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: since this is removed, see if you can make the fields createdat and updatedat private instead.
Candidate: why do we need need to @test(expected = <UNK> ?
Reference: there is no lock here, you might check mlistener, but it might get set to null before you access onsuccess. seems like a race?
Candidate: use <UNK>
Reference: what if object will be null ?
Candidate: should we use the <UNK> here?
Reference: may be one line?
Candidate: why do we need to use <UNK> here?
Reference: again, unnecessary double-retrieval.  scope = mgr.active(); if (scope == null) throw emptystackexception; span = scope.span(); scope.close(); return span;
Candidate: i don't think we need to do we need need to do we need need to do we need need to do we need need to do we need to
Reference: we probably need to check that we have authenticated safely. otherwise if we get a invalid sequence number and need to resync, then a success after, we would transition straight
Candidate: should this be the <UNK>
Reference: perhaps you should send events instead of booleans for these two buttons. this also makes your code simpler - you can just do igneous.joystick1.getbuttonsource(button) and it'll give you an eventinput
Candidate: this should be the <UNK>
Reference: i don't think inputstream can be null here.
Candidate: ![major](<link_0> 'severity: major') invoke method(s) conditionally. 'severity: major') invoke conditionally. [![rule](<link_1>](<link_2>
Reference: isn't the iconxxx style in a resource file? if so you should reference that instead.
Candidate: why do we need the <UNK> here?
Reference: you could use org.kie.workbench.common.stunner.core.util.stringutils.nonempty(..) (but how was you to know!?!)
Candidate: should this be <UNK>
Reference: the real question is: how can we have a tab in the ui but no entry in nametochattabcontroller? that should not be possible, so here we're just concealing a bug.
Candidate: should this be <UNK>
Reference: why is this public all of a sudden? i find no code calling this outside of the class, in the platform ui repo? maybe some previous version of the change
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: you don't need to set the initial value, .orelse("") will take care of that. also, i think you can simplify the logic by filtering lines that match either ae_experiment_display_name or
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: wouldn't assert.hastext() be more appropriate?
Candidate: why do we need to here?
Reference: why not using this http_prefix variable?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: what if the scan's filter is a filterlist that contains a pagedfilter?
Candidate: this this repelaced e1 is the <UNK>
Reference: we want to avoid using platformui.getworkbench() at (almost) all costs. we should instead use the contextmodel, just in case we're making multiple modifications.
Candidate: why do we need to check for the <UNK> <UNK>
Reference: nit: tip: if i were you i would keep the order of the if conditions the same. that way it's easier to review code with less diff. what i mean
Candidate: @unyoungwax, do you need to check for the <UNK>
Reference: this method should be called sendreport, since the current name implies that an error report is being sent which is not the case
Candidate: the syserr should be be the
Reference: wouldn't it make more sense to have this in the setters? sorry for being a pain. i think we are almost there.
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: loggers should be sanitized.
Candidate: i don't think we need to throw an exception?
Reference: ph > pagehelper?
Candidate: this should be the <UNK>
Reference: this needs to return responsesobject (converted to map) or responses depending on null status of the two. see how this is achieved for responseschema and schema in response
Candidate: please use fail(); here instead of <UNK>
Reference: i don't think it's required.
Candidate: this fail()?
Reference: no need to do this every time, just make a field in the constructor.
Candidate: why do we need need to the <UNK>
Reference: in order to have consistent behaviour, if there is an empty result, we should return a 204 no content response instead of an empty 200 ok.
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: use enum instead of boolean
Candidate: this don't need to check the <UNK>
Reference: shouldn't the timeoutexception be eliminated by the previous commit? if instead this is a real timeout, i don't think we should change the exception - availability exceptions should be immediate,
Candidate: why do we need need to here?
Reference: we decided that seats are linked to tickets. how would this work if 1 user has multiple tickets?
Candidate: why do we need to check the <UNK> <UNK> <UNK> ? <UNK> : <UNK> ? thanks!
Reference: not sure this query is required. because task definition names are unique in dataflow. in this case we may want to throw a taskqueryparamexception (a new type of exception) stating
Candidate: why do we need need to the <UNK> here?
Reference: we usually static import these sorts of things
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: v1, not v1beta1?
Candidate: why did you changes?
Reference: not necessary.
Candidate: this should be <UNK>
Reference: is this related to this jira?
Candidate: why do we need the <UNK> here?
Reference: this won't work. the map#addall method on a properties object does not pull over defaults that were defined in the properties object being added.
Candidate: i don't think we need to do we need need to evict the to the the <UNK> <UNK> the <UNK> <UNK>
Reference: can combine 2 lines above and use constructor which receives disk-id
Candidate: can we use the <UNK> here?
Reference: we should not catch exception into the resource, we should let the exception go up to be handling by the mappers class.
Candidate: can you use <UNK> <UNK>
Reference: should we throw new unsupportedoperationexception(); here the same as in unsureresponse as it should never be called?
Candidate: this should be <UNK>
Reference: props are always != null
Candidate: should we be the getconnection here?
Reference: missing null check
Candidate: this should be setemptyelement().
Reference: we should use link reference provided by server-side
Candidate: can you be simplified to <UNK> <UNK> ?
Reference: create a variable for the third parameter to understand what's going on boolean addpublishpermsforrules = true;
Candidate: this should be <UNK>
Reference: usually errors are logged with the following pattern  logger.error("error while parsing diagnostics", e)  any reason we are doing something else?
Candidate: can we use the syserr
Reference: i'd love to see some docs on the scope of the apprunner - currently, apprunner.run(app) allows for multiple applications to be run with the same instance of the runner (atleast
Candidate: why do we need to use <UNK> here?
Reference: you can use the @in'ed entitymanager here. (and @in the prefabmanager)
Candidate: rename to <UNK> <UNK> <UNK>
Reference: we're getting long enough here that i'd be tempted by a small builder, particularly as it's pretty easy to switch revpos and seq by accident in java's world of unnamed
Candidate: please use <UNK>
Reference: lets keep this simple, put here "/bin/chmod" or just "chmod" and don't try to check if the file exists. if it doesn't the execution will fail and you will get
Candidate: do we want to polling polling polling polling polling <UNK> polling polling polling polling polling polling <UNK> polling polling polling polling polling <UNK> polling polling polling polling polling polling polling
Reference: will we use a different configmap than this one for storing the completed checkpoint pointers? i no, then onmodified could also been called because we added a new checkpoint pointer.
Candidate: i don't understand this matters, if we matters, but if you do, but we don't want to check the the <UNK>
Reference: oops, missed that one! good catch
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: checking module states for  + server.getname() so progress/job name uses same wording
Candidate: wouldn't it be nice to do:  if <UNK> { if <UNK> { <UNK> <UNK> { <UNK> } <UNK> { <UNK> (long <UNK> { <UNK> { <UNK>
Reference: ~~how about using stream style like before? get recentlyusedagents as a stream and then, concat these all three streams and limit by agentcount.~~ now i understand what you expected. it's
Candidate: nicer: <UNK>
Reference: log a message describing what is being cancelled.
Candidate: if we is the software <UNK> <UNK> suppresses the exception if (state { <UNK> } }
Reference: can you collapse these conditional branches into a single boolean expression?
Candidate: if we != null && <UNK> { return false; } return false; }
Reference: missing indentation in this method.
Candidate: why do we need the <UNK> here?
Reference: that implies next can be called without preceding hasnext call, is that possible?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: shouldn't this be passing through the parameters 'timeout' and 'timeunit'?
Candidate: should we be the <UNK> here? if we { null) { return; } <UNK> } } } } } }
Reference: throwing unwrapped exceptions from another thread leads to weird stack traces. can we clone the exception here? it should still contain the original qosexception with the original thread's stack trace,
Candidate: why do we need need to the <UNK> here?
Reference: not used?
Candidate: please use syserr
Reference: can we refactor this, and the corresponding code block from the test cases, to a single static function that takes an inputstream and returns a string that is the formatted
Candidate: should be precise, we use the <UNK> here?
Reference: collections.unmodifiablemap?
Candidate: why do we need to permission?
Reference: as we come to unit term, we do not need to parse type name from file, lets just use name of the file.
Candidate: the syserr should be be <UNK>
Reference: we should have a better description here "a webapiskill that can be used to call a custom web api function.". "custom skillset" as a concept doesn't really make sense.
Candidate: should this be <UNK>
Reference: i think it would be simpler that we let the caller checking this dependency but not the record method. so just do if (statechange) {} if (datachange) {} if (sessionexpired)
Candidate: if the != null && <UNK> { <UNK> }
Reference: waitforelementclickable()
Candidate: should this be <UNK>
Reference: static import getdeserializerclassname
Candidate: please use <UNK> <UNK> <UNK>
Reference: before click wait for element clickable (ajax thing)
Candidate: should this be <UNK>
Reference: this should be java.nio.charset.standardcharsets#us_ascii
Candidate: this should be the <UNK>
Reference: what are our options here to factorize this code?
Candidate: please use <UNK>
Reference: try to rewrite to addedenvironmentvariables = new hashset<>(); without this and space in constructor.
Candidate: should we use the clients?
Reference: static import
Candidate: this blackhole blackhole blackhole blackhole to be the
Reference: you can just call optimize
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: i did not follow this change
Candidate: the syserr should be be the
Reference: nit: probably enough to just say cannot provide both refreshable and supplier of runtime config?
Candidate: why do we need need to be the <UNK>
Reference: externalize error message
Candidate: i don't understand this matters, if we matters, but we don't need to do we need need to check the <UNK>
Reference: @vilchik-elena the rspec (rightfully in my opinion) says: primary location on extra "(" and secondary location on extra ")". your location is the whole expression. this is too much, as
Candidate: the syserr should be be <UNK>
Reference: flip the arguments here, since for junit (unlike testng) the first argument should be the expected value, and the second the actual one.
Candidate: please remove the <UNK>
Reference: try to use integer.tohexstring with padding correction
Candidate: why do we need to use the <UNK> here?
Reference: similar situation as topology_ras_constraints. i would give the same recommendation.
Candidate: <UNK> *= 2;
Reference: here we catch the classcastexception to check whether the inpustream has implemented an bytebufferpositionedreadable interface ? i don't think it's a good way, because the catch{...} block need an full
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: reschedule another attempt? if the agent port is enabled, there is no valid use-case for the dead thread. it would also indicate that there is a pending problem if the
Candidate: we should need to use the <UNK> <UNK> <UNK>
Reference: missing checkvalidposition(positioncount, position); below?
Candidate: please use <UNK> <UNK> <UNK>
Reference: it's better to instantiate knownparams here, since we know exact size
Candidate: please use <UNK>
Reference: isnotempty to be safer?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: please remove either this call or the for call
Candidate: why do we need to check the <UNK> here?
Reference: should this be joining(", ") ?
Candidate: unsupportedoperationexception should be <UNK>
Reference: static import
Candidate: why do we need need to here?
Reference: why?
Candidate: i don't think we need to check the the <UNK> the the <UNK> is the
Reference: rename 'viewpart'
Candidate: can we be simplified to <UNK>
Reference: nit: i'd personally prefer a private static inner class over an anonymous one.
Candidate: this should be the <UNK>
Reference: [minor] space after exception
Candidate: should this be <UNK>
Reference: we should probably just use a try with resources here. at a minimum we'd need the close in a finally block. something like  public static boolean haslogmessage(string logfilename, string
Candidate: why do we need to use the <UNK> here?
Reference: let's rewrite these tests with java 8 love like in throwables_asserthasmessagenotcontaining_test. should_fail_if_actual_has_a_message_containing_some_of_the_given_strings: java import static org.assertj.core.util.assertionsutil.expectassertionerror; // given assertioninfo info = someinfo(); string content = "expected description part"; // when
Candidate: why do we need to use the <UNK> here?
Reference: i think this should go above the addjsfapi call. if it's going to fail, fail promptly.
Candidate: hi, you don't need to downloaded at least downloaded at "equals" vs "equals" vs <UNK> vs "equals" vs "equals" vs "equals" vs "equals" vs <UNK> vs "equals" vs "equals" vs
Reference: ok. something for a follow-up commit: add preference where the user can switch off being shown that dialog.
Candidate: i don't think we need to throw an exception
Reference: can this be put into a function to avoid repeated code?
Candidate: can we use the builder instead of construction.
Reference: typo in error :)
Candidate: should we be the <UNK> properties?
Reference: this can be combined with the above if since both blocks return false.
Candidate: this should be the <UNK>
Reference: why aren't you using the overload with 2 params that you added that does the null thing already?
Candidate: i don't think this is is the the <UNK> <UNK> the <UNK> is the <UNK> <UNK>
Reference: to follow spring security conventions, please change raw password to match the variable name of rawpassword.
Candidate: this eating the exception inspections we don't want to catch exceptions.
Reference: i would include timeslice and job in the log statement to provide as much info as possible.
Candidate: why do we need need to create a local node node node node node node node node node node node node node node node node node node node node node
Reference: this else is not needed.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: suggestion set<string> capabilitynames = capabilities.getcapabilitynames();
Candidate: this should be the <UNK>
Reference: the existing error message does not match this new exception.
Candidate: do we need to catch <UNK> <UNK> <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK>
Reference: if we directly print a runtime exception, we're not giving the user any information about where the program went wrong (only what went wrong). by here, i think this should
Candidate: can you use <UNK> <UNK> <UNK>
Reference: maybe we could even simplify into one catch block, because irserrorexception is indirect child of runtimeexception: } catch (runtimeexception ex) { logfailuremessage("resourcemanager::refreshvdsruntimeinfo:", ex); log.debug("exception", ex); }
Candidate: i don't understand what happens if the overflows? what happens if the != null ?
Reference: the synchronized can be removed.
Candidate: i don't think we need to check if the == null) { return <UNK> } } } } } } } }
Reference: probably the following java preconditions.checkstate(updatesenabled, "cannot make updates after calling mutate."); mutation.putdelete(tabletssection.bulkfilecolumnfamily.name, bulkref.meta());
Candidate: should this be <UNK>
Reference: if final can stay, then it's preferable.
Candidate: what is this happen if <UNK> is the <UNK> <UNK>
Reference: spell out ret
Candidate: this should be the streaming param.
Reference: _ prefix is not necessary.
Candidate: should we be happen?
Reference: if the user supplies a value x < integer.min_value || x > integer.max_value you're going to default; however it could lead the user to be confused as to why the
Candidate: should we use the exception here?
Reference: wait file.separator should only be used if this is a file path, not if its an attribute tree path...
Candidate: nit: you can use <UNK> <UNK>
Reference: createurl accepts a lot of parameters. for a better readability please use local variables to name them, e.g.: createurl(spacename, docname, action, querystring, anchor, wikiname, context)
Candidate: please use <UNK>
Reference: no need to change this.
Candidate: this should be <UNK>
Reference: not sure if this is still needed.
Candidate: can we use <UNK> to arraylist?
Reference: it looks like the progress bar is hidden from the onfinally() callback of task, which is called _after_ onsuccess(), thus causing it to be potentially hidden immediately after it has
Candidate: the syserr should be injected, so we don't need to use the <UNK> <UNK>
Reference: missing a newline here
Candidate: i don't think we need to throw an exception
Reference: it looks strange to me that the ui / client know which should be the sequenceid of the new bitstream
Candidate: do we need to <UNK> <UNK> <UNK>
Reference: line too long
Candidate: rename to <UNK> <UNK>
Reference: why static?
Candidate: i don't need to check if <UNK> != null && <UNK> && <UNK> { <UNK> }
Reference: should that be guarded with an if(trace_enabeld) ?
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: you already have a reference to router!
Candidate: please use <UNK>
Reference: why do u need to handle set and reset seperatly. just loop over all all the configs, if the reset flag is set, then add it to reset list and
Candidate: why do we need this?
Reference: this code fills the nulldatum to values array of lazytuple when user does not insert any data on this index. however, vtuple class does not initialize the values array on
Candidate: the syserr should be replaced by <UNK> <UNK> <UNK>
Reference: little space missing here ;)
Candidate: please use <UNK> <UNK> <UNK>
Reference: remove
Candidate: the syserr should be null?
Reference: this would break internal li. just to keep in mind.
Candidate: why do we need to use <UNK> here?
Reference: do you need to set the study's project before saving?
Candidate: what about the the project name of the <UNK> is the <UNK> <UNK>
Reference: check is not needed. why not simply assign it?
Candidate: please use syserr
Reference: this is effectively final class, so just throw new unsupportedoperationexception()
Candidate: we should need to check the <UNK>
Reference: don't store selectedexperssion as a global variable. retrieve it inside the method.
Candidate: should we be <UNK> here?
Reference: missing assertion(s)?
Candidate: should we be <UNK> here?
Reference: why do you set property to the outer class field? please refer directly to isvoidcontext from inside the same object: java isvoidcontext = voidreturn;
Candidate: i don't understand this matters, this matters, this matters, but i think that this interfere with the previous one, but it will be easier to read if *both* <UNK> store,
Reference: getclusterid()
Candidate: can we use the <UNK> here?
Reference: yeah, we have an open todo to replace a number of guava things like propagate/optional in singularity. if we replace propagate usage @pschoenfelder can we do it throughout the whole
Candidate: should we print the stack trace to debug level?
Reference: this seems odd to me. shouldn't util.tojson throw an exception if it is unable to serialize to json?
Candidate: this should be the cheapest check)
Reference: bad variable declaration.
Candidate: the syserr should be used in the <UNK>
Reference: same note as in receive.
Candidate: should we be the <UNK> here? if we { null) { <UNK> groupname = <UNK> } { <UNK> }
Reference: this is a bit weird. why isn't this function in the inner class that uses it?
Candidate: you can use <UNK> <UNK>
Reference: mixed indentation chars. (there's an extra space after the equals.)
Candidate: please remove.
Reference: i do not think it is a right fix, because it would impact the xml loading from what i see
Candidate: <UNK> evidence, you can use the <UNK> <UNK> <UNK> <UNK>
Reference: the user may have selected a project. it seems to me like this check should also consider that?
Candidate: i don't think we need to check the if the is is the
Reference: i don't think this block of code is really doing anything? it looks like it is re-creating the timeseriesquery with the same limit that it already has.
Candidate: should we be schedule() here?
Reference: so if i understand this correctly, verifyuser is only triggered to load the verifiers? if so, i'd prefer to extract this block as a method and name it dummylogin or
Candidate: should this be the <UNK>
Reference: this will still result in a critical from sonarqube. to resolve this, you can use: logger.error("your custom message", e);
Candidate: h should be <UNK>
Reference: hmmm, we really shouldn't have to profilerate setcatalog calls out everywhere -- better to just to do a setcatalog on the connection once, after we check it out of the
Candidate: should we use the <UNK> here?
Reference: we should probably log a warn or error here if this actually happens, or even just fail.
Candidate: should we throw an exception here instead of returning null?
Reference: will this return a 500 if elastic search is not available? i believe that the strategy for tool refresh was that we would not kill the whole refresh if elastic
Candidate: do we need to log the here?
Reference: fyi, 2 can be replaced by componentcontainer.components_in_empty_component_container
Candidate: why do we need the <UNK> here?
Reference: it is not suggested putting multiple arguments in one line. split line for every argument
Candidate: you can use <UNK> <UNK> <UNK>
Reference: it should be separated asserts
Candidate: why do we need the <UNK> here?
Reference: this should use a specific locale.
Candidate: you can use a local variable
Reference: getlisteners() is already synchronized, why do you need to synchronized(this) too?
Candidate: this should be the <UNK>
Reference: fselectedthread is mutable and nullable, and this method is not synchronized, which means it could change after this check and still throw a npe. it should be extracted to local
Candidate: i don't think we need to check if the is is null.
Reference: this print is less relevant, although will do no harm. change it to: checking whether user {0} or groups {1} have action group {3} on object type {4}.
Candidate: should this be the <UNK>
Reference: why remove this?
Candidate: why do we need to use <UNK> here?
Reference: in my opinion we should handle exceptions from processing signals here, especially those that could be thrown from updating topic or subscription.
Candidate: why do we need the <UNK> here?
Reference: hmmm, this might be problematic in the future. if you start a cache manager and will be clustered, it needs to be amended via testcachemanagerfactory so that it uses different
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: shouldn't we disable only if engine has scheduled snapshots on volume?
Candidate: should we move this to debug level?
Reference: is normal to have a / ?
Candidate: please use <UNK>
Reference: can use parselocaldateforsessionsform here
Candidate: should we be stage stage that stage stage stage stage stage should be stage stage in the stage stage stage stage stage as opposed to stage stage stage stage stage
Reference: this used to work with jr refs that didn't point to files, we should probably have a fallback for what to do here when this doesn't point to a file
Candidate: i don't think we need to check the if (state != null) { <UNK> }
Reference: this line can be moved up to the @before method too.
Candidate: why do we need to use the here?
Reference: this will create 4 connections and not 3. you either init the index with 1 or use '<'
Candidate: why do we need the <UNK> here?
Reference: won't this throw a parser exception if the json is malformed?
Candidate: throws exception
Reference: linkedblockingqueues are synchronized, i don't understand the need of this notify call.
Candidate: if (state != null) { return null; }
Reference: that's not logic for this method. if we are here, we have to be already sure that it is our own group. the real problem is definitely in the forcereleasemessagegroupprocessor
Candidate: i don't think we need to use the <UNK>
Reference: this is probably used a lot, so it'd be better to have a static constant empty array.
Candidate: can we return the <UNK> <UNK> <UNK> ?
Reference: i think introducing .class constant and using entry.getname().length() - class.length would be more obvious at first sight.
Candidate: why do we need to use <UNK> here?
Reference: here we're just testing the same things twice, right?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: import immutablelist.builder
Candidate: can we use the <UNK> name)?
Reference: any reason not to use tritium for these? i guess we'd need to extract an interface for the client.. though at this point i'm pretty surprised we haven't decided to
Candidate: why do we need need to here?
Reference: why do we need to trim this? whatever is between < and > should be taken as-is as the email. do you have an example of a malformed commit where
Candidate: do we need to use the <UNK> <UNK> <UNK>
Reference: abstract classes should have either abstract or final methods, nothing in between (preferably). mark this method final.
Candidate: this should be <UNK>
Reference: should we combine that to checks into one using "and"? java if (configstr.startswith("{") && configstr.endswith("}")) { configstr = configstr.substring(1, configstr.length() - 1); }  i assume valid inputs are only
Candidate: why do we need the <UNK> here?
Reference: what happens when "m_committedbuffers.peek() == null"?
Candidate: i don't think we need to check if the is is the
Reference: double check that the group is still here
Candidate: double check that the group has been been anonymous anonymous anonymous anonymous anonymous anonymous anonymous anonymous anonymous anonymous anonymous
Reference: let's do split and trim, without regular expressions (first regular expressions are often error prone, second they might introduce security problems)
Candidate: this should be <UNK>
Reference: could we factor out the reflection? so we deal only with the value in here.
Candidate: please use <UNK>
Reference: i don't like we do this explicitly... it should be property of the data container at each relevant change or once when session is created or user is assigned.
Candidate: i am not seeing this piece of this piece of this piece of this piece of this piece of this piece of this piece of this piece of this piece
Reference: not backwards compatible.
Candidate: unsupportedoperationexception should throw unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception unsupportedoperationexception
Reference: we should log a warn if we are disabling a task
Candidate: why stepverifier we don't need to use the again?
Reference: ![major](<link_0> 'severity: major') extract this nested try block into a separate method. [![rule](<link_1>](<link_2>
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: i would save this expensive computation ie elapsedtime / 1000 to perform it just once and i would handle the case of stats == null with a log or something
Candidate: why do we need to use the <UNK> here?
Reference: can we make resourcename for all the states be same e.g. "config" instead of being specific as that requires the conditional and hardcoding of urls? i'm not sure if we
Candidate: i don't think we need to do we need need to do the getcredentials getcredentials getcredentials getcredentials
Reference: remotetimeout() is the correct one.
Candidate: why do we need the <UNK> here?
Reference: you can use activator.error to create an error status.
Candidate: can you use <UNK> <UNK> <UNK>
Reference: if you want to get a property's value, you can always use proxy.getproperty(name). so you don't need to add another private variable "showinfowindow" and method getshowinfowindow() in the annotationproxy.java.
Candidate: why do we need the <UNK> here?
Reference: isn't log file moved after sometime ? can we get that new path ?
Candidate: please remove the <UNK>
Reference: what's with the ugly arrow?
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: a simpler way to do this would be to make this just bool(state.get("scoreboard.officialscore") without the state. we can then filter out the clock changes if we want to.
Candidate: i don't understand this matters, if we matters, but i don't understand why, but it matters, but i don't understand why, but it matters, but i don't understand why, but
Reference: this probably wants to be a getsitevisit(string) call so that it checks permissions. technically if it's in the public list of sites then returning then it's ok to return the
Candidate: needed: ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
Reference: can collapse:  java // sort according to time collections.sort(events, (e1, e2) -> e1.getdate().compareto(e2.getdate())); // sort according to author collections.sort(events, (e1, e2) -> e1.getactor().getlogin().compareto(e2.getactor().getlogin()));
Candidate: feedid should be the feedid
Reference: q: if the record is out-of-order, shouldn't you put the value into the state store regardless of whether it is different from the old value or not? i think this
Candidate: <UNK> *= 2;
Reference: why is this field needed? can't clients just use the value of lower? i would expect all methods to do the right thing when passed a null type (that is,
Candidate: can we use the syserr
Reference: static import
Candidate: why do we need to <UNK> the <UNK> <UNK>
Reference: rename to reducedcountspseudoinverse
Candidate: google characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters characters
Reference: this can be byte[] lastarray = arrays.copyof(laststringarray, laststringarray.length + 32
Candidate: <UNK> *= 2;
Reference: can be java public seq<e> geterrors()
Candidate: can you use <UNK> <UNK> <UNK>
Reference: in classes that implement comparable it's preferable to implement equals() as this.compareto(that) == 0 after the initial type checks.
Candidate: please use object.equals <UNK> == <UNK> && (count == 0) { <UNK> == false; }
Reference: even though these two are "cmas severe alerts", shouldn't getcmasseverity() still return cmas_severity_extreme? spec says "severity of extreme, urgency of expected..."
Candidate: why do we need the <UNK> here?
Reference: why do we need this? is it necessary in test?
Candidate: this should be the fixture.
Reference: if we are using equalsignorecase everywhere, should we really change the data? there might be other reasons we are converting to lowercase.
Candidate: this should be <UNK>
Reference: unit test should verify that the constructed account contains the expected phone and the verified flags are set correctly.
Candidate: please use <UNK> <UNK> <UNK>
Reference: did you mean findfailedchildcommands ?
Candidate: the columns should be replaced by <UNK>
Reference: we can consolidate this with the logic below. something like this: scala if (remainingtosearch.isempty()) { return result; } else { client.awaitmetadataupdate(timer); }
Candidate: we should need to hide the <UNK> <UNK> <UNK> the <UNK> is the
Reference: should this just make a single call to coreutils?
Candidate: this should be <UNK>
Reference: using the internal resource [design_bottom_sheet from the material components library](<link_0> is very risky and considered an anti-pattern. we have no control over that library, which is actively being developed with
Candidate: why do we want to hide the <UNK> here?
Reference: is this going to add an authentication to the http client for each request? when do they get cleaned up?
Candidate: why do we need the <UNK> here?
Reference: use the %s feature of checkargument, to prevent concatenating strings unless it's really necessary. i.e.  checkargument(getconfig(source_sensor) instanceof attributesensor, "expected source_sensor to be attributesensor, found %s", getconfig(source_sensor));
Candidate: should this be <UNK>
Reference: needs some validation on the value itself. even if it is provided by our implementation, just defensively check the argument.
Candidate: should this be <UNK>
Reference: use parameterized logging instead of string concatenation.
Candidate: do we need need to use the <UNK>
Reference: this constructor can be package local since class is package local
Candidate: suggestion <UNK> <UNK> = <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: let's inline this: return dogetinputfieldsfrompmmlstream(modelinfo.getpmml());
Candidate: why do we need need to the the clients?
Reference: i don't see any reason to get the analyzer name from the propertymapping instead of passing it to the constructor directly. it just pollutes the propertymapping class with information that
Candidate: why do we need to call <UNK> here?
Reference: this is happening because we previously create a dataset with this namespace and name, but in the default hive database and we now need to move it to the database
Candidate: why do we need this?
Reference: preserves the original exception cause when rethrowing exception. also, better use throw throwables.propagate(e); in this case.
Candidate: the syserr should be the
Reference: please add access modifier, private probably?
Candidate: this should be <UNK>
Reference: can you add in creating a directory client and putting a file under it? that way we show all the basic client types.
Candidate: i map<> <UNK>
Reference: nit: this whole thing is hard to parse. consider rewriting with extracting some of the variables.  list<apiclustertemplateconfig> rangerconfigs = new arraylist<>(); final string rangerhdfsauditurl = configutils.getstoragelocationforserviceproperty(templatepreparationobject, ranger_hdfs_audit_url) .map(location ->
Candidate: can we make this private?
Reference: since there are two of these, an if-else would probably look cleaner.
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: not a deal breaker but line breaks should be present in long lines. for future reference
Candidate: why do we need need to the getcredentials here?
Reference: shouldn't we log anything bad that happens here?
Candidate: why do we need to <UNK> the <UNK> here?
Reference: see ctor of createviewandoptionallyelementcommand
Candidate: use <UNK> <UNK>
Reference: suggestion if (keyedstatebackend instanceof checkpointlistener) {  ditto.
Candidate: i don't think we need to use the <UNK> <UNK>
Reference: seems to fit on a single line?
Candidate: should we throw an exception here instead of returning null?
Reference: this change seems me too risky. it means there will be no effective compatibility version set during validate(). why do you need this?
Candidate: should this be be the <UNK> ?
Reference: i, j and s2? maybe usernameindex, executecount and currentarg?
Candidate: why do we need to wrap this on the <UNK> ?
Reference: or isnotempty()?
Candidate: should we use <UNK> id + " + <UNK> + " + <UNK> + " + <UNK> + " + <UNK> + <UNK> + " + <UNK> + <UNK> +
Reference: are you not using the eclipse formatter? the project owners are pretty strict about so changes are easier to track.
Candidate: why do we need to use <UNK> here?
Reference: are there other places where this confirmation will be called? if not, leave the label setting defined in hostrestartconfirmationpopupview.
Candidate: please use getconnection here instead of try{}
Reference: cannot remove this?
Candidate: if the is is empty?
Reference: i might use "travel time values" instead of "times". as written, it could seem like the error message is missing a word "must supply x expected number of times..."
Candidate: <UNK> *= 2;
Reference: - when user haven't made any selection, then 'pendingshowitem' might be null, so we should add a not null check in above if
Candidate: please use <UNK>
Reference: what does this snippet do?
Candidate: the syserr should be be the
Reference: style nit: missing braces
Candidate: please use reference reference reference constructor: <UNK> = <UNK>
Reference: perhaps this one line should be outside of the if a.size() == 1 since the attribute object can hold multiple values just fine.
Candidate: why do we need to the <UNK> here?
Reference: change to : java protected void closewatchrequest() { if (this.watchrequest == null) { return; } try{ watchcancelrequest watchcancelrequest = watchcancelrequest.newbuilder().setwatchid(watchid).build(); watchrequest cancelrequest = watchrequest.newbuilder() .setcancelrequest(watchcancelrequest).build(); watchrequest.onnext(cancelrequest); }finally { this.watchrequest.oncompleted(); this.watchrequest
Candidate: this should be the <UNK>
Reference: return optional.ofnullable(language.getfileextensions()).map(collection::stream).orelse(stream.empty()).anymatch(extension -> path.endswith(extension)); ?
Candidate: should this be <UNK>
Reference: please move these two "cleanup" statements before the "notresolving.signal()" within the finally clause.
Candidate: why do we need need to check the <UNK> here?
Reference: reservedforarchival here is same as this.reservedforarchival when init?
Candidate: use <UNK> instead of <UNK>
Reference: this breaks the replace untyped subapp with extracted type feature i recently did. i think the problem with my code is entry is null for update type and non null
Candidate: i don't need to check if <UNK> != null && <UNK> { <UNK> }
Reference: if we add || config.generatetreesamount == 0 here it can efficiently skip decorating trees
Candidate: can you use the <UNK> <UNK> <UNK>
Reference: correct to "all categories were clicked" not "was"
Candidate: why do we need the <UNK> here?
Reference: no need to specify types on rhs - i would fix this throughout this pr
Candidate: why do we need to check the <UNK> here?
Reference: do you need to add a space here?
Candidate: why do we need to use <UNK> here?
Reference: can we have a constant instead of 100
Candidate: this should be the <UNK>
Reference: i think this line should be  if (endpoint != null && this.getversion() >= 2) {  since individual command classes are only supported in version 2. it doesn't matter
Candidate: i don't think we need to hide the getconnection in the exception we don't want to log the exception in production.
Reference: clearly a details but why not ? java if (mode != null && mode.equals(dtlsendpointcontext.handshake_mode_none)) { // restore handshake-mode "none" followupendpointcontext = mapbasedendpointcontext.addentries(blockcontext, dtlsendpointcontext.key_handshake_mode, dtlsendpointcontext.handshake_mode_none); } else { followupendpointcontext = blockcontext;
Candidate: if <UNK> != null && <UNK> && <UNK> && <UNK> { <UNK> } else { <UNK> }
Reference: instead of spinning in loop we should use binarymetadatatransport::awaitmetadataupdate method and wait when metaholder.pendingversion is accepted by the cluster.
Candidate: bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad bad
Reference: reduce(mappartitions) is very often rdd.aggregate(), if we can reformulate this in the following terms, we get perf goodies like treeaggregate nearly for free:  def aggregate[u](zerovalue: u)(seqop: (u, t) 
Candidate: why do we need the <UNK> here?
Reference: null == adapter
Candidate: should we be schedule() here?
Reference: collections.<string> emptyset()
Candidate: this should be the <UNK> <UNK>
Reference: i would rather have single expected httpstatus here. we're testing query cancellation and we do not know what query cancellation rest api is supposed to return?
Candidate: do we want to use system.currenttimemillis() here?
Reference: this convert should do some logic (e.g. if the source is null than return emtpy list or something like this). here it would be enough just to "return source;" or
Candidate: <UNK> evidence, we can use <UNK> <UNK> <UNK>
Reference: can you import static assert?
Candidate: do we need to rollback here?
Reference: the throws part is still there. this part should not exist.
Candidate: why do we need the <UNK> here?
Reference: format this file. also looks like we can still use new arraylist<>(indextochunkids.values()), any specific reason to use indextochunkids.values().stream().collect(collectors.tolist()) here?
Candidate: you don't need to use <UNK> <UNK>
Reference: nit: consider now.truncatedto(chronounit.hours) instead.
Candidate: why do we need to check the <UNK> here?
Reference: here it seems that it would make more sense to merge the two  if (pair.length == 2)  into a single if statements:  if (pair.length == 2) {
Candidate: i don't think we need to evict the the <UNK> the the <UNK> is the
Reference: i had to add this; otherwise, the interface java files were just removed. methods in interfaces are public even if they are not marked as such. an interface could have
Candidate: this should be <UNK>
Reference: update the java docs to say this finds unused tasks. update the java doc to add an @returns as well, indicating that it returns a list of unused datastreamtasks
Candidate: use <UNK> objects.tostringhelper() names?
Reference: this if check isn't particularly useful.
Candidate: ![major](<link_0> 'severity: major') either remove or rethrow this exception. [![rule](<link_1>](<link_2>
Reference: i know this synchronization pattern was before the change, i'm just confused what it tries to accomplish? ie, if nobitmaprealtimeindex is not created then all threads can initialize nobitmaprealtimeindex simultaneously,
Candidate: i don't think we need to synchronize on the <UNK>
Reference: the status is supposed to be for human information, so using it for code logic is a bit dangerous. and i only see a setstatus("done"), not "done", which shows why
Candidate: we should need to throw an exception
Reference: why making it final?
Candidate: can you use <UNK> <UNK>
Reference: do you need to re-throw the same exception translateexception?
Candidate: you don't need to extend <UNK>
Reference: this test checks whether all diagnostics are expected. but it fails to check if diagnostics are missing
Candidate: use iu
Reference: actually the logcontext.logprefix() should have the format of stream-thread [%s] task [%s] already, so all the log4j entries are good. for exception messages, we can just get the prefix and
Candidate: use <UNK> byte[]>
Reference: if you think it is a good idea, we could have a similar 'ensure' method for usermetadata and the blob content for better readability here and below.
Candidate: do we need need to do the isdone() here?
Reference: suggestion return collections.emptylist();
Candidate: can we be an error?
Reference: this is a duplicated check, as this is only invoked after command.hasflows() is true, so not required to invoke it again. if you absolutely want this check, i'd opt for
Candidate: please move this to "else", the the code explained
Reference: needs to be "getlocalizedmessage()"
Candidate: should we use the exception here?
Reference: do we need to throw an exception here? silently dropping the volume may not be a good option.
Candidate: if (actual == null) { return; }
Reference: could use a lambda e -> performaction().
Candidate: i confusion: <UNK> <UNK> { return x; } around wrapblocking
Reference: are you trying to convert string to boolean here? there is a better way to do that.
Candidate: this should be the <UNK> <UNK>
Reference: why are we using hash code here? and it doesn't feel right to me to change the state of the object with the hash code like that. correct me if
Candidate: you can use the <UNK> <UNK> <UNK>
Reference: s/5.0/5.1/
Candidate: why do we need to check for the <UNK> <UNK>
Reference: better message i think is "error : trying to retrieve session from disconnected client." also should this beat warn level?
Candidate: i don't understand this matters, if we matters, but you don't need to check the <UNK> <UNK>
Reference: can we add some description? does deregister mean only deregister interest but keep it for as long as lease_duration expires or it means you revoke it right away?
Candidate: why do we need to the <UNK> here?
Reference: should it?
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: can't you use settings.sourceblock.contains(blockpresent)? then you can just use  if (!settings.sourceblock.contains(world.gettypeid(x + block.x, y + block.y, z + block.z)) {
Candidate: i don't understand this matters, if you matters, this matters, but this is is the <UNK> the <UNK> is the
Reference: i meant the block without the 'if', you already know the action type here :)
Candidate: if oldvalue is null, so we don't need need to check the if the is
Reference: if line 33 throws an error this line won't be reached. prior this pr that delete would always be executed in a finally block.
Candidate: i don't think we need to throw an exception
Reference: the cast is no longer needed
Candidate: i don't think we need to throw an exception for the situation.
Reference: you are not setting the endpoints for this client
Candidate: this should be the <UNK>
Reference: you can remove this log line or merge it into previous one, otherwise it will be difficult to comprehend when all these log lines are together.
Candidate: should we throw an exception here instead of the exception?
Reference: rather than hard-code currentplanproductid > plan.getproductid(), i think we should have a helper routine that checks if one plan is "greater" than another. we had this earlier on, and it
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: try-with-resources
Candidate: i don't think we need to do we need to check the getcredentials for the getcredentials
Reference: i think this still does not solve the problem we have. here is your impl of cfutils.alloforterminateexceptionally: java completablefuture<void> result = completablefuture.allof(futures); for (completablefuture<?> future : futures) { future.handle((res, ex)
Candidate: why do we need the getconnection here?
Reference: i think we should create a defensive copy of the map
Candidate: @since @since @since bean @since bean @since bean @since bean @since bean @since bean @since bean @since @since @since random @since @since @since @since @since @since @since @since @since @since
Reference: if this should happen once, maybe it belongs in the constructor (and bufferedreader can be final).
Candidate: please use <UNK> <UNK> <UNK> <UNK>
Reference: don't print the stack trace if you are going to rethrow as a cause
Candidate: can we make this private?
Reference: ranges.open(junostart, lunastart).contains(version) makes for more readable code. i'm not sure which of open(), closed(), opendclosed() etc. is needed here.
Candidate: i don't understand this matters, if we matters, this matters, but i don't understand this matters, if the matters, but it matters, but i don't understand this matters, this matters,
Reference: imho this error doesn't imply that null is returned... what's the end user supposed to do here?
Candidate: why do we need the <UNK> here?
Reference: can you make 0, 4 as static final variable? e.g. type_value_offset, version_offset
Candidate: why do we need to check for the <UNK> stuff?
Reference: this might be an opportunity to make the names for these more consistent: this uses handlefoo, other bits use onfoo.
Candidate: should be be <UNK>
Reference: could store database.getid() in a variable. also, some places below.
Candidate: why do we need to use the <UNK> here?
Reference: nitpick: the java language specification [says](<link_0> "it is customary, though not required" that the order of these class modifiers would be public static.
Candidate: the syserr should be be <UNK>
Reference: ok. i see where is the root of getrequiredtaskscheduler(). but a decision is the same: we always reuse taskscheduler from the application context.
Candidate: do we need need to hide the here?
Reference: this line does not need additional logic for the unsupporting languages. i've updated my patch to fix it. please try to rebase your patch, thanks!
Candidate: why do we need the <UNK> here?
Reference: missing braces
Candidate: why do we need need to <UNK> the <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK>
Reference: inline this, please. fqns are ugly
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: in this use case, we are defining default behavior for the user in the case of passing null. we don't know if a user wants true or false, but we're
Candidate: can we make this the specific?
Reference: wouldn't it be easier to leave the project method unchanged, and here just return: return project(mq, input, projects); ?
Candidate: <UNK> evidence, we can use the <UNK> <UNK> <UNK>
Reference: this changes the behavior to no longer notifying the player whose gamemode was set.
Candidate: why do we need to use the here?
Reference: running backgroundlocationmanagertest with coverage it doesn't look like this case gets hit by any of the tests
Candidate: why do we need to check for the <UNK> <UNK>
Reference: it was recommended to use the existing dgva branding, so these details should be converted into: * database of genomic variants archive rest web services api * the database of
Candidate: why do we need to <UNK> here?
Reference: agreed, this does look like a bug :)
Candidate: should we be the <UNK> here?
Reference: it would be clearer if "6" was replaced with epdqstatusmapper.epdq_authorised_cancelled
Candidate: please remove the <UNK>
Reference: formatting
Candidate: why do we need to check the <UNK> <UNK> <UNK>
Reference: this should be more "assertive"; throw an illegalargumentexception to break the app. this would be a programming error, not an error condition in runtime.
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: since this won't change i'd move the loading of this information into the constructor so you don't have to do file io every time this is called.
Candidate: this should be the <UNK>
Reference: please, indent wrapped lines with 8 additional spaces. don't align arguments, such alignment breaks code style checks.
Candidate: should we throw an exception
Reference: use lib.exceptiontostring(ex). ex.tostring doesn't work, i think
Candidate: why do we need the <UNK> here?
Reference: why this change on replaceunderscores? (sorry if you already explained it, i don't remember... )
Candidate: can we make this private?
Reference: need to use a reusable buffer.
Candidate: same: <UNK>
Reference: json can be final
Candidate: do we need need to log the first?
Reference: you shouldn't create another variable here named 'scq'. these methods you are calling change the internal state of the srampclientquery and then return "this" (aka a fluent api). in other
Candidate: i don't think we need to check for the <UNK> <UNK>
Reference: even though logic seems very straightforward and it no doubt works, it would still be nice to test with a non-checker workflow in the list as well.
Candidate: can you move this into a separate method?
Reference: how about simplifying this by just using a single if/else that uses the roottree if non-null and falls back to the working tree config if the roottree is null? then
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: >byte[] [](start = 11, length = 6) we're updating all methods to return a data structure rather than a simple type for forwards compat. this should return decryptresult which has
Candidate: why do we need the <UNK> here?
Reference: final
Candidate: why do we need to use <UNK> here?
Reference: what is this actually doing? why are you checking for the catalogedby annotation?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: the _param_recurse_ should be optional (as well _param_max_children_, btw)
Candidate: why do we need to evict the <UNK> here?
Reference: i'm ok with that
Candidate: please use <UNK> <UNK>
Reference: consolidate all active-standby lookups as a part of failovermetadata?
Candidate: we should need to do we need to check the <UNK> <UNK> the <UNK> <UNK> <UNK>
Reference: logging needs to be conditional on a debug option or removed.
Candidate: why do we need the <UNK> here?
Reference: normally we only use all caps for static values.
Candidate: can you use the getconnection in the <UNK>
Reference: iirc, this will be written (~)every second to the log while the vm is locked, this is too much.. maybe move to debug
Candidate: this is the cheapest check)
Reference: this looks like a brute force fix to me. note that the itemsmap is also filled in modelchanged, so you are now doing it several times. wouldn't the better place
Candidate: can be simplified to: if <UNK> == null) { return <UNK> } else { return <UNK> }
Reference: internal methods are still in use.
Candidate: why do we need to check the <UNK> here?
Reference: remove this variable and use ctl.getrefname() as the rest of this method is doing.
Candidate: why do we need to use <UNK> <UNK> <UNK>
Reference: this can be combined into one line.
Candidate: why do we need to check the <UNK> <UNK>
Reference: do not call this method here, call in method showloanaccounttemplate() in fragment
Candidate: don't use hardcoded strings.
Reference: do we need versions of this test that check the other endpoints in the chargesapiresource class (for there is a plethora)?
Candidate: why do we need this?
Reference: don't split the try block. most code should be inside the block
Candidate: should we be the getconnection payload?
Reference: missing return?
Candidate: this should be the <UNK>
Reference: i think the exception needs to be serialised and sent back from the server. it might not always be an ioexception. right?
Candidate: why do we need the <UNK> here?
Reference: you are using "coinmarketcap" prefix for coinexchangeratesource?
Candidate: why do we need this?
Reference: i believe this is not necessary. it's always the first character.
Candidate: feedid should be the feedid
Reference: @sebing spaces around :
Candidate: @exper0 let's use system.currenttimemillis()
Reference: maybe worth adding the pattern to util? public static <t> list<t> util.unmodifiablelist(t[] elems)
Candidate: should we be the specific?
Reference: i think its cleaner to do boolean.tostring(boolean.parseboolean(distribute)). that way, you're not having the string "true" in your code.
Candidate: please use <UNK>
Reference: i think it is better to use mac_pool_id here and avoid assigning to resource.guid later, that way this test won't need changing if resource.guid is changed or its visibility changed.
Candidate: please remove the <UNK>
Reference: use .startswith?
Candidate: why do we need need to the <UNK> here?
Reference: we should fail in all cases.
Candidate: use the syserr
Reference: change "so" to "and" probably (i think it sounds better)
Candidate: if (state != null && adsize == null) { <UNK> = null; }
Reference: suggestion assertthat(ldapuserdetails.getdn()).isequalto("uid=base64encoded-issue-1840,ou=users,dc=carlspring,dc=com"); assertthat(ldapuserdetails.getusername()).isequalto("base64encoded-issue-1840"); assertthat(ldapuserdetails.getpassword()).isequalto("{md5}5f4dcc3b5aa765d61d8327deb882cf99"); assertthat(passwordencoder.matches("password", ldapuserdetails.getpassword())).isequalto(true); assertthat(((list<simplegrantedauthority>) ldapuser.getauthorities())) .contains(new simplegrantedauthority(systemrole.repository_manager.name()), new simplegrantedauthority("user_role"));
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: unless i'm misunderstanding, i believe the schema can never be invalid at this point. in order to get here, all unique fields had to have been present when grouping, and
Candidate: you can use <UNK> <UNK> <UNK>
Reference: can you merge this else if and else parts into else if !
Candidate: please use <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> + <UNK> +
Reference: the loop and refresh is common code.
Candidate: do we need need to do we need need to do we need need to do we need need to do we need need to do we need need to
Reference: no double blanks
Candidate: <UNK> *= 2;
Reference: i'd inline this variable.
Candidate: can be simplified to <UNK> <UNK> <UNK>
Reference: i think i would name it asprojection(). otherwise, i would kinda expect the return type to be consistent when adding another projection to be returned. the methods have totally different
Candidate: why do we need the <UNK> here?
Reference: do we want to reporterror here?
Candidate: why do we need to here?
Reference: this should really be an online type test, e..g, it should be skipped, not fail, if the postgis.properties file is not there
Candidate: this try-with-resources
Reference: this is only safe when the selector has a 'real' dictionary, i.e. when selector.getvaluecardinality() does not return dimensionselector.cardinality_unknown. if it is unknown then the ids are not valid outside the
Candidate: why do we need need to the <UNK> here?
Reference: missing braces
Candidate: why do we need to <UNK> <UNK> <UNK>
Reference: @idelcano add curly brackets for this 'if' please. in general at brackets because they make things more clear but special here that we have a loop inside the if (not
Candidate: why do we need the <UNK> here?
Reference: probably this should be return nullhandling.replacewithdefault() ? false : doubles[index] == null.
Candidate: should this be null?
Reference: @jomarko if there is nothing preventing this, move all those "context.getscenariogridpanel().setfocus(true);" inside commonexecution
Candidate: why do we need to use the <UNK> here?
Reference: check if nativevideo is null. this can cause crashes.
Candidate: wait.forelementclickable() should be <UNK>
Reference: what's the point of catching and then throwing a wrapped exception - again, no additional context of info is provided.
Candidate: why do we need the <UNK> here?
Reference: we can add this when we have something to populate it with
Candidate: rename to iu
Reference: what else do we do with the hlls? could we exercise all that as well if it's easy?
Candidate: why do we need to mock <UNK> here?
Reference: please use the generics-friendly collections.emptylist()
Candidate: should this be <UNK>
Reference: aren't we already in gui thread?
Candidate: can we use the the ...?
Reference: use shellisavailable
Candidate: please use <UNK>
Reference: why do we need this change?
Candidate: should this be <UNK>
Reference: log man log!
Candidate: the syserr should be be called via:  public boolean <UNK> { <UNK> = <UNK> <UNK> <UNK> { <UNK> } <UNK> { <UNK> } <UNK> { <UNK> }
Reference: when you are using httpserveradapter, handlereceive implicitly parses the client address.
Candidate: please remove the <UNK>
Reference: the other place in this class where a domainexception is used could be replaced by this type
Candidate: we should need to do we need need to check the <UNK> the <UNK> <UNK>
Reference: please add uuid.randomuuid().tostring() here as well
Candidate: do we want a bit bit bit bit bit bit bit bit robust depending locator from the beginning of a bit bit bit bit bit bit bit bit bit bit
Reference: could you please move this logic to separated method
Candidate: the syserr can be replaced with <UNK> <UNK>
Reference: has the a: thing been fixed in the meantime?
Candidate: why do we need to use <UNK> here?
Reference: no need to compare against 'true'. just: .when(provisioned && computeresource == null);
Candidate: should this be <UNK>
Reference: this uses eager string concatenation in a lazy parameter, which is typically a blocker. now, this is not a performance critical path, but i would still suggest to avoid this,
Candidate: why do we need this check?
Reference: stringbuilder
Candidate: should we use <UNK> <UNK> <UNK> <UNK>
Reference: why the difference depending on api level? just curious.
Candidate: please remove this line
Reference: use camel-case
Candidate: why do we need the <UNK> here?
Reference: could we keep using object helperitem = gethelperitem(i); to reduce calls to gethelperitem?
Candidate: can be simplified to:  if <UNK> != null) { <UNK> } else { <UNK> { <UNK> }
Reference: you try to cast a map.entry with diskimage, this will cause an error when try to run a vm. you should simply use: for (guid sdid : diskidtodestsdid.values()) { storagedomainstatic
Candidate: if <UNK> != null) { getparameters().getstoragedomainid() groupname = <UNK> } { <UNK> } else { if <UNK> == null) { <UNK> { <UNK> } <UNK> == null) { <UNK> }
Reference: i suggest that you add a constant field to defaultsconfigcontext, so that you reference the default value rather than explicitly set it here.
Candidate: why is the <UNK> <UNK> <UNK> <UNK>
Reference: wait.forelementclickable
Candidate: why do we need to check the <UNK>
Reference: is it possible that start > end? iirc system.nanotime should be safe, but not sure about getcurrentthreadcputime(). if somehow we get start > end, the abs value of start-end will
Candidate: why is this <UNK> overflows?
Reference: i guess we might need break statement, since the existing "p2" option doesn't have break;
Candidate: i don't think we need to check the the <UNK> <UNK>
Reference: should be checking against 'configuration' on the 2nd assert (copy-and-paste error: storage)
Candidate: can we use the <UNK> constructor?
Reference: should we add a metric to count the number of logging errors?
Candidate: this should be <UNK>
Reference: again, assertnotnull could be more readable.
Candidate: why do we need to check the <UNK> here?
Reference: the hiding event seems to always originate from the ui thread, so the platform.runlater isn't needed. can we factor the callback out into its method? it looks kind of similar
Candidate: the syserr should be be the
Reference: might be cleaner to add a method like hasmoreattempts() to requestmanager
Candidate: this this repelaced e1 && <UNK> { return false; }
Reference: is this an approximate metric or exact? looks like exact to me. same for the others.
Candidate: can you use <UNK> <UNK> <UNK> <UNK>
Reference: let's just cut it if we can. all configuration should be done in the constructor (or sooner).
Candidate: the syserr should be be <UNK>
Reference: please ping alexey or joe wertz about this. i have the same concern here about an api change as i have with displayresponseheaders, and this looks to be a bigger
Candidate: please remove this log.
Reference: why not: return result.addall(cachemap.keyset());
Candidate: this should be the broad in broad case: if (throwable { layouts } blah { blah len, { blah } { blah { blah len, { blah } { blah
Reference: should this be return -1 not sure if this counts as error or page not found?
Candidate: should this be <UNK> <UNK>
Reference: we do a newline after annotations (in 99.9% of the cases). but please leave it as-is. i will reformat the whole codebase soon according to our formatter. maybe i will
Candidate: why do we need this check?
Reference: check args?
Candidate: list<linkinfo> <UNK> <UNK> <UNK> <UNK>
Reference: use utf-8
Candidate: use system.currenttimemillis() here instead of <UNK>
Reference: is this variable still used?
Candidate: this should be the <UNK>
Reference: are you sure both are mandatory? i think at least updating "action" *only* makes sense, no?,
Candidate: why do we need to use the <UNK> here?
Reference: may i suggest to use the following instead? bug_severity=enhancement&bug_status=new&email1=rgrunber&emailassigned_to1=1&emailtype1=substring it is much much faster as the query returns a smaller result and bugzilla optimizes such queries better.
Candidate: nit: this breaks backwards backwards backwards backwards compatible.
Reference: this can be extracted to separate method further simplifying this method. do it if you want, i do not insist on it.
Candidate: if <UNK> == null) { <UNK> = false; } <UNK> <UNK> <UNK> == null) { return false; }
Reference: really? why not rely on autoboxing/autounboxing?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: a ui/ux consideration - worth noting also that today's date is highly likely what the user wants, given that stewardship events are likely to be added when they are carried
Candidate: should be replaced with: <UNK> = <UNK> if <UNK> == null) { <UNK> = <UNK> }
Reference: if groups (and their subscriptions) are not durable - based on <link_0>, then maybe it makes sense to shut down adapters for groups that aren't listening anymore ?
Candidate: you should need to use the for the <UNK> generation?
Reference: if operation is complete, why do we need to proceed further
Candidate: typo: <UNK>
Reference: hmm, i would rather leave it up to the enhancement processors to decide if anything needs to be done to an object rather than do it here, which we would
Candidate: nit: you can use <UNK> <UNK> <UNK>
Reference: rename 'child'
Candidate: can we be simplified to <UNK> <UNK> ? <UNK> : <UNK> : <UNK> ?
Reference: one more thing @slaskawi, please use a timeout here (e.g. 10 seconds).
Candidate: why do we need the <UNK> here?
Reference: immutablelist.of
Candidate: you can use <UNK> <UNK> <UNK>
Reference: unnecessary line break
Candidate: please use object.equals for the equals and label?
Reference: @rimjhim28 , can you investigate why the visitapi constructor is not called first before calling this getvisittype method? as [this line ](<link_0> would've already initialized the restapi.
Candidate: i don't think we need to call the <UNK> to the <UNK> <UNK>
Reference: username better
Candidate: why do we need need to check the <UNK> <UNK> <UNK> ? <UNK> : 2; : 2; thanks!
Reference: we may think about having a dedicated method on callexpression.
Candidate: should we be the <UNK> here? if we { return; } } } }
Reference: why not using the "normal" cancel constant?
Candidate: do we need a null check?
Reference: is 0 a magic number?
Candidate: why do we need to mock <UNK> here?
Reference: since we will serialize as map<string, string> getfrommetricsmessage will return a map<string, string> that needs to be converted to config like this: new mapconfig(getfrommetricsmessage(group_name_for_diagnostics_manager, config));
Candidate: why do we need this?
Reference: why is there a null notice?
Candidate: the syserr
Reference: this line may be executed many times. do filter comparison without creating temporary objects. this can be achieved by preprocessing of filters.
Candidate: please use <UNK>
Reference: it's funny you could mutualize the code and send the status? no ?
Candidate: can we use <UNK> <UNK> <UNK> <UNK>
Reference: i believe you can fix the problem below by replacing replacetitleswithcaptions(m.getdisplaytitle(), mediasize++); with replacetitleswithcaptions(m.get(), mediasize++); and performing this api call instead: <link_0> notice that this query uses ids= instead of
Candidate: why do we need to here?
Reference: call requiredoptions() instead of new hashset<>()?
Candidate: can we use <UNK> <UNK> <UNK>
Reference: this is actually a really useful log statement when you have multiple ports being bound.
Candidate: why do we need the <UNK> here?
Reference: so you first set this.keywords to a non null value, and then set it to null? i guess you wanted something like:  if (keywords == null) { keywords =
Candidate: why do we need need to check the <UNK> the <UNK> <UNK>
Reference: can this be inserted into the tostringwithstacktrace() itslef?
Candidate: should we print the exception here?
Reference: i didn't see any system test for config-tool repair unlock
Candidate: this should be the <UNK>
Reference: it looks weird. do we still need gethiveprincipal for the authorizationutils? we can move the implementation of these three apis to the translator. and remove that in authorizationutils.
Candidate: why do we need to the the sizes of the sizes properties?
Reference: i would add information about version that was used, since the string from header is not guaranteed to contain it.
Candidate: i don't understand what about the implications of the
Reference: shutdown in a finally block ?
Candidate: why do we need the <UNK> here?
Reference: why not simply taking a model instead of checking for one?
Candidate: should we throw an exception here?
Reference: static import wrappedbuffer
Candidate: for( != null && <UNK> == null) { <UNK> }
Reference: i think we can keep this "final".
Candidate: this should be <UNK>
Reference: copy-paste in the exception message below.
Candidate: i think we should be debug level?
Reference: it's nicer to move the assignment out of the if
Candidate: can be simplified to <UNK> <UNK> ?
Reference: no problem, you can do it any way you want, i don't care. even with (^ *| +) should javascript work. is there a real argumentation for reluctant quantified ("*?")
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: similarly, you might want to create a new set based on the set you received, to ensure the contents aren't changed by some external object.
Candidate: why do we need need to the <UNK> here?
Reference: how come we don't reuse keybasedmapoperation#threadid since it's already there?
Candidate: the syserr should be be the <UNK>
Reference: what's ed? i don't understand abbreviations!
Candidate: why do we need the <UNK> here?
Reference: delete. reporting progress at the end of a method is a no-op.
Candidate: can we use the <UNK> <UNK> <UNK>
Reference: usually, we do the opposite: the constructor with less parameters call the constructor with more parameters (with default values). java public faketestngmethod(class<?> clazz, string methodname) { this(clazz, methodname, null); }
Candidate: this should be the fixture.
Reference: do you think you could refactor the entire if / else part into a separate method (that will return a decryptionresult i suppose)? getgenericpasswordforoptions is becoming a bit too lengthy.
Candidate: do we need to use <UNK> <UNK> <UNK>
Reference: use new guid(string) - this literal can't be null
Candidate: can we use the <UNK> <UNK> <UNK>
c_bleu: 0.0051259006905719565
s_bleu: 0.009822024563633888
meteor: 0.03985995689494888
